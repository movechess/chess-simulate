var LichessDemo = (function (xTextencoder, xTextdecoder, wasmCryptoInit, xRandomvalues, xWs) {
    'use strict';

    function createElement$1(tagName, options) {
        return document.createElement(tagName, options);
    }
    function createElementNS(namespaceURI, qualifiedName, options) {
        return document.createElementNS(namespaceURI, qualifiedName, options);
    }
    function createDocumentFragment() {
        return document.createDocumentFragment();
    }
    function createTextNode(text) {
        return document.createTextNode(text);
    }
    function createComment(text) {
        return document.createComment(text);
    }
    function insertBefore(parentNode, newNode, referenceNode) {
        parentNode.insertBefore(newNode, referenceNode);
    }
    function removeChild(node, child) {
        node.removeChild(child);
    }
    function appendChild(node, child) {
        node.appendChild(child);
    }
    function parentNode(node) {
        return node.parentNode;
    }
    function nextSibling(node) {
        return node.nextSibling;
    }
    function tagName(elm) {
        return elm.tagName;
    }
    function setTextContent(node, text) {
        node.textContent = text;
    }
    function getTextContent(node) {
        return node.textContent;
    }
    function isElement$2(node) {
        return node.nodeType === 1;
    }
    function isText(node) {
        return node.nodeType === 3;
    }
    function isComment(node) {
        return node.nodeType === 8;
    }
    function isDocumentFragment$1(node) {
        return node.nodeType === 11;
    }
    const htmlDomApi = {
        createElement: createElement$1,
        createElementNS,
        createTextNode,
        createDocumentFragment,
        createComment,
        insertBefore,
        removeChild,
        appendChild,
        parentNode,
        nextSibling,
        tagName,
        setTextContent,
        getTextContent,
        isElement: isElement$2,
        isText,
        isComment,
        isDocumentFragment: isDocumentFragment$1,
    };

    function vnode(sel, data, children, text, elm) {
        const key = data === undefined ? undefined : data.key;
        return { sel, data, children, text, elm, key };
    }

    const array = Array.isArray;
    function primitive(s) {
        return (typeof s === "string" ||
            typeof s === "number" ||
            s instanceof String ||
            s instanceof Number);
    }

    function isUndef(s) {
        return s === undefined;
    }
    function isDef(s) {
        return s !== undefined;
    }
    const emptyNode = vnode("", {}, [], undefined, undefined);
    function sameVnode(vnode1, vnode2) {
        var _a, _b;
        const isSameKey = vnode1.key === vnode2.key;
        const isSameIs = ((_a = vnode1.data) === null || _a === void 0 ? void 0 : _a.is) === ((_b = vnode2.data) === null || _b === void 0 ? void 0 : _b.is);
        const isSameSel = vnode1.sel === vnode2.sel;
        return isSameSel && isSameKey && isSameIs;
    }
    /**
     * @todo Remove this function when the document fragment is considered stable.
     */
    function documentFragmentIsNotSupported() {
        throw new Error("The document fragment is not supported on this platform.");
    }
    function isElement$1(api, vnode) {
        return api.isElement(vnode);
    }
    function isDocumentFragment(api, vnode) {
        return api.isDocumentFragment(vnode);
    }
    function createKeyToOldIdx(children, beginIdx, endIdx) {
        var _a;
        const map = {};
        for (let i = beginIdx; i <= endIdx; ++i) {
            const key = (_a = children[i]) === null || _a === void 0 ? void 0 : _a.key;
            if (key !== undefined) {
                map[key] = i;
            }
        }
        return map;
    }
    const hooks = [
        "create",
        "update",
        "remove",
        "destroy",
        "pre",
        "post",
    ];
    function init$1(modules, domApi, options) {
        const cbs = {
            create: [],
            update: [],
            remove: [],
            destroy: [],
            pre: [],
            post: [],
        };
        const api = domApi !== undefined ? domApi : htmlDomApi;
        for (const hook of hooks) {
            for (const module of modules) {
                const currentHook = module[hook];
                if (currentHook !== undefined) {
                    cbs[hook].push(currentHook);
                }
            }
        }
        function emptyNodeAt(elm) {
            const id = elm.id ? "#" + elm.id : "";
            // elm.className doesn't return a string when elm is an SVG element inside a shadowRoot.
            // https://stackoverflow.com/questions/29454340/detecting-classname-of-svganimatedstring
            const classes = elm.getAttribute("class");
            const c = classes ? "." + classes.split(" ").join(".") : "";
            return vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);
        }
        function emptyDocumentFragmentAt(frag) {
            return vnode(undefined, {}, [], undefined, frag);
        }
        function createRmCb(childElm, listeners) {
            return function rmCb() {
                if (--listeners === 0) {
                    const parent = api.parentNode(childElm);
                    api.removeChild(parent, childElm);
                }
            };
        }
        function createElm(vnode, insertedVnodeQueue) {
            var _a, _b, _c, _d;
            let i;
            let data = vnode.data;
            if (data !== undefined) {
                const init = (_a = data.hook) === null || _a === void 0 ? void 0 : _a.init;
                if (isDef(init)) {
                    init(vnode);
                    data = vnode.data;
                }
            }
            const children = vnode.children;
            const sel = vnode.sel;
            if (sel === "!") {
                if (isUndef(vnode.text)) {
                    vnode.text = "";
                }
                vnode.elm = api.createComment(vnode.text);
            }
            else if (sel !== undefined) {
                // Parse selector
                const hashIdx = sel.indexOf("#");
                const dotIdx = sel.indexOf(".", hashIdx);
                const hash = hashIdx > 0 ? hashIdx : sel.length;
                const dot = dotIdx > 0 ? dotIdx : sel.length;
                const tag = hashIdx !== -1 || dotIdx !== -1
                    ? sel.slice(0, Math.min(hash, dot))
                    : sel;
                const elm = (vnode.elm =
                    isDef(data) && isDef((i = data.ns))
                        ? api.createElementNS(i, tag, data)
                        : api.createElement(tag, data));
                if (hash < dot)
                    elm.setAttribute("id", sel.slice(hash + 1, dot));
                if (dotIdx > 0)
                    elm.setAttribute("class", sel.slice(dot + 1).replace(/\./g, " "));
                for (i = 0; i < cbs.create.length; ++i)
                    cbs.create[i](emptyNode, vnode);
                if (array(children)) {
                    for (i = 0; i < children.length; ++i) {
                        const ch = children[i];
                        if (ch != null) {
                            api.appendChild(elm, createElm(ch, insertedVnodeQueue));
                        }
                    }
                }
                else if (primitive(vnode.text)) {
                    api.appendChild(elm, api.createTextNode(vnode.text));
                }
                const hook = vnode.data.hook;
                if (isDef(hook)) {
                    (_b = hook.create) === null || _b === void 0 ? void 0 : _b.call(hook, emptyNode, vnode);
                    if (hook.insert) {
                        insertedVnodeQueue.push(vnode);
                    }
                }
            }
            else if (((_c = options === null || options === void 0 ? void 0 : options.experimental) === null || _c === void 0 ? void 0 : _c.fragments) && vnode.children) {
                const children = vnode.children;
                vnode.elm = ((_d = api.createDocumentFragment) !== null && _d !== void 0 ? _d : documentFragmentIsNotSupported)();
                for (i = 0; i < cbs.create.length; ++i)
                    cbs.create[i](emptyNode, vnode);
                for (i = 0; i < children.length; ++i) {
                    const ch = children[i];
                    if (ch != null) {
                        api.appendChild(vnode.elm, createElm(ch, insertedVnodeQueue));
                    }
                }
            }
            else {
                vnode.elm = api.createTextNode(vnode.text);
            }
            return vnode.elm;
        }
        function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {
            for (; startIdx <= endIdx; ++startIdx) {
                const ch = vnodes[startIdx];
                if (ch != null) {
                    api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);
                }
            }
        }
        function invokeDestroyHook(vnode) {
            var _a, _b;
            const data = vnode.data;
            if (data !== undefined) {
                (_b = (_a = data === null || data === void 0 ? void 0 : data.hook) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a, vnode);
                for (let i = 0; i < cbs.destroy.length; ++i)
                    cbs.destroy[i](vnode);
                if (vnode.children !== undefined) {
                    for (let j = 0; j < vnode.children.length; ++j) {
                        const child = vnode.children[j];
                        if (child != null && typeof child !== "string") {
                            invokeDestroyHook(child);
                        }
                    }
                }
            }
        }
        function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
            var _a, _b;
            for (; startIdx <= endIdx; ++startIdx) {
                let listeners;
                let rm;
                const ch = vnodes[startIdx];
                if (ch != null) {
                    if (isDef(ch.sel)) {
                        invokeDestroyHook(ch);
                        listeners = cbs.remove.length + 1;
                        rm = createRmCb(ch.elm, listeners);
                        for (let i = 0; i < cbs.remove.length; ++i)
                            cbs.remove[i](ch, rm);
                        const removeHook = (_b = (_a = ch === null || ch === void 0 ? void 0 : ch.data) === null || _a === void 0 ? void 0 : _a.hook) === null || _b === void 0 ? void 0 : _b.remove;
                        if (isDef(removeHook)) {
                            removeHook(ch, rm);
                        }
                        else {
                            rm();
                        }
                    }
                    else {
                        // Text node
                        api.removeChild(parentElm, ch.elm);
                    }
                }
            }
        }
        function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {
            let oldStartIdx = 0;
            let newStartIdx = 0;
            let oldEndIdx = oldCh.length - 1;
            let oldStartVnode = oldCh[0];
            let oldEndVnode = oldCh[oldEndIdx];
            let newEndIdx = newCh.length - 1;
            let newStartVnode = newCh[0];
            let newEndVnode = newCh[newEndIdx];
            let oldKeyToIdx;
            let idxInOld;
            let elmToMove;
            let before;
            while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
                if (oldStartVnode == null) {
                    oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left
                }
                else if (oldEndVnode == null) {
                    oldEndVnode = oldCh[--oldEndIdx];
                }
                else if (newStartVnode == null) {
                    newStartVnode = newCh[++newStartIdx];
                }
                else if (newEndVnode == null) {
                    newEndVnode = newCh[--newEndIdx];
                }
                else if (sameVnode(oldStartVnode, newStartVnode)) {
                    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
                    oldStartVnode = oldCh[++oldStartIdx];
                    newStartVnode = newCh[++newStartIdx];
                }
                else if (sameVnode(oldEndVnode, newEndVnode)) {
                    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
                    oldEndVnode = oldCh[--oldEndIdx];
                    newEndVnode = newCh[--newEndIdx];
                }
                else if (sameVnode(oldStartVnode, newEndVnode)) {
                    // Vnode moved right
                    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
                    api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));
                    oldStartVnode = oldCh[++oldStartIdx];
                    newEndVnode = newCh[--newEndIdx];
                }
                else if (sameVnode(oldEndVnode, newStartVnode)) {
                    // Vnode moved left
                    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
                    api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                    oldEndVnode = oldCh[--oldEndIdx];
                    newStartVnode = newCh[++newStartIdx];
                }
                else {
                    if (oldKeyToIdx === undefined) {
                        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                    }
                    idxInOld = oldKeyToIdx[newStartVnode.key];
                    if (isUndef(idxInOld)) {
                        // New element
                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    }
                    else {
                        elmToMove = oldCh[idxInOld];
                        if (elmToMove.sel !== newStartVnode.sel) {
                            api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                        }
                        else {
                            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
                            oldCh[idxInOld] = undefined;
                            api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
                        }
                    }
                    newStartVnode = newCh[++newStartIdx];
                }
            }
            if (newStartIdx <= newEndIdx) {
                before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;
                addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
            }
            if (oldStartIdx <= oldEndIdx) {
                removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
            }
        }
        function patchVnode(oldVnode, vnode, insertedVnodeQueue) {
            var _a, _b, _c, _d, _e;
            const hook = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.hook;
            (_b = hook === null || hook === void 0 ? void 0 : hook.prepatch) === null || _b === void 0 ? void 0 : _b.call(hook, oldVnode, vnode);
            const elm = (vnode.elm = oldVnode.elm);
            const oldCh = oldVnode.children;
            const ch = vnode.children;
            if (oldVnode === vnode)
                return;
            if (vnode.data !== undefined) {
                for (let i = 0; i < cbs.update.length; ++i)
                    cbs.update[i](oldVnode, vnode);
                (_d = (_c = vnode.data.hook) === null || _c === void 0 ? void 0 : _c.update) === null || _d === void 0 ? void 0 : _d.call(_c, oldVnode, vnode);
            }
            if (isUndef(vnode.text)) {
                if (isDef(oldCh) && isDef(ch)) {
                    if (oldCh !== ch)
                        updateChildren(elm, oldCh, ch, insertedVnodeQueue);
                }
                else if (isDef(ch)) {
                    if (isDef(oldVnode.text))
                        api.setTextContent(elm, "");
                    addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
                }
                else if (isDef(oldCh)) {
                    removeVnodes(elm, oldCh, 0, oldCh.length - 1);
                }
                else if (isDef(oldVnode.text)) {
                    api.setTextContent(elm, "");
                }
            }
            else if (oldVnode.text !== vnode.text) {
                if (isDef(oldCh)) {
                    removeVnodes(elm, oldCh, 0, oldCh.length - 1);
                }
                api.setTextContent(elm, vnode.text);
            }
            (_e = hook === null || hook === void 0 ? void 0 : hook.postpatch) === null || _e === void 0 ? void 0 : _e.call(hook, oldVnode, vnode);
        }
        return function patch(oldVnode, vnode) {
            let i, elm, parent;
            const insertedVnodeQueue = [];
            for (i = 0; i < cbs.pre.length; ++i)
                cbs.pre[i]();
            if (isElement$1(api, oldVnode)) {
                oldVnode = emptyNodeAt(oldVnode);
            }
            else if (isDocumentFragment(api, oldVnode)) {
                oldVnode = emptyDocumentFragmentAt(oldVnode);
            }
            if (sameVnode(oldVnode, vnode)) {
                patchVnode(oldVnode, vnode, insertedVnodeQueue);
            }
            else {
                elm = oldVnode.elm;
                parent = api.parentNode(elm);
                createElm(vnode, insertedVnodeQueue);
                if (parent !== null) {
                    api.insertBefore(parent, vnode.elm, api.nextSibling(elm));
                    removeVnodes(parent, [oldVnode], 0, 0);
                }
            }
            for (i = 0; i < insertedVnodeQueue.length; ++i) {
                insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
            }
            for (i = 0; i < cbs.post.length; ++i)
                cbs.post[i]();
            return vnode;
        };
    }

    function addNS(data, children, sel) {
        data.ns = "http://www.w3.org/2000/svg";
        if (sel !== "foreignObject" && children !== undefined) {
            for (let i = 0; i < children.length; ++i) {
                const child = children[i];
                if (typeof child === "string")
                    continue;
                const childData = child.data;
                if (childData !== undefined) {
                    addNS(childData, child.children, child.sel);
                }
            }
        }
    }
    function h(sel, b, c) {
        let data = {};
        let children;
        let text;
        let i;
        if (c !== undefined) {
            if (b !== null) {
                data = b;
            }
            if (array(c)) {
                children = c;
            }
            else if (primitive(c)) {
                text = c.toString();
            }
            else if (c && c.sel) {
                children = [c];
            }
        }
        else if (b !== undefined && b !== null) {
            if (array(b)) {
                children = b;
            }
            else if (primitive(b)) {
                text = b.toString();
            }
            else if (b && b.sel) {
                children = [b];
            }
            else {
                data = b;
            }
        }
        if (children !== undefined) {
            for (i = 0; i < children.length; ++i) {
                if (primitive(children[i]))
                    children[i] = vnode(undefined, undefined, undefined, children[i], undefined);
            }
        }
        if (sel[0] === "s" &&
            sel[1] === "v" &&
            sel[2] === "g" &&
            (sel.length === 3 || sel[3] === "." || sel[3] === "#")) {
            addNS(data, children, sel);
        }
        return vnode(sel, data, children, text, undefined);
    }

    const xlinkNS = "http://www.w3.org/1999/xlink";
    const xmlNS = "http://www.w3.org/XML/1998/namespace";
    const colonChar = 58;
    const xChar = 120;
    function updateAttrs(oldVnode, vnode) {
        let key;
        const elm = vnode.elm;
        let oldAttrs = oldVnode.data.attrs;
        let attrs = vnode.data.attrs;
        if (!oldAttrs && !attrs)
            return;
        if (oldAttrs === attrs)
            return;
        oldAttrs = oldAttrs || {};
        attrs = attrs || {};
        // update modified attributes, add new attributes
        for (key in attrs) {
            const cur = attrs[key];
            const old = oldAttrs[key];
            if (old !== cur) {
                if (cur === true) {
                    elm.setAttribute(key, "");
                }
                else if (cur === false) {
                    elm.removeAttribute(key);
                }
                else {
                    if (key.charCodeAt(0) !== xChar) {
                        elm.setAttribute(key, cur);
                    }
                    else if (key.charCodeAt(3) === colonChar) {
                        // Assume xml namespace
                        elm.setAttributeNS(xmlNS, key, cur);
                    }
                    else if (key.charCodeAt(5) === colonChar) {
                        // Assume xlink namespace
                        elm.setAttributeNS(xlinkNS, key, cur);
                    }
                    else {
                        elm.setAttribute(key, cur);
                    }
                }
            }
        }
        // remove removed attributes
        // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)
        // the other option is to remove all attributes with value == undefined
        for (key in oldAttrs) {
            if (!(key in attrs)) {
                elm.removeAttribute(key);
            }
        }
    }
    const attributesModule = {
        create: updateAttrs,
        update: updateAttrs,
    };

    function updateClass(oldVnode, vnode) {
        let cur;
        let name;
        const elm = vnode.elm;
        let oldClass = oldVnode.data.class;
        let klass = vnode.data.class;
        if (!oldClass && !klass)
            return;
        if (oldClass === klass)
            return;
        oldClass = oldClass || {};
        klass = klass || {};
        for (name in oldClass) {
            if (oldClass[name] && !Object.prototype.hasOwnProperty.call(klass, name)) {
                // was `true` and now not provided
                elm.classList.remove(name);
            }
        }
        for (name in klass) {
            cur = klass[name];
            if (cur !== oldClass[name]) {
                elm.classList[cur ? "add" : "remove"](name);
            }
        }
    }
    const classModule = { create: updateClass, update: updateClass };

    function invokeHandler(handler, vnode, event) {
        if (typeof handler === "function") {
            // call function handler
            handler.call(vnode, event, vnode);
        }
        else if (typeof handler === "object") {
            // call multiple handlers
            for (let i = 0; i < handler.length; i++) {
                invokeHandler(handler[i], vnode, event);
            }
        }
    }
    function handleEvent(event, vnode) {
        const name = event.type;
        const on = vnode.data.on;
        // call event handler(s) if exists
        if (on && on[name]) {
            invokeHandler(on[name], vnode, event);
        }
    }
    function createListener() {
        return function handler(event) {
            handleEvent(event, handler.vnode);
        };
    }
    function updateEventListeners(oldVnode, vnode) {
        const oldOn = oldVnode.data.on;
        const oldListener = oldVnode.listener;
        const oldElm = oldVnode.elm;
        const on = vnode && vnode.data.on;
        const elm = (vnode && vnode.elm);
        let name;
        // optimization for reused immutable handlers
        if (oldOn === on) {
            return;
        }
        // remove existing listeners which no longer used
        if (oldOn && oldListener) {
            // if element changed or deleted we remove all existing listeners unconditionally
            if (!on) {
                for (name in oldOn) {
                    // remove listener if element was changed or existing listeners removed
                    oldElm.removeEventListener(name, oldListener, false);
                }
            }
            else {
                for (name in oldOn) {
                    // remove listener if existing listener removed
                    if (!on[name]) {
                        oldElm.removeEventListener(name, oldListener, false);
                    }
                }
            }
        }
        // add new listeners which has not already attached
        if (on) {
            // reuse existing listener or create new
            const listener = (vnode.listener =
                oldVnode.listener || createListener());
            // update vnode for listener
            listener.vnode = vnode;
            // if element changed or added we add all needed listeners unconditionally
            if (!oldOn) {
                for (name in on) {
                    // add listener if element was changed or new listeners added
                    elm.addEventListener(name, listener, false);
                }
            }
            else {
                for (name in on) {
                    // add listener if new listener added
                    if (!oldOn[name]) {
                        elm.addEventListener(name, listener, false);
                    }
                }
            }
        }
    }
    const eventListenersModule = {
        create: updateEventListeners,
        update: updateEventListeners,
        destroy: updateEventListeners,
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var oauth2AuthCodePkce = {};

    (function (exports) {
    /**
     * An implementation of rfc6749#section-4.1 and rfc7636.
     */
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __spreadArrays = (commonjsGlobal && commonjsGlobal.__spreadArrays) || function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A list of OAuth2AuthCodePKCE errors.
     */
    // To "namespace" all errors.
    var ErrorOAuth2 = /** @class */ (function () {
        function ErrorOAuth2() {
        }
        ErrorOAuth2.prototype.toString = function () { return 'ErrorOAuth2'; };
        return ErrorOAuth2;
    }());
    exports.ErrorOAuth2 = ErrorOAuth2;
    // For really unknown errors.
    var ErrorUnknown = /** @class */ (function (_super) {
        __extends(ErrorUnknown, _super);
        function ErrorUnknown() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorUnknown.prototype.toString = function () { return 'ErrorUnknown'; };
        return ErrorUnknown;
    }(ErrorOAuth2));
    exports.ErrorUnknown = ErrorUnknown;
    // Some generic, internal errors that can happen.
    var ErrorNoAuthCode = /** @class */ (function (_super) {
        __extends(ErrorNoAuthCode, _super);
        function ErrorNoAuthCode() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorNoAuthCode.prototype.toString = function () { return 'ErrorNoAuthCode'; };
        return ErrorNoAuthCode;
    }(ErrorOAuth2));
    exports.ErrorNoAuthCode = ErrorNoAuthCode;
    var ErrorInvalidReturnedStateParam = /** @class */ (function (_super) {
        __extends(ErrorInvalidReturnedStateParam, _super);
        function ErrorInvalidReturnedStateParam() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidReturnedStateParam.prototype.toString = function () { return 'ErrorInvalidReturnedStateParam'; };
        return ErrorInvalidReturnedStateParam;
    }(ErrorOAuth2));
    exports.ErrorInvalidReturnedStateParam = ErrorInvalidReturnedStateParam;
    var ErrorInvalidJson = /** @class */ (function (_super) {
        __extends(ErrorInvalidJson, _super);
        function ErrorInvalidJson() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidJson.prototype.toString = function () { return 'ErrorInvalidJson'; };
        return ErrorInvalidJson;
    }(ErrorOAuth2));
    exports.ErrorInvalidJson = ErrorInvalidJson;
    // Errors that occur across many endpoints
    var ErrorInvalidScope = /** @class */ (function (_super) {
        __extends(ErrorInvalidScope, _super);
        function ErrorInvalidScope() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidScope.prototype.toString = function () { return 'ErrorInvalidScope'; };
        return ErrorInvalidScope;
    }(ErrorOAuth2));
    exports.ErrorInvalidScope = ErrorInvalidScope;
    var ErrorInvalidRequest = /** @class */ (function (_super) {
        __extends(ErrorInvalidRequest, _super);
        function ErrorInvalidRequest() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidRequest.prototype.toString = function () { return 'ErrorInvalidRequest'; };
        return ErrorInvalidRequest;
    }(ErrorOAuth2));
    exports.ErrorInvalidRequest = ErrorInvalidRequest;
    var ErrorInvalidToken = /** @class */ (function (_super) {
        __extends(ErrorInvalidToken, _super);
        function ErrorInvalidToken() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidToken.prototype.toString = function () { return 'ErrorInvalidToken'; };
        return ErrorInvalidToken;
    }(ErrorOAuth2));
    exports.ErrorInvalidToken = ErrorInvalidToken;
    /**
     * Possible authorization grant errors given by the redirection from the
     * authorization server.
     */
    var ErrorAuthenticationGrant = /** @class */ (function (_super) {
        __extends(ErrorAuthenticationGrant, _super);
        function ErrorAuthenticationGrant() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorAuthenticationGrant.prototype.toString = function () { return 'ErrorAuthenticationGrant'; };
        return ErrorAuthenticationGrant;
    }(ErrorOAuth2));
    exports.ErrorAuthenticationGrant = ErrorAuthenticationGrant;
    var ErrorUnauthorizedClient = /** @class */ (function (_super) {
        __extends(ErrorUnauthorizedClient, _super);
        function ErrorUnauthorizedClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorUnauthorizedClient.prototype.toString = function () { return 'ErrorUnauthorizedClient'; };
        return ErrorUnauthorizedClient;
    }(ErrorAuthenticationGrant));
    exports.ErrorUnauthorizedClient = ErrorUnauthorizedClient;
    var ErrorAccessDenied = /** @class */ (function (_super) {
        __extends(ErrorAccessDenied, _super);
        function ErrorAccessDenied() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorAccessDenied.prototype.toString = function () { return 'ErrorAccessDenied'; };
        return ErrorAccessDenied;
    }(ErrorAuthenticationGrant));
    exports.ErrorAccessDenied = ErrorAccessDenied;
    var ErrorUnsupportedResponseType = /** @class */ (function (_super) {
        __extends(ErrorUnsupportedResponseType, _super);
        function ErrorUnsupportedResponseType() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorUnsupportedResponseType.prototype.toString = function () { return 'ErrorUnsupportedResponseType'; };
        return ErrorUnsupportedResponseType;
    }(ErrorAuthenticationGrant));
    exports.ErrorUnsupportedResponseType = ErrorUnsupportedResponseType;
    var ErrorServerError = /** @class */ (function (_super) {
        __extends(ErrorServerError, _super);
        function ErrorServerError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorServerError.prototype.toString = function () { return 'ErrorServerError'; };
        return ErrorServerError;
    }(ErrorAuthenticationGrant));
    exports.ErrorServerError = ErrorServerError;
    var ErrorTemporarilyUnavailable = /** @class */ (function (_super) {
        __extends(ErrorTemporarilyUnavailable, _super);
        function ErrorTemporarilyUnavailable() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorTemporarilyUnavailable.prototype.toString = function () { return 'ErrorTemporarilyUnavailable'; };
        return ErrorTemporarilyUnavailable;
    }(ErrorAuthenticationGrant));
    exports.ErrorTemporarilyUnavailable = ErrorTemporarilyUnavailable;
    /**
     * A list of possible access token response errors.
     */
    var ErrorAccessTokenResponse = /** @class */ (function (_super) {
        __extends(ErrorAccessTokenResponse, _super);
        function ErrorAccessTokenResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorAccessTokenResponse.prototype.toString = function () { return 'ErrorAccessTokenResponse'; };
        return ErrorAccessTokenResponse;
    }(ErrorOAuth2));
    exports.ErrorAccessTokenResponse = ErrorAccessTokenResponse;
    var ErrorInvalidClient = /** @class */ (function (_super) {
        __extends(ErrorInvalidClient, _super);
        function ErrorInvalidClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidClient.prototype.toString = function () { return 'ErrorInvalidClient'; };
        return ErrorInvalidClient;
    }(ErrorAccessTokenResponse));
    exports.ErrorInvalidClient = ErrorInvalidClient;
    var ErrorInvalidGrant = /** @class */ (function (_super) {
        __extends(ErrorInvalidGrant, _super);
        function ErrorInvalidGrant() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidGrant.prototype.toString = function () { return 'ErrorInvalidGrant'; };
        return ErrorInvalidGrant;
    }(ErrorAccessTokenResponse));
    exports.ErrorInvalidGrant = ErrorInvalidGrant;
    var ErrorUnsupportedGrantType = /** @class */ (function (_super) {
        __extends(ErrorUnsupportedGrantType, _super);
        function ErrorUnsupportedGrantType() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorUnsupportedGrantType.prototype.toString = function () { return 'ErrorUnsupportedGrantType'; };
        return ErrorUnsupportedGrantType;
    }(ErrorAccessTokenResponse));
    exports.ErrorUnsupportedGrantType = ErrorUnsupportedGrantType;
    /**
     * WWW-Authenticate error object structure for less error prone handling.
     */
    var ErrorWWWAuthenticate = /** @class */ (function () {
        function ErrorWWWAuthenticate() {
            this.realm = "";
            this.error = "";
        }
        return ErrorWWWAuthenticate;
    }());
    exports.ErrorWWWAuthenticate = ErrorWWWAuthenticate;
    exports.RawErrorToErrorClassMap = {
        invalid_request: ErrorInvalidRequest,
        invalid_grant: ErrorInvalidGrant,
        unauthorized_client: ErrorUnauthorizedClient,
        access_denied: ErrorAccessDenied,
        unsupported_response_type: ErrorUnsupportedResponseType,
        invalid_scope: ErrorInvalidScope,
        server_error: ErrorServerError,
        temporarily_unavailable: ErrorTemporarilyUnavailable,
        invalid_client: ErrorInvalidClient,
        unsupported_grant_type: ErrorUnsupportedGrantType,
        invalid_json: ErrorInvalidJson,
        invalid_token: ErrorInvalidToken,
    };
    /**
     * Translate the raw error strings returned from the server into error classes.
     */
    function toErrorClass(rawError) {
        return new (exports.RawErrorToErrorClassMap[rawError] || ErrorUnknown)();
    }
    exports.toErrorClass = toErrorClass;
    /**
     * A convience function to turn, for example, `Bearer realm="bity.com",
     * error="invalid_client"` into `{ realm: "bity.com", error: "invalid_client"
     * }`.
     */
    function fromWWWAuthenticateHeaderStringToObject(a) {
        var obj = a
            .slice("Bearer ".length)
            .replace(/"/g, '')
            .split(', ')
            .map(function (tokens) {
            var _a;
            var _b = tokens.split('='), k = _b[0], v = _b[1];
            return _a = {}, _a[k] = v, _a;
        })
            .reduce(function (a, c) { return (__assign(__assign({}, a), c)); }, {});
        return { realm: obj.realm, error: obj.error };
    }
    exports.fromWWWAuthenticateHeaderStringToObject = fromWWWAuthenticateHeaderStringToObject;
    /**
     * HTTP headers that we need to access.
     */
    var HEADER_AUTHORIZATION = "Authorization";
    var HEADER_WWW_AUTHENTICATE = "WWW-Authenticate";
    /**
     * To store the OAuth client's data between websites due to redirection.
     */
    exports.LOCALSTORAGE_ID = "oauth2authcodepkce";
    exports.LOCALSTORAGE_STATE = exports.LOCALSTORAGE_ID + "-state";
    /**
     * The maximum length for a code verifier for the best security we can offer.
     * Please note the NOTE section of RFC 7636 § 4.1 - the length must be >= 43,
     * but <= 128, **after** base64 url encoding. This means 32 code verifier bytes
     * encoded will be 43 bytes, or 96 bytes encoded will be 128 bytes. So 96 bytes
     * is the highest valid value that can be used.
     */
    exports.RECOMMENDED_CODE_VERIFIER_LENGTH = 96;
    /**
     * A sensible length for the state's length, for anti-csrf.
     */
    exports.RECOMMENDED_STATE_LENGTH = 32;
    /**
     * Character set to generate code verifier defined in rfc7636.
     */
    var PKCE_CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';
    /**
     * OAuth 2.0 client that ONLY supports authorization code flow, with PKCE.
     *
     * Many applications structure their OAuth usage in different ways. This class
     * aims to provide both flexible and easy ways to use this configuration of
     * OAuth.
     *
     * See `example.ts` for how you'd typically use this.
     *
     * For others, review this class's methods.
     */
    var OAuth2AuthCodePKCE = /** @class */ (function () {
        function OAuth2AuthCodePKCE(config) {
            this.state = {};
            this.config = config;
            this.recoverState();
            return this;
        }
        /**
         * Attach the OAuth logic to all fetch requests and translate errors (either
         * returned as json or through the WWW-Authenticate header) into nice error
         * classes.
         */
        OAuth2AuthCodePKCE.prototype.decorateFetchHTTPClient = function (fetch) {
            var _this = this;
            return function (url, config) {
                var rest = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    rest[_i - 2] = arguments[_i];
                }
                if (!_this.state.isHTTPDecoratorActive) {
                    return fetch.apply(void 0, __spreadArrays([url, config], rest));
                }
                return _this
                    .getAccessToken()
                    .then(function (_a) {
                    var token = _a.token;
                    var configNew = Object.assign({}, config);
                    if (!configNew.headers) {
                        configNew.headers = {};
                    }
                    configNew.headers[HEADER_AUTHORIZATION] = "Bearer " + token.value;
                    return fetch.apply(void 0, __spreadArrays([url, configNew], rest));
                })
                    .then(function (res) {
                    if (res.ok) {
                        return res;
                    }
                    if (!res.headers.has(HEADER_WWW_AUTHENTICATE.toLowerCase())) {
                        return res;
                    }
                    var error = toErrorClass(fromWWWAuthenticateHeaderStringToObject(res.headers.get(HEADER_WWW_AUTHENTICATE.toLowerCase())).error);
                    if (error instanceof ErrorInvalidToken) {
                        _this.config
                            .onAccessTokenExpiry(function () { return _this.exchangeRefreshTokenForAccessToken(); });
                    }
                    return Promise.reject(error);
                });
            };
        };
        /**
         * If there is an error, it will be passed back as a rejected Promise.
         * If there is no code, the user should be redirected via
         * [fetchAuthorizationCode].
         */
        OAuth2AuthCodePKCE.prototype.isReturningFromAuthServer = function () {
            var error = OAuth2AuthCodePKCE.extractParamFromUrl(location.href, 'error');
            if (error) {
                return Promise.reject(toErrorClass(error));
            }
            var code = OAuth2AuthCodePKCE.extractParamFromUrl(location.href, 'code');
            if (!code) {
                return Promise.resolve(false);
            }
            var state = JSON.parse(localStorage.getItem(exports.LOCALSTORAGE_STATE) || '{}');
            var stateQueryParam = OAuth2AuthCodePKCE.extractParamFromUrl(location.href, 'state');
            if (stateQueryParam !== state.stateQueryParam) {
                console.warn("state query string parameter doesn't match the one sent! Possible malicious activity somewhere.");
                return Promise.reject(new ErrorInvalidReturnedStateParam());
            }
            state.authorizationCode = code;
            state.hasAuthCodeBeenExchangedForAccessToken = false;
            localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(state));
            this.setState(state);
            return Promise.resolve(true);
        };
        /**
         * Fetch an authorization grant via redirection. In a sense this function
         * doesn't return because of the redirect behavior (uses `location.replace`).
         *
         * @param oneTimeParams A way to specify "one time" used query string
         * parameters during the authorization code fetching process, usually for
         * values which need to change at run-time.
         */
        OAuth2AuthCodePKCE.prototype.fetchAuthorizationCode = function (oneTimeParams) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, clientId, extraAuthorizationParams, redirectUrl, scopes, _b, codeChallenge, codeVerifier, stateQueryParam, url, extraParameters;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.assertStateAndConfigArePresent();
                            _a = this.config, clientId = _a.clientId, extraAuthorizationParams = _a.extraAuthorizationParams, redirectUrl = _a.redirectUrl, scopes = _a.scopes;
                            return [4 /*yield*/, OAuth2AuthCodePKCE
                                    .generatePKCECodes()];
                        case 1:
                            _b = _c.sent(), codeChallenge = _b.codeChallenge, codeVerifier = _b.codeVerifier;
                            stateQueryParam = OAuth2AuthCodePKCE
                                .generateRandomState(exports.RECOMMENDED_STATE_LENGTH);
                            this.state = __assign(__assign({}, this.state), { codeChallenge: codeChallenge,
                                codeVerifier: codeVerifier,
                                stateQueryParam: stateQueryParam, isHTTPDecoratorActive: true });
                            localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(this.state));
                            url = this.config.authorizationUrl
                                + "?response_type=code&"
                                + ("client_id=" + encodeURIComponent(clientId) + "&")
                                + ("redirect_uri=" + encodeURIComponent(redirectUrl) + "&")
                                + ("scope=" + encodeURIComponent(scopes.join(' ')) + "&")
                                + ("state=" + stateQueryParam + "&")
                                + ("code_challenge=" + encodeURIComponent(codeChallenge) + "&")
                                + "code_challenge_method=S256";
                            if (extraAuthorizationParams || oneTimeParams) {
                                extraParameters = __assign(__assign({}, extraAuthorizationParams), oneTimeParams);
                                url = url + "&" + OAuth2AuthCodePKCE.objectToQueryString(extraParameters);
                            }
                            location.replace(url);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Tries to get the current access token. If there is none
         * it will fetch another one. If it is expired, it will fire
         * [onAccessTokenExpiry] but it's up to the user to call the refresh token
         * function. This is because sometimes not using the refresh token facilities
         * is easier.
         */
        OAuth2AuthCodePKCE.prototype.getAccessToken = function () {
            var _this = this;
            this.assertStateAndConfigArePresent();
            var onAccessTokenExpiry = this.config.onAccessTokenExpiry;
            var _a = this.state, accessToken = _a.accessToken, authorizationCode = _a.authorizationCode, explicitlyExposedTokens = _a.explicitlyExposedTokens, hasAuthCodeBeenExchangedForAccessToken = _a.hasAuthCodeBeenExchangedForAccessToken, refreshToken = _a.refreshToken, scopes = _a.scopes;
            if (!authorizationCode) {
                return Promise.reject(new ErrorNoAuthCode());
            }
            if (this.authCodeForAccessTokenRequest) {
                return this.authCodeForAccessTokenRequest;
            }
            if (!this.isAuthorized() || !hasAuthCodeBeenExchangedForAccessToken) {
                this.authCodeForAccessTokenRequest = this.exchangeAuthCodeForAccessToken();
                return this.authCodeForAccessTokenRequest;
            }
            // Depending on the server (and config), refreshToken may not be available.
            if (refreshToken && this.isAccessTokenExpired()) {
                return onAccessTokenExpiry(function () { return _this.exchangeRefreshTokenForAccessToken(); });
            }
            return Promise.resolve({
                token: accessToken,
                explicitlyExposedTokens: explicitlyExposedTokens,
                scopes: scopes,
                refreshToken: refreshToken
            });
        };
        /**
         * Refresh an access token from the remote service.
         */
        OAuth2AuthCodePKCE.prototype.exchangeRefreshTokenForAccessToken = function () {
            var _this = this;
            var _a;
            this.assertStateAndConfigArePresent();
            var _b = this.config, extraRefreshParams = _b.extraRefreshParams, clientId = _b.clientId, tokenUrl = _b.tokenUrl;
            var refreshToken = this.state.refreshToken;
            if (!refreshToken) {
                console.warn('No refresh token is present.');
            }
            var url = tokenUrl;
            var body = "grant_type=refresh_token&"
                + ("refresh_token=" + ((_a = refreshToken) === null || _a === void 0 ? void 0 : _a.value) + "&")
                + ("client_id=" + clientId);
            if (extraRefreshParams) {
                body = url + "&" + OAuth2AuthCodePKCE.objectToQueryString(extraRefreshParams);
            }
            return fetch(url, {
                method: 'POST',
                body: body,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
                .then(function (res) { return res.status >= 400 ? res.json().then(function (data) { return Promise.reject(data); }) : res.json(); })
                .then(function (json) {
                var access_token = json.access_token, expires_in = json.expires_in, refresh_token = json.refresh_token, scope = json.scope;
                var explicitlyExposedTokens = _this.config.explicitlyExposedTokens;
                var scopes = [];
                var tokensToExpose = {};
                var accessToken = {
                    value: access_token,
                    expiry: (new Date(Date.now() + (parseInt(expires_in) * 1000))).toString()
                };
                _this.state.accessToken = accessToken;
                if (refresh_token) {
                    var refreshToken_1 = {
                        value: refresh_token
                    };
                    _this.state.refreshToken = refreshToken_1;
                }
                if (explicitlyExposedTokens) {
                    tokensToExpose = Object.fromEntries(explicitlyExposedTokens
                        .map(function (tokenName) { return [tokenName, json[tokenName]]; })
                        .filter(function (_a) {
                        _a[0]; var tokenValue = _a[1];
                        return tokenValue !== undefined;
                    }));
                    _this.state.explicitlyExposedTokens = tokensToExpose;
                }
                if (scope) {
                    // Multiple scopes are passed and delimited by spaces,
                    // despite using the singular name "scope".
                    scopes = scope.split(' ');
                    _this.state.scopes = scopes;
                }
                localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(_this.state));
                var accessContext = { token: accessToken, scopes: scopes };
                if (explicitlyExposedTokens) {
                    accessContext.explicitlyExposedTokens = tokensToExpose;
                }
                return accessContext;
            })
                .catch(function (data) {
                var onInvalidGrant = _this.config.onInvalidGrant;
                var error = data.error || 'There was a network error.';
                switch (error) {
                    case 'invalid_grant':
                        onInvalidGrant(function () { return _this.fetchAuthorizationCode(); });
                        break;
                }
                return Promise.reject(toErrorClass(error));
            });
        };
        /**
         * Get the scopes that were granted by the authorization server.
         */
        OAuth2AuthCodePKCE.prototype.getGrantedScopes = function () {
            return this.state.scopes;
        };
        /**
         * Signals if OAuth HTTP decorating should be active or not.
         */
        OAuth2AuthCodePKCE.prototype.isHTTPDecoratorActive = function (isActive) {
            this.state.isHTTPDecoratorActive = isActive;
            localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(this.state));
        };
        /**
         * Tells if the client is authorized or not. This means the client has at
         * least once successfully fetched an access token. The access token could be
         * expired.
         */
        OAuth2AuthCodePKCE.prototype.isAuthorized = function () {
            return !!this.state.accessToken;
        };
        /**
         * Checks to see if the access token has expired.
         */
        OAuth2AuthCodePKCE.prototype.isAccessTokenExpired = function () {
            var accessToken = this.state.accessToken;
            return Boolean(accessToken && (new Date()) >= (new Date(accessToken.expiry)));
        };
        /**
         * Resets the state of the client. Equivalent to "logging out" the user.
         */
        OAuth2AuthCodePKCE.prototype.reset = function () {
            this.setState({});
            this.authCodeForAccessTokenRequest = undefined;
        };
        /**
         * If the state or config are missing, it means the client is in a bad state.
         * This should never happen, but the check is there just in case.
         */
        OAuth2AuthCodePKCE.prototype.assertStateAndConfigArePresent = function () {
            if (!this.state || !this.config) {
                console.error('state:', this.state, 'config:', this.config);
                throw new Error('state or config is not set.');
            }
        };
        /**
         * Fetch an access token from the remote service. You may pass a custom
         * authorization grant code for any reason, but this is non-standard usage.
         */
        OAuth2AuthCodePKCE.prototype.exchangeAuthCodeForAccessToken = function (codeOverride) {
            var _this = this;
            this.assertStateAndConfigArePresent();
            var _a = this.state, _b = _a.authorizationCode, authorizationCode = _b === void 0 ? codeOverride : _b, _c = _a.codeVerifier, codeVerifier = _c === void 0 ? '' : _c;
            var _d = this.config, clientId = _d.clientId, onInvalidGrant = _d.onInvalidGrant, redirectUrl = _d.redirectUrl;
            if (!codeVerifier) {
                console.warn('No code verifier is being sent.');
            }
            else if (!authorizationCode) {
                console.warn('No authorization grant code is being passed.');
            }
            var url = this.config.tokenUrl;
            var body = "grant_type=authorization_code&"
                + ("code=" + encodeURIComponent(authorizationCode || '') + "&")
                + ("redirect_uri=" + encodeURIComponent(redirectUrl) + "&")
                + ("client_id=" + encodeURIComponent(clientId) + "&")
                + ("code_verifier=" + codeVerifier);
            return fetch(url, {
                method: 'POST',
                body: body,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
                .then(function (res) {
                var jsonPromise = res.json()
                    .catch(function (_) { return ({ error: 'invalid_json' }); });
                if (!res.ok) {
                    return jsonPromise.then(function (_a) {
                        var error = _a.error;
                        switch (error) {
                            case 'invalid_grant':
                                onInvalidGrant(function () { return _this.fetchAuthorizationCode(); });
                                break;
                        }
                        return Promise.reject(toErrorClass(error));
                    });
                }
                return jsonPromise.then(function (json) {
                    var access_token = json.access_token, expires_in = json.expires_in, refresh_token = json.refresh_token, scope = json.scope;
                    var explicitlyExposedTokens = _this.config.explicitlyExposedTokens;
                    var scopes = [];
                    var tokensToExpose = {};
                    _this.state.hasAuthCodeBeenExchangedForAccessToken = true;
                    _this.authCodeForAccessTokenRequest = undefined;
                    var accessToken = {
                        value: access_token,
                        expiry: (new Date(Date.now() + (parseInt(expires_in) * 1000))).toString()
                    };
                    _this.state.accessToken = accessToken;
                    if (refresh_token) {
                        var refreshToken = {
                            value: refresh_token
                        };
                        _this.state.refreshToken = refreshToken;
                    }
                    if (explicitlyExposedTokens) {
                        tokensToExpose = Object.fromEntries(explicitlyExposedTokens
                            .map(function (tokenName) { return [tokenName, json[tokenName]]; })
                            .filter(function (_a) {
                            _a[0]; var tokenValue = _a[1];
                            return tokenValue !== undefined;
                        }));
                        _this.state.explicitlyExposedTokens = tokensToExpose;
                    }
                    if (scope) {
                        // Multiple scopes are passed and delimited by spaces,
                        // despite using the singular name "scope".
                        scopes = scope.split(' ');
                        _this.state.scopes = scopes;
                    }
                    localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(_this.state));
                    var accessContext = { token: accessToken, scopes: scopes };
                    if (explicitlyExposedTokens) {
                        accessContext.explicitlyExposedTokens = tokensToExpose;
                    }
                    return accessContext;
                });
            });
        };
        OAuth2AuthCodePKCE.prototype.recoverState = function () {
            this.state = JSON.parse(localStorage.getItem(exports.LOCALSTORAGE_STATE) || '{}');
            return this;
        };
        OAuth2AuthCodePKCE.prototype.setState = function (state) {
            this.state = state;
            localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(state));
            return this;
        };
        /**
         * Implements *base64url-encode* (RFC 4648 § 5) without padding, which is NOT
         * the same as regular base64 encoding.
         */
        OAuth2AuthCodePKCE.base64urlEncode = function (value) {
            var base64 = btoa(value);
            base64 = base64.replace(/\+/g, '-');
            base64 = base64.replace(/\//g, '_');
            base64 = base64.replace(/=/g, '');
            return base64;
        };
        /**
         * Extracts a query string parameter.
         */
        OAuth2AuthCodePKCE.extractParamFromUrl = function (url, param) {
            var queryString = url.split('?');
            if (queryString.length < 2) {
                return '';
            }
            // Account for hash URLs that SPAs usually use.
            queryString = queryString[1].split('#');
            var parts = queryString[0]
                .split('&')
                .reduce(function (a, s) { return a.concat(s.split('=')); }, []);
            if (parts.length < 2) {
                return '';
            }
            var paramIdx = parts.indexOf(param);
            return decodeURIComponent(paramIdx >= 0 ? parts[paramIdx + 1] : '');
        };
        /**
         * Converts the keys and values of an object to a url query string
         */
        OAuth2AuthCodePKCE.objectToQueryString = function (dict) {
            return Object.entries(dict).map(function (_a) {
                var key = _a[0], val = _a[1];
                return key + "=" + encodeURIComponent(val);
            }).join('&');
        };
        /**
         * Generates a code_verifier and code_challenge, as specified in rfc7636.
         */
        OAuth2AuthCodePKCE.generatePKCECodes = function () {
            var output = new Uint32Array(exports.RECOMMENDED_CODE_VERIFIER_LENGTH);
            crypto.getRandomValues(output);
            var codeVerifier = OAuth2AuthCodePKCE.base64urlEncode(Array
                .from(output)
                .map(function (num) { return PKCE_CHARSET[num % PKCE_CHARSET.length]; })
                .join(''));
            return crypto
                .subtle
                .digest('SHA-256', (new TextEncoder()).encode(codeVerifier))
                .then(function (buffer) {
                var hash = new Uint8Array(buffer);
                var binary = '';
                var hashLength = hash.byteLength;
                for (var i = 0; i < hashLength; i++) {
                    binary += String.fromCharCode(hash[i]);
                }
                return binary;
            })
                .then(OAuth2AuthCodePKCE.base64urlEncode)
                .then(function (codeChallenge) { return ({ codeChallenge: codeChallenge, codeVerifier: codeVerifier }); });
        };
        /**
         * Generates random state to be passed for anti-csrf.
         */
        OAuth2AuthCodePKCE.generateRandomState = function (lengthOfState) {
            var output = new Uint32Array(lengthOfState);
            crypto.getRandomValues(output);
            return Array
                .from(output)
                .map(function (num) { return PKCE_CHARSET[num % PKCE_CHARSET.length]; })
                .join('');
        };
        return OAuth2AuthCodePKCE;
    }());
    exports.OAuth2AuthCodePKCE = OAuth2AuthCodePKCE;
    }(oauth2AuthCodePkce));

    // ND-JSON response streamer
    // See https://lichess.org/api#section/Introduction/Streaming-with-ND-JSON
    const readStream = (name, response, handler) => {
        const stream = response.body.getReader();
        const matcher = /\r?\n/;
        const decoder = new TextDecoder();
        let buf = '';
        const process = (json) => {
            const msg = JSON.parse(json);
            console.log(name, msg);
            handler(msg);
        };
        const loop = () => stream.read().then(({ done, value }) => {
            if (done) {
                if (buf.length > 0)
                    process(buf);
                return;
            }
            else {
                const chunk = decoder.decode(value, {
                    stream: true,
                });
                buf += chunk;
                const parts = buf.split(matcher);
                buf = parts.pop() || '';
                for (const i of parts.filter(p => p))
                    process(i);
                return loop();
            }
        });
        return {
            closePromise: loop(),
            close: () => stream.cancel(),
        };
    };

    var isarray = Array.isArray || function (arr) {
      return Object.prototype.toString.call(arr) == '[object Array]';
    };

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1 = pathToRegexp;
    var parse_1 = parse$5;
    var compile_1 = compile;
    var tokensToFunction_1 = tokensToFunction;
    var tokensToRegExp_1 = tokensToRegExp;

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP = new RegExp([
      // Match escaped characters that would otherwise appear in future matches.
      // This allows the user to escape special characters that won't transform.
      '(\\\\.)',
      // Match Express-style parameters and un-named parameters with a prefix
      // and optional suffixes. Matches appear as:
      //
      // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
      // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
      // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
      '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))'
    ].join('|'), 'g');

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {String} str
     * @return {Array}
     */
    function parse$5 (str) {
      var tokens = [];
      var key = 0;
      var index = 0;
      var path = '';
      var res;

      while ((res = PATH_REGEXP.exec(str)) != null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;

        // Ignore already escaped sequences.
        if (escaped) {
          path += escaped[1];
          continue
        }

        // Push the current path onto the tokens.
        if (path) {
          tokens.push(path);
          path = '';
        }

        var prefix = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var suffix = res[6];
        var asterisk = res[7];

        var repeat = suffix === '+' || suffix === '*';
        var optional = suffix === '?' || suffix === '*';
        var delimiter = prefix || '/';
        var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?');

        tokens.push({
          name: name || key++,
          prefix: prefix || '',
          delimiter: delimiter,
          optional: optional,
          repeat: repeat,
          pattern: escapeGroup(pattern)
        });
      }

      // Match any characters still remaining.
      if (index < str.length) {
        path += str.substr(index);
      }

      // If the path exists, push it onto the end.
      if (path) {
        tokens.push(path);
      }

      return tokens
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {String}   str
     * @return {Function}
     */
    function compile (str) {
      return tokensToFunction(parse$5(str))
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction (tokens) {
      // Compile all the tokens into regexps.
      var matches = new Array(tokens.length);

      // Compile all the patterns before compilation.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === 'object') {
          matches[i] = new RegExp('^' + tokens[i].pattern + '$');
        }
      }

      return function (obj) {
        var path = '';
        var data = obj || {};

        for (var i = 0; i < tokens.length; i++) {
          var token = tokens[i];

          if (typeof token === 'string') {
            path += token;

            continue
          }

          var value = data[token.name];
          var segment;

          if (value == null) {
            if (token.optional) {
              continue
            } else {
              throw new TypeError('Expected "' + token.name + '" to be defined')
            }
          }

          if (isarray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but received "' + value + '"')
            }

            if (value.length === 0) {
              if (token.optional) {
                continue
              } else {
                throw new TypeError('Expected "' + token.name + '" to not be empty')
              }
            }

            for (var j = 0; j < value.length; j++) {
              segment = encodeURIComponent(value[j]);

              if (!matches[i].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
              }

              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }

            continue
          }

          segment = encodeURIComponent(value);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
          }

          path += token.prefix + segment;
        }

        return path
      }
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {String} str
     * @return {String}
     */
    function escapeString (str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/])/g, '\\$1')
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {String} group
     * @return {String}
     */
    function escapeGroup (group) {
      return group.replace(/([=!:$\/()])/g, '\\$1')
    }

    /**
     * Attach the keys as a property of the regexp.
     *
     * @param  {RegExp} re
     * @param  {Array}  keys
     * @return {RegExp}
     */
    function attachKeys (re, keys) {
      re.keys = keys;
      return re
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {String}
     */
    function flags$1 (options) {
      return options.sensitive ? '' : 'i'
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {RegExp} path
     * @param  {Array}  keys
     * @return {RegExp}
     */
    function regexpToRegexp (path, keys) {
      // Use a negative lookahead to match only capturing groups.
      var groups = path.source.match(/\((?!\?)/g);

      if (groups) {
        for (var i = 0; i < groups.length; i++) {
          keys.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            pattern: null
          });
        }
      }

      return attachKeys(path, keys)
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {Array}  path
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function arrayToRegexp (path, keys, options) {
      var parts = [];

      for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp(path[i], keys, options).source);
      }

      var regexp = new RegExp('(?:' + parts.join('|') + ')', flags$1(options));

      return attachKeys(regexp, keys)
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {String} path
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function stringToRegexp (path, keys, options) {
      var tokens = parse$5(path);
      var re = tokensToRegExp(tokens, options);

      // Attach keys back to the regexp.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] !== 'string') {
          keys.push(tokens[i]);
        }
      }

      return attachKeys(re, keys)
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {Array}  tokens
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function tokensToRegExp (tokens, options) {
      options = options || {};

      var strict = options.strict;
      var end = options.end !== false;
      var route = '';
      var lastToken = tokens[tokens.length - 1];
      var endsWithSlash = typeof lastToken === 'string' && /\/$/.test(lastToken);

      // Iterate over the tokens and create our regexp string.
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          route += escapeString(token);
        } else {
          var prefix = escapeString(token.prefix);
          var capture = token.pattern;

          if (token.repeat) {
            capture += '(?:' + prefix + capture + ')*';
          }

          if (token.optional) {
            if (prefix) {
              capture = '(?:' + prefix + '(' + capture + '))?';
            } else {
              capture = '(' + capture + ')?';
            }
          } else {
            capture = prefix + '(' + capture + ')';
          }

          route += capture;
        }
      }

      // In non-strict mode we allow a slash at the end of match. If the path to
      // match already ends with a slash, we remove it for consistency. The slash
      // is valid at the end of a path match, not in the middle. This is important
      // in non-ending mode, where "/test/" shouldn't match "/test//route".
      if (!strict) {
        route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?';
      }

      if (end) {
        route += '$';
      } else {
        // In non-ending mode, we need the capturing groups to match as much as
        // possible by using a positive lookahead to the end or next path segment.
        route += strict && endsWithSlash ? '' : '(?=\\/|$)';
      }

      return new RegExp('^' + route, flags$1(options))
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(String|RegExp|Array)} path
     * @param  {Array}                 [keys]
     * @param  {Object}                [options]
     * @return {RegExp}
     */
    function pathToRegexp (path, keys, options) {
      keys = keys || [];

      if (!isarray(keys)) {
        options = keys;
        keys = [];
      } else if (!options) {
        options = {};
      }

      if (path instanceof RegExp) {
        return regexpToRegexp(path, keys)
      }

      if (isarray(path)) {
        return arrayToRegexp(path, keys, options)
      }

      return stringToRegexp(path, keys, options)
    }

    pathToRegexp_1.parse = parse_1;
    pathToRegexp_1.compile = compile_1;
    pathToRegexp_1.tokensToFunction = tokensToFunction_1;
    pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

    /**
       * Module dependencies.
       */

      

      /**
       * Short-cuts for global-object checks
       */

      var hasDocument = ('undefined' !== typeof document);
      var hasWindow = ('undefined' !== typeof window);
      var hasHistory = ('undefined' !== typeof history);
      var hasProcess$1 = typeof process !== 'undefined';

      /**
       * Detect click event
       */
      var clickEvent = hasDocument && document.ontouchstart ? 'touchstart' : 'click';

      /**
       * To work properly with the URL
       * history.location generated polyfill in https://github.com/devote/HTML5-History-API
       */

      var isLocation = hasWindow && !!(window.history.location || window.location);

      /**
       * The page instance
       * @api private
       */
      function Page() {
        // public things
        this.callbacks = [];
        this.exits = [];
        this.current = '';
        this.len = 0;

        // private things
        this._decodeURLComponents = true;
        this._base = '';
        this._strict = false;
        this._running = false;
        this._hashbang = false;

        // bound functions
        this.clickHandler = this.clickHandler.bind(this);
        this._onpopstate = this._onpopstate.bind(this);
      }

      /**
       * Configure the instance of page. This can be called multiple times.
       *
       * @param {Object} options
       * @api public
       */

      Page.prototype.configure = function(options) {
        var opts = options || {};

        this._window = opts.window || (hasWindow && window);
        this._decodeURLComponents = opts.decodeURLComponents !== false;
        this._popstate = opts.popstate !== false && hasWindow;
        this._click = opts.click !== false && hasDocument;
        this._hashbang = !!opts.hashbang;

        var _window = this._window;
        if(this._popstate) {
          _window.addEventListener('popstate', this._onpopstate, false);
        } else if(hasWindow) {
          _window.removeEventListener('popstate', this._onpopstate, false);
        }

        if (this._click) {
          _window.document.addEventListener(clickEvent, this.clickHandler, false);
        } else if(hasDocument) {
          _window.document.removeEventListener(clickEvent, this.clickHandler, false);
        }

        if(this._hashbang && hasWindow && !hasHistory) {
          _window.addEventListener('hashchange', this._onpopstate, false);
        } else if(hasWindow) {
          _window.removeEventListener('hashchange', this._onpopstate, false);
        }
      };

      /**
       * Get or set basepath to `path`.
       *
       * @param {string} path
       * @api public
       */

      Page.prototype.base = function(path) {
        if (0 === arguments.length) return this._base;
        this._base = path;
      };

      /**
       * Gets the `base`, which depends on whether we are using History or
       * hashbang routing.

       * @api private
       */
      Page.prototype._getBase = function() {
        var base = this._base;
        if(!!base) return base;
        var loc = hasWindow && this._window && this._window.location;

        if(hasWindow && this._hashbang && loc && loc.protocol === 'file:') {
          base = loc.pathname;
        }

        return base;
      };

      /**
       * Get or set strict path matching to `enable`
       *
       * @param {boolean} enable
       * @api public
       */

      Page.prototype.strict = function(enable) {
        if (0 === arguments.length) return this._strict;
        this._strict = enable;
      };


      /**
       * Bind with the given `options`.
       *
       * Options:
       *
       *    - `click` bind to click events [true]
       *    - `popstate` bind to popstate [true]
       *    - `dispatch` perform initial dispatch [true]
       *
       * @param {Object} options
       * @api public
       */

      Page.prototype.start = function(options) {
        var opts = options || {};
        this.configure(opts);

        if (false === opts.dispatch) return;
        this._running = true;

        var url;
        if(isLocation) {
          var window = this._window;
          var loc = window.location;

          if(this._hashbang && ~loc.hash.indexOf('#!')) {
            url = loc.hash.substr(2) + loc.search;
          } else if (this._hashbang) {
            url = loc.search + loc.hash;
          } else {
            url = loc.pathname + loc.search + loc.hash;
          }
        }

        this.replace(url, null, true, opts.dispatch);
      };

      /**
       * Unbind click and popstate event handlers.
       *
       * @api public
       */

      Page.prototype.stop = function() {
        if (!this._running) return;
        this.current = '';
        this.len = 0;
        this._running = false;

        var window = this._window;
        this._click && window.document.removeEventListener(clickEvent, this.clickHandler, false);
        hasWindow && window.removeEventListener('popstate', this._onpopstate, false);
        hasWindow && window.removeEventListener('hashchange', this._onpopstate, false);
      };

      /**
       * Show `path` with optional `state` object.
       *
       * @param {string} path
       * @param {Object=} state
       * @param {boolean=} dispatch
       * @param {boolean=} push
       * @return {!Context}
       * @api public
       */

      Page.prototype.show = function(path, state, dispatch, push) {
        var ctx = new Context(path, state, this),
          prev = this.prevContext;
        this.prevContext = ctx;
        this.current = ctx.path;
        if (false !== dispatch) this.dispatch(ctx, prev);
        if (false !== ctx.handled && false !== push) ctx.pushState();
        return ctx;
      };

      /**
       * Goes back in the history
       * Back should always let the current route push state and then go back.
       *
       * @param {string} path - fallback path to go back if no more history exists, if undefined defaults to page.base
       * @param {Object=} state
       * @api public
       */

      Page.prototype.back = function(path, state) {
        var page = this;
        if (this.len > 0) {
          var window = this._window;
          // this may need more testing to see if all browsers
          // wait for the next tick to go back in history
          hasHistory && window.history.back();
          this.len--;
        } else if (path) {
          setTimeout(function() {
            page.show(path, state);
          });
        } else {
          setTimeout(function() {
            page.show(page._getBase(), state);
          });
        }
      };

      /**
       * Register route to redirect from one path to other
       * or just redirect to another route
       *
       * @param {string} from - if param 'to' is undefined redirects to 'from'
       * @param {string=} to
       * @api public
       */
      Page.prototype.redirect = function(from, to) {
        var inst = this;

        // Define route from a path to another
        if ('string' === typeof from && 'string' === typeof to) {
          page.call(this, from, function(e) {
            setTimeout(function() {
              inst.replace(/** @type {!string} */ (to));
            }, 0);
          });
        }

        // Wait for the push state and replace it with another
        if ('string' === typeof from && 'undefined' === typeof to) {
          setTimeout(function() {
            inst.replace(from);
          }, 0);
        }
      };

      /**
       * Replace `path` with optional `state` object.
       *
       * @param {string} path
       * @param {Object=} state
       * @param {boolean=} init
       * @param {boolean=} dispatch
       * @return {!Context}
       * @api public
       */


      Page.prototype.replace = function(path, state, init, dispatch) {
        var ctx = new Context(path, state, this),
          prev = this.prevContext;
        this.prevContext = ctx;
        this.current = ctx.path;
        ctx.init = init;
        ctx.save(); // save before dispatching, which may redirect
        if (false !== dispatch) this.dispatch(ctx, prev);
        return ctx;
      };

      /**
       * Dispatch the given `ctx`.
       *
       * @param {Context} ctx
       * @api private
       */

      Page.prototype.dispatch = function(ctx, prev) {
        var i = 0, j = 0, page = this;

        function nextExit() {
          var fn = page.exits[j++];
          if (!fn) return nextEnter();
          fn(prev, nextExit);
        }

        function nextEnter() {
          var fn = page.callbacks[i++];

          if (ctx.path !== page.current) {
            ctx.handled = false;
            return;
          }
          if (!fn) return unhandled$1.call(page, ctx);
          fn(ctx, nextEnter);
        }

        if (prev) {
          nextExit();
        } else {
          nextEnter();
        }
      };

      /**
       * Register an exit route on `path` with
       * callback `fn()`, which will be called
       * on the previous context when a new
       * page is visited.
       */
      Page.prototype.exit = function(path, fn) {
        if (typeof path === 'function') {
          return this.exit('*', path);
        }

        var route = new Route(path, null, this);
        for (var i = 1; i < arguments.length; ++i) {
          this.exits.push(route.middleware(arguments[i]));
        }
      };

      /**
       * Handle "click" events.
       */

      /* jshint +W054 */
      Page.prototype.clickHandler = function(e) {
        if (1 !== this._which(e)) return;

        if (e.metaKey || e.ctrlKey || e.shiftKey) return;
        if (e.defaultPrevented) return;

        // ensure link
        // use shadow dom when available if not, fall back to composedPath()
        // for browsers that only have shady
        var el = e.target;
        var eventPath = e.path || (e.composedPath ? e.composedPath() : null);

        if(eventPath) {
          for (var i = 0; i < eventPath.length; i++) {
            if (!eventPath[i].nodeName) continue;
            if (eventPath[i].nodeName.toUpperCase() !== 'A') continue;
            if (!eventPath[i].href) continue;

            el = eventPath[i];
            break;
          }
        }

        // continue ensure link
        // el.nodeName for svg links are 'a' instead of 'A'
        while (el && 'A' !== el.nodeName.toUpperCase()) el = el.parentNode;
        if (!el || 'A' !== el.nodeName.toUpperCase()) return;

        // check if link is inside an svg
        // in this case, both href and target are always inside an object
        var svg = (typeof el.href === 'object') && el.href.constructor.name === 'SVGAnimatedString';

        // Ignore if tag has
        // 1. "download" attribute
        // 2. rel="external" attribute
        if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;

        // ensure non-hash for the same path
        var link = el.getAttribute('href');
        if(!this._hashbang && this._samePath(el) && (el.hash || '#' === link)) return;

        // Check for mailto: in the href
        if (link && link.indexOf('mailto:') > -1) return;

        // check target
        // svg target is an object and its desired value is in .baseVal property
        if (svg ? el.target.baseVal : el.target) return;

        // x-origin
        // note: svg links that are not relative don't call click events (and skip page.js)
        // consequently, all svg links tested inside page.js are relative and in the same origin
        if (!svg && !this.sameOrigin(el.href)) return;

        // rebuild path
        // There aren't .pathname and .search properties in svg links, so we use href
        // Also, svg href is an object and its desired value is in .baseVal property
        var path = svg ? el.href.baseVal : (el.pathname + el.search + (el.hash || ''));

        path = path[0] !== '/' ? '/' + path : path;

        // strip leading "/[drive letter]:" on NW.js on Windows
        if (hasProcess$1 && path.match(/^\/[a-zA-Z]:\//)) {
          path = path.replace(/^\/[a-zA-Z]:\//, '/');
        }

        // same page
        var orig = path;
        var pageBase = this._getBase();

        if (path.indexOf(pageBase) === 0) {
          path = path.substr(pageBase.length);
        }

        if (this._hashbang) path = path.replace('#!', '');

        if (pageBase && orig === path && (!isLocation || this._window.location.protocol !== 'file:')) {
          return;
        }

        e.preventDefault();
        this.show(orig);
      };

      /**
       * Handle "populate" events.
       * @api private
       */

      Page.prototype._onpopstate = (function () {
        var loaded = false;
        if ( ! hasWindow ) {
          return function () {};
        }
        if (hasDocument && document.readyState === 'complete') {
          loaded = true;
        } else {
          window.addEventListener('load', function() {
            setTimeout(function() {
              loaded = true;
            }, 0);
          });
        }
        return function onpopstate(e) {
          if (!loaded) return;
          var page = this;
          if (e.state) {
            var path = e.state.path;
            page.replace(path, e.state);
          } else if (isLocation) {
            var loc = page._window.location;
            page.show(loc.pathname + loc.search + loc.hash, undefined, undefined, false);
          }
        };
      })();

      /**
       * Event button.
       */
      Page.prototype._which = function(e) {
        e = e || (hasWindow && this._window.event);
        return null == e.which ? e.button : e.which;
      };

      /**
       * Convert to a URL object
       * @api private
       */
      Page.prototype._toURL = function(href) {
        var window = this._window;
        if(typeof URL === 'function' && isLocation) {
          return new URL(href, window.location.toString());
        } else if (hasDocument) {
          var anc = window.document.createElement('a');
          anc.href = href;
          return anc;
        }
      };

      /**
       * Check if `href` is the same origin.
       * @param {string} href
       * @api public
       */
      Page.prototype.sameOrigin = function(href) {
        if(!href || !isLocation) return false;

        var url = this._toURL(href);
        var window = this._window;

        var loc = window.location;

        /*
           When the port is the default http port 80 for http, or 443 for
           https, internet explorer 11 returns an empty string for loc.port,
           so we need to compare loc.port with an empty string if url.port
           is the default port 80 or 443.
           Also the comparition with `port` is changed from `===` to `==` because
           `port` can be a string sometimes. This only applies to ie11.
        */
        return loc.protocol === url.protocol &&
          loc.hostname === url.hostname &&
          (loc.port === url.port || loc.port === '' && (url.port == 80 || url.port == 443)); // jshint ignore:line
      };

      /**
       * @api private
       */
      Page.prototype._samePath = function(url) {
        if(!isLocation) return false;
        var window = this._window;
        var loc = window.location;
        return url.pathname === loc.pathname &&
          url.search === loc.search;
      };

      /**
       * Remove URL encoding from the given `str`.
       * Accommodates whitespace in both x-www-form-urlencoded
       * and regular percent-encoded form.
       *
       * @param {string} val - URL component to decode
       * @api private
       */
      Page.prototype._decodeURLEncodedURIComponent = function(val) {
        if (typeof val !== 'string') { return val; }
        return this._decodeURLComponents ? decodeURIComponent(val.replace(/\+/g, ' ')) : val;
      };

      /**
       * Create a new `page` instance and function
       */
      function createPage() {
        var pageInstance = new Page();

        function pageFn(/* args */) {
          return page.apply(pageInstance, arguments);
        }

        // Copy all of the things over. In 2.0 maybe we use setPrototypeOf
        pageFn.callbacks = pageInstance.callbacks;
        pageFn.exits = pageInstance.exits;
        pageFn.base = pageInstance.base.bind(pageInstance);
        pageFn.strict = pageInstance.strict.bind(pageInstance);
        pageFn.start = pageInstance.start.bind(pageInstance);
        pageFn.stop = pageInstance.stop.bind(pageInstance);
        pageFn.show = pageInstance.show.bind(pageInstance);
        pageFn.back = pageInstance.back.bind(pageInstance);
        pageFn.redirect = pageInstance.redirect.bind(pageInstance);
        pageFn.replace = pageInstance.replace.bind(pageInstance);
        pageFn.dispatch = pageInstance.dispatch.bind(pageInstance);
        pageFn.exit = pageInstance.exit.bind(pageInstance);
        pageFn.configure = pageInstance.configure.bind(pageInstance);
        pageFn.sameOrigin = pageInstance.sameOrigin.bind(pageInstance);
        pageFn.clickHandler = pageInstance.clickHandler.bind(pageInstance);

        pageFn.create = createPage;

        Object.defineProperty(pageFn, 'len', {
          get: function(){
            return pageInstance.len;
          },
          set: function(val) {
            pageInstance.len = val;
          }
        });

        Object.defineProperty(pageFn, 'current', {
          get: function(){
            return pageInstance.current;
          },
          set: function(val) {
            pageInstance.current = val;
          }
        });

        // In 2.0 these can be named exports
        pageFn.Context = Context;
        pageFn.Route = Route;

        return pageFn;
      }

      /**
       * Register `path` with callback `fn()`,
       * or route `path`, or redirection,
       * or `page.start()`.
       *
       *   page(fn);
       *   page('*', fn);
       *   page('/user/:id', load, user);
       *   page('/user/' + user.id, { some: 'thing' });
       *   page('/user/' + user.id);
       *   page('/from', '/to')
       *   page();
       *
       * @param {string|!Function|!Object} path
       * @param {Function=} fn
       * @api public
       */

      function page(path, fn) {
        // <callback>
        if ('function' === typeof path) {
          return page.call(this, '*', path);
        }

        // route <path> to <callback ...>
        if ('function' === typeof fn) {
          var route = new Route(/** @type {string} */ (path), null, this);
          for (var i = 1; i < arguments.length; ++i) {
            this.callbacks.push(route.middleware(arguments[i]));
          }
          // show <path> with [state]
        } else if ('string' === typeof path) {
          this['string' === typeof fn ? 'redirect' : 'show'](path, fn);
          // start [options]
        } else {
          this.start(path);
        }
      }

      /**
       * Unhandled `ctx`. When it's not the initial
       * popstate then redirect. If you wish to handle
       * 404s on your own use `page('*', callback)`.
       *
       * @param {Context} ctx
       * @api private
       */
      function unhandled$1(ctx) {
        if (ctx.handled) return;
        var current;
        var page = this;
        var window = page._window;

        if (page._hashbang) {
          current = isLocation && this._getBase() + window.location.hash.replace('#!', '');
        } else {
          current = isLocation && window.location.pathname + window.location.search;
        }

        if (current === ctx.canonicalPath) return;
        page.stop();
        ctx.handled = false;
        isLocation && (window.location.href = ctx.canonicalPath);
      }

      /**
       * Escapes RegExp characters in the given string.
       *
       * @param {string} s
       * @api private
       */
      function escapeRegExp(s) {
        return s.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1');
      }

      /**
       * Initialize a new "request" `Context`
       * with the given `path` and optional initial `state`.
       *
       * @constructor
       * @param {string} path
       * @param {Object=} state
       * @api public
       */

      function Context(path, state, pageInstance) {
        var _page = this.page = pageInstance || page;
        var window = _page._window;
        var hashbang = _page._hashbang;

        var pageBase = _page._getBase();
        if ('/' === path[0] && 0 !== path.indexOf(pageBase)) path = pageBase + (hashbang ? '#!' : '') + path;
        var i = path.indexOf('?');

        this.canonicalPath = path;
        var re = new RegExp('^' + escapeRegExp(pageBase));
        this.path = path.replace(re, '') || '/';
        if (hashbang) this.path = this.path.replace('#!', '') || '/';

        this.title = (hasDocument && window.document.title);
        this.state = state || {};
        this.state.path = path;
        this.querystring = ~i ? _page._decodeURLEncodedURIComponent(path.slice(i + 1)) : '';
        this.pathname = _page._decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);
        this.params = {};

        // fragment
        this.hash = '';
        if (!hashbang) {
          if (!~this.path.indexOf('#')) return;
          var parts = this.path.split('#');
          this.path = this.pathname = parts[0];
          this.hash = _page._decodeURLEncodedURIComponent(parts[1]) || '';
          this.querystring = this.querystring.split('#')[0];
        }
      }

      /**
       * Push state.
       *
       * @api private
       */

      Context.prototype.pushState = function() {
        var page = this.page;
        var window = page._window;
        var hashbang = page._hashbang;

        page.len++;
        if (hasHistory) {
            window.history.pushState(this.state, this.title,
              hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
        }
      };

      /**
       * Save the context state.
       *
       * @api public
       */

      Context.prototype.save = function() {
        var page = this.page;
        if (hasHistory) {
            page._window.history.replaceState(this.state, this.title,
              page._hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
        }
      };

      /**
       * Initialize `Route` with the given HTTP `path`,
       * and an array of `callbacks` and `options`.
       *
       * Options:
       *
       *   - `sensitive`    enable case-sensitive routes
       *   - `strict`       enable strict matching for trailing slashes
       *
       * @constructor
       * @param {string} path
       * @param {Object=} options
       * @api private
       */

      function Route(path, options, page) {
        var _page = this.page = page || globalPage;
        var opts = options || {};
        opts.strict = opts.strict || _page._strict;
        this.path = (path === '*') ? '(.*)' : path;
        this.method = 'GET';
        this.regexp = pathToRegexp_1(this.path, this.keys = [], opts);
      }

      /**
       * Return route middleware with
       * the given callback `fn()`.
       *
       * @param {Function} fn
       * @return {Function}
       * @api public
       */

      Route.prototype.middleware = function(fn) {
        var self = this;
        return function(ctx, next) {
          if (self.match(ctx.path, ctx.params)) {
            ctx.routePath = self.path;
            return fn(ctx, next);
          }
          next();
        };
      };

      /**
       * Check if this route matches `path`, if so
       * populate `params`.
       *
       * @param {string} path
       * @param {Object} params
       * @return {boolean}
       * @api private
       */

      Route.prototype.match = function(path, params) {
        var keys = this.keys,
          qsIndex = path.indexOf('?'),
          pathname = ~qsIndex ? path.slice(0, qsIndex) : path,
          m = this.regexp.exec(decodeURIComponent(pathname));

        if (!m) return false;

        delete params[0];

        for (var i = 1, len = m.length; i < len; ++i) {
          var key = keys[i - 1];
          var val = this.page._decodeURLEncodedURIComponent(m[i]);
          if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {
            params[key.name] = val;
          }
        }

        return true;
      };


      /**
       * Module exports.
       */

      var globalPage = createPage();
      var page_js = globalPage;
      var default_1 = globalPage;

    page_js.default = default_1;

    function routing (ctrl) {
        page_js.base(BASE_PATH);
        page_js('/', async (ctx) => {
            if (ctx.querystring.includes('code=liu_'))
                history.pushState({}, '', BASE_PATH || '/');
            ctrl.openHome();
        });
        page_js('/login', async (_) => {
            if (ctrl.auth.me)
                return page_js('/');
            await ctrl.auth.login();
        });
        page_js('/logout', async (_) => {
            await ctrl.auth.logout();
            location.href = BASE_PATH;
        });
        page_js('/game/:id', ctx => {
            ctrl.openGame(ctx.params.id);
        });
        page_js('/tv', ctx => ctrl.watchTv());
        page_js({ hashbang: true });
    }
    const BASE_PATH = location.pathname.replace(/\/$/, '');
    const url = (path) => `${BASE_PATH}${path}`;
    const href = (path) => ({ href: url(path) });

    const lichessHost = "http://localhost:9663"; //http://localhost:9663 https://lichess.org
    // export const lichessHost = 'http://l.org';
    const scopes = ["board:play"];
    const clientId = "lichess-api-demo";
    const clientUrl = `${location.protocol}//${location.host}${BASE_PATH || "/"}`;
    class Auth {
        constructor() {
            this.oauth = new oauth2AuthCodePkce.OAuth2AuthCodePKCE({
                authorizationUrl: `${lichessHost}/oauth`,
                tokenUrl: `${lichessHost}/api/token`,
                clientId,
                scopes,
                redirectUrl: clientUrl,
                onAccessTokenExpiry: (refreshAccessToken) => refreshAccessToken(),
                onInvalidGrant: console.warn,
            });
            this.authenticate = async () => {
                const httpClient = this.oauth.decorateFetchHTTPClient(window.fetch);
                const res = await httpClient(`${lichessHost}/api/account`);
                const me = Object.assign(Object.assign({}, (await res.json())), { httpClient });
                if (me.error)
                    throw me.error;
                this.me = me;
            };
            this.openStream = async (path, config, handler) => {
                const stream = await this.fetchResponse(path, config);
                return readStream(`7s200:STREAM ${path}`, stream, handler);
            };
            this.fetchBody = async (path, config = {}) => {
                const res = await this.fetchResponse(path, config);
                const body = await res.json();
                return body;
            };
            this.fetchResponse = async (path, config = {}) => {
                var _a;
                const res = await (((_a = this.me) === null || _a === void 0 ? void 0 : _a.httpClient) || window.fetch)(`${lichessHost}${path}`, config);
                if (res.error || !res.ok) {
                    const err = `${res.error} ${res.status} ${res.statusText}`;
                    alert(err);
                    throw err;
                }
                return res;
            };
        }
        async init() {
            try {
                const accessContext = await this.oauth.getAccessToken();
                if (accessContext)
                    await this.authenticate();
            }
            catch (err) {
                console.error(err);
            }
            if (!this.me) {
                try {
                    const hasAuthCode = await this.oauth.isReturningFromAuthServer();
                    if (hasAuthCode) {
                        await this.authenticate();
                    }
                }
                catch (err) {
                    console.error(err);
                }
            }
        }
        async login() {
            await this.oauth.fetchAuthorizationCode();
        }
        async logout() {
            if (this.me)
                await this.me.httpClient(`${lichessHost}/api/token`, { method: "DELETE" });
            localStorage.clear();
            this.me = undefined;
        }
    }

    const FILE_NAMES = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
    const RANK_NAMES = ['1', '2', '3', '4', '5', '6', '7', '8'];
    const COLORS = ['white', 'black'];
    const ROLES = ['pawn', 'knight', 'bishop', 'rook', 'queen', 'king'];
    const CASTLING_SIDES = ['a', 'h'];
    function isDrop(v) {
        return 'role' in v;
    }

    function defined(v) {
        return v !== undefined;
    }
    function opposite$1(color) {
        return color === 'white' ? 'black' : 'white';
    }
    function squareRank(square) {
        return square >> 3;
    }
    function squareFile(square) {
        return square & 0x7;
    }
    function roleToChar(role) {
        switch (role) {
            case 'pawn':
                return 'p';
            case 'knight':
                return 'n';
            case 'bishop':
                return 'b';
            case 'rook':
                return 'r';
            case 'queen':
                return 'q';
            case 'king':
                return 'k';
        }
    }
    function charToRole(ch) {
        switch (ch) {
            case 'P':
            case 'p':
                return 'pawn';
            case 'N':
            case 'n':
                return 'knight';
            case 'B':
            case 'b':
                return 'bishop';
            case 'R':
            case 'r':
                return 'rook';
            case 'Q':
            case 'q':
                return 'queen';
            case 'K':
            case 'k':
                return 'king';
            default:
                return;
        }
    }
    function parseSquare(str) {
        if (str.length !== 2)
            return;
        const file = str.charCodeAt(0) - 'a'.charCodeAt(0);
        const rank = str.charCodeAt(1) - '1'.charCodeAt(0);
        if (file < 0 || file >= 8 || rank < 0 || rank >= 8)
            return;
        return file + 8 * rank;
    }
    function makeSquare(square) {
        return (FILE_NAMES[squareFile(square)] + RANK_NAMES[squareRank(square)]);
    }
    function parseUci(str) {
        if (str[1] === '@' && str.length === 4) {
            const role = charToRole(str[0]);
            const to = parseSquare(str.slice(2));
            if (role && defined(to))
                return { role, to };
        }
        else if (str.length === 4 || str.length === 5) {
            const from = parseSquare(str.slice(0, 2));
            const to = parseSquare(str.slice(2, 4));
            let promotion;
            if (str.length === 5) {
                promotion = charToRole(str[4]);
                if (!promotion)
                    return;
            }
            if (defined(from) && defined(to))
                return { from, to, promotion };
        }
        return;
    }
    function kingCastlesTo(color, side) {
        return color === 'white' ? (side === 'a' ? 2 : 6) : side === 'a' ? 58 : 62;
    }

    function popcnt32(n) {
        n = n - ((n >>> 1) & 1431655765);
        n = (n & 858993459) + ((n >>> 2) & 858993459);
        return Math.imul((n + (n >>> 4)) & 252645135, 16843009) >> 24;
    }
    function bswap32(n) {
        n = ((n >>> 8) & 16711935) | ((n & 16711935) << 8);
        return ((n >>> 16) & 0xffff) | ((n & 0xffff) << 16);
    }
    function rbit32(n) {
        n = ((n >>> 1) & 1431655765) | ((n & 1431655765) << 1);
        n = ((n >>> 2) & 858993459) | ((n & 858993459) << 2);
        n = ((n >>> 4) & 252645135) | ((n & 252645135) << 4);
        return bswap32(n);
    }
    class SquareSet {
        constructor(lo, hi) {
            this.lo = lo;
            this.hi = hi;
            this.lo = lo | 0;
            this.hi = hi | 0;
        }
        static fromSquare(square) {
            return square >= 32 ? new SquareSet(0, 1 << (square - 32)) : new SquareSet(1 << square, 0);
        }
        static fromRank(rank) {
            return new SquareSet(0xff, 0).shl64(8 * rank);
        }
        static fromFile(file) {
            return new SquareSet(16843009 << file, 16843009 << file);
        }
        static empty() {
            return new SquareSet(0, 0);
        }
        static full() {
            return new SquareSet(4294967295, 4294967295);
        }
        static corners() {
            return new SquareSet(0x81, 2164260864);
        }
        static center() {
            return new SquareSet(402653184, 0x18);
        }
        static backranks() {
            return new SquareSet(0xff, 4278190080);
        }
        static backrank(color) {
            return color === 'white' ? new SquareSet(0xff, 0) : new SquareSet(0, 4278190080);
        }
        static lightSquares() {
            return new SquareSet(1437226410, 1437226410);
        }
        static darkSquares() {
            return new SquareSet(2857740885, 2857740885);
        }
        complement() {
            return new SquareSet(~this.lo, ~this.hi);
        }
        xor(other) {
            return new SquareSet(this.lo ^ other.lo, this.hi ^ other.hi);
        }
        union(other) {
            return new SquareSet(this.lo | other.lo, this.hi | other.hi);
        }
        intersect(other) {
            return new SquareSet(this.lo & other.lo, this.hi & other.hi);
        }
        diff(other) {
            return new SquareSet(this.lo & ~other.lo, this.hi & ~other.hi);
        }
        intersects(other) {
            return this.intersect(other).nonEmpty();
        }
        isDisjoint(other) {
            return this.intersect(other).isEmpty();
        }
        supersetOf(other) {
            return other.diff(this).isEmpty();
        }
        subsetOf(other) {
            return this.diff(other).isEmpty();
        }
        shr64(shift) {
            if (shift >= 64)
                return SquareSet.empty();
            if (shift >= 32)
                return new SquareSet(this.hi >>> (shift - 32), 0);
            if (shift > 0)
                return new SquareSet((this.lo >>> shift) ^ (this.hi << (32 - shift)), this.hi >>> shift);
            return this;
        }
        shl64(shift) {
            if (shift >= 64)
                return SquareSet.empty();
            if (shift >= 32)
                return new SquareSet(0, this.lo << (shift - 32));
            if (shift > 0)
                return new SquareSet(this.lo << shift, (this.hi << shift) ^ (this.lo >>> (32 - shift)));
            return this;
        }
        bswap64() {
            return new SquareSet(bswap32(this.hi), bswap32(this.lo));
        }
        rbit64() {
            return new SquareSet(rbit32(this.hi), rbit32(this.lo));
        }
        minus64(other) {
            const lo = this.lo - other.lo;
            const c = ((lo & other.lo & 1) + (other.lo >>> 1) + (lo >>> 1)) >>> 31;
            return new SquareSet(lo, this.hi - (other.hi + c));
        }
        equals(other) {
            return this.lo === other.lo && this.hi === other.hi;
        }
        size() {
            return popcnt32(this.lo) + popcnt32(this.hi);
        }
        isEmpty() {
            return this.lo === 0 && this.hi === 0;
        }
        nonEmpty() {
            return this.lo !== 0 || this.hi !== 0;
        }
        has(square) {
            return (square >= 32 ? this.hi & (1 << (square - 32)) : this.lo & (1 << square)) !== 0;
        }
        set(square, on) {
            return on ? this.with(square) : this.without(square);
        }
        with(square) {
            return square >= 32
                ? new SquareSet(this.lo, this.hi | (1 << (square - 32)))
                : new SquareSet(this.lo | (1 << square), this.hi);
        }
        without(square) {
            return square >= 32
                ? new SquareSet(this.lo, this.hi & ~(1 << (square - 32)))
                : new SquareSet(this.lo & ~(1 << square), this.hi);
        }
        toggle(square) {
            return square >= 32
                ? new SquareSet(this.lo, this.hi ^ (1 << (square - 32)))
                : new SquareSet(this.lo ^ (1 << square), this.hi);
        }
        last() {
            if (this.hi !== 0)
                return 63 - Math.clz32(this.hi);
            if (this.lo !== 0)
                return 31 - Math.clz32(this.lo);
            return;
        }
        first() {
            if (this.lo !== 0)
                return 31 - Math.clz32(this.lo & -this.lo);
            if (this.hi !== 0)
                return 63 - Math.clz32(this.hi & -this.hi);
            return;
        }
        withoutFirst() {
            if (this.lo !== 0)
                return new SquareSet(this.lo & (this.lo - 1), this.hi);
            return new SquareSet(0, this.hi & (this.hi - 1));
        }
        moreThanOne() {
            return (this.hi !== 0 && this.lo !== 0) || (this.lo & (this.lo - 1)) !== 0 || (this.hi & (this.hi - 1)) !== 0;
        }
        singleSquare() {
            return this.moreThanOne() ? undefined : this.last();
        }
        isSingleSquare() {
            return this.nonEmpty() && !this.moreThanOne();
        }
        *[Symbol.iterator]() {
            let lo = this.lo;
            let hi = this.hi;
            while (lo !== 0) {
                const idx = 31 - Math.clz32(lo & -lo);
                lo ^= 1 << idx;
                yield idx;
            }
            while (hi !== 0) {
                const idx = 31 - Math.clz32(hi & -hi);
                hi ^= 1 << idx;
                yield 32 + idx;
            }
        }
        *reversed() {
            let lo = this.lo;
            let hi = this.hi;
            while (hi !== 0) {
                const idx = 31 - Math.clz32(hi);
                hi ^= 1 << idx;
                yield 32 + idx;
            }
            while (lo !== 0) {
                const idx = 31 - Math.clz32(lo);
                lo ^= 1 << idx;
                yield idx;
            }
        }
    }

    /**
     * Compute attacks and rays.
     *
     * These are low-level functions that can be used to implement chess rules.
     *
     * Implementation notes: Sliding attacks are computed using
     * [hyperbola quintessence](https://www.chessprogramming.org/Hyperbola_Quintessence).
     * Magic bitboards would deliver faster lookups, but also require
     * initializing considerably larger attack tables. On the web, initialization
     * time is important, so the chosen method may strike a better balance.
     *
     * @packageDocumentation
     */
    function computeRange(square, deltas) {
        let range = SquareSet.empty();
        for (const delta of deltas) {
            const sq = square + delta;
            if (0 <= sq && sq < 64 && Math.abs(squareFile(square) - squareFile(sq)) <= 2) {
                range = range.with(sq);
            }
        }
        return range;
    }
    function tabulate(f) {
        const table = [];
        for (let square = 0; square < 64; square++)
            table[square] = f(square);
        return table;
    }
    const KING_ATTACKS = tabulate(sq => computeRange(sq, [-9, -8, -7, -1, 1, 7, 8, 9]));
    const KNIGHT_ATTACKS = tabulate(sq => computeRange(sq, [-17, -15, -10, -6, 6, 10, 15, 17]));
    const PAWN_ATTACKS = {
        white: tabulate(sq => computeRange(sq, [7, 9])),
        black: tabulate(sq => computeRange(sq, [-7, -9])),
    };
    /**
     * Gets squares attacked or defended by a king on `square`.
     */
    function kingAttacks(square) {
        return KING_ATTACKS[square];
    }
    /**
     * Gets squares attacked or defended by a knight on `square`.
     */
    function knightAttacks(square) {
        return KNIGHT_ATTACKS[square];
    }
    /**
     * Gets squares attacked or defended by a pawn of the given `color`
     * on `square`.
     */
    function pawnAttacks(color, square) {
        return PAWN_ATTACKS[color][square];
    }
    const FILE_RANGE = tabulate(sq => SquareSet.fromFile(squareFile(sq)).without(sq));
    const RANK_RANGE = tabulate(sq => SquareSet.fromRank(squareRank(sq)).without(sq));
    const DIAG_RANGE = tabulate(sq => {
        const diag = new SquareSet(134480385, 2151686160);
        const shift = 8 * (squareRank(sq) - squareFile(sq));
        return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);
    });
    const ANTI_DIAG_RANGE = tabulate(sq => {
        const diag = new SquareSet(270549120, 16909320);
        const shift = 8 * (squareRank(sq) + squareFile(sq) - 7);
        return (shift >= 0 ? diag.shl64(shift) : diag.shr64(-shift)).without(sq);
    });
    function hyperbola(bit, range, occupied) {
        let forward = occupied.intersect(range);
        let reverse = forward.bswap64(); // Assumes no more than 1 bit per rank
        forward = forward.minus64(bit);
        reverse = reverse.minus64(bit.bswap64());
        return forward.xor(reverse.bswap64()).intersect(range);
    }
    function fileAttacks(square, occupied) {
        return hyperbola(SquareSet.fromSquare(square), FILE_RANGE[square], occupied);
    }
    function rankAttacks(square, occupied) {
        const range = RANK_RANGE[square];
        let forward = occupied.intersect(range);
        let reverse = forward.rbit64();
        forward = forward.minus64(SquareSet.fromSquare(square));
        reverse = reverse.minus64(SquareSet.fromSquare(63 - square));
        return forward.xor(reverse.rbit64()).intersect(range);
    }
    /**
     * Gets squares attacked or defended by a bishop on `square`, given `occupied`
     * squares.
     */
    function bishopAttacks(square, occupied) {
        const bit = SquareSet.fromSquare(square);
        return hyperbola(bit, DIAG_RANGE[square], occupied).xor(hyperbola(bit, ANTI_DIAG_RANGE[square], occupied));
    }
    /**
     * Gets squares attacked or defended by a rook on `square`, given `occupied`
     * squares.
     */
    function rookAttacks(square, occupied) {
        return fileAttacks(square, occupied).xor(rankAttacks(square, occupied));
    }
    /**
     * Gets squares attacked or defended by a queen on `square`, given `occupied`
     * squares.
     */
    function queenAttacks(square, occupied) {
        return bishopAttacks(square, occupied).xor(rookAttacks(square, occupied));
    }
    /**
     * Gets squares attacked or defended by a `piece` on `square`, given
     * `occupied` squares.
     */
    function attacks(piece, square, occupied) {
        switch (piece.role) {
            case 'pawn':
                return pawnAttacks(piece.color, square);
            case 'knight':
                return knightAttacks(square);
            case 'bishop':
                return bishopAttacks(square, occupied);
            case 'rook':
                return rookAttacks(square, occupied);
            case 'queen':
                return queenAttacks(square, occupied);
            case 'king':
                return kingAttacks(square);
        }
    }
    /**
     * Gets all squares of the rank, file or diagonal with the two squares
     * `a` and `b`, or an empty set if they are not aligned.
     */
    function ray(a, b) {
        const other = SquareSet.fromSquare(b);
        if (RANK_RANGE[a].intersects(other))
            return RANK_RANGE[a].with(a);
        if (ANTI_DIAG_RANGE[a].intersects(other))
            return ANTI_DIAG_RANGE[a].with(a);
        if (DIAG_RANGE[a].intersects(other))
            return DIAG_RANGE[a].with(a);
        if (FILE_RANGE[a].intersects(other))
            return FILE_RANGE[a].with(a);
        return SquareSet.empty();
    }
    /**
     * Gets all squares between `a` and `b` (bounds not included), or an empty set
     * if they are not on the same rank, file or diagonal.
     */
    function between(a, b) {
        return ray(a, b)
            .intersect(SquareSet.full().shl64(a).xor(SquareSet.full().shl64(b)))
            .withoutFirst();
    }

    /**
     * Piece positions on a board.
     *
     * Properties are sets of squares, like `board.occupied` for all occupied
     * squares, `board[color]` for all pieces of that color, and `board[role]`
     * for all pieces of that role. When modifying the properties directly, take
     * care to keep them consistent.
     */
    class Board {
        constructor() { }
        static default() {
            const board = new Board();
            board.reset();
            return board;
        }
        static racingKings() {
            const board = new Board();
            board.occupied = new SquareSet(0xffff, 0);
            board.promoted = SquareSet.empty();
            board.white = new SquareSet(0xf0f0, 0);
            board.black = new SquareSet(0x0f0f, 0);
            board.pawn = SquareSet.empty();
            board.knight = new SquareSet(0x1818, 0);
            board.bishop = new SquareSet(0x2424, 0);
            board.rook = new SquareSet(0x4242, 0);
            board.queen = new SquareSet(0x0081, 0);
            board.king = new SquareSet(0x8100, 0);
            return board;
        }
        static horde() {
            const board = new Board();
            board.occupied = new SquareSet(4294967295, 4294901862);
            board.promoted = SquareSet.empty();
            board.white = new SquareSet(4294967295, 102);
            board.black = new SquareSet(0, 4294901760);
            board.pawn = new SquareSet(4294967295, 16711782);
            board.knight = new SquareSet(0, 1107296256);
            board.bishop = new SquareSet(0, 603979776);
            board.rook = new SquareSet(0, 2164260864);
            board.queen = new SquareSet(0, 134217728);
            board.king = new SquareSet(0, 268435456);
            return board;
        }
        /**
         * Resets all pieces to the default starting position for standard chess.
         */
        reset() {
            this.occupied = new SquareSet(0xffff, 4294901760);
            this.promoted = SquareSet.empty();
            this.white = new SquareSet(0xffff, 0);
            this.black = new SquareSet(0, 4294901760);
            this.pawn = new SquareSet(0xff00, 16711680);
            this.knight = new SquareSet(0x42, 1107296256);
            this.bishop = new SquareSet(0x24, 603979776);
            this.rook = new SquareSet(0x81, 2164260864);
            this.queen = new SquareSet(0x8, 134217728);
            this.king = new SquareSet(0x10, 268435456);
        }
        static empty() {
            const board = new Board();
            board.clear();
            return board;
        }
        clear() {
            this.occupied = SquareSet.empty();
            this.promoted = SquareSet.empty();
            for (const color of COLORS)
                this[color] = SquareSet.empty();
            for (const role of ROLES)
                this[role] = SquareSet.empty();
        }
        clone() {
            const board = new Board();
            board.occupied = this.occupied;
            board.promoted = this.promoted;
            for (const color of COLORS)
                board[color] = this[color];
            for (const role of ROLES)
                board[role] = this[role];
            return board;
        }
        equalsIgnorePromoted(other) {
            if (!this.white.equals(other.white))
                return false;
            return ROLES.every(role => this[role].equals(other[role]));
        }
        equals(other) {
            return this.equalsIgnorePromoted(other) && this.promoted.equals(other.promoted);
        }
        getColor(square) {
            if (this.white.has(square))
                return 'white';
            if (this.black.has(square))
                return 'black';
            return;
        }
        getRole(square) {
            for (const role of ROLES) {
                if (this[role].has(square))
                    return role;
            }
            return;
        }
        get(square) {
            const color = this.getColor(square);
            if (!color)
                return;
            const role = this.getRole(square);
            const promoted = this.promoted.has(square);
            return { color, role, promoted };
        }
        /**
         * Removes and returns the piece from the given `square`, if any.
         */
        take(square) {
            const piece = this.get(square);
            if (piece) {
                this.occupied = this.occupied.without(square);
                this[piece.color] = this[piece.color].without(square);
                this[piece.role] = this[piece.role].without(square);
                if (piece.promoted)
                    this.promoted = this.promoted.without(square);
            }
            return piece;
        }
        /**
         * Put `piece` onto `square`, potentially replacing an existing piece.
         * Returns the existing piece, if any.
         */
        set(square, piece) {
            const old = this.take(square);
            this.occupied = this.occupied.with(square);
            this[piece.color] = this[piece.color].with(square);
            this[piece.role] = this[piece.role].with(square);
            if (piece.promoted)
                this.promoted = this.promoted.with(square);
            return old;
        }
        has(square) {
            return this.occupied.has(square);
        }
        *[Symbol.iterator]() {
            for (const square of this.occupied) {
                yield [square, this.get(square)];
            }
        }
        pieces(color, role) {
            return this[color].intersect(this[role]);
        }
        rooksAndQueens() {
            return this.rook.union(this.queen);
        }
        bishopsAndQueens() {
            return this.bishop.union(this.queen);
        }
        /**
         * Finds the unique unpromoted king of the given `color`, if any.
         */
        kingOf(color) {
            return this.king.intersect(this[color]).diff(this.promoted).singleSquare();
        }
    }

    class MaterialSide {
        constructor() { }
        static empty() {
            const m = new MaterialSide();
            for (const role of ROLES)
                m[role] = 0;
            return m;
        }
        static fromBoard(board, color) {
            const m = new MaterialSide();
            for (const role of ROLES)
                m[role] = board.pieces(color, role).size();
            return m;
        }
        clone() {
            const m = new MaterialSide();
            for (const role of ROLES)
                m[role] = this[role];
            return m;
        }
        equals(other) {
            return ROLES.every(role => this[role] === other[role]);
        }
        add(other) {
            const m = new MaterialSide();
            for (const role of ROLES)
                m[role] = this[role] + other[role];
            return m;
        }
        nonEmpty() {
            return ROLES.some(role => this[role] > 0);
        }
        isEmpty() {
            return !this.nonEmpty();
        }
        hasPawns() {
            return this.pawn > 0;
        }
        hasNonPawns() {
            return this.knight > 0 || this.bishop > 0 || this.rook > 0 || this.queen > 0 || this.king > 0;
        }
        count() {
            return this.pawn + this.knight + this.bishop + this.rook + this.queen + this.king;
        }
    }
    class Material {
        constructor(white, black) {
            this.white = white;
            this.black = black;
        }
        static empty() {
            return new Material(MaterialSide.empty(), MaterialSide.empty());
        }
        static fromBoard(board) {
            return new Material(MaterialSide.fromBoard(board, 'white'), MaterialSide.fromBoard(board, 'black'));
        }
        clone() {
            return new Material(this.white.clone(), this.black.clone());
        }
        equals(other) {
            return this.white.equals(other.white) && this.black.equals(other.black);
        }
        add(other) {
            return new Material(this.white.add(other.white), this.black.add(other.black));
        }
        count() {
            return this.white.count() + this.black.count();
        }
        isEmpty() {
            return this.white.isEmpty() && this.black.isEmpty();
        }
        nonEmpty() {
            return !this.isEmpty();
        }
        hasPawns() {
            return this.white.hasPawns() || this.black.hasPawns();
        }
        hasNonPawns() {
            return this.white.hasNonPawns() || this.black.hasNonPawns();
        }
    }
    class RemainingChecks {
        constructor(white, black) {
            this.white = white;
            this.black = black;
        }
        static default() {
            return new RemainingChecks(3, 3);
        }
        clone() {
            return new RemainingChecks(this.white, this.black);
        }
        equals(other) {
            return this.white === other.white && this.black === other.black;
        }
    }
    function defaultSetup() {
        return {
            board: Board.default(),
            pockets: undefined,
            turn: 'white',
            unmovedRooks: SquareSet.corners(),
            epSquare: undefined,
            remainingChecks: undefined,
            halfmoves: 0,
            fullmoves: 1,
        };
    }

    function r(r,n){r.prototype=Object.create(n.prototype),r.prototype.constructor=r,r.__proto__=n;}var n,t=function(){function r(){}var t=r.prototype;return t.unwrap=function(r,t){var o=this._chain(function(t){return n.ok(r?r(t):t)},function(r){return t?n.ok(t(r)):n.err(r)});if(o.isErr)throw o.error;return o.value},t.map=function(r,t){return this._chain(function(t){return n.ok(r(t))},function(r){return n.err(t?t(r):r)})},t.chain=function(r,t){return this._chain(r,t||function(r){return n.err(r)})},r}(),o=function(n){function t(r){var t;return (t=n.call(this)||this).value=r,t.isOk=!0,t.isErr=!1,t}return r(t,n),t.prototype._chain=function(r,n){return r(this.value)},t}(t),e=function(n){function t(r){var t;return (t=n.call(this)||this).error=r,t.isOk=!1,t.isErr=!0,t}return r(t,n),t.prototype._chain=function(r,n){return n(this.error)},t}(t);!function(r){r.ok=function(r){return new o(r)},r.err=function(r){return new e(r||new Error)},r.all=function(n){if(Array.isArray(n)){for(var t=[],o=0;o<n.length;o++){var e=n[o];if(e.isErr)return e;t.push(e.value);}return r.ok(t)}for(var u={},i=Object.keys(n),c=0;c<i.length;c++){var a=n[i[c]];if(a.isErr)return a;u[i[c]]=a.value;}return r.ok(u)};}(n||(n={}));

    var IllegalSetup;
    (function (IllegalSetup) {
        IllegalSetup["Empty"] = "ERR_EMPTY";
        IllegalSetup["OppositeCheck"] = "ERR_OPPOSITE_CHECK";
        IllegalSetup["ImpossibleCheck"] = "ERR_IMPOSSIBLE_CHECK";
        IllegalSetup["PawnsOnBackrank"] = "ERR_PAWNS_ON_BACKRANK";
        IllegalSetup["Kings"] = "ERR_KINGS";
        IllegalSetup["Variant"] = "ERR_VARIANT";
    })(IllegalSetup || (IllegalSetup = {}));
    class PositionError extends Error {
    }
    function attacksTo(square, attacker, board, occupied) {
        return board[attacker].intersect(rookAttacks(square, occupied)
            .intersect(board.rooksAndQueens())
            .union(bishopAttacks(square, occupied).intersect(board.bishopsAndQueens()))
            .union(knightAttacks(square).intersect(board.knight))
            .union(kingAttacks(square).intersect(board.king))
            .union(pawnAttacks(opposite$1(attacker), square).intersect(board.pawn)));
    }
    function rookCastlesTo(color, side) {
        return color === 'white' ? (side === 'a' ? 3 : 5) : side === 'a' ? 59 : 61;
    }
    class Castles {
        constructor() { }
        static default() {
            const castles = new Castles();
            castles.unmovedRooks = SquareSet.corners();
            castles.rook = {
                white: { a: 0, h: 7 },
                black: { a: 56, h: 63 },
            };
            castles.path = {
                white: { a: new SquareSet(0xe, 0), h: new SquareSet(0x60, 0) },
                black: { a: new SquareSet(0, 0x0e000000), h: new SquareSet(0, 0x60000000) },
            };
            return castles;
        }
        static empty() {
            const castles = new Castles();
            castles.unmovedRooks = SquareSet.empty();
            castles.rook = {
                white: { a: undefined, h: undefined },
                black: { a: undefined, h: undefined },
            };
            castles.path = {
                white: { a: SquareSet.empty(), h: SquareSet.empty() },
                black: { a: SquareSet.empty(), h: SquareSet.empty() },
            };
            return castles;
        }
        clone() {
            const castles = new Castles();
            castles.unmovedRooks = this.unmovedRooks;
            castles.rook = {
                white: { a: this.rook.white.a, h: this.rook.white.h },
                black: { a: this.rook.black.a, h: this.rook.black.h },
            };
            castles.path = {
                white: { a: this.path.white.a, h: this.path.white.h },
                black: { a: this.path.black.a, h: this.path.black.h },
            };
            return castles;
        }
        add(color, side, king, rook) {
            const kingTo = kingCastlesTo(color, side);
            const rookTo = rookCastlesTo(color, side);
            this.unmovedRooks = this.unmovedRooks.with(rook);
            this.rook[color][side] = rook;
            this.path[color][side] = between(rook, rookTo)
                .with(rookTo)
                .union(between(king, kingTo).with(kingTo))
                .without(king)
                .without(rook);
        }
        static fromSetup(setup) {
            const castles = Castles.empty();
            const rooks = setup.unmovedRooks.intersect(setup.board.rook);
            for (const color of COLORS) {
                const backrank = SquareSet.backrank(color);
                const king = setup.board.kingOf(color);
                if (!defined(king) || !backrank.has(king))
                    continue;
                const side = rooks.intersect(setup.board[color]).intersect(backrank);
                const aSide = side.first();
                if (defined(aSide) && aSide < king)
                    castles.add(color, 'a', king, aSide);
                const hSide = side.last();
                if (defined(hSide) && king < hSide)
                    castles.add(color, 'h', king, hSide);
            }
            return castles;
        }
        discardRook(square) {
            if (this.unmovedRooks.has(square)) {
                this.unmovedRooks = this.unmovedRooks.without(square);
                for (const color of COLORS) {
                    for (const side of CASTLING_SIDES) {
                        if (this.rook[color][side] === square)
                            this.rook[color][side] = undefined;
                    }
                }
            }
        }
        discardSide(color) {
            this.unmovedRooks = this.unmovedRooks.diff(SquareSet.backrank(color));
            this.rook[color].a = undefined;
            this.rook[color].h = undefined;
        }
    }
    class Position {
        constructor(rules) {
            this.rules = rules;
        }
        kingAttackers(square, attacker, occupied) {
            return attacksTo(square, attacker, this.board, occupied);
        }
        dropDests(_ctx) {
            return SquareSet.empty();
        }
        playCaptureAt(square, captured) {
            this.halfmoves = 0;
            if (captured.role === 'rook')
                this.castles.discardRook(square);
            if (this.pockets)
                this.pockets[opposite$1(captured.color)][captured.role]++;
        }
        ctx() {
            const variantEnd = this.isVariantEnd();
            const king = this.board.kingOf(this.turn);
            if (!defined(king))
                return { king, blockers: SquareSet.empty(), checkers: SquareSet.empty(), variantEnd, mustCapture: false };
            const snipers = rookAttacks(king, SquareSet.empty())
                .intersect(this.board.rooksAndQueens())
                .union(bishopAttacks(king, SquareSet.empty()).intersect(this.board.bishopsAndQueens()))
                .intersect(this.board[opposite$1(this.turn)]);
            let blockers = SquareSet.empty();
            for (const sniper of snipers) {
                const b = between(king, sniper).intersect(this.board.occupied);
                if (!b.moreThanOne())
                    blockers = blockers.union(b);
            }
            const checkers = this.kingAttackers(king, opposite$1(this.turn), this.board.occupied);
            return {
                king,
                blockers,
                checkers,
                variantEnd,
                mustCapture: false,
            };
        }
        // The following should be identical in all subclasses
        clone() {
            var _a, _b;
            const pos = new this.constructor();
            pos.board = this.board.clone();
            pos.pockets = (_a = this.pockets) === null || _a === void 0 ? void 0 : _a.clone();
            pos.turn = this.turn;
            pos.castles = this.castles.clone();
            pos.epSquare = this.epSquare;
            pos.remainingChecks = (_b = this.remainingChecks) === null || _b === void 0 ? void 0 : _b.clone();
            pos.halfmoves = this.halfmoves;
            pos.fullmoves = this.fullmoves;
            return pos;
        }
        equalsIgnoreMoves(other) {
            var _a, _b;
            return (this.rules === other.rules &&
                (this.pockets ? this.board.equals(other.board) : this.board.equalsIgnorePromoted(other.board)) &&
                ((other.pockets && ((_a = this.pockets) === null || _a === void 0 ? void 0 : _a.equals(other.pockets))) || (!this.pockets && !other.pockets)) &&
                this.turn === other.turn &&
                this.castles.unmovedRooks.equals(other.castles.unmovedRooks) &&
                this.legalEpSquare() === other.legalEpSquare() &&
                ((other.remainingChecks && ((_b = this.remainingChecks) === null || _b === void 0 ? void 0 : _b.equals(other.remainingChecks))) ||
                    (!this.remainingChecks && !other.remainingChecks)));
        }
        toSetup() {
            var _a, _b;
            return {
                board: this.board.clone(),
                pockets: (_a = this.pockets) === null || _a === void 0 ? void 0 : _a.clone(),
                turn: this.turn,
                unmovedRooks: this.castles.unmovedRooks,
                epSquare: this.legalEpSquare(),
                remainingChecks: (_b = this.remainingChecks) === null || _b === void 0 ? void 0 : _b.clone(),
                halfmoves: Math.min(this.halfmoves, 150),
                fullmoves: Math.min(Math.max(this.fullmoves, 1), 9999),
            };
        }
        isInsufficientMaterial() {
            return COLORS.every(color => this.hasInsufficientMaterial(color));
        }
        hasDests(ctx) {
            ctx = ctx || this.ctx();
            for (const square of this.board[this.turn]) {
                if (this.dests(square, ctx).nonEmpty())
                    return true;
            }
            return this.dropDests(ctx).nonEmpty();
        }
        isLegal(move, ctx) {
            if (isDrop(move)) {
                if (!this.pockets || this.pockets[this.turn][move.role] <= 0)
                    return false;
                if (move.role === 'pawn' && SquareSet.backranks().has(move.to))
                    return false;
                return this.dropDests(ctx).has(move.to);
            }
            else {
                if (move.promotion === 'pawn')
                    return false;
                if (move.promotion === 'king' && this.rules !== 'antichess')
                    return false;
                if (!!move.promotion !== (this.board.pawn.has(move.from) && SquareSet.backranks().has(move.to)))
                    return false;
                const dests = this.dests(move.from, ctx);
                return dests.has(move.to) || dests.has(this.normalizeMove(move).to);
            }
        }
        isCheck() {
            const king = this.board.kingOf(this.turn);
            return defined(king) && this.kingAttackers(king, opposite$1(this.turn), this.board.occupied).nonEmpty();
        }
        isEnd(ctx) {
            if (ctx ? ctx.variantEnd : this.isVariantEnd())
                return true;
            return this.isInsufficientMaterial() || !this.hasDests(ctx);
        }
        isCheckmate(ctx) {
            ctx = ctx || this.ctx();
            return !ctx.variantEnd && ctx.checkers.nonEmpty() && !this.hasDests(ctx);
        }
        isStalemate(ctx) {
            ctx = ctx || this.ctx();
            return !ctx.variantEnd && ctx.checkers.isEmpty() && !this.hasDests(ctx);
        }
        outcome(ctx) {
            const variantOutcome = this.variantOutcome(ctx);
            if (variantOutcome)
                return variantOutcome;
            ctx = ctx || this.ctx();
            if (this.isCheckmate(ctx))
                return { winner: opposite$1(this.turn) };
            else if (this.isInsufficientMaterial() || this.isStalemate(ctx))
                return { winner: undefined };
            else
                return;
        }
        allDests(ctx) {
            ctx = ctx || this.ctx();
            const d = new Map();
            if (ctx.variantEnd)
                return d;
            for (const square of this.board[this.turn]) {
                d.set(square, this.dests(square, ctx));
            }
            return d;
        }
        castlingSide(move) {
            if (isDrop(move))
                return;
            const delta = move.to - move.from;
            if (Math.abs(delta) !== 2 && !this.board[this.turn].has(move.to))
                return;
            if (!this.board.king.has(move.from))
                return;
            return delta > 0 ? 'h' : 'a';
        }
        normalizeMove(move) {
            const castlingSide = this.castlingSide(move);
            if (!castlingSide)
                return move;
            const rookFrom = this.castles.rook[this.turn][castlingSide];
            return {
                from: move.from,
                to: defined(rookFrom) ? rookFrom : move.to,
            };
        }
        play(move) {
            const turn = this.turn;
            const epSquare = this.epSquare;
            const castlingSide = this.castlingSide(move);
            this.epSquare = undefined;
            this.halfmoves += 1;
            if (turn === 'black')
                this.fullmoves += 1;
            this.turn = opposite$1(turn);
            if (isDrop(move)) {
                this.board.set(move.to, { role: move.role, color: turn });
                if (this.pockets)
                    this.pockets[turn][move.role]--;
                if (move.role === 'pawn')
                    this.halfmoves = 0;
            }
            else {
                const piece = this.board.take(move.from);
                if (!piece)
                    return;
                let epCapture;
                if (piece.role === 'pawn') {
                    this.halfmoves = 0;
                    if (move.to === epSquare) {
                        epCapture = this.board.take(move.to + (turn === 'white' ? -8 : 8));
                    }
                    const delta = move.from - move.to;
                    if (Math.abs(delta) === 16 && 8 <= move.from && move.from <= 55) {
                        this.epSquare = (move.from + move.to) >> 1;
                    }
                    if (move.promotion) {
                        piece.role = move.promotion;
                        piece.promoted = true;
                    }
                }
                else if (piece.role === 'rook') {
                    this.castles.discardRook(move.from);
                }
                else if (piece.role === 'king') {
                    if (castlingSide) {
                        const rookFrom = this.castles.rook[turn][castlingSide];
                        if (defined(rookFrom)) {
                            const rook = this.board.take(rookFrom);
                            this.board.set(kingCastlesTo(turn, castlingSide), piece);
                            if (rook)
                                this.board.set(rookCastlesTo(turn, castlingSide), rook);
                        }
                    }
                    this.castles.discardSide(turn);
                }
                if (!castlingSide) {
                    const capture = this.board.set(move.to, piece) || epCapture;
                    if (capture)
                        this.playCaptureAt(move.to, capture);
                }
            }
            if (this.remainingChecks) {
                if (this.isCheck())
                    this.remainingChecks[turn] = Math.max(this.remainingChecks[turn] - 1, 0);
            }
        }
        legalEpSquare(ctx) {
            if (!defined(this.epSquare))
                return;
            ctx = ctx || this.ctx();
            const ourPawns = this.board.pieces(this.turn, 'pawn');
            const candidates = ourPawns.intersect(pawnAttacks(opposite$1(this.turn), this.epSquare));
            for (const candidate of candidates) {
                if (this.dests(candidate, ctx).has(this.epSquare))
                    return this.epSquare;
            }
            return;
        }
    }
    class Chess extends Position {
        constructor(rules) {
            super(rules || 'chess');
        }
        static default() {
            const pos = new this();
            pos.board = Board.default();
            pos.pockets = undefined;
            pos.turn = 'white';
            pos.castles = Castles.default();
            pos.epSquare = undefined;
            pos.remainingChecks = undefined;
            pos.halfmoves = 0;
            pos.fullmoves = 1;
            return pos;
        }
        static fromSetup(setup, opts) {
            const pos = new this();
            pos.board = setup.board.clone();
            pos.pockets = undefined;
            pos.turn = setup.turn;
            pos.castles = Castles.fromSetup(setup);
            pos.epSquare = pos.validEpSquare(setup.epSquare);
            pos.remainingChecks = undefined;
            pos.halfmoves = setup.halfmoves;
            pos.fullmoves = setup.fullmoves;
            return pos.validate(opts).map(_ => pos);
        }
        clone() {
            return super.clone();
        }
        validate(opts) {
            if (this.board.occupied.isEmpty())
                return n.err(new PositionError(IllegalSetup.Empty));
            if (this.board.king.size() !== 2)
                return n.err(new PositionError(IllegalSetup.Kings));
            if (!defined(this.board.kingOf(this.turn)))
                return n.err(new PositionError(IllegalSetup.Kings));
            const otherKing = this.board.kingOf(opposite$1(this.turn));
            if (!defined(otherKing))
                return n.err(new PositionError(IllegalSetup.Kings));
            if (this.kingAttackers(otherKing, this.turn, this.board.occupied).nonEmpty())
                return n.err(new PositionError(IllegalSetup.OppositeCheck));
            if (SquareSet.backranks().intersects(this.board.pawn))
                return n.err(new PositionError(IllegalSetup.PawnsOnBackrank));
            return (opts === null || opts === void 0 ? void 0 : opts.ignoreImpossibleCheck) ? n.ok(undefined) : this.validateCheckers();
        }
        validateCheckers() {
            const ourKing = this.board.kingOf(this.turn);
            if (defined(ourKing)) {
                const checkers = this.kingAttackers(ourKing, opposite$1(this.turn), this.board.occupied);
                if (checkers.nonEmpty()) {
                    if (defined(this.epSquare)) {
                        // The pushed pawn must be the only checker, or it has uncovered
                        // check by a single sliding piece.
                        const pushedTo = this.epSquare ^ 8;
                        const pushedFrom = this.epSquare ^ 24;
                        if (checkers.moreThanOne() ||
                            (checkers.first() != pushedTo &&
                                this.kingAttackers(ourKing, opposite$1(this.turn), this.board.occupied.without(pushedTo).with(pushedFrom)).nonEmpty()))
                            return n.err(new PositionError(IllegalSetup.ImpossibleCheck));
                    }
                    else {
                        // Multiple sliding checkers aligned with king.
                        if (checkers.size() > 2 || (checkers.size() === 2 && ray(checkers.first(), checkers.last()).has(ourKing)))
                            return n.err(new PositionError(IllegalSetup.ImpossibleCheck));
                    }
                }
            }
            return n.ok(undefined);
        }
        validEpSquare(square) {
            if (!defined(square))
                return;
            const epRank = this.turn === 'white' ? 5 : 2;
            const forward = this.turn === 'white' ? 8 : -8;
            if (squareRank(square) !== epRank)
                return;
            if (this.board.occupied.has(square + forward))
                return;
            const pawn = square - forward;
            if (!this.board.pawn.has(pawn) || !this.board[opposite$1(this.turn)].has(pawn))
                return;
            return square;
        }
        castlingDest(side, ctx) {
            if (!defined(ctx.king) || ctx.checkers.nonEmpty())
                return SquareSet.empty();
            const rook = this.castles.rook[this.turn][side];
            if (!defined(rook))
                return SquareSet.empty();
            if (this.castles.path[this.turn][side].intersects(this.board.occupied))
                return SquareSet.empty();
            const kingTo = kingCastlesTo(this.turn, side);
            const kingPath = between(ctx.king, kingTo);
            const occ = this.board.occupied.without(ctx.king);
            for (const sq of kingPath) {
                if (this.kingAttackers(sq, opposite$1(this.turn), occ).nonEmpty())
                    return SquareSet.empty();
            }
            const rookTo = rookCastlesTo(this.turn, side);
            const after = this.board.occupied.toggle(ctx.king).toggle(rook).toggle(rookTo);
            if (this.kingAttackers(kingTo, opposite$1(this.turn), after).nonEmpty())
                return SquareSet.empty();
            return SquareSet.fromSquare(rook);
        }
        canCaptureEp(pawn, ctx) {
            if (!defined(this.epSquare))
                return false;
            if (!pawnAttacks(this.turn, pawn).has(this.epSquare))
                return false;
            if (!defined(ctx.king))
                return true;
            const captured = this.epSquare + (this.turn === 'white' ? -8 : 8);
            const occupied = this.board.occupied.toggle(pawn).toggle(this.epSquare).toggle(captured);
            return !this.kingAttackers(ctx.king, opposite$1(this.turn), occupied).intersects(occupied);
        }
        pseudoDests(square, ctx) {
            if (ctx.variantEnd)
                return SquareSet.empty();
            const piece = this.board.get(square);
            if (!piece || piece.color !== this.turn)
                return SquareSet.empty();
            let pseudo = attacks(piece, square, this.board.occupied);
            if (piece.role === 'pawn') {
                let captureTargets = this.board[opposite$1(this.turn)];
                if (defined(this.epSquare))
                    captureTargets = captureTargets.with(this.epSquare);
                pseudo = pseudo.intersect(captureTargets);
                const delta = this.turn === 'white' ? 8 : -8;
                const step = square + delta;
                if (0 <= step && step < 64 && !this.board.occupied.has(step)) {
                    pseudo = pseudo.with(step);
                    const canDoubleStep = this.turn === 'white' ? square < 16 : square >= 64 - 16;
                    const doubleStep = step + delta;
                    if (canDoubleStep && !this.board.occupied.has(doubleStep)) {
                        pseudo = pseudo.with(doubleStep);
                    }
                }
                return pseudo;
            }
            else {
                pseudo = pseudo.diff(this.board[this.turn]);
            }
            if (square === ctx.king)
                return pseudo.union(this.castlingDest('a', ctx)).union(this.castlingDest('h', ctx));
            else
                return pseudo;
        }
        dests(square, ctx) {
            ctx = ctx || this.ctx();
            if (ctx.variantEnd)
                return SquareSet.empty();
            const piece = this.board.get(square);
            if (!piece || piece.color !== this.turn)
                return SquareSet.empty();
            let pseudo, legal;
            if (piece.role === 'pawn') {
                pseudo = pawnAttacks(this.turn, square).intersect(this.board[opposite$1(this.turn)]);
                const delta = this.turn === 'white' ? 8 : -8;
                const step = square + delta;
                if (0 <= step && step < 64 && !this.board.occupied.has(step)) {
                    pseudo = pseudo.with(step);
                    const canDoubleStep = this.turn === 'white' ? square < 16 : square >= 64 - 16;
                    const doubleStep = step + delta;
                    if (canDoubleStep && !this.board.occupied.has(doubleStep)) {
                        pseudo = pseudo.with(doubleStep);
                    }
                }
                if (defined(this.epSquare) && this.canCaptureEp(square, ctx)) {
                    const pawn = this.epSquare - delta;
                    if (ctx.checkers.isEmpty() || ctx.checkers.singleSquare() === pawn) {
                        legal = SquareSet.fromSquare(this.epSquare);
                    }
                }
            }
            else if (piece.role === 'bishop')
                pseudo = bishopAttacks(square, this.board.occupied);
            else if (piece.role === 'knight')
                pseudo = knightAttacks(square);
            else if (piece.role === 'rook')
                pseudo = rookAttacks(square, this.board.occupied);
            else if (piece.role === 'queen')
                pseudo = queenAttacks(square, this.board.occupied);
            else
                pseudo = kingAttacks(square);
            pseudo = pseudo.diff(this.board[this.turn]);
            if (defined(ctx.king)) {
                if (piece.role === 'king') {
                    const occ = this.board.occupied.without(square);
                    for (const to of pseudo) {
                        if (this.kingAttackers(to, opposite$1(this.turn), occ).nonEmpty())
                            pseudo = pseudo.without(to);
                    }
                    return pseudo.union(this.castlingDest('a', ctx)).union(this.castlingDest('h', ctx));
                }
                if (ctx.checkers.nonEmpty()) {
                    const checker = ctx.checkers.singleSquare();
                    if (!defined(checker))
                        return SquareSet.empty();
                    pseudo = pseudo.intersect(between(checker, ctx.king).with(checker));
                }
                if (ctx.blockers.has(square))
                    pseudo = pseudo.intersect(ray(square, ctx.king));
            }
            if (legal)
                pseudo = pseudo.union(legal);
            return pseudo;
        }
        isVariantEnd() {
            return false;
        }
        variantOutcome(_ctx) {
            return;
        }
        hasInsufficientMaterial(color) {
            if (this.board[color].intersect(this.board.pawn.union(this.board.rooksAndQueens())).nonEmpty())
                return false;
            if (this.board[color].intersects(this.board.knight)) {
                return (this.board[color].size() <= 2 &&
                    this.board[opposite$1(color)].diff(this.board.king).diff(this.board.queen).isEmpty());
            }
            if (this.board[color].intersects(this.board.bishop)) {
                const sameColor = !this.board.bishop.intersects(SquareSet.darkSquares()) ||
                    !this.board.bishop.intersects(SquareSet.lightSquares());
                return sameColor && this.board.pawn.isEmpty() && this.board.knight.isEmpty();
            }
            return true;
        }
    }

    function chessgroundDests(pos, opts) {
        const result = new Map();
        const ctx = pos.ctx();
        for (const [from, squares] of pos.allDests(ctx)) {
            if (squares.nonEmpty()) {
                const d = Array.from(squares, makeSquare);
                if (!(opts === null || opts === void 0 ? void 0 : opts.chess960) && from === ctx.king && squareFile(from) === 4) {
                    // Chessground needs both types of castling dests and filters based on
                    // a rookCastles setting.
                    if (squares.has(0))
                        d.push('c1');
                    else if (squares.has(56))
                        d.push('c8');
                    if (squares.has(7))
                        d.push('g1');
                    else if (squares.has(63))
                        d.push('g8');
                }
                result.set(makeSquare(from), d);
            }
        }
        return result;
    }

    var InvalidFen;
    (function (InvalidFen) {
        InvalidFen["Fen"] = "ERR_FEN";
        InvalidFen["Board"] = "ERR_BOARD";
        InvalidFen["Pockets"] = "ERR_POCKETS";
        InvalidFen["Turn"] = "ERR_TURN";
        InvalidFen["Castling"] = "ERR_CASTLING";
        InvalidFen["EpSquare"] = "ERR_EP_SQUARE";
        InvalidFen["RemainingChecks"] = "ERR_REMAINING_CHECKS";
        InvalidFen["Halfmoves"] = "ERR_HALFMOVES";
        InvalidFen["Fullmoves"] = "ERR_FULLMOVES";
    })(InvalidFen || (InvalidFen = {}));
    class FenError extends Error {
    }
    function nthIndexOf(haystack, needle, n) {
        let index = haystack.indexOf(needle);
        while (n-- > 0) {
            if (index === -1)
                break;
            index = haystack.indexOf(needle, index + needle.length);
        }
        return index;
    }
    function parseSmallUint(str) {
        return /^\d{1,4}$/.test(str) ? parseInt(str, 10) : undefined;
    }
    function charToPiece(ch) {
        const role = charToRole(ch);
        return role && { role, color: ch.toLowerCase() === ch ? 'black' : 'white' };
    }
    function parseBoardFen(boardPart) {
        const board = Board.empty();
        let rank = 7;
        let file = 0;
        for (let i = 0; i < boardPart.length; i++) {
            const c = boardPart[i];
            if (c === '/' && file === 8) {
                file = 0;
                rank--;
            }
            else {
                const step = parseInt(c, 10);
                if (step > 0)
                    file += step;
                else {
                    if (file >= 8 || rank < 0)
                        return n.err(new FenError(InvalidFen.Board));
                    const square = file + rank * 8;
                    const piece = charToPiece(c);
                    if (!piece)
                        return n.err(new FenError(InvalidFen.Board));
                    if (boardPart[i + 1] === '~') {
                        piece.promoted = true;
                        i++;
                    }
                    board.set(square, piece);
                    file++;
                }
            }
        }
        if (rank !== 0 || file !== 8)
            return n.err(new FenError(InvalidFen.Board));
        return n.ok(board);
    }
    function parsePockets(pocketPart) {
        if (pocketPart.length > 64)
            return n.err(new FenError(InvalidFen.Pockets));
        const pockets = Material.empty();
        for (const c of pocketPart) {
            const piece = charToPiece(c);
            if (!piece)
                return n.err(new FenError(InvalidFen.Pockets));
            pockets[piece.color][piece.role]++;
        }
        return n.ok(pockets);
    }
    function parseCastlingFen(board, castlingPart) {
        let unmovedRooks = SquareSet.empty();
        if (castlingPart === '-')
            return n.ok(unmovedRooks);
        for (const c of castlingPart) {
            const lower = c.toLowerCase();
            const color = c === lower ? 'black' : 'white';
            const backrank = SquareSet.backrank(color).intersect(board[color]);
            let candidates;
            if (lower === 'q')
                candidates = backrank;
            else if (lower === 'k')
                candidates = backrank.reversed();
            else if ('a' <= lower && lower <= 'h')
                candidates = SquareSet.fromSquare(lower.charCodeAt(0) - 'a'.charCodeAt(0)).intersect(backrank);
            else
                return n.err(new FenError(InvalidFen.Castling));
            for (const square of candidates) {
                if (board.king.has(square) && !board.promoted.has(square))
                    break;
                if (board.rook.has(square)) {
                    unmovedRooks = unmovedRooks.with(square);
                    break;
                }
            }
        }
        if (COLORS.some(color => SquareSet.backrank(color).intersect(unmovedRooks).size() > 2))
            return n.err(new FenError(InvalidFen.Castling));
        return n.ok(unmovedRooks);
    }
    function parseRemainingChecks(part) {
        const parts = part.split('+');
        if (parts.length === 3 && parts[0] === '') {
            const white = parseSmallUint(parts[1]);
            const black = parseSmallUint(parts[2]);
            if (!defined(white) || white > 3 || !defined(black) || black > 3)
                return n.err(new FenError(InvalidFen.RemainingChecks));
            return n.ok(new RemainingChecks(3 - white, 3 - black));
        }
        else if (parts.length === 2) {
            const white = parseSmallUint(parts[0]);
            const black = parseSmallUint(parts[1]);
            if (!defined(white) || white > 3 || !defined(black) || black > 3)
                return n.err(new FenError(InvalidFen.RemainingChecks));
            return n.ok(new RemainingChecks(white, black));
        }
        else
            return n.err(new FenError(InvalidFen.RemainingChecks));
    }
    function parseFen(fen) {
        const parts = fen.split(/[\s_]+/);
        const boardPart = parts.shift();
        // Board and pockets
        let board, pockets = n.ok(undefined);
        if (boardPart.endsWith(']')) {
            const pocketStart = boardPart.indexOf('[');
            if (pocketStart === -1)
                return n.err(new FenError(InvalidFen.Fen));
            board = parseBoardFen(boardPart.substr(0, pocketStart));
            pockets = parsePockets(boardPart.substr(pocketStart + 1, boardPart.length - 1 - pocketStart - 1));
        }
        else {
            const pocketStart = nthIndexOf(boardPart, '/', 7);
            if (pocketStart === -1)
                board = parseBoardFen(boardPart);
            else {
                board = parseBoardFen(boardPart.substr(0, pocketStart));
                pockets = parsePockets(boardPart.substr(pocketStart + 1));
            }
        }
        // Turn
        let turn;
        const turnPart = parts.shift();
        if (!defined(turnPart) || turnPart === 'w')
            turn = 'white';
        else if (turnPart === 'b')
            turn = 'black';
        else
            return n.err(new FenError(InvalidFen.Turn));
        return board.chain(board => {
            // Castling
            const castlingPart = parts.shift();
            const unmovedRooks = defined(castlingPart) ? parseCastlingFen(board, castlingPart) : n.ok(SquareSet.empty());
            // En passant square
            const epPart = parts.shift();
            let epSquare;
            if (defined(epPart) && epPart !== '-') {
                epSquare = parseSquare(epPart);
                if (!defined(epSquare))
                    return n.err(new FenError(InvalidFen.EpSquare));
            }
            // Halfmoves or remaining checks
            let halfmovePart = parts.shift();
            let earlyRemainingChecks;
            if (defined(halfmovePart) && halfmovePart.includes('+')) {
                earlyRemainingChecks = parseRemainingChecks(halfmovePart);
                halfmovePart = parts.shift();
            }
            const halfmoves = defined(halfmovePart) ? parseSmallUint(halfmovePart) : 0;
            if (!defined(halfmoves))
                return n.err(new FenError(InvalidFen.Halfmoves));
            const fullmovesPart = parts.shift();
            const fullmoves = defined(fullmovesPart) ? parseSmallUint(fullmovesPart) : 1;
            if (!defined(fullmoves))
                return n.err(new FenError(InvalidFen.Fullmoves));
            const remainingChecksPart = parts.shift();
            let remainingChecks = n.ok(undefined);
            if (defined(remainingChecksPart)) {
                if (defined(earlyRemainingChecks))
                    return n.err(new FenError(InvalidFen.RemainingChecks));
                remainingChecks = parseRemainingChecks(remainingChecksPart);
            }
            else if (defined(earlyRemainingChecks)) {
                remainingChecks = earlyRemainingChecks;
            }
            if (parts.length > 0)
                return n.err(new FenError(InvalidFen.Fen));
            return pockets.chain(pockets => unmovedRooks.chain(unmovedRooks => remainingChecks.map(remainingChecks => {
                return {
                    board,
                    pockets,
                    turn,
                    unmovedRooks,
                    remainingChecks,
                    epSquare,
                    halfmoves,
                    fullmoves: Math.max(1, fullmoves),
                };
            })));
        });
    }
    function makePiece$1(piece, opts) {
        let r = roleToChar(piece.role);
        if (piece.color === 'white')
            r = r.toUpperCase();
        if ((opts === null || opts === void 0 ? void 0 : opts.promoted) && piece.promoted)
            r += '~';
        return r;
    }
    function makeBoardFen(board, opts) {
        let fen = '';
        let empty = 0;
        for (let rank = 7; rank >= 0; rank--) {
            for (let file = 0; file < 8; file++) {
                const square = file + rank * 8;
                const piece = board.get(square);
                if (!piece)
                    empty++;
                else {
                    if (empty > 0) {
                        fen += empty;
                        empty = 0;
                    }
                    fen += makePiece$1(piece, opts);
                }
                if (file === 7) {
                    if (empty > 0) {
                        fen += empty;
                        empty = 0;
                    }
                    if (rank !== 0)
                        fen += '/';
                }
            }
        }
        return fen;
    }
    function makePocket(material) {
        return ROLES.map(role => roleToChar(role).repeat(material[role])).join('');
    }
    function makePockets(pocket) {
        return makePocket(pocket.white).toUpperCase() + makePocket(pocket.black);
    }
    function makeCastlingFen(board, unmovedRooks, opts) {
        const shredder = opts === null || opts === void 0 ? void 0 : opts.shredder;
        let fen = '';
        for (const color of COLORS) {
            const backrank = SquareSet.backrank(color);
            const king = board.kingOf(color);
            if (!defined(king) || !backrank.has(king))
                continue;
            const candidates = board.pieces(color, 'rook').intersect(backrank);
            for (const rook of unmovedRooks.intersect(candidates).reversed()) {
                if (!shredder && rook === candidates.first() && rook < king) {
                    fen += color === 'white' ? 'Q' : 'q';
                }
                else if (!shredder && rook === candidates.last() && king < rook) {
                    fen += color === 'white' ? 'K' : 'k';
                }
                else {
                    const file = FILE_NAMES[squareFile(rook)];
                    fen += color === 'white' ? file.toUpperCase() : file;
                }
            }
        }
        return fen || '-';
    }
    function makeRemainingChecks(checks) {
        return `${checks.white}+${checks.black}`;
    }
    function makeFen(setup, opts) {
        return [
            makeBoardFen(setup.board, opts) + (setup.pockets ? `[${makePockets(setup.pockets)}]` : ''),
            setup.turn[0],
            makeCastlingFen(setup.board, setup.unmovedRooks, opts),
            defined(setup.epSquare) ? makeSquare(setup.epSquare) : '-',
            ...(setup.remainingChecks ? [makeRemainingChecks(setup.remainingChecks)] : []),
            ...((opts === null || opts === void 0 ? void 0 : opts.epd) ? [] : [Math.max(0, Math.min(setup.halfmoves, 9999)), Math.max(1, Math.min(setup.fullmoves, 9999))]),
        ].join(' ');
    }

    class GameCtrl {
        constructor(game, stream, root) {
            var _b;
            this.stream = stream;
            this.root = root;
            this.chess = Chess.default();
            this.lastUpdateAt = Date.now();
            this.onUnmount = () => {
                this.stream.close();
                clearInterval(this.redrawInterval);
            };
            this.onUpdate = () => {
                var _b, _c;
                const setup = this.game.initialFen == 'startpos' ? defaultSetup() : parseFen(this.game.initialFen).unwrap();
                this.chess = Chess.fromSetup(setup).unwrap();
                const moves = this.game.state.moves.split(' ').filter((m) => m);
                moves.forEach((uci) => this.chess.play(parseUci(uci)));
                const lastMove = moves[moves.length - 1];
                this.lastMove = lastMove && [lastMove.substr(0, 2), lastMove.substr(2, 2)];
                this.lastUpdateAt = Date.now();
                (_b = this.ground) === null || _b === void 0 ? void 0 : _b.set(this.chessgroundConfig());
                if (this.chess.turn == this.pov)
                    (_c = this.ground) === null || _c === void 0 ? void 0 : _c.playPremove();
            };
            this.timeOf = (color) => this.game.state[`${color[0]}time`];
            this.userMove = async (orig, dest) => {
                var _b;
                (_b = this.ground) === null || _b === void 0 ? void 0 : _b.set({ turnColor: opposite$1(this.pov) });
                await this.root.auth.fetchBody(`/api/board/game/${this.game.id}/move/${orig}${dest}`, { method: 'post' });
            };
            this.resign = async () => {
                await this.root.auth.fetchBody(`/api/board/game/${this.game.id}/resign`, { method: 'post' });
            };
            this.playing = () => this.game.state.status == 'started';
            this.chessgroundConfig = () => ({
                orientation: this.pov,
                fen: makeFen(this.chess.toSetup()),
                lastMove: this.lastMove,
                turnColor: this.chess.turn,
                check: !!this.chess.isCheck(),
                movable: {
                    free: false,
                    color: this.playing() ? this.pov : undefined,
                    dests: chessgroundDests(this.chess),
                },
                events: {
                    move: this.userMove,
                },
            });
            this.setGround = (cg) => (this.ground = cg);
            this.handle = (msg) => {
                switch (msg.type) {
                    case 'gameFull':
                        this.game = msg;
                        this.onUpdate();
                        this.root.redraw();
                        break;
                    case 'gameState':
                        this.game.state = msg;
                        this.onUpdate();
                        this.root.redraw();
                        break;
                    default:
                        console.error(`Unknown message type: ${msg.type}`, msg);
                }
            };
            this.game = game;
            this.pov = this.game.black.id == ((_b = this.root.auth.me) === null || _b === void 0 ? void 0 : _b.id) ? 'black' : 'white';
            this.onUpdate();
            this.redrawInterval = setInterval(root.redraw, 100);
        }
    }
    GameCtrl.open = (root, id) => new Promise(async (resolve) => {
        let ctrl;
        let stream;
        const handler = (msg) => {
            if (ctrl)
                ctrl.handle(msg);
            else {
                // Gets the gameFull object from the first message of the stream,
                // make a GameCtrl from it, then forward the next messages to the ctrl
                ctrl = new GameCtrl(msg, stream, root);
                resolve(ctrl);
            }
        };
        stream = await root.auth.openStream(`/api/board/game/stream/${id}`, {}, handler);
    });

    const formData = (data) => {
        const formData = new FormData();
        for (const k of Object.keys(data))
            formData.append(k, data[k]);
        return formData;
    };

    class OngoingGames {
        constructor() {
            this.games = [];
            this.autoStart = new Set();
            this.onStart = (game) => {
                this.remove(game);
                if (game.compat.board) {
                    this.games.push(game);
                    if (!this.autoStart.has(game.id)) {
                        if (!game.hasMoved)
                            page_js(`/game/${game.gameId}`);
                    }
                    this.autoStart.add(game.id);
                }
                else
                    console.log(`Skipping game ${game.gameId}, not board compatible`);
            };
            this.onFinish = (game) => this.remove(game);
            this.empty = () => {
                this.games = [];
            };
            this.remove = (game) => {
                this.games = this.games.filter(g => g.gameId != game.id);
            };
        }
    }

    /** @internal Last-resort "this", if it gets here it probably would fail anyway */
    function evaluateThis(fn) {
        return fn('return this');
    }
    /**
     * A cross-environment implementation for globalThis
     */
    const xglobal =  (typeof globalThis !== 'undefined'
        ? globalThis
        : typeof global !== 'undefined'
            ? global
            : typeof self !== 'undefined'
                ? self
                : typeof window !== 'undefined'
                    ? window
                    : evaluateThis(Function));
    /**
     * Extracts a known global from the environment, applying a fallback if not found
     */
    function extractGlobal(name, fallback) {
        // Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea
        // (as of now) as to why this looks like an "any" when we do cast it to a T
        //
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return typeof xglobal[name] === 'undefined'
            ? fallback
            : xglobal[name];
    }

    /**
     * @name isFunction
     * @summary Tests for a `function`.
     * @description
     * Checks to see if the input value is a JavaScript function.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isFunction } from '@polkadot/util';
     *
     * isFunction(() => false); // => true
     * ```
     */
    function isFunction$1(value) {
        return typeof value === 'function';
    }

    /**
     * @name arrayChunk
     * @summary Split T[] into T[][] based on the defind size
     * @description
     * Returns a set ao arrays based on the chunksize
     * @example
     * <BR>
     *
     * ```javascript
     * import { arrayChunk } from '@polkadot/util';
     *
     * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
     * ```
     */
    function arrayChunk(array, chunkSize) {
        const outputSize = Math.ceil(array.length / chunkSize);
        // shortcut for the single-split case
        if (outputSize === 1) {
            return [array];
        }
        const output = Array(outputSize);
        for (let i = 0; i < outputSize; i++) {
            const offset = i * chunkSize;
            output[i] = array.slice(offset, offset + chunkSize);
        }
        return output;
    }

    /**
     * @name arrayFlatten
     * @summary Merge T[][] into T[]
     * @description
     * Returns a new array with all arrays merged into one
     * @example
     * <BR>
     *
     * ```javascript
     * import { arrayFlatten } from '@polkadot/util';
     *
     * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
     * ```
     */
    function arrayFlatten(arrays) {
        const num = arrays.length;
        // shortcuts for the empty & single-entry case
        if (num === 0) {
            return [];
        }
        else if (num === 1) {
            return arrays[0];
        }
        // pre-allocate based on the combined size
        let size = 0;
        for (let i = 0; i < num; i++) {
            size += arrays[i].length;
        }
        const output = new Array(size);
        let i = -1;
        for (let j = 0; j < num; j++) {
            const a = arrays[j];
            // instead of pushing, we just set the entries
            for (let e = 0, count = a.length; e < count; e++) {
                output[++i] = a[e];
            }
        }
        return output;
    }

    /**
     * @name assert
     * @summary Checks for a valid test, if not Error is thrown.
     * @description
     * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.
     * @example
     * <BR>
     *
     * ```javascript
     * const { assert } from '@polkadot/util';
     *
     * assert(true, 'True should be true'); // passes
     * assert(false, 'False should not be true'); // Error thrown
     * assert(false, () => 'message'); // Error with 'message'
     * ```
     */
    function assert(condition, message) {
        if (!condition) {
            throw new Error(isFunction$1(message)
                ? message()
                : message);
        }
    }
    /**
     * @name assertReturn
     * @description Returns when the value is not undefined/null, otherwise throws assertion error
     */
    function assertReturn(value, message) {
        assert(value !== undefined && value !== null, message);
        return value;
    }
    /**
     * @name assertUnreachable
     * @description An assertion helper that ensures all codepaths are followed
     */
    function assertUnreachable(x) {
        throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
    }

    /** @internal */
    function createCmp(cmp) {
        return (...items) => {
            const count = items.length;
            if (count === 0) {
                throw new Error('Must provide one or more arguments');
            }
            let result = items[0];
            for (let i = 1; i < count; i++) {
                if (cmp(items[i], result)) {
                    result = items[i];
                }
            }
            return result;
        };
    }

    /**
     * @internal
     *
     * There are _still_ some older environments (specifically RN < 0.70), that does
     * not have proper BigInt support - a non-working fallback is provided for those.
     *
     * We detect availability of BigInt upon usage, so this is purely to allow functional
     * compilation & bundling. Since we have operators such as *+-/ top-level, a number-ish
     * result is used here.
     */
    function invalidFallback() {
        return Number.NaN;
    }
    const BigInt$1 = /*#__PURE__*/ extractGlobal('BigInt', invalidFallback);

    /**
     * @name _0n
     * @summary BigInt constant for 0.
     */
    const _0n$5 = /*#__PURE__*/ BigInt$1(0);
    /**
     * @name _1n
     * @summary BigInt constant for 1.
     */
    const _1n$6 = /*#__PURE__*/ BigInt$1(1);

    const CHR = '0123456789abcdef';
    const U8$1 = new Uint8Array(256);
    const U16$1 = new Uint8Array(256 * 256);
    for (let i = 0, count = CHR.length; i < count; i++) {
        U8$1[CHR[i].charCodeAt(0) | 0] = i | 0;
        if (i > 9) {
            U8$1[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
        }
    }
    for (let i = 0; i < 256; i++) {
        const s = i << 8;
        for (let j = 0; j < 256; j++) {
            U16$1[s | j] = (U8$1[i] << 4) | U8$1[j];
        }
    }
    /**
     * @name hexToU8a
     * @summary Creates a Uint8Array object from a hex string.
     * @description
     * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.
     * @example
     * <BR>
     *
     * ```javascript
     * import { hexToU8a } from '@polkadot/util';
     *
     * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])
     * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])
     * ```
     */
    function hexToU8a(value, bitLength = -1) {
        if (!value) {
            return new Uint8Array();
        }
        let s = value.startsWith('0x')
            ? 2
            : 0;
        const decLength = Math.ceil((value.length - s) / 2);
        const endLength = Math.ceil(bitLength === -1
            ? decLength
            : bitLength / 8);
        const result = new Uint8Array(endLength);
        const offset = endLength > decLength
            ? endLength - decLength
            : 0;
        for (let i = offset; i < endLength; i++, s += 2) {
            // The big factor here is actually the string lookups. If we do
            // HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
            // same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
            // also the faster operation by at least 2x with the character map above
            result[i] = U16$1[(value.charCodeAt(s) << 8) | value.charCodeAt(s + 1)];
        }
        return result;
    }

    var bn = {exports: {}};

    (function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require('buffer').Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };

      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
        // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;

          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this._strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this._strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this._strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      };

      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        this._strip();
        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);

        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
    }(bn));

    var BN = bn.exports;

    /**
     * @name isBn
     * @summary Tests for a `BN` object instance.
     * @description
     * Checks to see if the input object is an instance of `BN` (bn.js).
     * @example
     * <BR>
     *
     * ```javascript
     * import BN from 'bn.js';
     * import { isBn } from '@polkadot/util';
     *
     * console.log('isBn', isBn(new BN(1))); // => true
     * ```
     */
    function isBn(value) {
        return BN.isBN(value);
    }

    const REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
    const REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
    /**
     * @name isHex
     * @summary Tests for a hex string.
     * @description
     * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isHex } from '@polkadot/util';
     *
     * isHex('0x1234'); // => true
     * isHex('0x1234', 8); // => false
     * ```
     */
    function isHex(value, bitLength = -1, ignoreLength) {
        return (typeof value === 'string' && (value === '0x' ||
            REGEX_HEX_PREFIXED.test(value))) && (bitLength === -1
            ? (ignoreLength || (value.length % 2 === 0))
            : (value.length === (2 + Math.ceil(bitLength / 4))));
    }

    /**
     * @name isObject
     * @summary Tests for an `object`.
     * @description
     * Checks to see if the input value is a JavaScript object.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isObject } from '@polkadot/util';
     *
     * isObject({}); // => true
     * isObject('something'); // => false
     * ```
     */
    function isObject$1(value) {
        return !!value && typeof value === 'object';
    }

    function isOn(...fns) {
        return (value) => (isObject$1(value) || isFunction$1(value)) &&
            fns.every((f) => isFunction$1(value[f]));
    }
    function isOnFunction(...fns) {
        return (value) => isFunction$1(value) &&
            fns.every((f) => isFunction$1(value[f]));
    }
    function isOnObject(...fns) {
        return (value) => isObject$1(value) &&
            fns.every((f) => isFunction$1(value[f]));
    }

    const isToBigInt = /*#__PURE__*/ isOn('toBigInt');

    const isToBn$1 = /*#__PURE__*/ isOn('toBn');

    /** true if the environment has proper BigInt support */
    const hasBigInt = typeof BigInt$1 === 'function' && typeof BigInt$1.asIntN === 'function';
    /** true if the environment has support for Buffer (typically Node.js) */
    const hasBuffer = typeof xglobal.Buffer === 'function' && typeof xglobal.Buffer.isBuffer === 'function';
    /** true if the environment has process available (typically Node.js) */
    const hasProcess = typeof xglobal.process === 'object';

    /**
     * @name isBuffer
     * @summary Tests for a `Buffer` object instance.
     * @description
     * Checks to see if the input object is an instance of `Buffer`.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isBuffer } from '@polkadot/util';
     *
     * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true
     * ```
     */
    function isBuffer(value) {
        // we do check a function first, since it is slightly faster than isBuffer itself
        return hasBuffer && !!value && isFunction$1(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
    }

    /**
     * @name isU8a
     * @summary Tests for a `Uint8Array` object instance.
     * @description
     * Checks to see if the input object is an instance of `Uint8Array`.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isUint8Array } from '@polkadot/util';
     *
     * console.log('isU8a', isU8a([])); // => false
     * ```
     */
    function isU8a(value) {
        // here we defer the instanceof check which is actually slightly
        // slower than just checking the constrctor (direct instances)
        return (((value && value.constructor) === Uint8Array) ||
            value instanceof Uint8Array);
    }

    const encoder = new xTextencoder.TextEncoder();
    /**
     * @name stringToU8a
     * @summary Creates a Uint8Array object from a utf-8 string.
     * @description
     * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.
     * @example
     * <BR>
     *
     * ```javascript
     * import { stringToU8a } from '@polkadot/util';
     *
     * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]
     * ```
     */
    function stringToU8a(value) {
        return value
            ? encoder.encode(value.toString())
            : new Uint8Array();
    }

    /**
     * @name u8aToU8a
     * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.
     * @description
     * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.
     * @example
     * <BR>
     *
     * ```javascript
     * import { u8aToU8a } from '@polkadot/util';
     *
     * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])
     * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])
     * ```
     */
    function u8aToU8a(value) {
        return isU8a(value)
            // NOTE isBuffer needs to go here since it actually extends
            // Uint8Array on Node.js environments, so all Buffer are Uint8Array,
            // but Uint8Array is not Buffer
            ? isBuffer(value)
                ? new Uint8Array(value)
                : value
            : isHex(value)
                ? hexToU8a(value)
                : Array.isArray(value)
                    ? new Uint8Array(value)
                    : stringToU8a(value);
    }

    /**
     * @name u8aConcat
     * @summary Creates a concatenated Uint8Array from the inputs.
     * @description
     * Concatenates the input arrays into a single `UInt8Array`.
     * @example
     * <BR>
     *
     * ```javascript
     * import { { u8aConcat } from '@polkadot/util';
     *
     * u8aConcat(
     *   new Uint8Array([1, 2, 3]),
     *   new Uint8Array([4, 5, 6])
     * ); // [1, 2, 3, 4, 5, 6]
     * ```
     */
    function u8aConcat(...list) {
        const count = list.length;
        const u8as = new Array(count);
        let length = 0;
        for (let i = 0; i < count; i++) {
            u8as[i] = u8aToU8a(list[i]);
            length += u8as[i].length;
        }
        return u8aConcatStrict(u8as, length);
    }
    /**
     * @name u8aConcatStrict
     * @description A strict version of [[u8aConcat]], accepting only Uint8Array inputs
     */
    function u8aConcatStrict(u8as, length = 0) {
        const count = u8as.length;
        let offset = 0;
        if (!length) {
            for (let i = 0; i < count; i++) {
                length += u8as[i].length;
            }
        }
        const result = new Uint8Array(length);
        for (let i = 0; i < count; i++) {
            result.set(u8as[i], offset);
            offset += u8as[i].length;
        }
        return result;
    }

    /**
     * @name u8aEq
     * @summary Compares two Uint8Arrays for equality.
     * @description
     * For `UInt8Array` (or hex string) input values true if there is a match.
     * @example
     * <BR>
     *
     * ```javascript
     * import { u8aEq } from '@polkadot/util';
     *
     * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
     * ```
     */
    function u8aEq(a, b) {
        const u8aa = u8aToU8a(a);
        const u8ab = u8aToU8a(b);
        if (u8aa.length === u8ab.length) {
            const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
            const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
            const mod = (u8aa.length % 4) | 0;
            const length = (u8aa.length - mod) | 0;
            for (let i = 0; i < length; i += 4) {
                if (dvA.getUint32(i) !== dvB.getUint32(i)) {
                    return false;
                }
            }
            for (let i = length, count = u8aa.length; i < count; i++) {
                if (u8aa[i] !== u8ab[i]) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    /**
     * @name u8aToBn
     * @summary Creates a BN from a Uint8Array object.
     * @description
     * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.
     * @param value The value to convert
     * @param options Options to pass while converting
     * @param options.isLe Convert using Little Endian (default)
     * @param options.isNegative Convert using two's complement
     * @example
     * <BR>
     *
     * ```javascript
     * import { u8aToBn } from '@polkadot/util';
     *
     * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
     * ```
     */
    function u8aToBn(value, { isLe = true, isNegative = false } = {}) {
        // slice + reverse is expensive, however SCALE is LE by default so this is the path
        // we are most interested in (the BE is added for the sake of being comprehensive)
        if (!isLe) {
            value = value.slice().reverse();
        }
        const count = value.length;
        // shortcut for <= u48 values - in this case the manual conversion
        // here seems to be more efficient than passing the full array
        if (isNegative && count && (value[count - 1] & 0x80)) {
            // Most common case i{8, 16, 32} default LE SCALE-encoded
            // For <= 32, we also optimize the xor to a single op
            switch (count) {
                case 0:
                    return new BN(0);
                case 1:
                    return new BN(((value[0] ^ 255) * -1) - 1);
                case 2:
                    return new BN((((value[0] + (value[1] << 8)) ^ 65535) * -1) - 1);
                case 3:
                    return new BN((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 16777215) * -1) - 1);
                case 4:
                    // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                    // 32-bit, in the case where the top-most bit is set this yields a negative value
                    return new BN((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) * -1) - 1);
                case 5:
                    return new BN(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + ((value[4] ^ 0xff) * 4294967296)) * -1) - 1);
                case 6:
                    return new BN(((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + (((value[4] + (value[5] << 8)) ^ 65535) * 4294967296)) * -1) - 1);
                default:
                    return new BN(value, 'le').fromTwos(count * 8);
            }
        }
        // Most common case - u{8, 16, 32} default LE SCALE-encoded
        //
        // There are some slight benefits in unrolling this specific loop,
        // however it comes with diminishing returns since here the actual
        // `new BN` does seem to take up the bulk of the time
        switch (count) {
            case 0:
                return new BN(0);
            case 1:
                return new BN(value[0]);
            case 2:
                return new BN(value[0] + (value[1] << 8));
            case 3:
                return new BN(value[0] + (value[1] << 8) + (value[2] << 16));
            case 4:
                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                // 32-bit, in the case where the top-most bit is set this yields a negative value
                return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216));
            case 5:
                return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 16777216));
            case 6:
                return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216));
            default:
                return new BN(value, 'le');
        }
    }

    /**
     * @name u8aToFloat
     * @description Converts a Uint8Array value into the float (either 32 or 64-bit)
     * representation.
     */
    function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {
        if (bitLength !== 32 && bitLength !== 64) {
            throw new Error('Invalid bitLength provided, expected 32 or 64');
        }
        else if (value.length < (bitLength / 8)) {
            throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
        }
        const dv = new DataView(value.buffer, value.byteOffset);
        return bitLength === 32
            ? dv.getFloat32(0, isLe)
            : dv.getFloat64(0, isLe);
    }

    const U8 = new Array(256);
    const U16 = new Array(256 * 256);
    for (let n = 0; n < 256; n++) {
        U8[n] = n.toString(16).padStart(2, '0');
    }
    for (let i = 0; i < 256; i++) {
        const s = i << 8;
        for (let j = 0; j < 256; j++) {
            U16[s | j] = U8[i] + U8[j];
        }
    }
    /** @internal */
    function hex(value, result) {
        const mod = (value.length % 2) | 0;
        const length = (value.length - mod) | 0;
        for (let i = 0; i < length; i += 2) {
            result += U16[(value[i] << 8) | value[i + 1]];
        }
        if (mod) {
            result += U8[value[length] | 0];
        }
        return result;
    }
    /**
     * @name u8aToHex
     * @summary Creates a hex string from a Uint8Array object.
     * @description
     * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.
     * @example
     * <BR>
     *
     * ```javascript
     * import { u8aToHex } from '@polkadot/util';
     *
     * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
     * ```
     */
    function u8aToHex(value, bitLength = -1, isPrefixed = true) {
        // this is not 100% correct sinmce we support isPrefixed = false....
        const empty = isPrefixed
            ? '0x'
            : '';
        if (!value?.length) {
            return empty;
        }
        else if (bitLength > 0) {
            const length = Math.ceil(bitLength / 8);
            if (value.length > length) {
                return `${hex(value.subarray(0, length / 2), empty)}…${hex(value.subarray(value.length - length / 2), '')}`;
            }
        }
        return hex(value, empty);
    }

    /**
     * @name u8aToNumber
     * @summary Creates a number from a Uint8Array object.
     */
    function u8aToNumber(value, { isLe = true, isNegative = false } = {}) {
        // slice + reverse is expensive, however SCALE is LE by default so this is the path
        // we are most interested in (the BE is added for the sake of being comprehensive)
        if (!isLe) {
            value = value.slice().reverse();
        }
        const count = value.length;
        // When the value is a i{8, 16, 24, 32, 40, 40} values and the top-most bit
        // indicates a signed value, we use a two's complement conversion. If one of these
        // flags are not set, we just do a normal unsigned conversion (the same shortcut
        // applies in both the u8aTo{BigInt, Bn} conversions as well)
        if (isNegative && count && (value[count - 1] & 0x80)) {
            switch (count) {
                case 0:
                    return 0;
                case 1:
                    return (((value[0] ^ 255) * -1) - 1);
                case 2:
                    return ((((value[0] + (value[1] << 8)) ^ 65535) * -1) - 1);
                case 3:
                    return ((((value[0] + (value[1] << 8) + (value[2] << 16)) ^ 16777215) * -1) - 1);
                case 4:
                    // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                    // 32-bit, in the case where the top-most bit is set this yields a negative value
                    return ((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) * -1) - 1);
                case 5:
                    return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + ((value[4] ^ 0xff) * 4294967296)) * -1) - 1);
                case 6:
                    return (((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) + (((value[4] + (value[5] << 8)) ^ 65535) * 4294967296)) * -1) - 1);
                default:
                    throw new Error('Value more than 48-bits cannot be reliably converted');
            }
        }
        switch (count) {
            case 0:
                return 0;
            case 1:
                return value[0];
            case 2:
                return value[0] + (value[1] << 8);
            case 3:
                return value[0] + (value[1] << 8) + (value[2] << 16);
            case 4:
                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                // 32-bit, in the case where the top-most bit is set this yields a negative value
                return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216);
            case 5:
                return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8)) * 16777216);
            case 6:
                return value[0] + (value[1] << 8) + (value[2] << 16) + ((value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
            default:
                throw new Error('Value more than 48-bits cannot be reliably converted');
        }
    }

    const decoder = new xTextdecoder.TextDecoder('utf-8');
    /**
     * @name u8aToString
     * @summary Creates a utf-8 string from a Uint8Array object.
     * @description
     * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.
     * @example
     * <BR>
     *
     * ```javascript
     * import { u8aToString } from '@polkadot/util';
     *
     * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello
     * ```
     */
    function u8aToString(value) {
        return value
            ? decoder.decode(value)
            : '';
    }

    /**
     * @name hexStripPrefix
     * @summary Strips any leading `0x` prefix.
     * @description
     * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.
     * @example
     * <BR>
     *
     * ```javascript
     * import { hexStripPrefix } from '@polkadot/util';
     *
     * console.log('stripped', hexStripPrefix('0x1234')); // => 1234
     * ```
     */
    function hexStripPrefix(value) {
        if (!value || value === '0x') {
            return '';
        }
        else if (REGEX_HEX_PREFIXED.test(value)) {
            return value.substring(2);
        }
        else if (REGEX_HEX_NOPREFIX.test(value)) {
            return value;
        }
        throw new Error(`Expected hex value to convert, found '${value}'`);
    }

    /**
     * @name hexToBn
     * @summary Creates a BN.js object from a hex string.
     * @description
     * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.
     * @param _value The value to convert
     * @param _options Options to pass while converting
     * @param _options.isLe Convert using Little Endian
     * @param _options.isNegative Convert using two's complement
     * @example
     * <BR>
     *
     * ```javascript
     * import { hexToBn } from '@polkadot/util';
     *
     * hexToBn('0x123480001f'); // => BN(0x123480001f)
     * ```
     */
    function hexToBn(value, { isLe = false, isNegative = false } = {}) {
        if (!value || value === '0x') {
            return new BN(0);
        }
        const stripped = hexStripPrefix(value);
        const bn = new BN(stripped, 16, isLe ? 'le' : 'be');
        // fromTwos takes as parameter the number of bits, which is the hex length
        // multiplied by 4 (2 bytes being 8 bits)
        return isNegative
            ? bn.fromTwos(stripped.length * 4)
            : bn;
    }

    /**
     * @name bnMax
     * @summary Finds and returns the highest value in an array of BNs.
     * @example
     * <BR>
     *
     * ```javascript
     * import BN from 'bn.js';
     * import { bnMax } from '@polkadot/util';
     *
     * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'
     * ```
     */
    const bnMax = /*#__PURE__*/ createCmp((a, b) => a.gt(b));
    /**
     * @name bnMin
     * @summary Finds and returns the smallest value in an array of BNs.
     * @example
     * <BR>
     *
     * ```javascript
     * import BN from 'bn.js';
     * import { bnMin } from '@polkadot/util';
     *
     * bnMin([new BN(1), new BN(3), new BN(2)]).toString(); // => '1'
     * ```
     */
    const bnMin = /*#__PURE__*/ createCmp((a, b) => a.lt(b));

    /**
     * @name BN_ZERO
     * @summary BN constant for 0.
     */
    const BN_ZERO = /*#__PURE__*/ new BN(0);
    /**
     * @name BN_ONE
     * @summary BN constant for 1.
     */
    const BN_ONE = /*#__PURE__*/ new BN(1);
    /**
     * @name BN_TWO
     * @summary BN constant for 2.
     */
    const BN_TWO = /*#__PURE__*/ new BN(2);
    /**
     * @name BN_HUNDRED
     * @summary BN constant for 100.
     */
    const BN_HUNDRED = /*#__PURE__*/ new BN(100);
    /**
     * @name BN_MILLION
     * @summary BN constant for 1,000,000.
     */
    const BN_MILLION = /*#__PURE__*/ new BN(1000000);
    /**
     * @name BN_BILLION
     * @summary BN constant for 1,000,000,000.
     */
    const BN_BILLION = /*#__PURE__*/ new BN(1000000000);
    /**
     * @name BN_QUINTILL
     * @summary BN constant for 1,000,000,000,000,000,000.
     */
    const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
    /**
     * @name BN_MAX_INTEGER
     * @summary BN constant for MAX_SAFE_INTEGER
     */
    const BN_MAX_INTEGER = /*#__PURE__*/ new BN(Number.MAX_SAFE_INTEGER);
    /**
     * @name BN_SQRT_MAX_INTEGER
     * @summary BN constant for Math.sqrt(MAX_SAFE_INTEGER)
     */
    const BN_SQRT_MAX_INTEGER = /*#__PURE__*/ new BN(94906265);

    /**
     * @name isBigInt
     * @summary Tests for a `BigInt` object instance.
     * @description
     * Checks to see if the input object is an instance of `BigInt`
     * @example
     * <BR>
     *
     * ```javascript
     * import { isBigInt } from '@polkadot/util';
     *
     * console.log('isBigInt', isBigInt(123_456n)); // => true
     * ```
     */
    function isBigInt(value) {
        return typeof value === 'bigint';
    }

    /**
     * @name bnToBn
     * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.
     * @description
     * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.
     * @example
     * <BR>
     *
     * ```javascript
     * import BN from 'bn.js';
     * import { bnToBn } from '@polkadot/util';
     *
     * bnToBn(0x1234); // => BN(0x1234)
     * bnToBn(new BN(0x1234)); // => BN(0x1234)
     * ```
     */
    function bnToBn(value) {
        return value
            ? BN.isBN(value)
                ? value
                : isHex(value)
                    ? hexToBn(value.toString())
                    : isBigInt(value)
                        ? new BN(value.toString())
                        : isToBn$1(value)
                            ? value.toBn()
                            : isToBigInt(value)
                                ? new BN(value.toBigInt().toString())
                                : new BN(value)
            : new BN(0);
    }

    /**
     * @name bnSqrt
     * @summary Calculates the integer square root of a BN
     * @example
     * <BR>
     *
     * ```javascript
     * import BN from 'bn.js';
     * import { bnSqrt } from '@polkadot/util';
     *
     * bnSqrt(new BN(16)).toString(); // => '4'
     * ```
     */
    function bnSqrt(value) {
        const n = bnToBn(value);
        if (n.isNeg()) {
            throw new Error('square root of negative numbers is not supported');
        }
        // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
        // shortcut <= 2^53 - 1 to use the JS utils
        if (n.lte(BN_MAX_INTEGER)) {
            // ~~ More performant version of Math.floor
            return new BN(~~Math.sqrt(n.toNumber()));
        }
        // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
        // output will be larger than this, we expect this to be a safe start
        let x0 = BN_SQRT_MAX_INTEGER.clone();
        while (true) {
            const x1 = n.div(x0).iadd(x0).ishrn(1);
            if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
                return x0;
            }
            x0 = x1;
        }
    }

    const DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };
    /**
     * @name bnToU8a
     * @summary Creates a Uint8Array object from a BN.
     * @description
     * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.
     * @example
     * <BR>
     *
     * ```javascript
     * import { bnToU8a } from '@polkadot/util';
     *
     * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]
     * ```
     */
    function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
        const valueBn = bnToBn(value);
        const byteLength = bitLength === -1
            ? Math.ceil(valueBn.bitLength() / 8)
            : Math.ceil((bitLength || 0) / 8);
        if (!value) {
            return bitLength === -1
                ? new Uint8Array(1)
                : new Uint8Array(byteLength);
        }
        const output = new Uint8Array(byteLength);
        const bn = isNegative
            ? valueBn.toTwos(byteLength * 8)
            : valueBn;
        output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
        return output;
    }

    /**
     * @name bnToHex
     * @summary Creates a hex value from a BN.js bignumber object.
     * @description
     * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.
     * @example
     * <BR>
     *
     * ```javascript
     * import BN from 'bn.js';
     * import { bnToHex } from '@polkadot/util';
     *
     * bnToHex(new BN(0x123456)); // => '0x123456'
     * ```
     */
    function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
        return u8aToHex(bnToU8a(value, { bitLength, isLe, isNegative }));
    }

    const MAX_U8 = BN_TWO.pow(new BN(8 - 2)).isub(BN_ONE);
    const MAX_U16 = BN_TWO.pow(new BN(16 - 2)).isub(BN_ONE);
    const MAX_U32 = BN_TWO.pow(new BN(32 - 2)).isub(BN_ONE);
    const BL_16 = { bitLength: 16 };
    const BL_32 = { bitLength: 32 };
    /**
     * @name compactToU8a
     * @description Encodes a number into a compact representation
     * @example
     * <BR>
     *
     * ```javascript
     * import { compactToU8a } from '@polkadot/util';
     *
     * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])
     * ```
     */
    function compactToU8a(value) {
        const bn = bnToBn(value);
        if (bn.lte(MAX_U8)) {
            return new Uint8Array([bn.toNumber() << 2]);
        }
        else if (bn.lte(MAX_U16)) {
            return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);
        }
        else if (bn.lte(MAX_U32)) {
            return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);
        }
        const u8a = bnToU8a(bn);
        let length = u8a.length;
        // adjust to the minimum number of bytes
        while (u8a[length - 1] === 0) {
            length--;
        }
        if (length < 4) {
            throw new Error('Invalid length, previous checks match anything less than 2^30');
        }
        return u8aConcatStrict([
            // subtract 4 as minimum (also catered for in decoding)
            new Uint8Array([((length - 4) << 2) + 0b11]),
            u8a.subarray(0, length)
        ]);
    }

    /**
     * @name compactAddLength
     * @description Adds a length prefix to the input value
     * @example
     * <BR>
     *
     * ```javascript
     * import { compactAddLength } from '@polkadot/util';
     *
     * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])
     * ```
     */
    function compactAddLength(input) {
        return u8aConcatStrict([
            compactToU8a(input.length),
            input
        ]);
    }

    /**
     * @name compactFromU8a
     * @description Retrives the offset and encoded length from a compact-prefixed value
     * @example
     * <BR>
     *
     * ```javascript
     * import { compactFromU8a } from '@polkadot/util';
     *
     * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));
     *
     * console.log('value offset=', offset, 'length=', length); // 4, 0xffff
     * ```
     */
    function compactFromU8a(input) {
        const u8a = u8aToU8a(input);
        // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
        // than doing an additional call to u8aToBn (as with variable length)
        switch (u8a[0] & 0b11) {
            case 0b00:
                return [1, new BN(u8a[0] >>> 2)];
            case 0b01:
                return [2, new BN((u8a[0] + (u8a[1] << 8)) >>> 2)];
            case 0b10:
                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                // 32-bit, in the case where the top-most bit is set this yields a negative value
                return [4, new BN((u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 16777216)) >>> 2)];
            // 0b11
            default: {
                // add 5 to shifted (4 for base length, 1 for this byte)
                const offset = (u8a[0] >>> 2) + 5;
                // we unroll the loop
                switch (offset) {
                    // there still could be 4 bytes data, similar to 0b10 above (with offsets)
                    case 5:
                        // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                        // 32-bit, in the case where the top-most bit is set this yields a negative value
                        return [5, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 16777216))];
                    case 6:
                        return [6, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 16777216))];
                    // 6 bytes data is the maximum, 48 bits (56 would overflow)
                    case 7:
                        return [7, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216))];
                    // for anything else, use the non-unrolled version
                    default:
                        return [offset, u8aToBn(u8a.subarray(1, offset))];
                }
            }
        }
    }
    /**
     * @name compactFromU8aLim
     * @description A limited version of [[compactFromU8a]], accepting only Uint8Array inputs for values <= 48 bits
     */
    function compactFromU8aLim(u8a) {
        // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
        // than doing an additional call to u8aToBn (as with variable length)
        switch (u8a[0] & 0b11) {
            case 0b00:
                return [1, u8a[0] >>> 2];
            case 0b01:
                return [2, (u8a[0] + (u8a[1] << 8)) >>> 2];
            case 0b10:
                // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
                // 32-bit, in the case where the top-most bit is set this yields a negative value
                return [4, (u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + (u8a[3] * 16777216)) >>> 2];
            // 0b11
            default: {
                // add 5 to shifted (4 for base length, 1 for this byte)
                // we unroll the loop
                switch ((u8a[0] >>> 2) + 5) {
                    // there still could be 4 bytes data, similar to 0b10 above (with offsets)
                    case 5:
                        return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] * 16777216)];
                    case 6:
                        return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8)) * 16777216)];
                    // 6 bytes data is the maximum, 48 bits (56 would overflow)
                    case 7:
                        return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + ((u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)];
                    // for anything else, we are above the actual MAX_SAFE_INTEGER - bail out
                    default:
                        throw new Error('Compact input is > Number.MAX_SAFE_INTEGER');
                }
            }
        }
    }

    /**
     * @name compactStripLength
     * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length
     * @example
     * <BR>
     *
     * ```javascript
     * import { compactStripLength } from '@polkadot/util';
     *
     * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]
     * ```
     */
    function compactStripLength(input) {
        const [offset, length] = compactFromU8a(input);
        const total = offset + length.toNumber();
        return [
            total,
            input.subarray(offset, total)
        ];
    }

    /**
     * @name floatToU8a
     * @description Converts a float into a U8a representation (While we don't use BE in SCALE
     * we still allow for either representation, although, as elsewhere, isLe is default)
     */
    function floatToU8a(value = 0.0, { bitLength = 32, isLe = true } = {}) {
        if (bitLength !== 32 && bitLength !== 64) {
            throw new Error('Invalid bitLength provided, expected 32 or 64');
        }
        const result = new Uint8Array(bitLength / 8);
        const dv = new DataView(result.buffer, result.byteOffset);
        if (bitLength === 32) {
            dv.setFloat32(0, Number(value), isLe);
        }
        else {
            dv.setFloat64(0, Number(value), isLe);
        }
        return result;
    }

    /**
     * @name isBoolean
     * @summary Tests for a boolean value.
     * @description
     * Checks to see if the input value is a JavaScript boolean.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isBoolean } from '@polkadot/util';
     *
     * isBoolean(false); // => true
     * ```
     */
    function isBoolean(value) {
        return typeof value === 'boolean';
    }

    const NUMBER_REGEX = new RegExp('(\\d+?)(?=(\\d{3})+(?!\\d)|$)', 'g');
    /**
     * @name formatDecimal
     * @description Formats a number into string format with thousand separators
     */
    function formatDecimal(value, separator = ',') {
        // We can do this by adjusting the regx, however for the sake of clarity
        // we rather strip and re-add the negative sign in the output
        const isNegative = value[0].startsWith('-');
        const matched = isNegative
            ? value.substring(1).match(NUMBER_REGEX)
            : value.match(NUMBER_REGEX);
        return matched
            ? `${isNegative ? '-' : ''}${matched.join(separator)}`
            : value;
    }

    /**
     * Get the decimal and thousand separator of a locale
     * @param locale
     * @returns {decimal: string, thousand: string}
     */
    function getSeparator(locale) {
        return {
            decimal: (0.1).toLocaleString(locale).substring(1, 2),
            thousand: (1000).toLocaleString(locale).substring(1, 2)
        };
    }

    /** @internal */
    const SI_MID = 8;
    /** @internal */
    const SI = [
        { power: -24, text: 'yocto', value: 'y' },
        { power: -21, text: 'zepto', value: 'z' },
        { power: -18, text: 'atto', value: 'a' },
        { power: -15, text: 'femto', value: 'f' },
        { power: -12, text: 'pico', value: 'p' },
        { power: -9, text: 'nano', value: 'n' },
        { power: -6, text: 'micro', value: 'µ' },
        { power: -3, text: 'milli', value: 'm' },
        { power: 0, text: 'Unit', value: '-' },
        { power: 3, text: 'Kilo', value: 'k' },
        { power: 6, text: 'Mill', value: 'M' },
        { power: 9, text: 'Bill', value: 'B' },
        { power: 12, text: 'Tril', value: 'T' },
        { power: 15, text: 'Peta', value: 'P' },
        { power: 18, text: 'Exa', value: 'E' },
        { power: 21, text: 'Zeta', value: 'Z' },
        { power: 24, text: 'Yotta', value: 'Y' }
    ];
    /** @internal */
    function findSi(type) {
        // use a loop here, better RN support (which doesn't have [].find)
        for (let i = 0, count = SI.length; i < count; i++) {
            if (SI[i].value === type) {
                return SI[i];
            }
        }
        return SI[SI_MID];
    }
    /** @internal */
    function calcSi(text, decimals, forceUnit) {
        if (forceUnit) {
            return findSi(forceUnit);
        }
        const siDefIndex = (SI_MID - 1) + Math.ceil((text.length - decimals) / 3);
        return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
    }

    const DEFAULT_DECIMALS = 0;
    const DEFAULT_UNIT = SI[SI_MID].text;
    let defaultDecimals = DEFAULT_DECIMALS;
    let defaultUnit = DEFAULT_UNIT;
    function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = 'en', withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
        // we only work with string inputs here - convert anything
        // into the string-only value
        let text = bnToBn(input).toString();
        if (text.length === 0 || text === '0') {
            return '0';
        }
        // strip the negative sign so we can work with clean groupings, re-add this in the
        // end when we return the result (from here on we work with positive numbers)
        let sign = '';
        if (text[0].startsWith('-')) {
            sign = '-';
            text = text.substring(1);
        }
        // We start at midpoint (8) minus 1 - this means that values display as
        // 123.4567 instead of 0.1234 k (so we always have the most relevant).
        const si = calcSi(text, decimals, forceUnit);
        const mid = text.length - (decimals + si.power);
        const pre = mid <= 0 ? '0' : text.substring(0, mid);
        // get the post from the midpoint onward and then first add max decimals
        // before trimming to the correct (calculated) amount of decimals again
        let post = text
            .padStart(mid < 0 ? decimals : 1, '0')
            .substring(mid < 0 ? 0 : mid)
            .padEnd(withAll ? Math.max(decimals, 4) : 4, '0')
            .substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
        // remove all trailing 0's (if required via flag)
        if (!withZero) {
            let end = post.length - 1;
            // This looks inefficient, however it is better to do the checks and
            // only make one final slice than it is to do it in multiples
            do {
                if (post[end] === '0') {
                    end--;
                }
            } while (post[end] === '0');
            post = post.substring(0, end + 1);
        }
        // the display unit
        const unit = isBoolean(withUnit)
            ? SI[SI_MID].text
            : withUnit;
        // format the units for display based on the flags
        const units = withSi || withSiFull
            ? si.value === '-'
                ? withUnit
                    ? ` ${unit}`
                    : ''
                : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}`
            : '';
        const { decimal, thousand } = getSeparator(locale);
        return `${sign}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;
    }
    const formatBalance = _formatBalance;
    formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);
    formatBalance.findSi = findSi;
    formatBalance.getDefaults = () => {
        return {
            decimals: defaultDecimals,
            unit: defaultUnit
        };
    };
    formatBalance.getOptions = (decimals = defaultDecimals) => {
        return SI.filter(({ power }) => power < 0
            ? (decimals + power) >= 0
            : true);
    };
    formatBalance.setDefaults = ({ decimals, unit }) => {
        defaultDecimals = (Array.isArray(decimals)
            ? decimals[0]
            : decimals) ?? defaultDecimals;
        defaultUnit = (Array.isArray(unit)
            ? unit[0]
            : unit) ?? defaultUnit;
        SI[SI_MID].text = defaultUnit;
    };

    /** @internal */
    function zeroPad(value) {
        return value.toString().padStart(2, '0');
    }
    /**
     * @name formatDate
     * @description Formats a date in CCYY-MM-DD HH:MM:SS format
     */
    function formatDate(date) {
        const year = date.getFullYear().toString();
        const month = zeroPad((date.getMonth() + 1));
        const day = zeroPad(date.getDate());
        const hour = zeroPad(date.getHours());
        const minute = zeroPad(date.getMinutes());
        const second = zeroPad(date.getSeconds());
        return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
    }

    /**
     * @name formatNumber
     * @description Formats a number into string format with thousand separators
     */
    function formatNumber(value, { locale = 'en' } = {}) {
        const { thousand } = getSeparator(locale);
        return formatDecimal(bnToBn(value).toString(), thousand);
    }

    /**
     * @name isString
     * @summary Tests for a string.
     * @description
     * Checks to see if the input value is a JavaScript string.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isString } from '@polkadot/util';
     *
     * console.log('isString', isString('test')); // => true
     * ```
     */
    function isString(value) {
        return typeof value === 'string' || value instanceof String;
    }

    /** @internal */
    function isAsciiStr(str) {
        for (let i = 0, count = str.length; i < count; i++) {
            const b = str.charCodeAt(i);
            // check is inlined here, it is faster than making a call
            if (b < 32 || b > 126) {
                return false;
            }
        }
        return true;
    }
    /** @internal */
    function isAsciiBytes(u8a) {
        for (let i = 0, count = u8a.length; i < count; i++) {
            const b = u8a[i] | 0;
            // check is inlined here, it is faster than making a call
            if (b < 32 || b > 126) {
                return false;
            }
        }
        return true;
    }
    /**
     * @name isAscii
     * @summary Tests if the input is printable ASCII
     * @description
     * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters
     */
    function isAscii(value) {
        return isString(value)
            ? isHex(value)
                ? isAsciiBytes(u8aToU8a(value))
                : isAsciiStr(value)
            : value
                ? isAsciiBytes(value)
                : false;
    }

    /**
     * @name isClass
     * Tests if the supplied argument is a Class
     */
    const isClass = /*#__PURE__*/ isOnFunction('isPrototypeOf', 'hasOwnProperty');

    /**
     * @name isChildClass
     * @summary Tests if the child extends the parent Class
     * @description
     * Checks to see if the child Class extends the parent Class
     * @example
     * <BR>
     *
     * ```javascript
     * import { isChildClass } from '@polkadot/util';
     *
     * console.log('isChildClass', isChildClass(BN, BN); // => true
     * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false
     * ```
     */
    function isChildClass(Parent, Child) {
        // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664
        return isClass(Child) && isClass(Parent)
            // eslint-disable-next-line no-prototype-builtins
            ? Parent === Child || Parent.isPrototypeOf(Child)
            : false;
    }

    const checkCodec = /*#__PURE__*/ isOnObject('toHex', 'toHuman', 'toU8a');
    const checkRegistry = /*#__PURE__*/ isOnObject('get');
    function isCodec(value) {
        return checkCodec(value) && checkRegistry(value.registry);
    }

    /**
     * @name isCompact
     * @summary Tests for SCALE-Compact-like object instance.
     */
    const isCompact = /*#__PURE__*/ isOnObject('toBigInt', 'toBn', 'toNumber', 'unwrap');

    /** @internal */
    function replacer(_, v) {
        return isBigInt(v)
            ? v.toString()
            : v;
    }
    /**
     * @name stringify
     * @summary Performs a JSON.stringify, with BigInt handling
     * @description A wrapper for JSON.stringify that handles BigInt values transparently, converting them to string. No differences from the native JSON.stringify function otherwise.
     */
    function stringify(value, space) {
        return JSON.stringify(value, replacer, space);
    }

    /**
     * @name isNull
     * @summary Tests for a `null` values.
     * @description
     * Checks to see if the input value is `null`.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isNull } from '@polkadot/util';
     *
     * console.log('isNull', isNull(null)); // => true
     * ```
     */
    function isNull(value) {
        return value === null;
    }

    /**
     * @name isNumber
     * @summary Tests for a JavaScript number.
     * @description
     * Checks to see if the input value is a valid number.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isNumber } from '@polkadot/util';
     *
     * console.log('isNumber', isNumber(1234)); // => true
     * ```
     */
    function isNumber(value) {
        return typeof value === 'number';
    }

    /**
     * @name isUndefined
     * @summary Tests for a `undefined` values.
     * @description
     * Checks to see if the input value is `undefined`.
     * @example
     * <BR>
     *
     * ```javascript
     * import { isUndefined } from '@polkadot/util';
     *
     * console.log('isUndefined', isUndefined(void(0))); // => true
     * ```
     */
    function isUndefined(value) {
        return value === undefined;
    }

    /**
     * @name isUtf8
     * @summary Tests if the input is valid Utf8
     * @description
     * Checks to see if the input string or Uint8Array is valid Utf8
     */
    function isUtf8(value) {
        if (!value) {
            return isString(value);
        }
        const u8a = u8aToU8a(value);
        const len = u8a.length;
        let i = 0;
        while (i < len) {
            if (u8a[i] <= 0x7F) /* 00..7F */ {
                i += 1;
            }
            else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF) /* C2..DF 80..BF */ {
                if (i + 1 < len) /* Expect a 2nd byte */ {
                    if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                        // *message = "After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF";
                        // *faulty_bytes = 2;
                        return false;
                    }
                }
                else {
                    // *message = "After a first byte between C2 and DF, expecting a 2nd byte.";
                    // *faulty_bytes = 1;
                    return false;
                }
                i += 2;
            }
            else if (u8a[i] === 0xE0) /* E0 A0..BF 80..BF */ {
                if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                    if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {
                        // *message = "After a first byte of E0, expecting a 2nd byte between A0 and BF.";
                        // *faulty_bytes = 2;
                        return false;
                    }
                    if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                        // *message = "After a first byte of E0, expecting a 3nd byte between 80 and BF.";
                        // *faulty_bytes = 3;
                        return false;
                    }
                }
                else {
                    // *message = "After a first byte of E0, expecting two following bytes.";
                    // *faulty_bytes = 1;
                    return false;
                }
                i += 3;
            }
            else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC) /* E1..EC 80..BF 80..BF */ {
                if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                    if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                        // *message = "After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.";
                        // *faulty_bytes = 2;
                        return false;
                    }
                    if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                        // *message = "After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.";
                        // *faulty_bytes = 3;
                        return false;
                    }
                }
                else {
                    // *message = "After a first byte between E1 and EC, expecting two following bytes.";
                    // *faulty_bytes = 1;
                    return false;
                }
                i += 3;
            }
            else if (u8a[i] === 0xED) /* ED 80..9F 80..BF */ {
                if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                    if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {
                        // *message = "After a first byte of ED, expecting 2nd byte between 80 and 9F.";
                        // *faulty_bytes = 2;
                        return false;
                    }
                    if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                        // *message = "After a first byte of ED, expecting 3rd byte between 80 and BF.";
                        // *faulty_bytes = 3;
                        return false;
                    }
                }
                else {
                    // *message = "After a first byte of ED, expecting two following bytes.";
                    // *faulty_bytes = 1;
                    return false;
                }
                i += 3;
            }
            else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF) /* EE..EF 80..BF 80..BF */ {
                if (i + 2 < len) /* Expect a 2nd and 3rd byte */ {
                    if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                        // *message = "After a first byte between EE and EF, expecting 2nd byte between 80 and BF.";
                        // *faulty_bytes = 2;
                        return false;
                    }
                    if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                        // *message = "After a first byte between EE and EF, expecting 3rd byte between 80 and BF.";
                        // *faulty_bytes = 3;
                        return false;
                    }
                }
                else {
                    // *message = "After a first byte between EE and EF, two following bytes.";
                    // *faulty_bytes = 1;
                    return false;
                }
                i += 3;
            }
            else if (u8a[i] === 0xF0) /* F0 90..BF 80..BF 80..BF */ {
                if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                    if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {
                        // *message = "After a first byte of F0, expecting 2nd byte between 90 and BF.";
                        // *faulty_bytes = 2;
                        return false;
                    }
                    if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                        // *message = "After a first byte of F0, expecting 3rd byte between 80 and BF.";
                        // *faulty_bytes = 3;
                        return false;
                    }
                    if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                        // *message = "After a first byte of F0, expecting 4th byte between 80 and BF.";
                        // *faulty_bytes = 4;
                        return false;
                    }
                }
                else {
                    // *message = "After a first byte of F0, expecting three following bytes.";
                    // *faulty_bytes = 1;
                    return false;
                }
                i += 4;
            }
            else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3) /* F1..F3 80..BF 80..BF 80..BF */ {
                if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                    if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                        // *message = "After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.";
                        // *faulty_bytes = 2;
                        return false;
                    }
                    if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                        // *message = "After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.";
                        // *faulty_bytes = 3;
                        return false;
                    }
                    if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                        // *message = "After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.";
                        // *faulty_bytes = 4;
                        return false;
                    }
                }
                else {
                    // *message = "After a first byte of F1, F2, or F3, expecting three following bytes.";
                    // *faulty_bytes = 1;
                    return false;
                }
                i += 4;
            }
            else if (u8a[i] === 0xF4) /* F4 80..8F 80..BF 80..BF */ {
                if (i + 3 < len) /* Expect a 2nd, 3rd 3th byte */ {
                    if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {
                        // *message = "After a first byte of F4, expecting 2nd byte between 80 and 8F.";
                        // *faulty_bytes = 2;
                        return false;
                    }
                    if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                        // *message = "After a first byte of F4, expecting 3rd byte between 80 and BF.";
                        // *faulty_bytes = 3;
                        return false;
                    }
                    if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                        // *message = "After a first byte of F4, expecting 4th byte between 80 and BF.";
                        // *faulty_bytes = 4;
                        return false;
                    }
                }
                else {
                    // *message = "After a first byte of F4, expecting three following bytes.";
                    // *faulty_bytes = 1;
                    return false;
                }
                i += 4;
            }
            else {
                // *message = "Expecting bytes in the following ranges: 00..7F C2..F4.";
                // *faulty_bytes = 1;
                return false;
            }
        }
        return true;
    }

    /**
     * @name lazyMethod
     * @description
     * Creates a lazy, on-demand getter for the specific value. Upon get the value will be evaluated.
     */
    function lazyMethod(result, item, creator, getName, index = 0) {
        const name = getName
            ? getName(item, index)
            : item.toString();
        let value;
        Object.defineProperty(result, name, {
            // This allows for re-configuration with the embedded defineProperty below
            // and ensures that on tested browsers and Node, it _will_ be redefined
            // and thus short-circuited for future access
            configurable: true,
            enumerable: true,
            // Use a function here, we don't want to capture the outer this, i.e.
            // don't use arrow functions in this context since we have a this inside
            get: function () {
                // This check should _always_ be false and unneeded, since we override
                // with a value below ... however we ensure we are quire vigilant against
                // all environment failures, so we are rather be safe than sorry
                if (value === undefined) {
                    value = creator(item, index, this);
                    try {
                        // re-define the property as a value, next time around this
                        // getter will only return the computed value
                        Object.defineProperty(this, name, { value });
                    }
                    catch {
                        // ignore any errors, since this _should_ not happen due to
                        // the "configurable" property above. But if it ever does
                        // from here-on we will be the cached value the next time
                        // around (with a very slight dip in performance)
                    }
                }
                return value;
            }
        });
    }
    /**
     * @name lazyMethods
     * @description
     * Creates lazy, on-demand getters for the specific values.
     */
    function lazyMethods(result, items, creator, getName) {
        for (let i = 0, count = items.length; i < count; i++) {
            lazyMethod(result, items[i], creator, getName, i);
        }
        return result;
    }

    /**
     * A sharable identity function. Returns the input as-is with no transformation applied.
     */
    function identity$2(value) {
        return value;
    }
    /**
     * A sharable noop function. As the name suggests, does nothing
     */
    function noop$1() {
        // noop
    }

    const logTo = {
        debug: 'log',
        error: 'error',
        log: 'log',
        warn: 'warn'
    };
    function formatOther(value) {
        if (value && isObject$1(value) && value.constructor === Object) {
            const result = {};
            for (const [k, v] of Object.entries(value)) {
                result[k] = loggerFormat(v);
            }
            return result;
        }
        return value;
    }
    function loggerFormat(value) {
        if (Array.isArray(value)) {
            return value.map(loggerFormat);
        }
        else if (isBn(value)) {
            return value.toString();
        }
        else if (isU8a(value) || isBuffer(value)) {
            return u8aToHex(u8aToU8a(value));
        }
        return formatOther(value);
    }
    function formatWithLength(maxLength) {
        return (v) => {
            if (maxLength <= 0) {
                return v;
            }
            const r = `${v}`;
            return r.length < maxLength
                ? v
                : `${r.substring(0, maxLength)} ...`;
        };
    }
    function apply(log, type, values, maxSize = -1) {
        if (values.length === 1 && isFunction$1(values[0])) {
            const fnResult = values[0]();
            return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
        }
        console[logTo[log]](formatDate(new Date()), type, ...values
            .map(loggerFormat)
            .map(formatWithLength(maxSize)));
    }
    function isDebugOn(e, type) {
        return !!e && (e === '*' ||
            type === e ||
            (e.endsWith('*') &&
                type.startsWith(e.slice(0, -1))));
    }
    function isDebugOff(e, type) {
        return !!e && (e.startsWith('-') &&
            (type === e.slice(1) ||
                (e.endsWith('*') &&
                    type.startsWith(e.slice(1, -1)))));
    }
    function getDebugFlag(env, type) {
        let flag = false;
        for (const e of env) {
            if (isDebugOn(e, type)) {
                flag = true;
            }
            else if (isDebugOff(e, type)) {
                flag = false;
            }
        }
        return flag;
    }
    function parseEnv(type) {
        const env = (hasProcess ? xglobal.process : {}).env || {};
        const maxSize = parseInt(env['DEBUG_MAX'] || '-1', 10);
        return [
            getDebugFlag((env['DEBUG'] || '').toLowerCase().split(','), type),
            isNaN(maxSize)
                ? -1
                : maxSize
        ];
    }
    /**
     * @name Logger
     * @summary Creates a consistent log interface for messages
     * @description
     * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.
     * @example
     * <BR>
     *
     * ```javascript
     * import { logger } from '@polkadot/util';
     *
     * const l = logger('test');
     * ```
     */
    function logger(origin) {
        const type = `${origin.toUpperCase()}:`.padStart(16);
        const [isDebug, maxSize] = parseEnv(origin.toLowerCase());
        return {
            debug: isDebug
                ? (...values) => apply('debug', type, values, maxSize)
                : noop$1,
            error: (...values) => apply('error', type, values),
            log: (...values) => apply('log', type, values),
            noop: noop$1,
            warn: (...values) => apply('warn', type, values)
        };
    }

    function defaultGetId() {
        return 'none';
    }
    /**
     * @name memoize
     * @description Memomize the function with a specific instanceId
     */
    function memoize(fn, { getInstanceId = defaultGetId } = {}) {
        const cache = {};
        const memoized = (...args) => {
            const stringParams = stringify(args);
            const instanceId = getInstanceId();
            if (!cache[instanceId]) {
                cache[instanceId] = {};
            }
            if (cache[instanceId][stringParams] === undefined) {
                cache[instanceId][stringParams] = fn(...args);
            }
            return cache[instanceId][stringParams];
        };
        memoized.unmemoize = (...args) => {
            const stringParams = stringify(args);
            const instanceId = getInstanceId();
            if (cache[instanceId]?.[stringParams] !== undefined) {
                delete cache[instanceId][stringParams];
            }
        };
        return memoized;
    }

    /**
     * @name nextTick
     * @description Defer the operation to the queue for evaluation on the next tick
     */
    function nextTick(onExec, onError) {
        // While Promise.resolve().then(...) would defer to the nextTick, this
        // actually does not play as nicely in browsers like the setTimeout(...)
        // approach. So the safer, though less optimal approach is the one taken here
        setTimeout(() => {
            Promise
                .resolve()
                .then(() => {
                onExec();
            })
                .catch((error) => {
                if (onError) {
                    onError(error);
                }
                else {
                    console.error(error);
                }
            });
        }, 0);
    }

    /**
     * @name objectClear
     * @summary Removes all the keys from the input object
     */
    function objectClear(value) {
        const keys = Object.keys(value);
        for (let i = 0, count = keys.length; i < count; i++) {
            delete value[keys[i]];
        }
        return value;
    }

    /**
     * @name objectSpread
     * @summary Concats all sources into the destination
     */
    function objectSpread(dest, ...sources) {
        for (let i = 0, count = sources.length; i < count; i++) {
            const src = sources[i];
            if (src) {
                if (typeof src.entries === 'function') {
                    for (const [key, value] of src.entries()) {
                        dest[key] = value;
                    }
                }
                else {
                    Object.assign(dest, src);
                }
            }
        }
        return dest;
    }

    /**
     * @name objectProperty
     * @summary Assign a get property on the input object
     */
    function objectProperty(that, key, getter, getName, index = 0) {
        const name = getName
            ? getName(key, index)
            : key;
        // There are 3 approaches here -
        //  - Object.prototype.hasOwnProperty.call(that, key) - this only checks the current class, i.e
        //    will retuirn false if the property is set in the parent class
        //  - isUndefined(...) - this may yield a false positive when the property is there, but not set.
        //    Additionally, on pre-defined getters it may make a call
        //  - key in that - Does not need to be combined with either of the above and checks the full chain
        if (!(name in that)) {
            Object.defineProperty(that, name, {
                enumerable: true,
                // Unlike in lazy, we always call into the upper function, i.e. this method
                // does not cache old values (it is expected to be used for dynamic values)
                get: function () {
                    return getter(key, index, this);
                }
            });
        }
    }
    /**
     * @name objectProperties
     * @summary Assign get properties on the input object
     */
    function objectProperties(that, keys, getter, getName) {
        for (let i = 0, count = keys.length; i < count; i++) {
            objectProperty(that, keys[i], getter, getName, i);
        }
    }

    const CC_TO_UP = new Array(256);
    const CC_TO_LO = new Array(256);
    for (let i = 0, count = CC_TO_UP.length; i < count; i++) {
        CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
        CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
    }
    /** @internal */
    function formatAllCaps(w) {
        return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
    }
    /**
     * @internal
     *
     * Inspired by https://stackoverflow.com/a/2970667
     *
     * This is not as optimal as the original SO answer (we split into per-word),
     * however it does pass the tests (which the SO version doesn't) and is still
     * a major improvement over the original camelcase npm package -
     *
     *   camelcase: 20.88 μs/op
     *        this:  1.00 μs/op
     *
     * Caveat of this: only Ascii, but acceptable for the intended usecase
     */
    function converter$1(format) {
        return (value) => {
            const parts = value
                // replace all separators (including consequtive) with spaces
                .replace(/[-_., ]+/g, ' ')
                // we don't want leading or trailing spaces
                .trim()
                // split into words
                .split(' ');
            let result = '';
            for (let i = 0, count = parts.length; i < count; i++) {
                const w = parts[i];
                // apply the formatting
                result += format(/^[\dA-Z]+$/.test(w)
                    // all full uppercase + letters are changed to lowercase
                    ? w.toLowerCase()
                    // all consecutive capitals + letters are changed to lowercase
                    // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder
                    : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
            }
            return result;
        };
    }
    /**
     * @name stringCamelCase
     * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase
     */
    const stringCamelCase = /*#__PURE__*/ converter$1((w, i) => 
    (i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
    /**
     * @name stringPascalCase
     * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase
     */
    const stringPascalCase = /*#__PURE__*/ converter$1((w) => 
    CC_TO_UP[w.charCodeAt(0)] + w.slice(1));

    /** @internal */
    function converter(map) {
        return (value) => value
            ? map[value.charCodeAt(0)] + value.slice(1)
            : '';
    }
    /**
     * @name stringUpperFirst
     * @summary Uppercase the first letter of a string
     * @description
     * Lowercase the first letter of a string
     * @example
     * <BR>
     *
     * ```javascript
     * import { stringUpperFirst } from '@polkadot/util';
     *
     * stringUpperFirst('abc'); // => 'Abc'
     * ```
     */
    const stringUpperFirst = /*#__PURE__*/ converter(CC_TO_UP);

    /**
     * @name stringToHex
     * @summary Creates a hex string from a utf-8 string
     * @description
     * String input values return the actual encoded hex value.
     * @example
     * <BR>
     *
     * ```javascript
     * import { stringToHex } from '@polkadot/util';
     *
     * stringToU8a('hello'); // 0x68656c6c6f
     * ```
     */
    function stringToHex(value) {
        return u8aToHex(stringToU8a(value));
    }

    const packageInfo = { name: '@polkadot/api', path: (({ url: (document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto', type: 'esm', version: '10.10.1' };

    const DEFAULT_CRYPTO = { getRandomValues: xRandomvalues.getRandomValues };
    const DEFAULT_SELF = { crypto: DEFAULT_CRYPTO };
    /**
     * @name Wbg
     * @description
     * This defines the internal interfaces that wasm-bindgen used to communicate
     * with the host layer. None of these functions are available to the user, rather
     * they are called internally from the WASM code itself.
     *
     * The interfaces here are exposed in the imports on the created WASM interfaces.
     *
     * Internally the implementation does a thin layer into the supplied bridge.
     */
    class Wbg {
        constructor(bridge) {
            /** @internal */
            this.abort = () => {
                throw new Error('abort');
            };
            /** @internal */
            this.__wbindgen_is_undefined = (idx) => {
                return this.__internal__bridge.getObject(idx) === undefined;
            };
            /** @internal */
            this.__wbindgen_throw = (ptr, len) => {
                throw new Error(this.__internal__bridge.getString(ptr, len));
            };
            /** @internal */
            this.__wbg_self_1b7a39e3a92c949c = () => {
                return this.__internal__bridge.addObject(DEFAULT_SELF);
            };
            /** @internal */
            this.__wbg_require_604837428532a733 = (ptr, len) => {
                throw new Error(`Unable to require ${this.__internal__bridge.getString(ptr, len)}`);
            };
            /** @internal */
            this.__wbg_crypto_968f1772287e2df0 = (_idx) => {
                return this.__internal__bridge.addObject(DEFAULT_CRYPTO);
            };
            /** @internal */
            this.__wbg_getRandomValues_a3d34b4fee3c2869 = (_idx) => {
                return this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
            };
            /** @internal */
            this.__wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len) => {
                DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(ptr, len));
            };
            /** @internal */
            this.__wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len) => {
                throw new Error('randomFillsync is not available');
                // getObject(idx).randomFillSync(getU8a(ptr, len));
            };
            /** @internal */
            this.__wbindgen_object_drop_ref = (idx) => {
                this.__internal__bridge.takeObject(idx);
            };
            this.__internal__bridge = bridge;
        }
    }

    /**
     * @name Bridge
     * @description
     * Creates a bridge between the JS and WASM environments.
     *
     * For any bridge it is passed an function which is then called internally at the
     * time of initialization. This affectively implements the layer between WASM and
     * the native environment, providing all the plumbing needed for the Wbg classes.
     */
    class Bridge {
        constructor(createWasm) {
            this.__internal__createWasm = createWasm;
            this.__internal__cachegetInt32 = null;
            this.__internal__cachegetUint8 = null;
            this.__internal__heap = new Array(32)
                .fill(undefined)
                .concat(undefined, null, true, false);
            this.__internal__heapNext = this.__internal__heap.length;
            this.__internal__type = 'none';
            this.__internal__wasm = null;
            this.__internal__wasmError = null;
            this.__internal__wasmPromise = null;
            this.__internal__wbg = { ...new Wbg(this) };
        }
        /** @description Returns the init error */
        get error() {
            return this.__internal__wasmError;
        }
        /** @description Returns the init type */
        get type() {
            return this.__internal__type;
        }
        /** @description Returns the created wasm interface */
        get wasm() {
            return this.__internal__wasm;
        }
        /** @description Performs the wasm initialization */
        async init(createWasm) {
            if (!this.__internal__wasmPromise || createWasm) {
                this.__internal__wasmPromise = (createWasm || this.__internal__createWasm)(this.__internal__wbg);
            }
            const { error, type, wasm } = await this.__internal__wasmPromise;
            this.__internal__type = type;
            this.__internal__wasm = wasm;
            this.__internal__wasmError = error;
            return this.__internal__wasm;
        }
        /**
         * @internal
         * @description Gets an object from the heap
         */
        getObject(idx) {
            return this.__internal__heap[idx];
        }
        /**
         * @internal
         * @description Removes an object from the heap
         */
        dropObject(idx) {
            if (idx < 36) {
                return;
            }
            this.__internal__heap[idx] = this.__internal__heapNext;
            this.__internal__heapNext = idx;
        }
        /**
         * @internal
         * @description Retrieves and removes an object to the heap
         */
        takeObject(idx) {
            const ret = this.getObject(idx);
            this.dropObject(idx);
            return ret;
        }
        /**
         * @internal
         * @description Adds an object to the heap
         */
        addObject(obj) {
            if (this.__internal__heapNext === this.__internal__heap.length) {
                this.__internal__heap.push(this.__internal__heap.length + 1);
            }
            const idx = this.__internal__heapNext;
            this.__internal__heapNext = this.__internal__heap[idx];
            this.__internal__heap[idx] = obj;
            return idx;
        }
        /**
         * @internal
         * @description Retrieve an Int32 in the WASM interface
         */
        getInt32() {
            if (this.__internal__cachegetInt32 === null || this.__internal__cachegetInt32.buffer !== this.__internal__wasm.memory.buffer) {
                this.__internal__cachegetInt32 = new Int32Array(this.__internal__wasm.memory.buffer);
            }
            return this.__internal__cachegetInt32;
        }
        /**
         * @internal
         * @description Retrieve an Uint8Array in the WASM interface
         */
        getUint8() {
            if (this.__internal__cachegetUint8 === null || this.__internal__cachegetUint8.buffer !== this.__internal__wasm.memory.buffer) {
                this.__internal__cachegetUint8 = new Uint8Array(this.__internal__wasm.memory.buffer);
            }
            return this.__internal__cachegetUint8;
        }
        /**
         * @internal
         * @description Retrieves an Uint8Array in the WASM interface
         */
        getU8a(ptr, len) {
            return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
        }
        /**
         * @internal
         * @description Retrieves a string in the WASM interface
         */
        getString(ptr, len) {
            return u8aToString(this.getU8a(ptr, len));
        }
        /**
         * @internal
         * @description Allocates an Uint8Array in the WASM interface
         */
        allocU8a(arg) {
            const ptr = this.__internal__wasm.__wbindgen_malloc(arg.length * 1);
            this.getUint8().set(arg, ptr / 1);
            return [ptr, arg.length];
        }
        /**
         * @internal
         * @description Allocates a string in the WASM interface
         */
        allocString(arg) {
            return this.allocU8a(stringToU8a(arg));
        }
        /**
         * @internal
         * @description Retrieves an Uint8Array from the WASM interface
         */
        resultU8a() {
            const r0 = this.getInt32()[8 / 4 + 0];
            const r1 = this.getInt32()[8 / 4 + 1];
            const ret = this.getU8a(r0, r1).slice();
            this.__internal__wasm.__wbindgen_free(r0, r1 * 1);
            return ret;
        }
        /**
         * @internal
         * @description Retrieve a string from the WASM interface
         */
        resultString() {
            return u8aToString(this.resultU8a());
        }
    }

    /**
     * @name bridge
     * @description
     * The JS <-> WASM bridge that is in operation. For the specific package
     * it is a global, i.e. all operations happens on this specific bridge
     */
    const bridge = new Bridge(wasmCryptoInit.createWasm);
    /**
     * @name initBridge
     * @description
     * Creates a new bridge interface with the (optional) initialization function
     */
    async function initBridge(createWasm) {
        return bridge.init(createWasm);
    }

    /**
     * @internal
     * @description
     * This create an extenal interface function from the signature, all the while checking
     * the actual bridge wasm interface to ensure it has been initialized.
     *
     * This means that we can call it
     *
     *   withWasm(wasm: WasmCryptoInstance, a: number, b: string) => Uint8Array
     *
     * and in this case it will create an interface function with the signarure
     *
     *   (a: number, b: string) => Uint8Array
     */
    function withWasm(fn) {
        return (...params) => {
            if (!bridge.wasm) {
                throw new Error('The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');
            }
            return fn(bridge.wasm, ...params);
        };
    }
    const secp256k1Expand$1 = /*#__PURE__*/ withWasm((wasm, pubkey) => {
        wasm.ext_secp_pub_expand(8, ...bridge.allocU8a(pubkey));
        return bridge.resultU8a();
    });
    const blake2b$1 = /*#__PURE__*/ withWasm((wasm, data, key, size) => {
        wasm.ext_blake2b(8, ...bridge.allocU8a(data), ...bridge.allocU8a(key), size);
        return bridge.resultU8a();
    });
    const keccak256 = /*#__PURE__*/ withWasm((wasm, data) => {
        wasm.ext_keccak256(8, ...bridge.allocU8a(data));
        return bridge.resultU8a();
    });
    const keccak512 = /*#__PURE__*/ withWasm((wasm, data) => {
        wasm.ext_keccak512(8, ...bridge.allocU8a(data));
        return bridge.resultU8a();
    });
    const twox = /*#__PURE__*/ withWasm((wasm, data, rounds) => {
        wasm.ext_twox(8, ...bridge.allocU8a(data), rounds);
        return bridge.resultU8a();
    });
    function isReady() {
        return !!bridge.wasm;
    }
    async function waitReady() {
        try {
            const wasm = await initBridge();
            return !!wasm;
        }
        catch {
            return false;
        }
    }

    function cryptoWaitReady() {
        return waitReady()
            .then(() => {
            if (!isReady()) {
                throw new Error('Unable to initialize @polkadot/util-crypto');
            }
            return true;
        })
            .catch(() => false);
    }

    /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // Utilities
    /**
     * @__NO_SIDE_EFFECTS__
     */
    function assertNumber(n) {
        if (!Number.isSafeInteger(n))
            throw new Error(`Wrong integer: ${n}`);
    }
    /**
     * @__NO_SIDE_EFFECTS__
     */
    function chain$1(...args) {
        // Wrap call in closure so JIT can inline calls
        const wrap = (a, b) => (c) => a(b(c));
        // Construct chain of args[-1].encode(args[-2].encode([...]))
        const encode = Array.from(args)
            .reverse()
            .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);
        // Construct chain of args[0].decode(args[1].decode(...))
        const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);
        return { encode, decode };
    }
    /**
     * Encodes integer radix representation to array of strings using alphabet and back
     * @__NO_SIDE_EFFECTS__
     */
    function alphabet(alphabet) {
        return {
            encode: (digits) => {
                if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                    throw new Error('alphabet.encode input should be an array of numbers');
                return digits.map((i) => {
                    assertNumber(i);
                    if (i < 0 || i >= alphabet.length)
                        throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);
                    return alphabet[i];
                });
            },
            decode: (input) => {
                if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                    throw new Error('alphabet.decode input should be array of strings');
                return input.map((letter) => {
                    if (typeof letter !== 'string')
                        throw new Error(`alphabet.decode: not string element=${letter}`);
                    const index = alphabet.indexOf(letter);
                    if (index === -1)
                        throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet}`);
                    return index;
                });
            },
        };
    }
    /**
     * @__NO_SIDE_EFFECTS__
     */
    function join(separator = '') {
        if (typeof separator !== 'string')
            throw new Error('join separator should be string');
        return {
            encode: (from) => {
                if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))
                    throw new Error('join.encode input should be array of strings');
                for (let i of from)
                    if (typeof i !== 'string')
                        throw new Error(`join.encode: non-string input=${i}`);
                return from.join(separator);
            },
            decode: (to) => {
                if (typeof to !== 'string')
                    throw new Error('join.decode input should be string');
                return to.split(separator);
            },
        };
    }
    /**
     * Pad strings array so it has integer number of bits
     * @__NO_SIDE_EFFECTS__
     */
    function padding(bits, chr = '=') {
        assertNumber(bits);
        if (typeof chr !== 'string')
            throw new Error('padding chr should be string');
        return {
            encode(data) {
                if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))
                    throw new Error('padding.encode input should be array of strings');
                for (let i of data)
                    if (typeof i !== 'string')
                        throw new Error(`padding.encode: non-string input=${i}`);
                while ((data.length * bits) % 8)
                    data.push(chr);
                return data;
            },
            decode(input) {
                if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                    throw new Error('padding.encode input should be array of strings');
                for (let i of input)
                    if (typeof i !== 'string')
                        throw new Error(`padding.decode: non-string input=${i}`);
                let end = input.length;
                if ((end * bits) % 8)
                    throw new Error('Invalid padding: string should have whole number of bytes');
                for (; end > 0 && input[end - 1] === chr; end--) {
                    if (!(((end - 1) * bits) % 8))
                        throw new Error('Invalid padding: string has too much padding');
                }
                return input.slice(0, end);
            },
        };
    }
    /**
     * @__NO_SIDE_EFFECTS__
     */
    function normalize(fn) {
        if (typeof fn !== 'function')
            throw new Error('normalize fn should be function');
        return { encode: (from) => from, decode: (to) => fn(to) };
    }
    /**
     * Slow: O(n^2) time complexity
     * @__NO_SIDE_EFFECTS__
     */
    function convertRadix(data, from, to) {
        // base 1 is impossible
        if (from < 2)
            throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
        if (to < 2)
            throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
        if (!Array.isArray(data))
            throw new Error('convertRadix: data should be array');
        if (!data.length)
            return [];
        let pos = 0;
        const res = [];
        const digits = Array.from(data);
        digits.forEach((d) => {
            assertNumber(d);
            if (d < 0 || d >= from)
                throw new Error(`Wrong integer: ${d}`);
        });
        while (true) {
            let carry = 0;
            let done = true;
            for (let i = pos; i < digits.length; i++) {
                const digit = digits[i];
                const digitBase = from * carry + digit;
                if (!Number.isSafeInteger(digitBase) ||
                    (from * carry) / from !== carry ||
                    digitBase - digit !== from * carry) {
                    throw new Error('convertRadix: carry overflow');
                }
                carry = digitBase % to;
                const rounded = Math.floor(digitBase / to);
                digits[i] = rounded;
                if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
                    throw new Error('convertRadix: carry overflow');
                if (!done)
                    continue;
                else if (!rounded)
                    pos = i;
                else
                    done = false;
            }
            res.push(carry);
            if (done)
                break;
        }
        for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
            res.push(0);
        return res.reverse();
    }
    const gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));
    const radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));
    /**
     * Implemented with numbers, because BigInt is 5x slower
     * @__NO_SIDE_EFFECTS__
     */
    function convertRadix2(data, from, to, padding) {
        if (!Array.isArray(data))
            throw new Error('convertRadix2: data should be array');
        if (from <= 0 || from > 32)
            throw new Error(`convertRadix2: wrong from=${from}`);
        if (to <= 0 || to > 32)
            throw new Error(`convertRadix2: wrong to=${to}`);
        if (radix2carry(from, to) > 32) {
            throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
        }
        let carry = 0;
        let pos = 0; // bitwise position in current element
        const mask = 2 ** to - 1;
        const res = [];
        for (const n of data) {
            assertNumber(n);
            if (n >= 2 ** from)
                throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
            carry = (carry << from) | n;
            if (pos + from > 32)
                throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
            pos += from;
            for (; pos >= to; pos -= to)
                res.push(((carry >> (pos - to)) & mask) >>> 0);
            carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow
        }
        carry = (carry << (to - pos)) & mask;
        if (!padding && pos >= from)
            throw new Error('Excess padding');
        if (!padding && carry)
            throw new Error(`Non-zero padding: ${carry}`);
        if (padding && pos > 0)
            res.push(carry >>> 0);
        return res;
    }
    /**
     * @__NO_SIDE_EFFECTS__
     */
    function radix(num) {
        assertNumber(num);
        return {
            encode: (bytes) => {
                if (!(bytes instanceof Uint8Array))
                    throw new Error('radix.encode input should be Uint8Array');
                return convertRadix(Array.from(bytes), 2 ** 8, num);
            },
            decode: (digits) => {
                if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                    throw new Error('radix.decode input should be array of strings');
                return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
            },
        };
    }
    /**
     * If both bases are power of same number (like `2**8 <-> 2**64`),
     * there is a linear algorithm. For now we have implementation for power-of-two bases only.
     * @__NO_SIDE_EFFECTS__
     */
    function radix2(bits, revPadding = false) {
        assertNumber(bits);
        if (bits <= 0 || bits > 32)
            throw new Error('radix2: bits should be in (0..32]');
        if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
            throw new Error('radix2: carry overflow');
        return {
            encode: (bytes) => {
                if (!(bytes instanceof Uint8Array))
                    throw new Error('radix2.encode input should be Uint8Array');
                return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
            },
            decode: (digits) => {
                if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                    throw new Error('radix2.decode input should be array of strings');
                return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
            },
        };
    }
    // RFC 4648 aka RFC 3548
    // ---------------------
    /* @__PURE__ */ chain$1(radix2(4), alphabet('0123456789ABCDEF'), join(''));
    /* @__PURE__ */ chain$1(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));
    /* @__PURE__ */ chain$1(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));
    /* @__PURE__ */ chain$1(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));
    /* @__PURE__ */ chain$1(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));
    /* @__PURE__ */ chain$1(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));
    /* @__PURE__ */ chain$1(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));
    // base58 code
    // -----------
    const genBase58 = (abc) => chain$1(radix(58), alphabet(abc), join(''));
    const base58 = /* @__PURE__ */ genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
    /* @__PURE__ */ chain$1(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));
    /* @__PURE__ */ chain$1(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {
        if (typeof s !== 'string' || s.length % 2)
            throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
        return s.toLowerCase();
    }));

    /** @internal */
    function createDecode({ coder, ipfs }, validate) {
        return (value, ipfsCompat) => {
            validate(value, ipfsCompat);
            return coder.decode(ipfs && ipfsCompat
                ? value.substring(1)
                : value);
        };
    }
    /** @internal */
    function createEncode({ coder, ipfs }) {
        return (value, ipfsCompat) => {
            const out = coder.encode(u8aToU8a(value));
            return ipfs && ipfsCompat
                ? `${ipfs}${out}`
                : out;
        };
    }
    /** @internal */
    function createValidate({ chars, ipfs, type, withPadding }) {
        return (value, ipfsCompat) => {
            if (typeof value !== 'string') {
                throw new Error(`Expected ${type} string input`);
            }
            else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) {
                throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
            }
            for (let i = (ipfsCompat ? 1 : 0), count = value.length; i < count; i++) {
                if (chars.includes(value[i])) ;
                else if (withPadding && value[i] === '=') {
                    if (i === count - 1) ;
                    else if (value[i + 1] === '=') ;
                    else {
                        throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
                    }
                }
                else {
                    throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
                }
            }
            return true;
        };
    }

    const config$1 = {
        chars: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
        coder: base58,
        ipfs: 'z',
        type: 'base58'
    };
    /**
     * @name base58Validate
     * @summary Validates a base58 value.
     * @description
     * Validates that the supplied value is valid base58, throwing exceptions if not
     */
    const base58Validate = /*#__PURE__*/ createValidate(config$1);
    /**
     * @name base58Decode
     * @summary Decodes a base58 value.
     * @description
     * From the provided input, decode the base58 and return the result as an `Uint8Array`.
     */
    const base58Decode = /*#__PURE__*/ createDecode(config$1, base58Validate);
    /**
    * @name base58Encode
    * @summary Creates a base58 value.
    * @description
    * From the provided input, create the base58 and return the result as a string.
    */
    const base58Encode = /*#__PURE__*/ createEncode(config$1);

    function number(n) {
        if (!Number.isSafeInteger(n) || n < 0)
            throw new Error(`Wrong positive integer: ${n}`);
    }
    function bytes(b, ...lengths) {
        if (!(b instanceof Uint8Array))
            throw new Error('Expected Uint8Array');
        if (lengths.length > 0 && !lengths.includes(b.length))
            throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
    }
    function hash$3(hash) {
        if (typeof hash !== 'function' || typeof hash.create !== 'function')
            throw new Error('Hash should be wrapped by utils.wrapConstructor');
        number(hash.outputLen);
        number(hash.blockLen);
    }
    function exists(instance, checkFinished = true) {
        if (instance.destroyed)
            throw new Error('Hash instance has been destroyed');
        if (checkFinished && instance.finished)
            throw new Error('Hash#digest() has already been called');
    }
    function output(out, instance) {
        bytes(out);
        const min = instance.outputLen;
        if (out.length < min) {
            throw new Error(`digestInto() expects output buffer of length at least ${min}`);
        }
    }

    const crypto$1 = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const u8a$1 = (a) => a instanceof Uint8Array;
    const u32$1 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    // Cast array to view
    const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    // The rotate right (circular right shift) operation for uint32
    const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
    // big-endian hardware is rare. Just in case someone still decides to run hashes:
    // early-throw an error because we don't support BE yet.
    const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
    if (!isLE)
        throw new Error('Non little-endian hardware is not supported');
    /**
     * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
     */
    function utf8ToBytes$1(str) {
        if (typeof str !== 'string')
            throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
        return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
    }
    /**
     * Normalizes (non-hex) string or Uint8Array to Uint8Array.
     * Warning: when Uint8Array is passed, it would NOT get copied.
     * Keep in mind for future mutable operations.
     */
    function toBytes(data) {
        if (typeof data === 'string')
            data = utf8ToBytes$1(data);
        if (!u8a$1(data))
            throw new Error(`expected Uint8Array, got ${typeof data}`);
        return data;
    }
    /**
     * Copies several Uint8Arrays into one.
     */
    function concatBytes$1(...arrays) {
        const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
        let pad = 0; // walk through each item, ensure they have proper type
        arrays.forEach((a) => {
            if (!u8a$1(a))
                throw new Error('Uint8Array expected');
            r.set(a, pad);
            pad += a.length;
        });
        return r;
    }
    // For runtime check if class implements interface
    class Hash {
        // Safe version that clones internal state
        clone() {
            return this._cloneInto();
        }
    }
    function wrapConstructor(hashCons) {
        const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
        const tmp = hashCons();
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = () => hashCons();
        return hashC;
    }
    function wrapConstructorWithOpts(hashCons) {
        const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
        const tmp = hashCons({});
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = (opts) => hashCons(opts);
        return hashC;
    }
    /**
     * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
     */
    function randomBytes(bytesLength = 32) {
        if (crypto$1 && typeof crypto$1.getRandomValues === 'function') {
            return crypto$1.getRandomValues(new Uint8Array(bytesLength));
        }
        throw new Error('crypto.getRandomValues must be defined');
    }

    // Blake is based on ChaCha permutation.
    // For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
    // prettier-ignore
    const SIGMA = /* @__PURE__ */ new Uint8Array([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
        11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
        7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
        9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
        2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
        12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
        13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
        6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
        10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
    ]);
    class BLAKE2 extends Hash {
        constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
            super();
            this.blockLen = blockLen;
            this.outputLen = outputLen;
            this.length = 0;
            this.pos = 0;
            this.finished = false;
            this.destroyed = false;
            number(blockLen);
            number(outputLen);
            number(keyLen);
            if (outputLen < 0 || outputLen > keyLen)
                throw new Error('outputLen bigger than keyLen');
            if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen))
                throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
            if (opts.salt !== undefined && opts.salt.length !== saltLen)
                throw new Error(`salt must be ${saltLen} byte long or undefined`);
            if (opts.personalization !== undefined && opts.personalization.length !== persLen)
                throw new Error(`personalization must be ${persLen} byte long or undefined`);
            this.buffer32 = u32$1((this.buffer = new Uint8Array(blockLen)));
        }
        update(data) {
            exists(this);
            // Main difference with other hashes: there is flag for last block,
            // so we cannot process current block before we know that there
            // is the next one. This significantly complicates logic and reduces ability
            // to do zero-copy processing
            const { blockLen, buffer, buffer32 } = this;
            data = toBytes(data);
            const len = data.length;
            const offset = data.byteOffset;
            const buf = data.buffer;
            for (let pos = 0; pos < len;) {
                // If buffer is full and we still have input (don't process last block, same as blake2s)
                if (this.pos === blockLen) {
                    this.compress(buffer32, 0, false);
                    this.pos = 0;
                }
                const take = Math.min(blockLen - this.pos, len - pos);
                const dataOffset = offset + pos;
                // full block && aligned to 4 bytes && not last in input
                if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                    const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
                    for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
                        this.length += blockLen;
                        this.compress(data32, pos32, false);
                    }
                    continue;
                }
                buffer.set(data.subarray(pos, pos + take), this.pos);
                this.pos += take;
                this.length += take;
                pos += take;
            }
            return this;
        }
        digestInto(out) {
            exists(this);
            output(out, this);
            const { pos, buffer32 } = this;
            this.finished = true;
            // Padding
            this.buffer.subarray(pos).fill(0);
            this.compress(buffer32, 0, true);
            const out32 = u32$1(out);
            this.get().forEach((v, i) => (out32[i] = v));
        }
        digest() {
            const { buffer, outputLen } = this;
            this.digestInto(buffer);
            const res = buffer.slice(0, outputLen);
            this.destroy();
            return res;
        }
        _cloneInto(to) {
            const { buffer, length, finished, destroyed, outputLen, pos } = this;
            to || (to = new this.constructor({ dkLen: outputLen }));
            to.set(...this.get());
            to.length = length;
            to.finished = finished;
            to.destroyed = destroyed;
            to.outputLen = outputLen;
            to.buffer.set(buffer);
            to.pos = pos;
            return to;
        }
    }

    const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    const _32n$1 = /* @__PURE__ */ BigInt(32);
    // We are not using BigUint64Array, because they are extremely slow as per 2022
    function fromBig(n, le = false) {
        if (le)
            return { h: Number(n & U32_MASK64), l: Number((n >> _32n$1) & U32_MASK64) };
        return { h: Number((n >> _32n$1) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    function split(lst, le = false) {
        let Ah = new Uint32Array(lst.length);
        let Al = new Uint32Array(lst.length);
        for (let i = 0; i < lst.length; i++) {
            const { h, l } = fromBig(lst[i], le);
            [Ah[i], Al[i]] = [h, l];
        }
        return [Ah, Al];
    }
    const toBig = (h, l) => (BigInt(h >>> 0) << _32n$1) | BigInt(l >>> 0);
    // for Shift in [0, 32)
    const shrSH = (h, _l, s) => h >>> s;
    const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
    // Right rotate for Shift in [1, 32)
    const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
    const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
    // Right rotate for Shift in (32, 64), NOTE: 32 is special case.
    const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
    const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
    // Right rotate for shift===32 (just swaps l&h)
    const rotr32H = (_h, l) => l;
    const rotr32L = (h, _l) => h;
    // Left rotate for Shift in [1, 32)
    const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
    const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
    // Left rotate for Shift in (32, 64), NOTE: 32 is special case.
    const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
    const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
    // JS uses 32-bit signed integers for bitwise operations which means we cannot
    // simple take carry out of low bit sum by shift, we need to use division.
    function add(Ah, Al, Bh, Bl) {
        const l = (Al >>> 0) + (Bl >>> 0);
        return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
    }
    // Addition with more than 2 elements
    const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
    const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
    const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
    // prettier-ignore
    const u64$1 = {
        fromBig, split, toBig,
        shrSH, shrSL,
        rotrSH, rotrSL, rotrBH, rotrBL,
        rotr32H, rotr32L,
        rotlSH, rotlSL, rotlBH, rotlBL,
        add, add3L, add3H, add4L, add4H, add5H, add5L,
    };
    var u64$2 = u64$1;

    // Same as SHA-512 but LE
    // prettier-ignore
    const IV$1 = /* @__PURE__ */ new Uint32Array([
        0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,
        0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19
    ]);
    // Temporary buffer
    const BUF = /* @__PURE__ */ new Uint32Array(32);
    // Mixing function G splitted in two halfs
    function G1(a, b, c, d, msg, x) {
        // NOTE: V is LE here
        const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
        let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
        let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
        let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
        let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
        // v[a] = (v[a] + v[b] + x) | 0;
        let ll = u64$2.add3L(Al, Bl, Xl);
        Ah = u64$2.add3H(ll, Ah, Bh, Xh);
        Al = ll | 0;
        // v[d] = rotr(v[d] ^ v[a], 32)
        ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
        ({ Dh, Dl } = { Dh: u64$2.rotr32H(Dh, Dl), Dl: u64$2.rotr32L(Dh, Dl) });
        // v[c] = (v[c] + v[d]) | 0;
        ({ h: Ch, l: Cl } = u64$2.add(Ch, Cl, Dh, Dl));
        // v[b] = rotr(v[b] ^ v[c], 24)
        ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
        ({ Bh, Bl } = { Bh: u64$2.rotrSH(Bh, Bl, 24), Bl: u64$2.rotrSL(Bh, Bl, 24) });
        (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
        (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
        (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
        (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
    }
    function G2(a, b, c, d, msg, x) {
        // NOTE: V is LE here
        const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
        let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
        let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
        let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
        let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
        // v[a] = (v[a] + v[b] + x) | 0;
        let ll = u64$2.add3L(Al, Bl, Xl);
        Ah = u64$2.add3H(ll, Ah, Bh, Xh);
        Al = ll | 0;
        // v[d] = rotr(v[d] ^ v[a], 16)
        ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
        ({ Dh, Dl } = { Dh: u64$2.rotrSH(Dh, Dl, 16), Dl: u64$2.rotrSL(Dh, Dl, 16) });
        // v[c] = (v[c] + v[d]) | 0;
        ({ h: Ch, l: Cl } = u64$2.add(Ch, Cl, Dh, Dl));
        // v[b] = rotr(v[b] ^ v[c], 63)
        ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
        ({ Bh, Bl } = { Bh: u64$2.rotrBH(Bh, Bl, 63), Bl: u64$2.rotrBL(Bh, Bl, 63) });
        (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
        (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
        (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
        (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
    }
    class BLAKE2b extends BLAKE2 {
        constructor(opts = {}) {
            super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);
            // Same as SHA-512, but LE
            this.v0l = IV$1[0] | 0;
            this.v0h = IV$1[1] | 0;
            this.v1l = IV$1[2] | 0;
            this.v1h = IV$1[3] | 0;
            this.v2l = IV$1[4] | 0;
            this.v2h = IV$1[5] | 0;
            this.v3l = IV$1[6] | 0;
            this.v3h = IV$1[7] | 0;
            this.v4l = IV$1[8] | 0;
            this.v4h = IV$1[9] | 0;
            this.v5l = IV$1[10] | 0;
            this.v5h = IV$1[11] | 0;
            this.v6l = IV$1[12] | 0;
            this.v6h = IV$1[13] | 0;
            this.v7l = IV$1[14] | 0;
            this.v7h = IV$1[15] | 0;
            const keyLength = opts.key ? opts.key.length : 0;
            this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);
            if (opts.salt) {
                const salt = u32$1(toBytes(opts.salt));
                this.v4l ^= salt[0];
                this.v4h ^= salt[1];
                this.v5l ^= salt[2];
                this.v5h ^= salt[3];
            }
            if (opts.personalization) {
                const pers = u32$1(toBytes(opts.personalization));
                this.v6l ^= pers[0];
                this.v6h ^= pers[1];
                this.v7l ^= pers[2];
                this.v7h ^= pers[3];
            }
            if (opts.key) {
                // Pad to blockLen and update
                const tmp = new Uint8Array(this.blockLen);
                tmp.set(toBytes(opts.key));
                this.update(tmp);
            }
        }
        // prettier-ignore
        get() {
            let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
            return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
        }
        // prettier-ignore
        set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
            this.v0l = v0l | 0;
            this.v0h = v0h | 0;
            this.v1l = v1l | 0;
            this.v1h = v1h | 0;
            this.v2l = v2l | 0;
            this.v2h = v2h | 0;
            this.v3l = v3l | 0;
            this.v3h = v3h | 0;
            this.v4l = v4l | 0;
            this.v4h = v4h | 0;
            this.v5l = v5l | 0;
            this.v5h = v5h | 0;
            this.v6l = v6l | 0;
            this.v6h = v6h | 0;
            this.v7l = v7l | 0;
            this.v7h = v7h | 0;
        }
        compress(msg, offset, isLast) {
            this.get().forEach((v, i) => (BUF[i] = v)); // First half from state.
            BUF.set(IV$1, 16); // Second half from IV.
            let { h, l } = u64$2.fromBig(BigInt(this.length));
            BUF[24] = IV$1[8] ^ l; // Low word of the offset.
            BUF[25] = IV$1[9] ^ h; // High word.
            // Invert all bits for last block
            if (isLast) {
                BUF[28] = ~BUF[28];
                BUF[29] = ~BUF[29];
            }
            let j = 0;
            const s = SIGMA;
            for (let i = 0; i < 12; i++) {
                G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
                G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
                G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
                G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
                G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
                G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
                G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
                G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
                G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
                G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
                G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
                G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
                G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
                G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
                G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
                G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
            }
            this.v0l ^= BUF[0] ^ BUF[16];
            this.v0h ^= BUF[1] ^ BUF[17];
            this.v1l ^= BUF[2] ^ BUF[18];
            this.v1h ^= BUF[3] ^ BUF[19];
            this.v2l ^= BUF[4] ^ BUF[20];
            this.v2h ^= BUF[5] ^ BUF[21];
            this.v3l ^= BUF[6] ^ BUF[22];
            this.v3h ^= BUF[7] ^ BUF[23];
            this.v4l ^= BUF[8] ^ BUF[24];
            this.v4h ^= BUF[9] ^ BUF[25];
            this.v5l ^= BUF[10] ^ BUF[26];
            this.v5h ^= BUF[11] ^ BUF[27];
            this.v6l ^= BUF[12] ^ BUF[28];
            this.v6h ^= BUF[13] ^ BUF[29];
            this.v7l ^= BUF[14] ^ BUF[30];
            this.v7h ^= BUF[15] ^ BUF[31];
            BUF.fill(0);
        }
        destroy() {
            this.destroyed = true;
            this.buffer32.fill(0);
            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
    }
    /**
     * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
     * @param msg - message that would be hashed
     * @param opts - dkLen, key, salt, personalization
     */
    const blake2b = /* @__PURE__ */ wrapConstructorWithOpts((opts) => new BLAKE2b(opts));

    /** @internal */
    function createAsHex(fn) {
        return (...args) => u8aToHex(fn(...args));
    }
    /** @internal */
    function createDualHasher(wa, js) {
        return (value, bitLength = 256, onlyJs) => {
            const u8a = u8aToU8a(value);
            return !hasBigInt || (!onlyJs && isReady())
                ? wa[bitLength](u8a)
                : js[bitLength](u8a);
        };
    }

    /**
     * @name blake2AsU8a
     * @summary Creates a blake2b u8a from the input.
     * @description
     * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.
     * @example
     * <BR>
     *
     * ```javascript
     * import { blake2AsU8a } from '@polkadot/util-crypto';
     *
     * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa5, 0x3f, 0x98, 0x1c, 0x4d, 0x0d]
     * ```
     */
    function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
        const byteLength = Math.ceil(bitLength / 8);
        const u8a = u8aToU8a(data);
        return !hasBigInt || (!onlyJs && isReady())
            ? blake2b$1(u8a, u8aToU8a(key), byteLength)
            : key
                ? blake2b(u8a, { dkLen: byteLength, key })
                : blake2b(u8a, { dkLen: byteLength });
    }
    /**
     * @name blake2AsHex
     * @description Creates a blake2b hex from the input.
     */
    const blake2AsHex = /*#__PURE__*/ createAsHex(blake2AsU8a);

    const SS58_PREFIX = stringToU8a('SS58PRE');
    function sshash(key) {
        return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
    }

    function checkAddressChecksum(decoded) {
        const ss58Length = (decoded[0] & 64) ? 2 : 1;
        const ss58Decoded = ss58Length === 1
            ? decoded[0]
            : ((decoded[0] & 63) << 2) | (decoded[1] >> 6) | ((decoded[1] & 63) << 8);
        // 32/33 bytes public + 2 bytes checksum + prefix
        const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
        const length = decoded.length - (isPublicKey ? 2 : 1);
        // calculate the hash and do the checksum byte checks
        const hash = sshash(decoded.subarray(0, length));
        const isValid = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey
            ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1]
            : decoded[decoded.length - 1] === hash[0]);
        return [isValid, length, ss58Length, ss58Decoded];
    }

    // Copyright (C) 2021-2023 Parity Technologies (UK) Ltd.
    // SPDX-License-Identifier: Apache-2.0
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // 	http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.

    var knownSubstrate = [
    	{
    		"prefix": 0,
    		"network": "polkadot",
    		"displayName": "Polkadot Relay Chain",
    		"symbols": [
    			"DOT"
    		],
    		"decimals": [
    			10
    		],
    		"standardAccount": "*25519",
    		"website": "https://polkadot.network"
    	},
    	{
    		"prefix": 1,
    		"network": "BareSr25519",
    		"displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "Sr25519",
    		"website": null
    	},
    	{
    		"prefix": 2,
    		"network": "kusama",
    		"displayName": "Kusama Relay Chain",
    		"symbols": [
    			"KSM"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://kusama.network"
    	},
    	{
    		"prefix": 3,
    		"network": "BareEd25519",
    		"displayName": "Bare 32-bit Ed25519 public key.",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "Ed25519",
    		"website": null
    	},
    	{
    		"prefix": 4,
    		"network": "katalchain",
    		"displayName": "Katal Chain",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "*25519",
    		"website": null
    	},
    	{
    		"prefix": 5,
    		"network": "astar",
    		"displayName": "Astar Network",
    		"symbols": [
    			"ASTR"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://astar.network"
    	},
    	{
    		"prefix": 6,
    		"network": "bifrost",
    		"displayName": "Bifrost",
    		"symbols": [
    			"BNC"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://bifrost.finance/"
    	},
    	{
    		"prefix": 7,
    		"network": "edgeware",
    		"displayName": "Edgeware",
    		"symbols": [
    			"EDG"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://edgewa.re"
    	},
    	{
    		"prefix": 8,
    		"network": "karura",
    		"displayName": "Karura",
    		"symbols": [
    			"KAR"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://karura.network/"
    	},
    	{
    		"prefix": 9,
    		"network": "reynolds",
    		"displayName": "Laminar Reynolds Canary",
    		"symbols": [
    			"REY"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "http://laminar.network/"
    	},
    	{
    		"prefix": 10,
    		"network": "acala",
    		"displayName": "Acala",
    		"symbols": [
    			"ACA"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://acala.network/"
    	},
    	{
    		"prefix": 11,
    		"network": "laminar",
    		"displayName": "Laminar",
    		"symbols": [
    			"LAMI"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "http://laminar.network/"
    	},
    	{
    		"prefix": 12,
    		"network": "polymesh",
    		"displayName": "Polymesh",
    		"symbols": [
    			"POLYX"
    		],
    		"decimals": [
    			6
    		],
    		"standardAccount": "*25519",
    		"website": "https://polymath.network/"
    	},
    	{
    		"prefix": 13,
    		"network": "integritee",
    		"displayName": "Integritee",
    		"symbols": [
    			"TEER"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://integritee.network"
    	},
    	{
    		"prefix": 14,
    		"network": "totem",
    		"displayName": "Totem",
    		"symbols": [
    			"TOTEM"
    		],
    		"decimals": [
    			0
    		],
    		"standardAccount": "*25519",
    		"website": "https://totemaccounting.com"
    	},
    	{
    		"prefix": 15,
    		"network": "synesthesia",
    		"displayName": "Synesthesia",
    		"symbols": [
    			"SYN"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://synesthesia.network/"
    	},
    	{
    		"prefix": 16,
    		"network": "kulupu",
    		"displayName": "Kulupu",
    		"symbols": [
    			"KLP"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://kulupu.network/"
    	},
    	{
    		"prefix": 17,
    		"network": "dark",
    		"displayName": "Dark Mainnet",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "*25519",
    		"website": null
    	},
    	{
    		"prefix": 18,
    		"network": "darwinia",
    		"displayName": "Darwinia Network",
    		"symbols": [
    			"RING"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "secp256k1",
    		"website": "https://darwinia.network"
    	},
    	{
    		"prefix": 19,
    		"network": "watr",
    		"displayName": "Watr Protocol",
    		"symbols": [
    			"WATR"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://www.watr.org"
    	},
    	{
    		"prefix": 20,
    		"network": "stafi",
    		"displayName": "Stafi",
    		"symbols": [
    			"FIS"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://stafi.io"
    	},
    	{
    		"prefix": 21,
    		"network": "karmachain",
    		"displayName": "Karmacoin",
    		"symbols": [
    			"KCOIN"
    		],
    		"decimals": [
    			6
    		],
    		"standardAccount": "*25519",
    		"website": "https://karmaco.in"
    	},
    	{
    		"prefix": 22,
    		"network": "dock-pos-mainnet",
    		"displayName": "Dock Mainnet",
    		"symbols": [
    			"DCK"
    		],
    		"decimals": [
    			6
    		],
    		"standardAccount": "*25519",
    		"website": "https://dock.io"
    	},
    	{
    		"prefix": 23,
    		"network": "shift",
    		"displayName": "ShiftNrg",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "*25519",
    		"website": null
    	},
    	{
    		"prefix": 24,
    		"network": "zero",
    		"displayName": "ZERO",
    		"symbols": [
    			"ZERO"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://zero.io"
    	},
    	{
    		"prefix": 25,
    		"network": "zero-alphaville",
    		"displayName": "ZERO Alphaville",
    		"symbols": [
    			"ZERO"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://zero.io"
    	},
    	{
    		"prefix": 26,
    		"network": "jupiter",
    		"displayName": "Jupiter",
    		"symbols": [
    			"jDOT"
    		],
    		"decimals": [
    			10
    		],
    		"standardAccount": "*25519",
    		"website": "https://jupiter.patract.io"
    	},
    	{
    		"prefix": 27,
    		"network": "kabocha",
    		"displayName": "Kabocha",
    		"symbols": [
    			"KAB"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://kabocha.network"
    	},
    	{
    		"prefix": 28,
    		"network": "subsocial",
    		"displayName": "Subsocial",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "*25519",
    		"website": null
    	},
    	{
    		"prefix": 29,
    		"network": "cord",
    		"displayName": "CORD Network",
    		"symbols": [
    			"DHI",
    			"WAY"
    		],
    		"decimals": [
    			12,
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://cord.network/"
    	},
    	{
    		"prefix": 30,
    		"network": "phala",
    		"displayName": "Phala Network",
    		"symbols": [
    			"PHA"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://phala.network"
    	},
    	{
    		"prefix": 31,
    		"network": "litentry",
    		"displayName": "Litentry Network",
    		"symbols": [
    			"LIT"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://litentry.com/"
    	},
    	{
    		"prefix": 32,
    		"network": "robonomics",
    		"displayName": "Robonomics",
    		"symbols": [
    			"XRT"
    		],
    		"decimals": [
    			9
    		],
    		"standardAccount": "*25519",
    		"website": "https://robonomics.network"
    	},
    	{
    		"prefix": 33,
    		"network": "datahighway",
    		"displayName": "DataHighway",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "*25519",
    		"website": null
    	},
    	{
    		"prefix": 34,
    		"network": "ares",
    		"displayName": "Ares Protocol",
    		"symbols": [
    			"ARES"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://www.aresprotocol.com/"
    	},
    	{
    		"prefix": 35,
    		"network": "vln",
    		"displayName": "Valiu Liquidity Network",
    		"symbols": [
    			"USDv"
    		],
    		"decimals": [
    			15
    		],
    		"standardAccount": "*25519",
    		"website": "https://valiu.com/"
    	},
    	{
    		"prefix": 36,
    		"network": "centrifuge",
    		"displayName": "Centrifuge Chain",
    		"symbols": [
    			"CFG"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://centrifuge.io/"
    	},
    	{
    		"prefix": 37,
    		"network": "nodle",
    		"displayName": "Nodle Chain",
    		"symbols": [
    			"NODL"
    		],
    		"decimals": [
    			11
    		],
    		"standardAccount": "*25519",
    		"website": "https://nodle.io/"
    	},
    	{
    		"prefix": 38,
    		"network": "kilt",
    		"displayName": "KILT Spiritnet",
    		"symbols": [
    			"KILT"
    		],
    		"decimals": [
    			15
    		],
    		"standardAccount": "*25519",
    		"website": "https://kilt.io/"
    	},
    	{
    		"prefix": 39,
    		"network": "mathchain",
    		"displayName": "MathChain mainnet",
    		"symbols": [
    			"MATH"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://mathwallet.org"
    	},
    	{
    		"prefix": 40,
    		"network": "mathchain-testnet",
    		"displayName": "MathChain testnet",
    		"symbols": [
    			"MATH"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://mathwallet.org"
    	},
    	{
    		"prefix": 41,
    		"network": "poli",
    		"displayName": "Polimec Chain",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "*25519",
    		"website": "https://polimec.io/"
    	},
    	{
    		"prefix": 42,
    		"network": "substrate",
    		"displayName": "Substrate",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "*25519",
    		"website": "https://substrate.io/"
    	},
    	{
    		"prefix": 43,
    		"network": "BareSecp256k1",
    		"displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "secp256k1",
    		"website": null
    	},
    	{
    		"prefix": 44,
    		"network": "chainx",
    		"displayName": "ChainX",
    		"symbols": [
    			"PCX"
    		],
    		"decimals": [
    			8
    		],
    		"standardAccount": "*25519",
    		"website": "https://chainx.org/"
    	},
    	{
    		"prefix": 45,
    		"network": "uniarts",
    		"displayName": "UniArts Network",
    		"symbols": [
    			"UART",
    			"UINK"
    		],
    		"decimals": [
    			12,
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://uniarts.me"
    	},
    	{
    		"prefix": 46,
    		"network": "reserved46",
    		"displayName": "This prefix is reserved.",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": null,
    		"website": null
    	},
    	{
    		"prefix": 47,
    		"network": "reserved47",
    		"displayName": "This prefix is reserved.",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": null,
    		"website": null
    	},
    	{
    		"prefix": 48,
    		"network": "neatcoin",
    		"displayName": "Neatcoin Mainnet",
    		"symbols": [
    			"NEAT"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://neatcoin.org"
    	},
    	{
    		"prefix": 49,
    		"network": "picasso",
    		"displayName": "Picasso",
    		"symbols": [
    			"PICA"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://picasso.composable.finance"
    	},
    	{
    		"prefix": 50,
    		"network": "composable",
    		"displayName": "Composable Finance",
    		"symbols": [
    			"LAYR"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://composable.finance"
    	},
    	{
    		"prefix": 51,
    		"network": "oak",
    		"displayName": "OAK Network",
    		"symbols": [
    			"OAK",
    			"TUR"
    		],
    		"decimals": [
    			10,
    			10
    		],
    		"standardAccount": "*25519",
    		"website": "https://oak.tech"
    	},
    	{
    		"prefix": 52,
    		"network": "KICO",
    		"displayName": "KICO",
    		"symbols": [
    			"KICO"
    		],
    		"decimals": [
    			14
    		],
    		"standardAccount": "*25519",
    		"website": "https://dico.io"
    	},
    	{
    		"prefix": 53,
    		"network": "DICO",
    		"displayName": "DICO",
    		"symbols": [
    			"DICO"
    		],
    		"decimals": [
    			14
    		],
    		"standardAccount": "*25519",
    		"website": "https://dico.io"
    	},
    	{
    		"prefix": 54,
    		"network": "cere",
    		"displayName": "Cere Network",
    		"symbols": [
    			"CERE"
    		],
    		"decimals": [
    			10
    		],
    		"standardAccount": "*25519",
    		"website": "https://cere.network"
    	},
    	{
    		"prefix": 55,
    		"network": "xxnetwork",
    		"displayName": "xx network",
    		"symbols": [
    			"XX"
    		],
    		"decimals": [
    			9
    		],
    		"standardAccount": "*25519",
    		"website": "https://xx.network"
    	},
    	{
    		"prefix": 56,
    		"network": "pendulum",
    		"displayName": "Pendulum chain",
    		"symbols": [
    			"PEN"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://pendulumchain.org/"
    	},
    	{
    		"prefix": 57,
    		"network": "amplitude",
    		"displayName": "Amplitude chain",
    		"symbols": [
    			"AMPE"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://pendulumchain.org/"
    	},
    	{
    		"prefix": 63,
    		"network": "hydradx",
    		"displayName": "HydraDX",
    		"symbols": [
    			"HDX"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://hydradx.io"
    	},
    	{
    		"prefix": 64,
    		"network": "ewx",
    		"displayName": "Energy Web X",
    		"symbols": [
    			"EWT"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://www.energyweb.org"
    	},
    	{
    		"prefix": 65,
    		"network": "aventus",
    		"displayName": "Aventus Mainnet",
    		"symbols": [
    			"AVT"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://aventus.io"
    	},
    	{
    		"prefix": 66,
    		"network": "crust",
    		"displayName": "Crust Network",
    		"symbols": [
    			"CRU"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://crust.network"
    	},
    	{
    		"prefix": 67,
    		"network": "genshiro",
    		"displayName": "Genshiro Network",
    		"symbols": [
    			"GENS",
    			"EQD",
    			"LPT0"
    		],
    		"decimals": [
    			9,
    			9,
    			9
    		],
    		"standardAccount": "*25519",
    		"website": "https://genshiro.equilibrium.io"
    	},
    	{
    		"prefix": 68,
    		"network": "equilibrium",
    		"displayName": "Equilibrium Network",
    		"symbols": [
    			"EQ"
    		],
    		"decimals": [
    			9
    		],
    		"standardAccount": "*25519",
    		"website": "https://equilibrium.io"
    	},
    	{
    		"prefix": 69,
    		"network": "sora",
    		"displayName": "SORA Network",
    		"symbols": [
    			"XOR"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://sora.org"
    	},
    	{
    		"prefix": 71,
    		"network": "p3d",
    		"displayName": "3DP network",
    		"symbols": [
    			"P3D"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://3dpass.org"
    	},
    	{
    		"prefix": 72,
    		"network": "p3dt",
    		"displayName": "3DP test network",
    		"symbols": [
    			"P3Dt"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://3dpass.org"
    	},
    	{
    		"prefix": 73,
    		"network": "zeitgeist",
    		"displayName": "Zeitgeist",
    		"symbols": [
    			"ZTG"
    		],
    		"decimals": [
    			10
    		],
    		"standardAccount": "*25519",
    		"website": "https://zeitgeist.pm"
    	},
    	{
    		"prefix": 77,
    		"network": "manta",
    		"displayName": "Manta network",
    		"symbols": [
    			"MANTA"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://manta.network"
    	},
    	{
    		"prefix": 78,
    		"network": "calamari",
    		"displayName": "Calamari: Manta Canary Network",
    		"symbols": [
    			"KMA"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://manta.network"
    	},
    	{
    		"prefix": 81,
    		"network": "sora_dot_para",
    		"displayName": "SORA Polkadot Parachain",
    		"symbols": [
    			"XOR"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://sora.org"
    	},
    	{
    		"prefix": 88,
    		"network": "polkadex",
    		"displayName": "Polkadex Mainnet",
    		"symbols": [
    			"PDEX"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://polkadex.trade"
    	},
    	{
    		"prefix": 89,
    		"network": "polkadexparachain",
    		"displayName": "Polkadex Parachain",
    		"symbols": [
    			"PDEX"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://polkadex.trade"
    	},
    	{
    		"prefix": 90,
    		"network": "frequency",
    		"displayName": "Frequency",
    		"symbols": [
    			"FRQCY"
    		],
    		"decimals": [
    			8
    		],
    		"standardAccount": "*25519",
    		"website": "https://www.frequency.xyz"
    	},
    	{
    		"prefix": 92,
    		"network": "anmol",
    		"displayName": "Anmol Network",
    		"symbols": [
    			"ANML"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://anmol.network/"
    	},
    	{
    		"prefix": 93,
    		"network": "fragnova",
    		"displayName": "Fragnova Network",
    		"symbols": [
    			"NOVA"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://fragnova.com"
    	},
    	{
    		"prefix": 98,
    		"network": "polkasmith",
    		"displayName": "PolkaSmith Canary Network",
    		"symbols": [
    			"PKS"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://polkafoundry.com"
    	},
    	{
    		"prefix": 99,
    		"network": "polkafoundry",
    		"displayName": "PolkaFoundry Network",
    		"symbols": [
    			"PKF"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://polkafoundry.com"
    	},
    	{
    		"prefix": 100,
    		"network": "ibtida",
    		"displayName": "Anmol Network Ibtida Canary network",
    		"symbols": [
    			"IANML"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://anmol.network/"
    	},
    	{
    		"prefix": 101,
    		"network": "origintrail-parachain",
    		"displayName": "OriginTrail Parachain",
    		"symbols": [
    			"OTP"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://parachain.origintrail.io/"
    	},
    	{
    		"prefix": 105,
    		"network": "pontem-network",
    		"displayName": "Pontem Network",
    		"symbols": [
    			"PONT"
    		],
    		"decimals": [
    			10
    		],
    		"standardAccount": "*25519",
    		"website": "https://pontem.network"
    	},
    	{
    		"prefix": 110,
    		"network": "heiko",
    		"displayName": "Heiko",
    		"symbols": [
    			"HKO"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://parallel.fi/"
    	},
    	{
    		"prefix": 113,
    		"network": "integritee-incognito",
    		"displayName": "Integritee Incognito",
    		"symbols": [],
    		"decimals": [],
    		"standardAccount": "*25519",
    		"website": "https://integritee.network"
    	},
    	{
    		"prefix": 117,
    		"network": "tinker",
    		"displayName": "Tinker",
    		"symbols": [
    			"TNKR"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://invarch.network"
    	},
    	{
    		"prefix": 126,
    		"network": "joystream",
    		"displayName": "Joystream",
    		"symbols": [
    			"JOY"
    		],
    		"decimals": [
    			10
    		],
    		"standardAccount": "*25519",
    		"website": "https://www.joystream.org"
    	},
    	{
    		"prefix": 128,
    		"network": "clover",
    		"displayName": "Clover Finance",
    		"symbols": [
    			"CLV"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://clover.finance"
    	},
    	{
    		"prefix": 129,
    		"network": "dorafactory-polkadot",
    		"displayName": "Dorafactory Polkadot Network",
    		"symbols": [
    			"DORA"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://dorafactory.org"
    	},
    	{
    		"prefix": 131,
    		"network": "litmus",
    		"displayName": "Litmus Network",
    		"symbols": [
    			"LIT"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://litentry.com/"
    	},
    	{
    		"prefix": 136,
    		"network": "altair",
    		"displayName": "Altair",
    		"symbols": [
    			"AIR"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://centrifuge.io/"
    	},
    	{
    		"prefix": 137,
    		"network": "vara",
    		"displayName": "Vara Network",
    		"symbols": [
    			"VARA"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://vara-network.io/"
    	},
    	{
    		"prefix": 172,
    		"network": "parallel",
    		"displayName": "Parallel",
    		"symbols": [
    			"PARA"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://parallel.fi/"
    	},
    	{
    		"prefix": 252,
    		"network": "social-network",
    		"displayName": "Social Network",
    		"symbols": [
    			"NET"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://social.network"
    	},
    	{
    		"prefix": 255,
    		"network": "quartz_mainnet",
    		"displayName": "QUARTZ by UNIQUE",
    		"symbols": [
    			"QTZ"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://unique.network"
    	},
    	{
    		"prefix": 268,
    		"network": "pioneer_network",
    		"displayName": "Pioneer Network by Bit.Country",
    		"symbols": [
    			"NEER"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://bit.country"
    	},
    	{
    		"prefix": 420,
    		"network": "sora_kusama_para",
    		"displayName": "SORA Kusama Parachain",
    		"symbols": [
    			"XOR"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://sora.org"
    	},
    	{
    		"prefix": 440,
    		"network": "allfeat_network",
    		"displayName": "Allfeat Network",
    		"symbols": [
    			"AFT"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://allfeat.network"
    	},
    	{
    		"prefix": 666,
    		"network": "metaquity_network",
    		"displayName": "Metaquity Network",
    		"symbols": [
    			"MQTY"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://metaquity.xyz/"
    	},
    	{
    		"prefix": 789,
    		"network": "geek",
    		"displayName": "GEEK Network",
    		"symbols": [
    			"GEEK"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://geek.gl"
    	},
    	{
    		"prefix": 995,
    		"network": "ternoa",
    		"displayName": "Ternoa",
    		"symbols": [
    			"CAPS"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://www.ternoa.network"
    	},
    	{
    		"prefix": 1110,
    		"network": "efinity",
    		"displayName": "Efinity",
    		"symbols": [
    			"EFI"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://efinity.io/"
    	},
    	{
    		"prefix": 1221,
    		"network": "peaq",
    		"displayName": "Peaq Network",
    		"symbols": [
    			"PEAQ"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "Sr25519",
    		"website": "https://www.peaq.network/"
    	},
    	{
    		"prefix": 1222,
    		"network": "krest",
    		"displayName": "Krest Network",
    		"symbols": [
    			"KREST"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "Sr25519",
    		"website": "https://www.peaq.network/"
    	},
    	{
    		"prefix": 1284,
    		"network": "moonbeam",
    		"displayName": "Moonbeam",
    		"symbols": [
    			"GLMR"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "secp256k1",
    		"website": "https://moonbeam.network"
    	},
    	{
    		"prefix": 1285,
    		"network": "moonriver",
    		"displayName": "Moonriver",
    		"symbols": [
    			"MOVR"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "secp256k1",
    		"website": "https://moonbeam.network"
    	},
    	{
    		"prefix": 1328,
    		"network": "ajuna",
    		"displayName": "Ajuna Network",
    		"symbols": [
    			"AJUN"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://ajuna.io"
    	},
    	{
    		"prefix": 1337,
    		"network": "bajun",
    		"displayName": "Bajun Network",
    		"symbols": [
    			"BAJU"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://ajuna.io"
    	},
    	{
    		"prefix": 1516,
    		"network": "societal",
    		"displayName": "Societal",
    		"symbols": [
    			"SCTL"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://www.sctl.xyz"
    	},
    	{
    		"prefix": 1985,
    		"network": "seals",
    		"displayName": "Seals Network",
    		"symbols": [
    			"SEAL"
    		],
    		"decimals": [
    			9
    		],
    		"standardAccount": "*25519",
    		"website": "https://seals.app"
    	},
    	{
    		"prefix": 2007,
    		"network": "kapex",
    		"displayName": "Kapex",
    		"symbols": [
    			"KAPEX"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://totemaccounting.com"
    	},
    	{
    		"prefix": 2009,
    		"network": "cloudwalk_mainnet",
    		"displayName": "CloudWalk Network Mainnet",
    		"symbols": [
    			"CWN"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://explorer.mainnet.cloudwalk.io"
    	},
    	{
    		"prefix": 2021,
    		"network": "logion",
    		"displayName": "logion network",
    		"symbols": [
    			"LGNT"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://logion.network"
    	},
    	{
    		"prefix": 2032,
    		"network": "interlay",
    		"displayName": "Interlay",
    		"symbols": [
    			"INTR"
    		],
    		"decimals": [
    			10
    		],
    		"standardAccount": "*25519",
    		"website": "https://interlay.io/"
    	},
    	{
    		"prefix": 2092,
    		"network": "kintsugi",
    		"displayName": "Kintsugi",
    		"symbols": [
    			"KINT"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://interlay.io/"
    	},
    	{
    		"prefix": 2106,
    		"network": "bitgreen",
    		"displayName": "Bitgreen",
    		"symbols": [
    			"BBB"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://bitgreen.org/"
    	},
    	{
    		"prefix": 2112,
    		"network": "chainflip",
    		"displayName": "Chainflip",
    		"symbols": [
    			"FLIP"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://chainflip.io/"
    	},
    	{
    		"prefix": 2199,
    		"network": "moonsama",
    		"displayName": "Moonsama",
    		"symbols": [
    			"SAMA"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "secp256k1",
    		"website": "https://moonsama.com"
    	},
    	{
    		"prefix": 2206,
    		"network": "ICE",
    		"displayName": "ICE Network",
    		"symbols": [
    			"ICY"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://icenetwork.io"
    	},
    	{
    		"prefix": 2207,
    		"network": "SNOW",
    		"displayName": "SNOW: ICE Canary Network",
    		"symbols": [
    			"ICZ"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://icenetwork.io"
    	},
    	{
    		"prefix": 2254,
    		"network": "subspace_testnet",
    		"displayName": "Subspace testnet",
    		"symbols": [
    			"tSSC"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://subspace.network"
    	},
    	{
    		"prefix": 3333,
    		"network": "peerplays",
    		"displayName": "Peerplays",
    		"symbols": [
    			"PPY"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "secp256k1",
    		"website": "https://www.peerplays.com/"
    	},
    	{
    		"prefix": 4006,
    		"network": "tangle",
    		"displayName": "Tangle Network",
    		"symbols": [
    			"TNT"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://www.webb.tools/"
    	},
    	{
    		"prefix": 4450,
    		"network": "g1",
    		"displayName": "Ğ1",
    		"symbols": [
    			"G1"
    		],
    		"decimals": [
    			2
    		],
    		"standardAccount": "*25519",
    		"website": "https://duniter.org"
    	},
    	{
    		"prefix": 5234,
    		"network": "humanode",
    		"displayName": "Humanode Network",
    		"symbols": [
    			"HMND"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://humanode.io"
    	},
    	{
    		"prefix": 6094,
    		"network": "subspace",
    		"displayName": "Subspace",
    		"symbols": [
    			"SSC"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://subspace.network"
    	},
    	{
    		"prefix": 7007,
    		"network": "tidefi",
    		"displayName": "Tidefi",
    		"symbols": [
    			"TDFY"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://tidefi.com"
    	},
    	{
    		"prefix": 7013,
    		"network": "gm",
    		"displayName": "GM",
    		"symbols": [
    			"FREN",
    			"GM",
    			"GN"
    		],
    		"decimals": [
    			12,
    			0,
    			0
    		],
    		"standardAccount": "*25519",
    		"website": "https://gmordie.com"
    	},
    	{
    		"prefix": 7306,
    		"network": "krigan",
    		"displayName": "Krigan Network",
    		"symbols": [
    			"KRGN"
    		],
    		"decimals": [
    			9
    		],
    		"standardAccount": "*25519",
    		"website": "https://krigan.network"
    	},
    	{
    		"prefix": 7391,
    		"network": "unique_mainnet",
    		"displayName": "Unique Network",
    		"symbols": [
    			"UNQ"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://unique.network"
    	},
    	{
    		"prefix": 8866,
    		"network": "golden_gate",
    		"displayName": "Golden Gate",
    		"symbols": [
    			"GGX"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://ggxchain.io/"
    	},
    	{
    		"prefix": 8883,
    		"network": "sapphire_mainnet",
    		"displayName": "Sapphire by Unique",
    		"symbols": [
    			"QTZ"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://unique.network"
    	},
    	{
    		"prefix": 8886,
    		"network": "golden_gate_sydney",
    		"displayName": "Golden Gate Sydney",
    		"symbols": [
    			"GGXT"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://ggxchain.io/"
    	},
    	{
    		"prefix": 9072,
    		"network": "hashed",
    		"displayName": "Hashed Network",
    		"symbols": [
    			"HASH"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://hashed.network"
    	},
    	{
    		"prefix": 9807,
    		"network": "dentnet",
    		"displayName": "DENTNet",
    		"symbols": [
    			"DENTX"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://www.dentnet.io"
    	},
    	{
    		"prefix": 9935,
    		"network": "t3rn",
    		"displayName": "t3rn",
    		"symbols": [
    			"TRN"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://t3rn.io/"
    	},
    	{
    		"prefix": 10041,
    		"network": "basilisk",
    		"displayName": "Basilisk",
    		"symbols": [
    			"BSX"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://bsx.fi"
    	},
    	{
    		"prefix": 11330,
    		"network": "cess-testnet",
    		"displayName": "CESS Testnet",
    		"symbols": [
    			"TCESS"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://cess.cloud"
    	},
    	{
    		"prefix": 11331,
    		"network": "cess",
    		"displayName": "CESS",
    		"symbols": [
    			"CESS"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://cess.cloud"
    	},
    	{
    		"prefix": 11486,
    		"network": "luhn",
    		"displayName": "Luhn Network",
    		"symbols": [
    			"LUHN"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://luhn.network"
    	},
    	{
    		"prefix": 11820,
    		"network": "contextfree",
    		"displayName": "Automata ContextFree",
    		"symbols": [
    			"CTX"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://ata.network"
    	},
    	{
    		"prefix": 12155,
    		"network": "impact",
    		"displayName": "Impact Protocol Network",
    		"symbols": [
    			"BSTY"
    		],
    		"decimals": [
    			18
    		],
    		"standardAccount": "*25519",
    		"website": "https://impactprotocol.network/"
    	},
    	{
    		"prefix": 12191,
    		"network": "nftmart",
    		"displayName": "NFTMart",
    		"symbols": [
    			"NMT"
    		],
    		"decimals": [
    			12
    		],
    		"standardAccount": "*25519",
    		"website": "https://nftmart.io"
    	},
    	{
    		"prefix": 13116,
    		"network": "bittensor",
    		"displayName": "Bittensor",
    		"symbols": [
    			"TAO"
    		],
    		"decimals": [
    			9
    		],
    		"standardAccount": "*25519",
    		"website": "https://bittensor.com"
    	},
    	{
    		"prefix": 14697,
    		"network": "goro",
    		"displayName": "GORO Network",
    		"symbols": [
    			"GORO"
    		],
    		"decimals": [
    			9
    		],
    		"standardAccount": "*25519",
    		"website": "https://goro.network"
    	}
    ];

    const knownGenesis = {
        acala: [
            '0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c'
        ],
        ajuna: [
            '0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee'
        ],
        'aleph-node': [
            '0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e'
        ],
        astar: [
            '0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6'
        ],
        basilisk: [
            '0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755'
        ],
        bifrost: [
            '0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b'
        ],
        'bifrost-kusama': [
            '0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed'
        ],
        bittensor: [
            '0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03'
        ],
        centrifuge: [
            '0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82',
            '0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5'
        ],
        cere: [
            '0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c'
        ],
        composable: [
            '0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d'
        ],
        darwinia: [
            '0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6'
        ],
        'dock-mainnet': [
            '0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae',
            '0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9'
        ],
        edgeware: [
            '0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b'
        ],
        enjin: [
            '0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9'
        ],
        equilibrium: [
            '0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925'
        ],
        genshiro: [
            '0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243'
        ],
        hydradx: [
            '0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d',
            '0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc',
            '0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9',
            '0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047',
            '0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2' // Snakenet Gen1
        ],
        'interlay-parachain': [
            '0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72'
        ],
        karura: [
            '0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b'
        ],
        khala: [
            '0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d'
        ],
        kulupu: [
            '0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba'
        ],
        kusama: [
            '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe',
            '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636',
            '0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf' // Kusama CC1
        ],
        matrixchain: [
            '0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615'
        ],
        nodle: [
            '0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21'
        ],
        origintrail: [
            '0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174'
        ],
        p3d: [
            '0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66'
        ],
        parallel: [
            '0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97'
        ],
        pendulum: [
            '0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86'
        ],
        phala: [
            '0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736'
        ],
        picasso: [
            '0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc',
            '0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c'
        ],
        polkadex: [
            '0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c'
        ],
        polkadot: [
            '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3'
        ],
        polymesh: [
            '0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063'
        ],
        rococo: [
            '0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e',
            '0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897',
            '0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770',
            '0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff',
            '0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a',
            '0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9',
            '0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779',
            '0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215',
            '0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9',
            '0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147',
            '0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd',
            '0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299'
        ],
        sora: [
            '0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5'
        ],
        stafi: [
            '0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80'
        ],
        statemine: [
            '0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a'
        ],
        statemint: [
            '0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f'
        ],
        subsocial: [
            '0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8'
        ],
        ternoa: [
            '0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e'
        ],
        unique: [
            '0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31'
        ],
        vtb: [
            '0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f',
            '0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa'
        ],
        westend: [
            '0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e'
        ],
        xxnetwork: [
            '0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa'
        ],
        zeitgeist: [
            '0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060'
        ]
    };

    const knownIcon = {
        centrifuge: 'polkadot',
        kusama: 'polkadot',
        polkadot: 'polkadot',
        sora: 'polkadot',
        statemine: 'polkadot',
        statemint: 'polkadot',
        westmint: 'polkadot'
    };

    const knownLedger = {
        acala: 0x00000313,
        ajuna: 0x00000162,
        'aleph-node': 0x00000283,
        astar: 0x0000032a,
        bifrost: 0x00000314,
        'bifrost-kusama': 0x00000314,
        centrifuge: 0x000002eb,
        composable: 0x00000162,
        darwinia: 0x00000162,
        'dock-mainnet': 0x00000252,
        edgeware: 0x0000020b,
        enjin: 0x00000483,
        equilibrium: 0x05f5e0fd,
        genshiro: 0x05f5e0fc,
        hydradx: 0x00000162,
        'interlay-parachain': 0x00000162,
        karura: 0x000002ae,
        khala: 0x000001b2,
        kusama: 0x000001b2,
        matrixchain: 0x00000483,
        nodle: 0x000003eb,
        origintrail: 0x00000162,
        parallel: 0x00000162,
        pendulum: 0x00000162,
        phala: 0x00000162,
        picasso: 0x000001b2,
        polkadex: 0x0000031f,
        polkadot: 0x00000162,
        polymesh: 0x00000253,
        sora: 0x00000269,
        stafi: 0x0000038b,
        statemine: 0x000001b2,
        statemint: 0x00000162,
        ternoa: 0x00003e3,
        unique: 0x00000162,
        vtb: 0x000002b6,
        xxnetwork: 0x000007a3,
        zeitgeist: 0x00000162
    };

    const knownTestnet = {
        '': true,
        'cess-testnet': true,
        'dock-testnet': true,
        jupiter: true,
        'mathchain-testnet': true,
        p3dt: true,
        subspace_testnet: true,
        'zero-alphaville': true
    };

    const UNSORTED = [0, 2, 42];
    const TESTNETS = ['testnet'];
    function toExpanded(o) {
        const network = o.network || '';
        const nameParts = network.replace(/_/g, '-').split('-');
        const n = o;
        // ledger additions
        n.slip44 = knownLedger[network];
        n.hasLedgerSupport = !!n.slip44;
        // general items
        n.genesisHash = knownGenesis[network] || [];
        n.icon = knownIcon[network] || 'substrate';
        // filtering
        n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
        n.isIgnored = n.isTestnet || (!(o.standardAccount &&
            o.decimals?.length &&
            o.symbols?.length) &&
            o.prefix !== 42);
        return n;
    }
    function filterSelectable({ genesisHash, prefix }) {
        return !!genesisHash.length || prefix === 42;
    }
    function filterAvailable(n) {
        return !n.isIgnored && !!n.network;
    }
    function sortNetworks(a, b) {
        const isUnSortedA = UNSORTED.includes(a.prefix);
        const isUnSortedB = UNSORTED.includes(b.prefix);
        return isUnSortedA === isUnSortedB
            ? isUnSortedA
                ? 0
                : a.displayName.localeCompare(b.displayName)
            : isUnSortedA
                ? -1
                : 1;
    }
    const allNetworks = knownSubstrate.map(toExpanded);
    const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
    const selectableNetworks = availableNetworks.filter(filterSelectable);

    const defaults$2 = {
        allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
        // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
        allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
        allowedPrefix: availableNetworks.map(({ prefix }) => prefix),
        prefix: 42
    };

    function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
        if (!encoded) {
            throw new Error('Invalid empty address passed');
        }
        if (isU8a(encoded) || isHex(encoded)) {
            return u8aToU8a(encoded);
        }
        try {
            const decoded = base58Decode(encoded);
            if (!defaults$2.allowedEncodedLengths.includes(decoded.length)) {
                throw new Error('Invalid decoded address length');
            }
            const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
            if (!isValid && !ignoreChecksum) {
                throw new Error('Invalid decoded address checksum');
            }
            else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
                throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
            }
            return decoded.slice(ss58Length, endPos);
        }
        catch (error) {
            throw new Error(`Decoding ${encoded}: ${error.message}`);
        }
    }

    const BN_BE_256_OPTS = { bitLength: 256, isLe: false };

    // Polyfill for Safari 14
    function setBigUint64(view, byteOffset, value, isLE) {
        if (typeof view.setBigUint64 === 'function')
            return view.setBigUint64(byteOffset, value, isLE);
        const _32n = BigInt(32);
        const _u32_max = BigInt(0xffffffff);
        const wh = Number((value >> _32n) & _u32_max);
        const wl = Number(value & _u32_max);
        const h = isLE ? 4 : 0;
        const l = isLE ? 0 : 4;
        view.setUint32(byteOffset + h, wh, isLE);
        view.setUint32(byteOffset + l, wl, isLE);
    }
    // Base SHA2 class (RFC 6234)
    class SHA2 extends Hash {
        constructor(blockLen, outputLen, padOffset, isLE) {
            super();
            this.blockLen = blockLen;
            this.outputLen = outputLen;
            this.padOffset = padOffset;
            this.isLE = isLE;
            this.finished = false;
            this.length = 0;
            this.pos = 0;
            this.destroyed = false;
            this.buffer = new Uint8Array(blockLen);
            this.view = createView(this.buffer);
        }
        update(data) {
            exists(this);
            const { view, buffer, blockLen } = this;
            data = toBytes(data);
            const len = data.length;
            for (let pos = 0; pos < len;) {
                const take = Math.min(blockLen - this.pos, len - pos);
                // Fast path: we have at least one block in input, cast it to view and process
                if (take === blockLen) {
                    const dataView = createView(data);
                    for (; blockLen <= len - pos; pos += blockLen)
                        this.process(dataView, pos);
                    continue;
                }
                buffer.set(data.subarray(pos, pos + take), this.pos);
                this.pos += take;
                pos += take;
                if (this.pos === blockLen) {
                    this.process(view, 0);
                    this.pos = 0;
                }
            }
            this.length += data.length;
            this.roundClean();
            return this;
        }
        digestInto(out) {
            exists(this);
            output(out, this);
            this.finished = true;
            // Padding
            // We can avoid allocation of buffer for padding completely if it
            // was previously not allocated here. But it won't change performance.
            const { buffer, view, blockLen, isLE } = this;
            let { pos } = this;
            // append the bit '1' to the message
            buffer[pos++] = 0b10000000;
            this.buffer.subarray(pos).fill(0);
            // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
            if (this.padOffset > blockLen - pos) {
                this.process(view, 0);
                pos = 0;
            }
            // Pad until full block byte with zeros
            for (let i = pos; i < blockLen; i++)
                buffer[i] = 0;
            // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
            // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
            // So we just write lowest 64 bits of that value.
            setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
            this.process(view, 0);
            const oview = createView(out);
            const len = this.outputLen;
            // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
            if (len % 4)
                throw new Error('_sha2: outputLen should be aligned to 32bit');
            const outLen = len / 4;
            const state = this.get();
            if (outLen > state.length)
                throw new Error('_sha2: outputLen bigger than state');
            for (let i = 0; i < outLen; i++)
                oview.setUint32(4 * i, state[i], isLE);
        }
        digest() {
            const { buffer, outputLen } = this;
            this.digestInto(buffer);
            const res = buffer.slice(0, outputLen);
            this.destroy();
            return res;
        }
        _cloneInto(to) {
            to || (to = new this.constructor());
            to.set(...this.get());
            const { blockLen, buffer, length, finished, destroyed, pos } = this;
            to.length = length;
            to.pos = pos;
            to.finished = finished;
            to.destroyed = destroyed;
            if (length % blockLen)
                to.buffer.set(buffer);
            return to;
        }
    }

    // SHA2-256 need to try 2^128 hashes to execute birthday attack.
    // BTC network is doing 2^67 hashes/sec as per early 2023.
    // Choice: a ? b : c
    const Chi = (a, b, c) => (a & b) ^ (~a & c);
    // Majority function, true if any two inpust is true
    const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
    // Round constants:
    // first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
    // prettier-ignore
    const SHA256_K = /* @__PURE__ */ new Uint32Array([
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ]);
    // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
    // prettier-ignore
    const IV = /* @__PURE__ */ new Uint32Array([
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ]);
    // Temporary buffer, not used to store anything between runs
    // Named this way because it matches specification.
    const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
    class SHA256 extends SHA2 {
        constructor() {
            super(64, 32, 8, false);
            // We cannot use array here since array allows indexing by variable
            // which means optimizer/compiler cannot use registers.
            this.A = IV[0] | 0;
            this.B = IV[1] | 0;
            this.C = IV[2] | 0;
            this.D = IV[3] | 0;
            this.E = IV[4] | 0;
            this.F = IV[5] | 0;
            this.G = IV[6] | 0;
            this.H = IV[7] | 0;
        }
        get() {
            const { A, B, C, D, E, F, G, H } = this;
            return [A, B, C, D, E, F, G, H];
        }
        // prettier-ignore
        set(A, B, C, D, E, F, G, H) {
            this.A = A | 0;
            this.B = B | 0;
            this.C = C | 0;
            this.D = D | 0;
            this.E = E | 0;
            this.F = F | 0;
            this.G = G | 0;
            this.H = H | 0;
        }
        process(view, offset) {
            // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
            for (let i = 0; i < 16; i++, offset += 4)
                SHA256_W[i] = view.getUint32(offset, false);
            for (let i = 16; i < 64; i++) {
                const W15 = SHA256_W[i - 15];
                const W2 = SHA256_W[i - 2];
                const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);
                const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);
                SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
            }
            // Compression function main loop, 64 rounds
            let { A, B, C, D, E, F, G, H } = this;
            for (let i = 0; i < 64; i++) {
                const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
                const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
                const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
                const T2 = (sigma0 + Maj(A, B, C)) | 0;
                H = G;
                G = F;
                F = E;
                E = (D + T1) | 0;
                D = C;
                C = B;
                B = A;
                A = (T1 + T2) | 0;
            }
            // Add the compressed chunk to the current hash value
            A = (A + this.A) | 0;
            B = (B + this.B) | 0;
            C = (C + this.C) | 0;
            D = (D + this.D) | 0;
            E = (E + this.E) | 0;
            F = (F + this.F) | 0;
            G = (G + this.G) | 0;
            H = (H + this.H) | 0;
            this.set(A, B, C, D, E, F, G, H);
        }
        roundClean() {
            SHA256_W.fill(0);
        }
        destroy() {
            this.set(0, 0, 0, 0, 0, 0, 0, 0);
            this.buffer.fill(0);
        }
    }
    /**
     * SHA2-256 hash function
     * @param message - data that would be hashed
     */
    const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // 100 lines of code in the file are duplicated from noble-hashes (utils).
    // This is OK: `abstract` directory does not use noble-hashes.
    // User may opt-in into using different hashing library. This way, noble-hashes
    // won't be included into their bundle.
    const _0n$4 = BigInt(0);
    const _1n$5 = BigInt(1);
    const _2n$3 = BigInt(2);
    const u8a = (a) => a instanceof Uint8Array;
    const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
    /**
     * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
     */
    function bytesToHex(bytes) {
        if (!u8a(bytes))
            throw new Error('Uint8Array expected');
        // pre-caching improves the speed 6x
        let hex = '';
        for (let i = 0; i < bytes.length; i++) {
            hex += hexes[bytes[i]];
        }
        return hex;
    }
    function numberToHexUnpadded(num) {
        const hex = num.toString(16);
        return hex.length & 1 ? `0${hex}` : hex;
    }
    function hexToNumber(hex) {
        if (typeof hex !== 'string')
            throw new Error('hex string expected, got ' + typeof hex);
        // Big Endian
        return BigInt(hex === '' ? '0' : `0x${hex}`);
    }
    /**
     * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
     */
    function hexToBytes(hex) {
        if (typeof hex !== 'string')
            throw new Error('hex string expected, got ' + typeof hex);
        const len = hex.length;
        if (len % 2)
            throw new Error('padded hex string expected, got unpadded hex of length ' + len);
        const array = new Uint8Array(len / 2);
        for (let i = 0; i < array.length; i++) {
            const j = i * 2;
            const hexByte = hex.slice(j, j + 2);
            const byte = Number.parseInt(hexByte, 16);
            if (Number.isNaN(byte) || byte < 0)
                throw new Error('Invalid byte sequence');
            array[i] = byte;
        }
        return array;
    }
    // BE: Big Endian, LE: Little Endian
    function bytesToNumberBE(bytes) {
        return hexToNumber(bytesToHex(bytes));
    }
    function bytesToNumberLE(bytes) {
        if (!u8a(bytes))
            throw new Error('Uint8Array expected');
        return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    function numberToBytesBE(n, len) {
        return hexToBytes(n.toString(16).padStart(len * 2, '0'));
    }
    function numberToBytesLE(n, len) {
        return numberToBytesBE(n, len).reverse();
    }
    // Unpadded, rarely used
    function numberToVarBytesBE(n) {
        return hexToBytes(numberToHexUnpadded(n));
    }
    /**
     * Takes hex string or Uint8Array, converts to Uint8Array.
     * Validates output length.
     * Will throw error for other types.
     * @param title descriptive title for an error e.g. 'private key'
     * @param hex hex string or Uint8Array
     * @param expectedLength optional, will compare to result array's length
     * @returns
     */
    function ensureBytes(title, hex, expectedLength) {
        let res;
        if (typeof hex === 'string') {
            try {
                res = hexToBytes(hex);
            }
            catch (e) {
                throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
            }
        }
        else if (u8a(hex)) {
            // Uint8Array.from() instead of hash.slice() because node.js Buffer
            // is instance of Uint8Array, and its slice() creates **mutable** copy
            res = Uint8Array.from(hex);
        }
        else {
            throw new Error(`${title} must be hex string or Uint8Array`);
        }
        const len = res.length;
        if (typeof expectedLength === 'number' && len !== expectedLength)
            throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
        return res;
    }
    /**
     * Copies several Uint8Arrays into one.
     */
    function concatBytes(...arrays) {
        const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
        let pad = 0; // walk through each item, ensure they have proper type
        arrays.forEach((a) => {
            if (!u8a(a))
                throw new Error('Uint8Array expected');
            r.set(a, pad);
            pad += a.length;
        });
        return r;
    }
    function equalBytes(b1, b2) {
        // We don't care about timing attacks here
        if (b1.length !== b2.length)
            return false;
        for (let i = 0; i < b1.length; i++)
            if (b1[i] !== b2[i])
                return false;
        return true;
    }
    /**
     * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
     */
    function utf8ToBytes(str) {
        if (typeof str !== 'string')
            throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
        return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
    }
    // Bit operations
    /**
     * Calculates amount of bits in a bigint.
     * Same as `n.toString(2).length`
     */
    function bitLen(n) {
        let len;
        for (len = 0; n > _0n$4; n >>= _1n$5, len += 1)
            ;
        return len;
    }
    /**
     * Gets single bit at position.
     * NOTE: first bit position is 0 (same as arrays)
     * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
     */
    function bitGet(n, pos) {
        return (n >> BigInt(pos)) & _1n$5;
    }
    /**
     * Sets single bit at position.
     */
    const bitSet = (n, pos, value) => {
        return n | ((value ? _1n$5 : _0n$4) << BigInt(pos));
    };
    /**
     * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
     * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
     */
    const bitMask = (n) => (_2n$3 << BigInt(n - 1)) - _1n$5;
    // DRBG
    const u8n = (data) => new Uint8Array(data); // creates Uint8Array
    const u8fr = (arr) => Uint8Array.from(arr); // another shortcut
    /**
     * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
     * @returns function that will call DRBG until 2nd arg returns something meaningful
     * @example
     *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
     *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
     */
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
        if (typeof hashLen !== 'number' || hashLen < 2)
            throw new Error('hashLen must be a number');
        if (typeof qByteLen !== 'number' || qByteLen < 2)
            throw new Error('qByteLen must be a number');
        if (typeof hmacFn !== 'function')
            throw new Error('hmacFn must be a function');
        // Step B, Step C: set hashLen to 8*ceil(hlen/8)
        let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
        let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
        let i = 0; // Iterations counter, will throw when over 1000
        const reset = () => {
            v.fill(1);
            k.fill(0);
            i = 0;
        };
        const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
        const reseed = (seed = u8n()) => {
            // HMAC-DRBG reseed() function. Steps D-G
            k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
            v = h(); // v = hmac(k || v)
            if (seed.length === 0)
                return;
            k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
            v = h(); // v = hmac(k || v)
        };
        const gen = () => {
            // HMAC-DRBG generate() function
            if (i++ >= 1000)
                throw new Error('drbg: tried 1000 values');
            let len = 0;
            const out = [];
            while (len < qByteLen) {
                v = h();
                const sl = v.slice();
                out.push(sl);
                len += v.length;
            }
            return concatBytes(...out);
        };
        const genUntil = (seed, pred) => {
            reset();
            reseed(seed); // Steps D-G
            let res = undefined; // Step H: grind until k is in [1..n-1]
            while (!(res = pred(gen())))
                reseed();
            reset();
            return res;
        };
        return genUntil;
    }
    // Validating curves and fields
    const validatorFns = {
        bigint: (val) => typeof val === 'bigint',
        function: (val) => typeof val === 'function',
        boolean: (val) => typeof val === 'boolean',
        string: (val) => typeof val === 'string',
        stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,
        isSafeInteger: (val) => Number.isSafeInteger(val),
        array: (val) => Array.isArray(val),
        field: (val, object) => object.Fp.isValid(val),
        hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),
    };
    // type Record<K extends string | number | symbol, T> = { [P in K]: T; }
    function validateObject(object, validators, optValidators = {}) {
        const checkField = (fieldName, type, isOptional) => {
            const checkVal = validatorFns[type];
            if (typeof checkVal !== 'function')
                throw new Error(`Invalid validator "${type}", expected function`);
            const val = object[fieldName];
            if (isOptional && val === undefined)
                return;
            if (!checkVal(val, object)) {
                throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
            }
        };
        for (const [fieldName, type] of Object.entries(validators))
            checkField(fieldName, type, false);
        for (const [fieldName, type] of Object.entries(optValidators))
            checkField(fieldName, type, true);
        return object;
    }
    // validate type tests
    // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
    // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
    // // Should fail type-check
    // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
    // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
    // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
    // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });

    var ut = /*#__PURE__*/Object.freeze({
        __proto__: null,
        bytesToHex: bytesToHex,
        numberToHexUnpadded: numberToHexUnpadded,
        hexToNumber: hexToNumber,
        hexToBytes: hexToBytes,
        bytesToNumberBE: bytesToNumberBE,
        bytesToNumberLE: bytesToNumberLE,
        numberToBytesBE: numberToBytesBE,
        numberToBytesLE: numberToBytesLE,
        numberToVarBytesBE: numberToVarBytesBE,
        ensureBytes: ensureBytes,
        concatBytes: concatBytes,
        equalBytes: equalBytes,
        utf8ToBytes: utf8ToBytes,
        bitLen: bitLen,
        bitGet: bitGet,
        bitSet: bitSet,
        bitMask: bitMask,
        createHmacDrbg: createHmacDrbg,
        validateObject: validateObject
    });

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // prettier-ignore
    const _0n$3 = BigInt(0), _1n$4 = BigInt(1), _2n$2 = BigInt(2), _3n$1 = BigInt(3);
    // prettier-ignore
    const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
    // prettier-ignore
    BigInt(9); BigInt(16);
    // Calculates a modulo b
    function mod(a, b) {
        const result = a % b;
        return result >= _0n$3 ? result : b + result;
    }
    /**
     * Efficiently raise num to power and do modular division.
     * Unsafe in some contexts: uses ladder, so can expose bigint bits.
     * @example
     * pow(2n, 6n, 11n) // 64n % 11n == 9n
     */
    // TODO: use field version && remove
    function pow(num, power, modulo) {
        if (modulo <= _0n$3 || power < _0n$3)
            throw new Error('Expected power/modulo > 0');
        if (modulo === _1n$4)
            return _0n$3;
        let res = _1n$4;
        while (power > _0n$3) {
            if (power & _1n$4)
                res = (res * num) % modulo;
            num = (num * num) % modulo;
            power >>= _1n$4;
        }
        return res;
    }
    // Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
    function pow2(x, power, modulo) {
        let res = x;
        while (power-- > _0n$3) {
            res *= res;
            res %= modulo;
        }
        return res;
    }
    // Inverses number over modulo
    function invert(number, modulo) {
        if (number === _0n$3 || modulo <= _0n$3) {
            throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
        }
        // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
        // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
        let a = mod(number, modulo);
        let b = modulo;
        // prettier-ignore
        let x = _0n$3, u = _1n$4;
        while (a !== _0n$3) {
            // JIT applies optimization if those two lines follow each other
            const q = b / a;
            const r = b % a;
            const m = x - u * q;
            // prettier-ignore
            b = a, a = r, x = u, u = m;
        }
        const gcd = b;
        if (gcd !== _1n$4)
            throw new Error('invert: does not exist');
        return mod(x, modulo);
    }
    /**
     * Tonelli-Shanks square root search algorithm.
     * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
     * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
     * Will start an infinite loop if field order P is not prime.
     * @param P field order
     * @returns function that takes field Fp (created from P) and number n
     */
    function tonelliShanks(P) {
        // Legendre constant: used to calculate Legendre symbol (a | p),
        // which denotes the value of a^((p-1)/2) (mod p).
        // (a | p) ≡ 1    if a is a square (mod p)
        // (a | p) ≡ -1   if a is not a square (mod p)
        // (a | p) ≡ 0    if a ≡ 0 (mod p)
        const legendreC = (P - _1n$4) / _2n$2;
        let Q, S, Z;
        // Step 1: By factoring out powers of 2 from p - 1,
        // find q and s such that p - 1 = q*(2^s) with q odd
        for (Q = P - _1n$4, S = 0; Q % _2n$2 === _0n$3; Q /= _2n$2, S++)
            ;
        // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
        for (Z = _2n$2; Z < P && pow(Z, legendreC, P) !== P - _1n$4; Z++)
            ;
        // Fast-path
        if (S === 1) {
            const p1div4 = (P + _1n$4) / _4n;
            return function tonelliFast(Fp, n) {
                const root = Fp.pow(n, p1div4);
                if (!Fp.eql(Fp.sqr(root), n))
                    throw new Error('Cannot find square root');
                return root;
            };
        }
        // Slow-path
        const Q1div2 = (Q + _1n$4) / _2n$2;
        return function tonelliSlow(Fp, n) {
            // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
            if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
                throw new Error('Cannot find square root');
            let r = S;
            // TODO: will fail at Fp2/etc
            let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
            let x = Fp.pow(n, Q1div2); // first guess at the square root
            let b = Fp.pow(n, Q); // first guess at the fudge factor
            while (!Fp.eql(b, Fp.ONE)) {
                if (Fp.eql(b, Fp.ZERO))
                    return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
                // Find m such b^(2^m)==1
                let m = 1;
                for (let t2 = Fp.sqr(b); m < r; m++) {
                    if (Fp.eql(t2, Fp.ONE))
                        break;
                    t2 = Fp.sqr(t2); // t2 *= t2
                }
                // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
                const ge = Fp.pow(g, _1n$4 << BigInt(r - m - 1)); // ge = 2^(r-m-1)
                g = Fp.sqr(ge); // g = ge * ge
                x = Fp.mul(x, ge); // x *= ge
                b = Fp.mul(b, g); // b *= g
                r = m;
            }
            return x;
        };
    }
    function FpSqrt(P) {
        // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
        // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
        // P ≡ 3 (mod 4)
        // √n = n^((P+1)/4)
        if (P % _4n === _3n$1) {
            // Not all roots possible!
            // const ORDER =
            //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
            // const NUM = 72057594037927816n;
            const p1div4 = (P + _1n$4) / _4n;
            return function sqrt3mod4(Fp, n) {
                const root = Fp.pow(n, p1div4);
                // Throw if root**2 != n
                if (!Fp.eql(Fp.sqr(root), n))
                    throw new Error('Cannot find square root');
                return root;
            };
        }
        // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
        if (P % _8n === _5n) {
            const c1 = (P - _5n) / _8n;
            return function sqrt5mod8(Fp, n) {
                const n2 = Fp.mul(n, _2n$2);
                const v = Fp.pow(n2, c1);
                const nv = Fp.mul(n, v);
                const i = Fp.mul(Fp.mul(nv, _2n$2), v);
                const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
                if (!Fp.eql(Fp.sqr(root), n))
                    throw new Error('Cannot find square root');
                return root;
            };
        }
        // Other cases: Tonelli-Shanks algorithm
        return tonelliShanks(P);
    }
    // prettier-ignore
    const FIELD_FIELDS = [
        'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',
        'eql', 'add', 'sub', 'mul', 'pow', 'div',
        'addN', 'subN', 'mulN', 'sqrN'
    ];
    function validateField(field) {
        const initial = {
            ORDER: 'bigint',
            MASK: 'bigint',
            BYTES: 'isSafeInteger',
            BITS: 'isSafeInteger',
        };
        const opts = FIELD_FIELDS.reduce((map, val) => {
            map[val] = 'function';
            return map;
        }, initial);
        return validateObject(field, opts);
    }
    // Generic field functions
    /**
     * Same as `pow` but for Fp: non-constant-time.
     * Unsafe in some contexts: uses ladder, so can expose bigint bits.
     */
    function FpPow(f, num, power) {
        // Should have same speed as pow for bigints
        // TODO: benchmark!
        if (power < _0n$3)
            throw new Error('Expected power > 0');
        if (power === _0n$3)
            return f.ONE;
        if (power === _1n$4)
            return num;
        let p = f.ONE;
        let d = num;
        while (power > _0n$3) {
            if (power & _1n$4)
                p = f.mul(p, d);
            d = f.sqr(d);
            power >>= _1n$4;
        }
        return p;
    }
    /**
     * Efficiently invert an array of Field elements.
     * `inv(0)` will return `undefined` here: make sure to throw an error.
     */
    function FpInvertBatch(f, nums) {
        const tmp = new Array(nums.length);
        // Walk from first to last, multiply them by each other MOD p
        const lastMultiplied = nums.reduce((acc, num, i) => {
            if (f.is0(num))
                return acc;
            tmp[i] = acc;
            return f.mul(acc, num);
        }, f.ONE);
        // Invert last element
        const inverted = f.inv(lastMultiplied);
        // Walk from last to first, multiply them by inverted each other MOD p
        nums.reduceRight((acc, num, i) => {
            if (f.is0(num))
                return acc;
            tmp[i] = f.mul(acc, tmp[i]);
            return f.mul(acc, num);
        }, inverted);
        return tmp;
    }
    // CURVE.n lengths
    function nLength(n, nBitLength) {
        // Bit size, byte size of CURVE.n
        const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
        const nByteLength = Math.ceil(_nBitLength / 8);
        return { nBitLength: _nBitLength, nByteLength };
    }
    /**
     * Initializes a finite field over prime. **Non-primes are not supported.**
     * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
     * Major performance optimizations:
     * * a) denormalized operations like mulN instead of mul
     * * b) same object shape: never add or remove keys
     * * c) Object.freeze
     * @param ORDER prime positive bigint
     * @param bitLen how many bits the field consumes
     * @param isLE (def: false) if encoding / decoding should be in little-endian
     * @param redef optional faster redefinitions of sqrt and other methods
     */
    function Field(ORDER, bitLen, isLE = false, redef = {}) {
        if (ORDER <= _0n$3)
            throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
        const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
        if (BYTES > 2048)
            throw new Error('Field lengths over 2048 bytes are not supported');
        const sqrtP = FpSqrt(ORDER);
        const f = Object.freeze({
            ORDER,
            BITS,
            BYTES,
            MASK: bitMask(BITS),
            ZERO: _0n$3,
            ONE: _1n$4,
            create: (num) => mod(num, ORDER),
            isValid: (num) => {
                if (typeof num !== 'bigint')
                    throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
                return _0n$3 <= num && num < ORDER; // 0 is valid element, but it's not invertible
            },
            is0: (num) => num === _0n$3,
            isOdd: (num) => (num & _1n$4) === _1n$4,
            neg: (num) => mod(-num, ORDER),
            eql: (lhs, rhs) => lhs === rhs,
            sqr: (num) => mod(num * num, ORDER),
            add: (lhs, rhs) => mod(lhs + rhs, ORDER),
            sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
            mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
            pow: (num, power) => FpPow(f, num, power),
            div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
            // Same as above, but doesn't normalize
            sqrN: (num) => num * num,
            addN: (lhs, rhs) => lhs + rhs,
            subN: (lhs, rhs) => lhs - rhs,
            mulN: (lhs, rhs) => lhs * rhs,
            inv: (num) => invert(num, ORDER),
            sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
            invertBatch: (lst) => FpInvertBatch(f, lst),
            // TODO: do we really need constant cmov?
            // We don't have const-time bigints anyway, so probably will be not very useful
            cmov: (a, b, c) => (c ? b : a),
            toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),
            fromBytes: (bytes) => {
                if (bytes.length !== BYTES)
                    throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
                return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);
            },
        });
        return Object.freeze(f);
    }
    /**
     * Returns total number of bytes consumed by the field element.
     * For example, 32 bytes for usual 256-bit weierstrass curve.
     * @param fieldOrder number of field elements, usually CURVE.n
     * @returns byte length of field
     */
    function getFieldBytesLength(fieldOrder) {
        if (typeof fieldOrder !== 'bigint')
            throw new Error('field order must be bigint');
        const bitLength = fieldOrder.toString(2).length;
        return Math.ceil(bitLength / 8);
    }
    /**
     * Returns minimal amount of bytes that can be safely reduced
     * by field order.
     * Should be 2^-128 for 128-bit curve such as P256.
     * @param fieldOrder number of field elements, usually CURVE.n
     * @returns byte length of target hash
     */
    function getMinHashLength(fieldOrder) {
        const length = getFieldBytesLength(fieldOrder);
        return length + Math.ceil(length / 2);
    }
    /**
     * "Constant-time" private key generation utility.
     * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
     * and convert them into private scalar, with the modulo bias being negligible.
     * Needs at least 48 bytes of input for 32-byte private key.
     * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
     * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
     * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
     * @param hash hash output from SHA3 or a similar function
     * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
     * @param isLE interpret hash bytes as LE num
     * @returns valid private scalar
     */
    function mapHashToField(key, fieldOrder, isLE = false) {
        const len = key.length;
        const fieldLen = getFieldBytesLength(fieldOrder);
        const minLen = getMinHashLength(fieldOrder);
        // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
        if (len < 16 || len < minLen || len > 1024)
            throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
        const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);
        // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
        const reduced = mod(num, fieldOrder - _1n$4) + _1n$4;
        return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
    }

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const _0n$2 = BigInt(0);
    const _1n$3 = BigInt(1);
    // Elliptic curve multiplication of Point by scalar. Fragile.
    // Scalars should always be less than curve order: this should be checked inside of a curve itself.
    // Creates precomputation tables for fast multiplication:
    // - private scalar is split by fixed size windows of W bits
    // - every window point is collected from window's table & added to accumulator
    // - since windows are different, same point inside tables won't be accessed more than once per calc
    // - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
    // - +1 window is neccessary for wNAF
    // - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
    // TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
    // windows to be in different memory locations
    function wNAF(c, bits) {
        const constTimeNegate = (condition, item) => {
            const neg = item.negate();
            return condition ? neg : item;
        };
        const opts = (W) => {
            const windows = Math.ceil(bits / W) + 1; // +1, because
            const windowSize = 2 ** (W - 1); // -1 because we skip zero
            return { windows, windowSize };
        };
        return {
            constTimeNegate,
            // non-const time multiplication ladder
            unsafeLadder(elm, n) {
                let p = c.ZERO;
                let d = elm;
                while (n > _0n$2) {
                    if (n & _1n$3)
                        p = p.add(d);
                    d = d.double();
                    n >>= _1n$3;
                }
                return p;
            },
            /**
             * Creates a wNAF precomputation window. Used for caching.
             * Default window size is set by `utils.precompute()` and is equal to 8.
             * Number of precomputed points depends on the curve size:
             * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
             * - 𝑊 is the window size
             * - 𝑛 is the bitlength of the curve order.
             * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
             * @returns precomputed point tables flattened to a single array
             */
            precomputeWindow(elm, W) {
                const { windows, windowSize } = opts(W);
                const points = [];
                let p = elm;
                let base = p;
                for (let window = 0; window < windows; window++) {
                    base = p;
                    points.push(base);
                    // =1, because we skip zero
                    for (let i = 1; i < windowSize; i++) {
                        base = base.add(p);
                        points.push(base);
                    }
                    p = base.double();
                }
                return points;
            },
            /**
             * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
             * @param W window size
             * @param precomputes precomputed tables
             * @param n scalar (we don't check here, but should be less than curve order)
             * @returns real and fake (for const-time) points
             */
            wNAF(W, precomputes, n) {
                // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
                // But need to carefully remove other checks before wNAF. ORDER == bits here
                const { windows, windowSize } = opts(W);
                let p = c.ZERO;
                let f = c.BASE;
                const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
                const maxNumber = 2 ** W;
                const shiftBy = BigInt(W);
                for (let window = 0; window < windows; window++) {
                    const offset = window * windowSize;
                    // Extract W bits.
                    let wbits = Number(n & mask);
                    // Shift number by W bits.
                    n >>= shiftBy;
                    // If the bits are bigger than max size, we'll split those.
                    // +224 => 256 - 32
                    if (wbits > windowSize) {
                        wbits -= maxNumber;
                        n += _1n$3;
                    }
                    // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                    // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                    // there is negate now: it is possible that negated element from low value
                    // would be the same as high element, which will create carry into next window.
                    // It's not obvious how this can fail, but still worth investigating later.
                    // Check if we're onto Zero point.
                    // Add random point inside current window to f.
                    const offset1 = offset;
                    const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                    const cond1 = window % 2 !== 0;
                    const cond2 = wbits < 0;
                    if (wbits === 0) {
                        // The most important part for const-time getPublicKey
                        f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                    }
                    else {
                        p = p.add(constTimeNegate(cond2, precomputes[offset2]));
                    }
                }
                // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
                // Even if the variable is still unused, there are some checks which will
                // throw an exception, so compiler needs to prove they won't happen, which is hard.
                // At this point there is a way to F be infinity-point even if p is not,
                // which makes it less const-time: around 1 bigint multiply.
                return { p, f };
            },
            wNAFCached(P, precomputesMap, n, transform) {
                // @ts-ignore
                const W = P._WINDOW_SIZE || 1;
                // Calculate precomputes on a first run, reuse them after
                let comp = precomputesMap.get(P);
                if (!comp) {
                    comp = this.precomputeWindow(P, W);
                    if (W !== 1) {
                        precomputesMap.set(P, transform(comp));
                    }
                }
                return this.wNAF(W, comp, n);
            },
        };
    }
    function validateBasic(curve) {
        validateField(curve.Fp);
        validateObject(curve, {
            n: 'bigint',
            h: 'bigint',
            Gx: 'field',
            Gy: 'field',
        }, {
            nBitLength: 'isSafeInteger',
            nByteLength: 'isSafeInteger',
        });
        // Set defaults
        return Object.freeze({
            ...nLength(curve.n, curve.nBitLength),
            ...curve,
            ...{ p: curve.Fp.ORDER },
        });
    }

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    function validatePointOpts(curve) {
        const opts = validateBasic(curve);
        validateObject(opts, {
            a: 'field',
            b: 'field',
        }, {
            allowedPrivateKeyLengths: 'array',
            wrapPrivateKey: 'boolean',
            isTorsionFree: 'function',
            clearCofactor: 'function',
            allowInfinityPoint: 'boolean',
            fromBytes: 'function',
            toBytes: 'function',
        });
        const { endo, Fp, a } = opts;
        if (endo) {
            if (!Fp.eql(a, Fp.ZERO)) {
                throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');
            }
            if (typeof endo !== 'object' ||
                typeof endo.beta !== 'bigint' ||
                typeof endo.splitScalar !== 'function') {
                throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');
            }
        }
        return Object.freeze({ ...opts });
    }
    // ASN.1 DER encoding utilities
    const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    const DER = {
        // asn.1 DER encoding utils
        Err: class DERErr extends Error {
            constructor(m = '') {
                super(m);
            }
        },
        _parseInt(data) {
            const { Err: E } = DER;
            if (data.length < 2 || data[0] !== 0x02)
                throw new E('Invalid signature integer tag');
            const len = data[1];
            const res = data.subarray(2, len + 2);
            if (!len || res.length !== len)
                throw new E('Invalid signature integer: wrong length');
            // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
            // since we always use positive integers here. It must always be empty:
            // - add zero byte if exists
            // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
            if (res[0] & 0b10000000)
                throw new E('Invalid signature integer: negative');
            if (res[0] === 0x00 && !(res[1] & 0b10000000))
                throw new E('Invalid signature integer: unnecessary leading zero');
            return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left
        },
        toSig(hex) {
            // parse DER signature
            const { Err: E } = DER;
            const data = typeof hex === 'string' ? h2b(hex) : hex;
            if (!(data instanceof Uint8Array))
                throw new Error('ui8a expected');
            let l = data.length;
            if (l < 2 || data[0] != 0x30)
                throw new E('Invalid signature tag');
            if (data[1] !== l - 2)
                throw new E('Invalid signature: incorrect length');
            const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
            const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
            if (rBytesLeft.length)
                throw new E('Invalid signature: left bytes after parsing');
            return { r, s };
        },
        hexFromSig(sig) {
            // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
            const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);
            const h = (num) => {
                const hex = num.toString(16);
                return hex.length & 1 ? `0${hex}` : hex;
            };
            const s = slice(h(sig.s));
            const r = slice(h(sig.r));
            const shl = s.length / 2;
            const rhl = r.length / 2;
            const sl = h(shl);
            const rl = h(rhl);
            return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
        },
    };
    // Be friendly to bad ECMAScript parsers by not using bigint literals
    // prettier-ignore
    const _0n$1 = BigInt(0), _1n$2 = BigInt(1); BigInt(2); const _3n = BigInt(3); BigInt(4);
    function weierstrassPoints(opts) {
        const CURVE = validatePointOpts(opts);
        const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
        const toBytes = CURVE.toBytes ||
            ((_c, point, _isCompressed) => {
                const a = point.toAffine();
                return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
            });
        const fromBytes = CURVE.fromBytes ||
            ((bytes) => {
                // const head = bytes[0];
                const tail = bytes.subarray(1);
                // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return { x, y };
            });
        /**
         * y² = x³ + ax + b: Short weierstrass curve formula
         * @returns y²
         */
        function weierstrassEquation(x) {
            const { a, b } = CURVE;
            const x2 = Fp.sqr(x); // x * x
            const x3 = Fp.mul(x2, x); // x2 * x
            return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
        }
        // Validate whether the passed curve params are valid.
        // We check if curve equation works for generator point.
        // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
        // ProjectivePoint class has not been initialized yet.
        if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
            throw new Error('bad generator point: equation left != right');
        // Valid group elements reside in range 1..n-1
        function isWithinCurveOrder(num) {
            return typeof num === 'bigint' && _0n$1 < num && num < CURVE.n;
        }
        function assertGE(num) {
            if (!isWithinCurveOrder(num))
                throw new Error('Expected valid bigint: 0 < bigint < curve.n');
        }
        // Validates if priv key is valid and converts it to bigint.
        // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
        function normPrivateKeyToScalar(key) {
            const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
            if (lengths && typeof key !== 'bigint') {
                if (key instanceof Uint8Array)
                    key = bytesToHex(key);
                // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
                if (typeof key !== 'string' || !lengths.includes(key.length))
                    throw new Error('Invalid key');
                key = key.padStart(nByteLength * 2, '0');
            }
            let num;
            try {
                num =
                    typeof key === 'bigint'
                        ? key
                        : bytesToNumberBE(ensureBytes('private key', key, nByteLength));
            }
            catch (error) {
                throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
            }
            if (wrapPrivateKey)
                num = mod(num, n); // disabled by default, enabled for BLS
            assertGE(num); // num in range [1..N-1]
            return num;
        }
        const pointPrecomputes = new Map();
        function assertPrjPoint(other) {
            if (!(other instanceof Point))
                throw new Error('ProjectivePoint expected');
        }
        /**
         * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
         * Default Point works in 2d / affine coordinates: (x, y)
         * We're doing calculations in projective, because its operations don't require costly inversion.
         */
        class Point {
            constructor(px, py, pz) {
                this.px = px;
                this.py = py;
                this.pz = pz;
                if (px == null || !Fp.isValid(px))
                    throw new Error('x required');
                if (py == null || !Fp.isValid(py))
                    throw new Error('y required');
                if (pz == null || !Fp.isValid(pz))
                    throw new Error('z required');
            }
            // Does not validate if the point is on-curve.
            // Use fromHex instead, or call assertValidity() later.
            static fromAffine(p) {
                const { x, y } = p || {};
                if (!p || !Fp.isValid(x) || !Fp.isValid(y))
                    throw new Error('invalid affine point');
                if (p instanceof Point)
                    throw new Error('projective point not allowed');
                const is0 = (i) => Fp.eql(i, Fp.ZERO);
                // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
                if (is0(x) && is0(y))
                    return Point.ZERO;
                return new Point(x, y, Fp.ONE);
            }
            get x() {
                return this.toAffine().x;
            }
            get y() {
                return this.toAffine().y;
            }
            /**
             * Takes a bunch of Projective Points but executes only one
             * inversion on all of them. Inversion is very slow operation,
             * so this improves performance massively.
             * Optimization: converts a list of projective points to a list of identical points with Z=1.
             */
            static normalizeZ(points) {
                const toInv = Fp.invertBatch(points.map((p) => p.pz));
                return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
            }
            /**
             * Converts hash string or Uint8Array to Point.
             * @param hex short/long ECDSA hex
             */
            static fromHex(hex) {
                const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));
                P.assertValidity();
                return P;
            }
            // Multiplies generator point by privateKey.
            static fromPrivateKey(privateKey) {
                return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
            }
            // "Private method", don't use it directly
            _setWindowSize(windowSize) {
                this._WINDOW_SIZE = windowSize;
                pointPrecomputes.delete(this);
            }
            // A point on curve is valid if it conforms to equation.
            assertValidity() {
                if (this.is0()) {
                    // (0, 1, 0) aka ZERO is invalid in most contexts.
                    // In BLS, ZERO can be serialized, so we allow it.
                    // (0, 0, 0) is wrong representation of ZERO and is always invalid.
                    if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
                        return;
                    throw new Error('bad point: ZERO');
                }
                // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
                const { x, y } = this.toAffine();
                // Check if x, y are valid field elements
                if (!Fp.isValid(x) || !Fp.isValid(y))
                    throw new Error('bad point: x or y not FE');
                const left = Fp.sqr(y); // y²
                const right = weierstrassEquation(x); // x³ + ax + b
                if (!Fp.eql(left, right))
                    throw new Error('bad point: equation left != right');
                if (!this.isTorsionFree())
                    throw new Error('bad point: not in prime-order subgroup');
            }
            hasEvenY() {
                const { y } = this.toAffine();
                if (Fp.isOdd)
                    return !Fp.isOdd(y);
                throw new Error("Field doesn't support isOdd");
            }
            /**
             * Compare one point to another.
             */
            equals(other) {
                assertPrjPoint(other);
                const { px: X1, py: Y1, pz: Z1 } = this;
                const { px: X2, py: Y2, pz: Z2 } = other;
                const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
                const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
                return U1 && U2;
            }
            /**
             * Flips point to one corresponding to (x, -y) in Affine coordinates.
             */
            negate() {
                return new Point(this.px, Fp.neg(this.py), this.pz);
            }
            // Renes-Costello-Batina exception-free doubling formula.
            // There is 30% faster Jacobian formula, but it is not complete.
            // https://eprint.iacr.org/2015/1060, algorithm 3
            // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
            double() {
                const { a, b } = CURVE;
                const b3 = Fp.mul(b, _3n);
                const { px: X1, py: Y1, pz: Z1 } = this;
                let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
                let t0 = Fp.mul(X1, X1); // step 1
                let t1 = Fp.mul(Y1, Y1);
                let t2 = Fp.mul(Z1, Z1);
                let t3 = Fp.mul(X1, Y1);
                t3 = Fp.add(t3, t3); // step 5
                Z3 = Fp.mul(X1, Z1);
                Z3 = Fp.add(Z3, Z3);
                X3 = Fp.mul(a, Z3);
                Y3 = Fp.mul(b3, t2);
                Y3 = Fp.add(X3, Y3); // step 10
                X3 = Fp.sub(t1, Y3);
                Y3 = Fp.add(t1, Y3);
                Y3 = Fp.mul(X3, Y3);
                X3 = Fp.mul(t3, X3);
                Z3 = Fp.mul(b3, Z3); // step 15
                t2 = Fp.mul(a, t2);
                t3 = Fp.sub(t0, t2);
                t3 = Fp.mul(a, t3);
                t3 = Fp.add(t3, Z3);
                Z3 = Fp.add(t0, t0); // step 20
                t0 = Fp.add(Z3, t0);
                t0 = Fp.add(t0, t2);
                t0 = Fp.mul(t0, t3);
                Y3 = Fp.add(Y3, t0);
                t2 = Fp.mul(Y1, Z1); // step 25
                t2 = Fp.add(t2, t2);
                t0 = Fp.mul(t2, t3);
                X3 = Fp.sub(X3, t0);
                Z3 = Fp.mul(t2, t1);
                Z3 = Fp.add(Z3, Z3); // step 30
                Z3 = Fp.add(Z3, Z3);
                return new Point(X3, Y3, Z3);
            }
            // Renes-Costello-Batina exception-free addition formula.
            // There is 30% faster Jacobian formula, but it is not complete.
            // https://eprint.iacr.org/2015/1060, algorithm 1
            // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
            add(other) {
                assertPrjPoint(other);
                const { px: X1, py: Y1, pz: Z1 } = this;
                const { px: X2, py: Y2, pz: Z2 } = other;
                let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
                const a = CURVE.a;
                const b3 = Fp.mul(CURVE.b, _3n);
                let t0 = Fp.mul(X1, X2); // step 1
                let t1 = Fp.mul(Y1, Y2);
                let t2 = Fp.mul(Z1, Z2);
                let t3 = Fp.add(X1, Y1);
                let t4 = Fp.add(X2, Y2); // step 5
                t3 = Fp.mul(t3, t4);
                t4 = Fp.add(t0, t1);
                t3 = Fp.sub(t3, t4);
                t4 = Fp.add(X1, Z1);
                let t5 = Fp.add(X2, Z2); // step 10
                t4 = Fp.mul(t4, t5);
                t5 = Fp.add(t0, t2);
                t4 = Fp.sub(t4, t5);
                t5 = Fp.add(Y1, Z1);
                X3 = Fp.add(Y2, Z2); // step 15
                t5 = Fp.mul(t5, X3);
                X3 = Fp.add(t1, t2);
                t5 = Fp.sub(t5, X3);
                Z3 = Fp.mul(a, t4);
                X3 = Fp.mul(b3, t2); // step 20
                Z3 = Fp.add(X3, Z3);
                X3 = Fp.sub(t1, Z3);
                Z3 = Fp.add(t1, Z3);
                Y3 = Fp.mul(X3, Z3);
                t1 = Fp.add(t0, t0); // step 25
                t1 = Fp.add(t1, t0);
                t2 = Fp.mul(a, t2);
                t4 = Fp.mul(b3, t4);
                t1 = Fp.add(t1, t2);
                t2 = Fp.sub(t0, t2); // step 30
                t2 = Fp.mul(a, t2);
                t4 = Fp.add(t4, t2);
                t0 = Fp.mul(t1, t4);
                Y3 = Fp.add(Y3, t0);
                t0 = Fp.mul(t5, t4); // step 35
                X3 = Fp.mul(t3, X3);
                X3 = Fp.sub(X3, t0);
                t0 = Fp.mul(t3, t1);
                Z3 = Fp.mul(t5, Z3);
                Z3 = Fp.add(Z3, t0); // step 40
                return new Point(X3, Y3, Z3);
            }
            subtract(other) {
                return this.add(other.negate());
            }
            is0() {
                return this.equals(Point.ZERO);
            }
            wNAF(n) {
                return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
                    const toInv = Fp.invertBatch(comp.map((p) => p.pz));
                    return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
                });
            }
            /**
             * Non-constant-time multiplication. Uses double-and-add algorithm.
             * It's faster, but should only be used when you don't care about
             * an exposed private key e.g. sig verification, which works over *public* keys.
             */
            multiplyUnsafe(n) {
                const I = Point.ZERO;
                if (n === _0n$1)
                    return I;
                assertGE(n); // Will throw on 0
                if (n === _1n$2)
                    return this;
                const { endo } = CURVE;
                if (!endo)
                    return wnaf.unsafeLadder(this, n);
                // Apply endomorphism
                let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                let k1p = I;
                let k2p = I;
                let d = this;
                while (k1 > _0n$1 || k2 > _0n$1) {
                    if (k1 & _1n$2)
                        k1p = k1p.add(d);
                    if (k2 & _1n$2)
                        k2p = k2p.add(d);
                    d = d.double();
                    k1 >>= _1n$2;
                    k2 >>= _1n$2;
                }
                if (k1neg)
                    k1p = k1p.negate();
                if (k2neg)
                    k2p = k2p.negate();
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                return k1p.add(k2p);
            }
            /**
             * Constant time multiplication.
             * Uses wNAF method. Windowed method may be 10% faster,
             * but takes 2x longer to generate and consumes 2x memory.
             * Uses precomputes when available.
             * Uses endomorphism for Koblitz curves.
             * @param scalar by which the point would be multiplied
             * @returns New point
             */
            multiply(scalar) {
                assertGE(scalar);
                let n = scalar;
                let point, fake; // Fake point is used to const-time mult
                const { endo } = CURVE;
                if (endo) {
                    const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                    let { p: k1p, f: f1p } = this.wNAF(k1);
                    let { p: k2p, f: f2p } = this.wNAF(k2);
                    k1p = wnaf.constTimeNegate(k1neg, k1p);
                    k2p = wnaf.constTimeNegate(k2neg, k2p);
                    k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                    point = k1p.add(k2p);
                    fake = f1p.add(f2p);
                }
                else {
                    const { p, f } = this.wNAF(n);
                    point = p;
                    fake = f;
                }
                // Normalize `z` for both points, but return only real one
                return Point.normalizeZ([point, fake])[0];
            }
            /**
             * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
             * Not using Strauss-Shamir trick: precomputation tables are faster.
             * The trick could be useful if both P and Q are not G (not in our case).
             * @returns non-zero affine point
             */
            multiplyAndAddUnsafe(Q, a, b) {
                const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
                const mul = (P, a // Select faster multiply() method
                ) => (a === _0n$1 || a === _1n$2 || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));
                const sum = mul(this, a).add(mul(Q, b));
                return sum.is0() ? undefined : sum;
            }
            // Converts Projective point to affine (x, y) coordinates.
            // Can accept precomputed Z^-1 - for example, from invertBatch.
            // (x, y, z) ∋ (x=x/z, y=y/z)
            toAffine(iz) {
                const { px: x, py: y, pz: z } = this;
                const is0 = this.is0();
                // If invZ was 0, we return zero point. However we still want to execute
                // all operations, so we replace invZ with a random number, 1.
                if (iz == null)
                    iz = is0 ? Fp.ONE : Fp.inv(z);
                const ax = Fp.mul(x, iz);
                const ay = Fp.mul(y, iz);
                const zz = Fp.mul(z, iz);
                if (is0)
                    return { x: Fp.ZERO, y: Fp.ZERO };
                if (!Fp.eql(zz, Fp.ONE))
                    throw new Error('invZ was invalid');
                return { x: ax, y: ay };
            }
            isTorsionFree() {
                const { h: cofactor, isTorsionFree } = CURVE;
                if (cofactor === _1n$2)
                    return true; // No subgroups, always torsion-free
                if (isTorsionFree)
                    return isTorsionFree(Point, this);
                throw new Error('isTorsionFree() has not been declared for the elliptic curve');
            }
            clearCofactor() {
                const { h: cofactor, clearCofactor } = CURVE;
                if (cofactor === _1n$2)
                    return this; // Fast-path
                if (clearCofactor)
                    return clearCofactor(Point, this);
                return this.multiplyUnsafe(CURVE.h);
            }
            toRawBytes(isCompressed = true) {
                this.assertValidity();
                return toBytes(Point, this, isCompressed);
            }
            toHex(isCompressed = true) {
                return bytesToHex(this.toRawBytes(isCompressed));
            }
        }
        Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
        Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
        const _bits = CURVE.nBitLength;
        const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
        // Validate if generator point is on curve
        return {
            CURVE,
            ProjectivePoint: Point,
            normPrivateKeyToScalar,
            weierstrassEquation,
            isWithinCurveOrder,
        };
    }
    function validateOpts(curve) {
        const opts = validateBasic(curve);
        validateObject(opts, {
            hash: 'hash',
            hmac: 'function',
            randomBytes: 'function',
        }, {
            bits2int: 'function',
            bits2int_modN: 'function',
            lowS: 'boolean',
        });
        return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
        const CURVE = validateOpts(curveDef);
        const { Fp, n: CURVE_ORDER } = CURVE;
        const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
        const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
        function isValidFieldElement(num) {
            return _0n$1 < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
        }
        function modN(a) {
            return mod(a, CURVE_ORDER);
        }
        function invN(a) {
            return invert(a, CURVE_ORDER);
        }
        const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({
            ...CURVE,
            toBytes(_c, point, isCompressed) {
                const a = point.toAffine();
                const x = Fp.toBytes(a.x);
                const cat = concatBytes;
                if (isCompressed) {
                    return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
                }
                else {
                    return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
                }
            },
            fromBytes(bytes) {
                const len = bytes.length;
                const head = bytes[0];
                const tail = bytes.subarray(1);
                // this.assertValidity() is done inside of fromHex
                if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                    const x = bytesToNumberBE(tail);
                    if (!isValidFieldElement(x))
                        throw new Error('Point is not on curve');
                    const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                    let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                    const isYOdd = (y & _1n$2) === _1n$2;
                    // ECDSA
                    const isHeadOdd = (head & 1) === 1;
                    if (isHeadOdd !== isYOdd)
                        y = Fp.neg(y);
                    return { x, y };
                }
                else if (len === uncompressedLen && head === 0x04) {
                    const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                    const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                    return { x, y };
                }
                else {
                    throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
                }
            },
        });
        const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
        function isBiggerThanHalfOrder(number) {
            const HALF = CURVE_ORDER >> _1n$2;
            return number > HALF;
        }
        function normalizeS(s) {
            return isBiggerThanHalfOrder(s) ? modN(-s) : s;
        }
        // slice bytes num
        const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
        /**
         * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
         */
        class Signature {
            constructor(r, s, recovery) {
                this.r = r;
                this.s = s;
                this.recovery = recovery;
                this.assertValidity();
            }
            // pair (bytes of r, bytes of s)
            static fromCompact(hex) {
                const l = CURVE.nByteLength;
                hex = ensureBytes('compactSignature', hex, l * 2);
                return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
            }
            // DER encoded ECDSA signature
            // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
            static fromDER(hex) {
                const { r, s } = DER.toSig(ensureBytes('DER', hex));
                return new Signature(r, s);
            }
            assertValidity() {
                // can use assertGE here
                if (!isWithinCurveOrder(this.r))
                    throw new Error('r must be 0 < r < CURVE.n');
                if (!isWithinCurveOrder(this.s))
                    throw new Error('s must be 0 < s < CURVE.n');
            }
            addRecoveryBit(recovery) {
                return new Signature(this.r, this.s, recovery);
            }
            recoverPublicKey(msgHash) {
                const { r, s, recovery: rec } = this;
                const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash
                if (rec == null || ![0, 1, 2, 3].includes(rec))
                    throw new Error('recovery id invalid');
                const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
                if (radj >= Fp.ORDER)
                    throw new Error('recovery id 2 or 3 invalid');
                const prefix = (rec & 1) === 0 ? '02' : '03';
                const R = Point.fromHex(prefix + numToNByteStr(radj));
                const ir = invN(radj); // r^-1
                const u1 = modN(-h * ir); // -hr^-1
                const u2 = modN(s * ir); // sr^-1
                const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
                if (!Q)
                    throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
                Q.assertValidity();
                return Q;
            }
            // Signatures should be low-s, to prevent malleability.
            hasHighS() {
                return isBiggerThanHalfOrder(this.s);
            }
            normalizeS() {
                return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
            }
            // DER-encoded
            toDERRawBytes() {
                return hexToBytes(this.toDERHex());
            }
            toDERHex() {
                return DER.hexFromSig({ r: this.r, s: this.s });
            }
            // padded bytes of r, then padded bytes of s
            toCompactRawBytes() {
                return hexToBytes(this.toCompactHex());
            }
            toCompactHex() {
                return numToNByteStr(this.r) + numToNByteStr(this.s);
            }
        }
        const utils = {
            isValidPrivateKey(privateKey) {
                try {
                    normPrivateKeyToScalar(privateKey);
                    return true;
                }
                catch (error) {
                    return false;
                }
            },
            normPrivateKeyToScalar: normPrivateKeyToScalar,
            /**
             * Produces cryptographically secure private key from random of size
             * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
             */
            randomPrivateKey: () => {
                const length = getMinHashLength(CURVE.n);
                return mapHashToField(CURVE.randomBytes(length), CURVE.n);
            },
            /**
             * Creates precompute table for an arbitrary EC point. Makes point "cached".
             * Allows to massively speed-up `point.multiply(scalar)`.
             * @returns cached point
             * @example
             * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
             * fast.multiply(privKey); // much faster ECDH now
             */
            precompute(windowSize = 8, point = Point.BASE) {
                point._setWindowSize(windowSize);
                point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
                return point;
            },
        };
        /**
         * Computes public key for a private key. Checks for validity of the private key.
         * @param privateKey private key
         * @param isCompressed whether to return compact (default), or full key
         * @returns Public key, full when isCompressed=false; short when isCompressed=true
         */
        function getPublicKey(privateKey, isCompressed = true) {
            return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
        }
        /**
         * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
         */
        function isProbPub(item) {
            const arr = item instanceof Uint8Array;
            const str = typeof item === 'string';
            const len = (arr || str) && item.length;
            if (arr)
                return len === compressedLen || len === uncompressedLen;
            if (str)
                return len === 2 * compressedLen || len === 2 * uncompressedLen;
            if (item instanceof Point)
                return true;
            return false;
        }
        /**
         * ECDH (Elliptic Curve Diffie Hellman).
         * Computes shared public key from private key and public key.
         * Checks: 1) private key validity 2) shared key is on-curve.
         * Does NOT hash the result.
         * @param privateA private key
         * @param publicB different public key
         * @param isCompressed whether to return compact (default), or full key
         * @returns shared public key
         */
        function getSharedSecret(privateA, publicB, isCompressed = true) {
            if (isProbPub(privateA))
                throw new Error('first arg must be private key');
            if (!isProbPub(publicB))
                throw new Error('second arg must be public key');
            const b = Point.fromHex(publicB); // check for being on-curve
            return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
        }
        // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
        // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
        // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
        // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
        const bits2int = CURVE.bits2int ||
            function (bytes) {
                // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
                // for some cases, since bytes.length * 8 is not actual bitLength.
                const num = bytesToNumberBE(bytes); // check for == u8 done here
                const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
                return delta > 0 ? num >> BigInt(delta) : num;
            };
        const bits2int_modN = CURVE.bits2int_modN ||
            function (bytes) {
                return modN(bits2int(bytes)); // can't use bytesToNumberBE here
            };
        // NOTE: pads output with zero as per spec
        const ORDER_MASK = bitMask(CURVE.nBitLength);
        /**
         * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
         */
        function int2octets(num) {
            if (typeof num !== 'bigint')
                throw new Error('bigint expected');
            if (!(_0n$1 <= num && num < ORDER_MASK))
                throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
            // works with order, can have different size than numToField!
            return numberToBytesBE(num, CURVE.nByteLength);
        }
        // Steps A, D of RFC6979 3.2
        // Creates RFC6979 seed; converts msg/privKey to numbers.
        // Used only in sign, not in verify.
        // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
        // Also it can be bigger for P224 + SHA256
        function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
            if (['recovered', 'canonical'].some((k) => k in opts))
                throw new Error('sign() legacy options not supported');
            const { hash, randomBytes } = CURVE;
            let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
            if (lowS == null)
                lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
            msgHash = ensureBytes('msgHash', msgHash);
            if (prehash)
                msgHash = ensureBytes('prehashed msgHash', hash(msgHash));
            // We can't later call bits2octets, since nested bits2int is broken for curves
            // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
            // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
            const h1int = bits2int_modN(msgHash);
            const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
            const seedArgs = [int2octets(d), int2octets(h1int)];
            // extraEntropy. RFC6979 3.6: additional k' (optional).
            if (ent != null) {
                // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
                const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
                seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes
            }
            const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2
            const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
            // Converts signature params into point w r/s, checks result for validity.
            function k2sig(kBytes) {
                // RFC 6979 Section 3.2, step 3: k = bits2int(T)
                const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
                if (!isWithinCurveOrder(k))
                    return; // Important: all mod() calls here must be done over N
                const ik = invN(k); // k^-1 mod n
                const q = Point.BASE.multiply(k).toAffine(); // q = Gk
                const r = modN(q.x); // r = q.x mod n
                if (r === _0n$1)
                    return;
                // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
                // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
                // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
                const s = modN(ik * modN(m + r * d)); // Not using blinding here
                if (s === _0n$1)
                    return;
                let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n$2); // recovery bit (2 or 3, when q.x > n)
                let normS = s;
                if (lowS && isBiggerThanHalfOrder(s)) {
                    normS = normalizeS(s); // if lowS was passed, ensure s is always
                    recovery ^= 1; // // in the bottom half of N
                }
                return new Signature(r, normS, recovery); // use normS, not s
            }
            return { seed, k2sig };
        }
        const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
        const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
        /**
         * Signs message hash with a private key.
         * ```
         * sign(m, d, k) where
         *   (x, y) = G × k
         *   r = x mod n
         *   s = (m + dr)/k mod n
         * ```
         * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
         * @param privKey private key
         * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
         * @returns signature with recovery param
         */
        function sign(msgHash, privKey, opts = defaultSigOpts) {
            const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
            const C = CURVE;
            const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
            return drbg(seed, k2sig); // Steps B, C, D, E, F, G
        }
        // Enable precomputes. Slows down first publicKey computation by 20ms.
        Point.BASE._setWindowSize(8);
        // utils.precompute(8, ProjectivePoint.BASE)
        /**
         * Verifies a signature against message hash and public key.
         * Rejects lowS signatures by default: to override,
         * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
         *
         * ```
         * verify(r, s, h, P) where
         *   U1 = hs^-1 mod n
         *   U2 = rs^-1 mod n
         *   R = U1⋅G - U2⋅P
         *   mod(R.x, n) == r
         * ```
         */
        function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
            const sg = signature;
            msgHash = ensureBytes('msgHash', msgHash);
            publicKey = ensureBytes('publicKey', publicKey);
            if ('strict' in opts)
                throw new Error('options.strict was renamed to lowS');
            const { lowS, prehash } = opts;
            let _sig = undefined;
            let P;
            try {
                if (typeof sg === 'string' || sg instanceof Uint8Array) {
                    // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
                    // Since DER can also be 2*nByteLength bytes, we check for it first.
                    try {
                        _sig = Signature.fromDER(sg);
                    }
                    catch (derError) {
                        if (!(derError instanceof DER.Err))
                            throw derError;
                        _sig = Signature.fromCompact(sg);
                    }
                }
                else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {
                    const { r, s } = sg;
                    _sig = new Signature(r, s);
                }
                else {
                    throw new Error('PARSE');
                }
                P = Point.fromHex(publicKey);
            }
            catch (error) {
                if (error.message === 'PARSE')
                    throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
                return false;
            }
            if (lowS && _sig.hasHighS())
                return false;
            if (prehash)
                msgHash = CURVE.hash(msgHash);
            const { r, s } = _sig;
            const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
            const is = invN(s); // s^-1
            const u1 = modN(h * is); // u1 = hs^-1 mod n
            const u2 = modN(r * is); // u2 = rs^-1 mod n
            const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
            if (!R)
                return false;
            const v = modN(R.x);
            return v === r;
        }
        return {
            CURVE,
            getPublicKey,
            getSharedSecret,
            sign,
            verify,
            ProjectivePoint: Point,
            Signature,
            utils,
        };
    }

    // HMAC (RFC 2104)
    class HMAC extends Hash {
        constructor(hash, _key) {
            super();
            this.finished = false;
            this.destroyed = false;
            hash$3(hash);
            const key = toBytes(_key);
            this.iHash = hash.create();
            if (typeof this.iHash.update !== 'function')
                throw new Error('Expected instance of class which extends utils.Hash');
            this.blockLen = this.iHash.blockLen;
            this.outputLen = this.iHash.outputLen;
            const blockLen = this.blockLen;
            const pad = new Uint8Array(blockLen);
            // blockLen can be bigger than outputLen
            pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
            for (let i = 0; i < pad.length; i++)
                pad[i] ^= 0x36;
            this.iHash.update(pad);
            // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
            this.oHash = hash.create();
            // Undo internal XOR && apply outer XOR
            for (let i = 0; i < pad.length; i++)
                pad[i] ^= 0x36 ^ 0x5c;
            this.oHash.update(pad);
            pad.fill(0);
        }
        update(buf) {
            exists(this);
            this.iHash.update(buf);
            return this;
        }
        digestInto(out) {
            exists(this);
            bytes(out, this.outputLen);
            this.finished = true;
            this.iHash.digestInto(out);
            this.oHash.update(out);
            this.oHash.digestInto(out);
            this.destroy();
        }
        digest() {
            const out = new Uint8Array(this.oHash.outputLen);
            this.digestInto(out);
            return out;
        }
        _cloneInto(to) {
            // Create new instance without calling constructor since key already in state and we don't know it.
            to || (to = Object.create(Object.getPrototypeOf(this), {}));
            const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
            to = to;
            to.finished = finished;
            to.destroyed = destroyed;
            to.blockLen = blockLen;
            to.outputLen = outputLen;
            to.oHash = oHash._cloneInto(to.oHash);
            to.iHash = iHash._cloneInto(to.iHash);
            return to;
        }
        destroy() {
            this.destroyed = true;
            this.oHash.destroy();
            this.iHash.destroy();
        }
    }
    /**
     * HMAC: RFC2104 message authentication code.
     * @param hash - function that would be used e.g. sha256
     * @param key - message key
     * @param message - message data
     */
    const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
    hmac.create = (hash, key) => new HMAC(hash, key);

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // connects noble-curves to noble-hashes
    function getHash(hash) {
        return {
            hash,
            hmac: (key, ...msgs) => hmac(hash, key, concatBytes$1(...msgs)),
            randomBytes,
        };
    }
    function createCurve(curveDef, defHash) {
        const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });
        return Object.freeze({ ...create(defHash), create });
    }

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
    const secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');
    const _1n$1 = BigInt(1);
    const _2n$1 = BigInt(2);
    const divNearest = (a, b) => (a + b / _2n$1) / b;
    /**
     * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
     * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
     */
    function sqrtMod(y) {
        const P = secp256k1P;
        // prettier-ignore
        const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
        // prettier-ignore
        const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
        const b2 = (y * y * y) % P; // x^3, 11
        const b3 = (b2 * b2 * y) % P; // x^7
        const b6 = (pow2(b3, _3n, P) * b3) % P;
        const b9 = (pow2(b6, _3n, P) * b3) % P;
        const b11 = (pow2(b9, _2n$1, P) * b2) % P;
        const b22 = (pow2(b11, _11n, P) * b11) % P;
        const b44 = (pow2(b22, _22n, P) * b22) % P;
        const b88 = (pow2(b44, _44n, P) * b44) % P;
        const b176 = (pow2(b88, _88n, P) * b88) % P;
        const b220 = (pow2(b176, _44n, P) * b44) % P;
        const b223 = (pow2(b220, _3n, P) * b3) % P;
        const t1 = (pow2(b223, _23n, P) * b22) % P;
        const t2 = (pow2(t1, _6n, P) * b2) % P;
        const root = pow2(t2, _2n$1, P);
        if (!Fp.eql(Fp.sqr(root), y))
            throw new Error('Cannot find square root');
        return root;
    }
    const Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });
    const secp256k1 = createCurve({
        a: BigInt(0),
        b: BigInt(7),
        Fp,
        n: secp256k1N,
        // Base point (x, y) aka generator point
        Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
        Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
        h: BigInt(1),
        lowS: true,
        /**
         * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
         * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
         * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
         * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
         */
        endo: {
            beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
            splitScalar: (k) => {
                const n = secp256k1N;
                const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
                const b1 = -_1n$1 * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
                const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
                const b2 = a1;
                const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)
                const c1 = divNearest(b2 * k, n);
                const c2 = divNearest(-b1 * k, n);
                let k1 = mod(k - c1 * a1 - c2 * a2, n);
                let k2 = mod(-c1 * b1 - c2 * b2, n);
                const k1neg = k1 > POW_2_128;
                const k2neg = k2 > POW_2_128;
                if (k1neg)
                    k1 = n - k1;
                if (k2neg)
                    k2 = n - k2;
                if (k1 > POW_2_128 || k2 > POW_2_128) {
                    throw new Error('splitScalar: Endomorphism failed, k=' + k);
                }
                return { k1neg, k1, k2neg, k2 };
            },
        },
    }, sha256);
    // Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
    // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
    BigInt(0);
    secp256k1.ProjectivePoint;

    function encodeAddress(key, ss58Format = defaults$2.prefix) {
        // decode it, this means we can re-encode an address
        const u8a = decodeAddress(key);
        if ((ss58Format < 0) || (ss58Format > 16383) || [46, 47].includes(ss58Format)) {
            throw new Error('Out of range ss58Format specified');
        }
        else if (!defaults$2.allowedDecodedLengths.includes(u8a.length)) {
            throw new Error(`Expected a valid key to convert, with length ${defaults$2.allowedDecodedLengths.join(', ')}`);
        }
        const input = u8aConcat(ss58Format < 64
            ? [ss58Format]
            : [
                ((ss58Format & 252) >> 2) | 64,
                (ss58Format >> 8) | ((ss58Format & 3) << 6)
            ], u8a);
        return base58Encode(u8aConcat(input, sshash(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
    }

    // SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
    // It's called a sponge function.
    // Various per round constants calculations
    const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
    const _0n = /* @__PURE__ */ BigInt(0);
    const _1n = /* @__PURE__ */ BigInt(1);
    const _2n = /* @__PURE__ */ BigInt(2);
    const _7n$1 = /* @__PURE__ */ BigInt(7);
    const _256n$1 = /* @__PURE__ */ BigInt(256);
    const _0x71n = /* @__PURE__ */ BigInt(0x71);
    for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
        // Pi
        [x, y] = [y, (2 * x + 3 * y) % 5];
        SHA3_PI.push(2 * (5 * y + x));
        // Rotational
        SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
        // Iota
        let t = _0n;
        for (let j = 0; j < 7; j++) {
            R = ((R << _1n) ^ ((R >> _7n$1) * _0x71n)) % _256n$1;
            if (R & _2n)
                t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);
        }
        _SHA3_IOTA.push(t);
    }
    const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
    // Left rotation (without 0, 32, 64)
    const rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));
    const rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));
    // Same as keccakf1600, but allows to skip some rounds
    function keccakP(s, rounds = 24) {
        const B = new Uint32Array(5 * 2);
        // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
        for (let round = 24 - rounds; round < 24; round++) {
            // Theta θ
            for (let x = 0; x < 10; x++)
                B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
            for (let x = 0; x < 10; x += 2) {
                const idx1 = (x + 8) % 10;
                const idx0 = (x + 2) % 10;
                const B0 = B[idx0];
                const B1 = B[idx0 + 1];
                const Th = rotlH(B0, B1, 1) ^ B[idx1];
                const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
                for (let y = 0; y < 50; y += 10) {
                    s[x + y] ^= Th;
                    s[x + y + 1] ^= Tl;
                }
            }
            // Rho (ρ) and Pi (π)
            let curH = s[2];
            let curL = s[3];
            for (let t = 0; t < 24; t++) {
                const shift = SHA3_ROTL[t];
                const Th = rotlH(curH, curL, shift);
                const Tl = rotlL(curH, curL, shift);
                const PI = SHA3_PI[t];
                curH = s[PI];
                curL = s[PI + 1];
                s[PI] = Th;
                s[PI + 1] = Tl;
            }
            // Chi (χ)
            for (let y = 0; y < 50; y += 10) {
                for (let x = 0; x < 10; x++)
                    B[x] = s[y + x];
                for (let x = 0; x < 10; x++)
                    s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
            }
            // Iota (ι)
            s[0] ^= SHA3_IOTA_H[round];
            s[1] ^= SHA3_IOTA_L[round];
        }
        B.fill(0);
    }
    class Keccak extends Hash {
        // NOTE: we accept arguments in bytes instead of bits here.
        constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
            super();
            this.blockLen = blockLen;
            this.suffix = suffix;
            this.outputLen = outputLen;
            this.enableXOF = enableXOF;
            this.rounds = rounds;
            this.pos = 0;
            this.posOut = 0;
            this.finished = false;
            this.destroyed = false;
            // Can be passed from user as dkLen
            number(outputLen);
            // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
            if (0 >= this.blockLen || this.blockLen >= 200)
                throw new Error('Sha3 supports only keccak-f1600 function');
            this.state = new Uint8Array(200);
            this.state32 = u32$1(this.state);
        }
        keccak() {
            keccakP(this.state32, this.rounds);
            this.posOut = 0;
            this.pos = 0;
        }
        update(data) {
            exists(this);
            const { blockLen, state } = this;
            data = toBytes(data);
            const len = data.length;
            for (let pos = 0; pos < len;) {
                const take = Math.min(blockLen - this.pos, len - pos);
                for (let i = 0; i < take; i++)
                    state[this.pos++] ^= data[pos++];
                if (this.pos === blockLen)
                    this.keccak();
            }
            return this;
        }
        finish() {
            if (this.finished)
                return;
            this.finished = true;
            const { state, suffix, pos, blockLen } = this;
            // Do the padding
            state[pos] ^= suffix;
            if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
                this.keccak();
            state[blockLen - 1] ^= 0x80;
            this.keccak();
        }
        writeInto(out) {
            exists(this, false);
            bytes(out);
            this.finish();
            const bufferOut = this.state;
            const { blockLen } = this;
            for (let pos = 0, len = out.length; pos < len;) {
                if (this.posOut >= blockLen)
                    this.keccak();
                const take = Math.min(blockLen - this.posOut, len - pos);
                out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
                this.posOut += take;
                pos += take;
            }
            return out;
        }
        xofInto(out) {
            // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
            if (!this.enableXOF)
                throw new Error('XOF is not possible for this instance');
            return this.writeInto(out);
        }
        xof(bytes) {
            number(bytes);
            return this.xofInto(new Uint8Array(bytes));
        }
        digestInto(out) {
            output(out, this);
            if (this.finished)
                throw new Error('digest() was already called');
            this.writeInto(out);
            this.destroy();
            return out;
        }
        digest() {
            return this.digestInto(new Uint8Array(this.outputLen));
        }
        destroy() {
            this.destroyed = true;
            this.state.fill(0);
        }
        _cloneInto(to) {
            const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
            to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
            to.state32.set(this.state32);
            to.pos = this.pos;
            to.posOut = this.posOut;
            to.finished = this.finished;
            to.rounds = rounds;
            // Suffix can change in cSHAKE
            to.suffix = suffix;
            to.outputLen = outputLen;
            to.enableXOF = enableXOF;
            to.destroyed = this.destroyed;
            return to;
        }
    }
    const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
    /**
     * keccak-256 hash function. Different from SHA3-256.
     * @param message - that would be hashed
     */
    const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);
    const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);

    /**
     * @name keccakAsU8a
     * @summary Creates a keccak Uint8Array from the input.
     * @description
     * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.
     * @example
     * <BR>
     *
     * ```javascript
     * import { keccakAsU8a } from '@polkadot/util-crypto';
     *
     * keccakAsU8a('123'); // => Uint8Array
     * ```
     */
    const keccakAsU8a = /*#__PURE__*/ createDualHasher({ 256: keccak256, 512: keccak512 }, { 256: keccak_256, 512: keccak_512 });

    function secp256k1Expand(publicKey, onlyJs) {
        if (![33, 65].includes(publicKey.length)) {
            throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);
        }
        if (publicKey.length === 65) {
            return publicKey.subarray(1);
        }
        if (!hasBigInt || (!onlyJs && isReady())) {
            return secp256k1Expand$1(publicKey).subarray(1);
        }
        const { px, py } = secp256k1.ProjectivePoint.fromHex(publicKey);
        return u8aConcat(bnToU8a(px, BN_BE_256_OPTS), bnToU8a(py, BN_BE_256_OPTS));
    }

    function getH160(u8a) {
        if ([33, 65].includes(u8a.length)) {
            u8a = keccakAsU8a(secp256k1Expand(u8a));
        }
        return u8a.slice(-20);
    }
    function ethereumEncode(addressOrPublic) {
        if (!addressOrPublic) {
            return '0x';
        }
        const u8aAddress = u8aToU8a(addressOrPublic);
        if (![20, 32, 33, 65].includes(u8aAddress.length)) {
            throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
        }
        const address = u8aToHex(getH160(u8aAddress), -1, false);
        const hash = u8aToHex(keccakAsU8a(address), -1, false);
        let result = '';
        for (let i = 0; i < 40; i++) {
            result = `${result}${parseInt(hash[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
        }
        return `0x${result}`;
    }

    function isInvalidChar(char, byte) {
        return char !== (byte > 7
            ? char.toUpperCase()
            : char.toLowerCase());
    }
    function isEthereumChecksum(_address) {
        const address = _address.replace('0x', '');
        const hash = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);
        for (let i = 0; i < 40; i++) {
            if (isInvalidChar(address[i], parseInt(hash[i], 16))) {
                return false;
            }
        }
        return true;
    }

    function isEthereumAddress(address) {
        if (!address || address.length !== 42 || !isHex(address)) {
            return false;
        }
        else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
            return true;
        }
        return isEthereumChecksum(address);
    }

    const P64_1 = BigInt$1('11400714785074694791');
    const P64_2 = BigInt$1('14029467366897019727');
    const P64_3 = BigInt$1('1609587929392839161');
    const P64_4 = BigInt$1('9650029242287828579');
    const P64_5 = BigInt$1('2870177450012600261');
    const U64 = BigInt$1('0xffffffffffffffff');
    const _7n = BigInt$1(7);
    const _11n = BigInt$1(11);
    const _12n = BigInt$1(12);
    const _16n = BigInt$1(16);
    const _18n = BigInt$1(18);
    const _23n = BigInt$1(23);
    const _27n = BigInt$1(27);
    const _29n = BigInt$1(29);
    const _31n = BigInt$1(31);
    const _32n = BigInt$1(32);
    const _33n = BigInt$1(33);
    const _64n = BigInt$1(64);
    const _256n = BigInt$1(256);
    function rotl(a, b) {
        const c = a & U64;
        return ((c << b) | (c >> (_64n - b))) & U64;
    }
    function fromU8a(u8a, p, count) {
        const bigints = new Array(count);
        let offset = 0;
        for (let i = 0; i < count; i++, offset += 2) {
            bigints[i] = BigInt$1(u8a[p + offset] | (u8a[p + 1 + offset] << 8));
        }
        let result = _0n$5;
        for (let i = count - 1; i >= 0; i--) {
            result = (result << _16n) + bigints[i];
        }
        return result;
    }
    function init(seed, input) {
        const state = {
            seed,
            u8a: new Uint8Array(32),
            u8asize: 0,
            v1: seed + P64_1 + P64_2,
            v2: seed + P64_2,
            v3: seed,
            v4: seed - P64_1
        };
        if (input.length < 32) {
            state.u8a.set(input);
            state.u8asize = input.length;
            return state;
        }
        const limit = input.length - 32;
        let p = 0;
        if (limit >= 0) {
            const adjustV = (v) => P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);
            do {
                state.v1 = adjustV(state.v1);
                p += 8;
                state.v2 = adjustV(state.v2);
                p += 8;
                state.v3 = adjustV(state.v3);
                p += 8;
                state.v4 = adjustV(state.v4);
                p += 8;
            } while (p <= limit);
        }
        if (p < input.length) {
            state.u8a.set(input.subarray(p, input.length));
            state.u8asize = input.length - p;
        }
        return state;
    }
    function xxhash64(input, initSeed) {
        const { seed, u8a, u8asize, v1, v2, v3, v4 } = init(BigInt$1(initSeed), input);
        let p = 0;
        let h64 = U64 & (BigInt$1(input.length) + (input.length >= 32
            ? (((((((((rotl(v1, _1n$6) + rotl(v2, _7n) + rotl(v3, _12n) + rotl(v4, _18n)) ^ (P64_1 * rotl(v1 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v2 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v3 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v4 * P64_2, _31n))) * P64_1 + P64_4)
            : (seed + P64_5)));
        while (p <= (u8asize - 8)) {
            h64 = U64 & (P64_4 + P64_1 * rotl(h64 ^ (P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n)), _27n));
            p += 8;
        }
        if ((p + 4) <= u8asize) {
            h64 = U64 & (P64_3 + P64_2 * rotl(h64 ^ (P64_1 * fromU8a(u8a, p, 2)), _23n));
            p += 4;
        }
        while (p < u8asize) {
            h64 = U64 & (P64_1 * rotl(h64 ^ (P64_5 * BigInt$1(u8a[p++])), _11n));
        }
        h64 = U64 & (P64_2 * (h64 ^ (h64 >> _33n)));
        h64 = U64 & (P64_3 * (h64 ^ (h64 >> _29n)));
        h64 = U64 & (h64 ^ (h64 >> _32n));
        const result = new Uint8Array(8);
        for (let i = 7; i >= 0; i--) {
            result[i] = Number(h64 % _256n);
            h64 = h64 / _256n;
        }
        return result;
    }

    /**
     * @name xxhashAsU8a
     * @summary Creates a xxhash64 u8a from the input.
     * @description
     * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.
     * @example
     * <BR>
     *
     * ```javascript
     * import { xxhashAsU8a } from '@polkadot/util-crypto';
     *
     * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999
     * ```
     */
    function xxhashAsU8a(data, bitLength = 64, onlyJs) {
        const rounds = Math.ceil(bitLength / 64);
        const u8a = u8aToU8a(data);
        if (!hasBigInt || (!onlyJs && isReady())) {
            return twox(u8a, rounds);
        }
        const result = new Uint8Array(rounds * 8);
        for (let seed = 0; seed < rounds; seed++) {
            result.set(xxhash64(u8a, seed).reverse(), seed * 8);
        }
        return result;
    }

    const UNKNOWN = -99999;
    function extend(that, name, value) {
        Object.defineProperty(that, name, {
            configurable: true,
            enumerable: false,
            value
        });
    }
    /**
     * @name RpcError
     * @summary Extension to the basic JS Error.
     * @description
     * The built-in JavaScript Error class is extended by adding a code to allow for Error categorization. In addition to the normal `stack`, `message`, the numeric `code` and `data` (any types) parameters are available on the object.
     * @example
     * <BR>
     *
     * ```javascript
     * const { RpcError } from '@polkadot/util');
     *
     * throw new RpcError('some message', RpcError.CODES.METHOD_NOT_FOUND); // => error.code = -32601
     * ```
     */
    class RpcError extends Error {
        constructor(message = '', code = UNKNOWN, data) {
            super();
            extend(this, 'message', String(message));
            extend(this, 'name', this.constructor.name);
            extend(this, 'data', data);
            extend(this, 'code', code);
            if (isFunction$1(Error.captureStackTrace)) {
                Error.captureStackTrace(this, this.constructor);
            }
            else {
                const { stack } = new Error(message);
                stack && extend(this, 'stack', stack);
            }
        }
    }
    RpcError.CODES = {
        ASSERT: -90009,
        INVALID_JSONRPC: -99998,
        METHOD_NOT_FOUND: -32601,
        UNKNOWN
    };
    var RpcError$1 = RpcError;

    function formatErrorData(data) {
        if (isUndefined(data)) {
            return '';
        }
        const formatted = `: ${isString(data)
        ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '')
        : stringify(data)}`;
        // We need some sort of cut-off here since these can be very large and
        // very nested, pick a number and trim the result display to it
        return formatted.length <= 256
            ? formatted
            : `${formatted.substring(0, 255)}…`;
    }
    function checkError(error) {
        if (error) {
            const { code, data, message } = error;
            throw new RpcError$1(`${code}: ${message}${formatErrorData(data)}`, code, data);
        }
    }
    /** @internal */
    class RpcCoder {
        constructor() {
            this.__internal__id = 0;
        }
        decodeResponse(response) {
            if (!response || response.jsonrpc !== '2.0') {
                throw new Error('Invalid jsonrpc field in decoded object');
            }
            const isSubscription = !isUndefined(response.params) && !isUndefined(response.method);
            if (!isNumber(response.id) &&
                (!isSubscription || (!isNumber(response.params.subscription) &&
                    !isString(response.params.subscription)))) {
                throw new Error('Invalid id field in decoded object');
            }
            checkError(response.error);
            if (response.result === undefined && !isSubscription) {
                throw new Error('No result found in jsonrpc response');
            }
            if (isSubscription) {
                checkError(response.params.error);
                return response.params.result;
            }
            return response.result;
        }
        encodeJson(method, params) {
            const [id, data] = this.encodeObject(method, params);
            return [id, stringify(data)];
        }
        encodeObject(method, params) {
            const id = ++this.__internal__id;
            return [id, {
                    id,
                    jsonrpc: '2.0',
                    method,
                    params
                }];
        }
    }

    const HTTP_URL = 'http://127.0.0.1:9933';
    const WS_URL = 'ws://127.0.0.1:9944';
    var defaults$1 = {
        HTTP_URL,
        WS_URL
    };

    const DEFAULT_CAPACITY = 128;
    class LRUNode {
        constructor(key) {
            this.key = key;
            this.next = this.prev = this;
        }
    }
    class LRUCache {
        constructor(capacity = DEFAULT_CAPACITY) {
            this.__internal__data = new Map();
            this.__internal__refs = new Map();
            this.__internal__length = 0;
            this.capacity = capacity;
            this.__internal__head = this.__internal__tail = new LRUNode('<empty>');
        }
        get length() {
            return this.__internal__length;
        }
        get lengthData() {
            return this.__internal__data.size;
        }
        get lengthRefs() {
            return this.__internal__refs.size;
        }
        entries() {
            const keys = this.keys();
            const count = keys.length;
            const entries = new Array(count);
            for (let i = 0; i < count; i++) {
                const key = keys[i];
                entries[i] = [key, this.__internal__data.get(key)];
            }
            return entries;
        }
        keys() {
            const keys = [];
            if (this.__internal__length) {
                let curr = this.__internal__head;
                while (curr !== this.__internal__tail) {
                    keys.push(curr.key);
                    curr = curr.next;
                }
                keys.push(curr.key);
            }
            return keys;
        }
        get(key) {
            const data = this.__internal__data.get(key);
            if (data) {
                this.__internal__toHead(key);
                return data;
            }
            return null;
        }
        set(key, value) {
            if (this.__internal__data.has(key)) {
                this.__internal__toHead(key);
            }
            else {
                const node = new LRUNode(key);
                this.__internal__refs.set(node.key, node);
                if (this.length === 0) {
                    this.__internal__head = this.__internal__tail = node;
                }
                else {
                    this.__internal__head.prev = node;
                    node.next = this.__internal__head;
                    this.__internal__head = node;
                }
                if (this.__internal__length === this.capacity) {
                    this.__internal__data.delete(this.__internal__tail.key);
                    this.__internal__refs.delete(this.__internal__tail.key);
                    this.__internal__tail = this.__internal__tail.prev;
                    this.__internal__tail.next = this.__internal__head;
                }
                else {
                    this.__internal__length += 1;
                }
            }
            this.__internal__data.set(key, value);
        }
        __internal__toHead(key) {
            const ref = this.__internal__refs.get(key);
            if (ref && ref !== this.__internal__head) {
                ref.prev.next = ref.next;
                ref.next.prev = ref.prev;
                ref.next = this.__internal__head;
                this.__internal__head.prev = ref;
                this.__internal__head = ref;
            }
        }
    }

    var eventemitter3$1 = {exports: {}};

    (function (module) {

    var has = Object.prototype.hasOwnProperty
      , prefix = '~';

    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */
    function Events() {}

    //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //
    if (Object.create) {
      Events.prototype = Object.create(null);

      //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //
      if (!new Events().__proto__) prefix = false;
    }

    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }

    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once)
        , evt = prefix ? prefix + event : event;

      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];

      return emitter;
    }

    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }

    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }

    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = []
        , events
        , name;

      if (this._eventsCount === 0) return names;

      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };

    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event
        , handlers = this._events[evt];

      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };

    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event
        , listeners = this._events[evt];

      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };

    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return false;

      var listeners = this._events[evt]
        , len = arguments.length
        , args
        , i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1: return listeners.fn.call(listeners.context), true;
          case 2: return listeners.fn.call(listeners.context, a1), true;
          case 3: return listeners.fn.call(listeners.context, a1, a2), true;
          case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len -1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length
          , j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1: listeners[i].fn.call(listeners[i].context); break;
            case 2: listeners[i].fn.call(listeners[i].context, a1); break;
            case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
            case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
            default:
              if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
                args[j - 1] = arguments[j];
              }

              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };

    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };

    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };

    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (
          listeners.fn === fn &&
          (!once || listeners.once) &&
          (!context || listeners.context === context)
        ) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (
            listeners[i].fn !== fn ||
            (once && !listeners[i].once) ||
            (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }

        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }

      return this;
    };

    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    };

    //
    // Alias methods names because people roll like that.
    //
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    //
    // Expose the prefix.
    //
    EventEmitter.prefixed = prefix;

    //
    // Allow `EventEmitter` to be imported as module namespace.
    //
    EventEmitter.EventEmitter = EventEmitter;

    //
    // Expose the module.
    //
    {
      module.exports = EventEmitter;
    }
    }(eventemitter3$1));

    var EventEmitter$1 = eventemitter3$1.exports;

    const known = {
        1000: 'Normal Closure',
        1001: 'Going Away',
        1002: 'Protocol Error',
        1003: 'Unsupported Data',
        1004: '(For future)',
        1005: 'No Status Received',
        1006: 'Abnormal Closure',
        1007: 'Invalid frame payload data',
        1008: 'Policy Violation',
        1009: 'Message too big',
        1010: 'Missing Extension',
        1011: 'Internal Error',
        1012: 'Service Restart',
        1013: 'Try Again Later',
        1014: 'Bad Gateway',
        1015: 'TLS Handshake'
    };
    function getWSErrorString(code) {
        if (code >= 0 && code <= 999) {
            return '(Unused)';
        }
        else if (code >= 1016) {
            if (code <= 1999) {
                return '(For WebSocket standard)';
            }
            else if (code <= 2999) {
                return '(For WebSocket extensions)';
            }
            else if (code <= 3999) {
                return '(For libraries and frameworks)';
            }
            else if (code <= 4999) {
                return '(For applications)';
            }
        }
        return known[code] || '(Unknown)';
    }

    const ALIASES = {
        chain_finalisedHead: 'chain_finalizedHead',
        chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
        chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
    };
    const RETRY_DELAY = 2500;
    const DEFAULT_TIMEOUT_MS = 60 * 1000;
    const TIMEOUT_INTERVAL = 5000;
    const l$b = logger('api-ws');
    /** @internal Clears a Record<*> of all keys, optionally with all callback on clear */
    function eraseRecord(record, cb) {
        Object.keys(record).forEach((key) => {
            if (cb) {
                cb(record[key]);
            }
            delete record[key];
        });
    }
    /** @internal Creates a default/empty stats object */
    function defaultEndpointStats() {
        return { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 };
    }
    /**
     * # @polkadot/rpc-provider/ws
     *
     * @name WsProvider
     *
     * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     * import { WsProvider } from '@polkadot/rpc-provider/ws';
     *
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const api = new Api(provider);
     * ```
     *
     * @see [[HttpProvider]]
     */
    class WsProvider {
        /**
         * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
         * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
         * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
         * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
         */
        constructor(endpoint = defaults$1.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout) {
            this.__internal__callCache = new LRUCache();
            this.__internal__handlers = {};
            this.__internal__waitingForId = {};
            this.__internal__isConnected = false;
            this.__internal__subscriptions = {};
            this.__internal__timeoutId = null;
            this.__internal__emit = (type, ...args) => {
                this.__internal__eventemitter.emit(type, ...args);
            };
            this.__internal__onSocketClose = (event) => {
                const error = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);
                if (this.__internal__autoConnectMs > 0) {
                    l$b.error(error.message);
                }
                this.__internal__isConnected = false;
                if (this.__internal__websocket) {
                    this.__internal__websocket.onclose = null;
                    this.__internal__websocket.onerror = null;
                    this.__internal__websocket.onmessage = null;
                    this.__internal__websocket.onopen = null;
                    this.__internal__websocket = null;
                }
                if (this.__internal__timeoutId) {
                    clearInterval(this.__internal__timeoutId);
                    this.__internal__timeoutId = null;
                }
                // reject all hanging requests
                eraseRecord(this.__internal__handlers, (h) => {
                    try {
                        h.callback(error, undefined);
                    }
                    catch (err) {
                        // does not throw
                        l$b.error(err);
                    }
                });
                eraseRecord(this.__internal__waitingForId);
                // Reset stats for active endpoint
                this.__internal__endpointStats = defaultEndpointStats();
                this.__internal__emit('disconnected');
                if (this.__internal__autoConnectMs > 0) {
                    setTimeout(() => {
                        this.connectWithRetry().catch(noop$1);
                    }, this.__internal__autoConnectMs);
                }
            };
            this.__internal__onSocketError = (error) => {
                l$b.debug(() => ['socket error', error]);
                this.__internal__emit('error', error);
            };
            this.__internal__onSocketMessage = (message) => {
                l$b.debug(() => ['received', message.data]);
                const bytesRecv = message.data.length;
                this.__internal__endpointStats.bytesRecv += bytesRecv;
                this.__internal__stats.total.bytesRecv += bytesRecv;
                const response = JSON.parse(message.data);
                return isUndefined(response.method)
                    ? this.__internal__onSocketMessageResult(response)
                    : this.__internal__onSocketMessageSubscribe(response);
            };
            this.__internal__onSocketMessageResult = (response) => {
                const handler = this.__internal__handlers[response.id];
                if (!handler) {
                    l$b.debug(() => `Unable to find handler for id=${response.id}`);
                    return;
                }
                try {
                    const { method, params, subscription } = handler;
                    const result = this.__internal__coder.decodeResponse(response);
                    // first send the result - in case of subs, we may have an update
                    // immediately if we have some queued results already
                    handler.callback(null, result);
                    if (subscription) {
                        const subId = `${subscription.type}::${result}`;
                        this.__internal__subscriptions[subId] = objectSpread({}, subscription, {
                            method,
                            params
                        });
                        // if we have a result waiting for this subscription already
                        if (this.__internal__waitingForId[subId]) {
                            this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[subId]);
                        }
                    }
                }
                catch (error) {
                    this.__internal__endpointStats.errors++;
                    this.__internal__stats.total.errors++;
                    handler.callback(error, undefined);
                }
                delete this.__internal__handlers[response.id];
            };
            this.__internal__onSocketMessageSubscribe = (response) => {
                if (!response.method) {
                    throw new Error('No method found in JSONRPC response');
                }
                const method = ALIASES[response.method] || response.method;
                const subId = `${method}::${response.params.subscription}`;
                const handler = this.__internal__subscriptions[subId];
                if (!handler) {
                    // store the JSON, we could have out-of-order subid coming in
                    this.__internal__waitingForId[subId] = response;
                    l$b.debug(() => `Unable to find handler for subscription=${subId}`);
                    return;
                }
                // housekeeping
                delete this.__internal__waitingForId[subId];
                try {
                    const result = this.__internal__coder.decodeResponse(response);
                    handler.callback(null, result);
                }
                catch (error) {
                    this.__internal__endpointStats.errors++;
                    this.__internal__stats.total.errors++;
                    handler.callback(error, undefined);
                }
            };
            this.__internal__onSocketOpen = () => {
                if (this.__internal__websocket === null) {
                    throw new Error('WebSocket cannot be null in onOpen');
                }
                l$b.debug(() => ['connected to', this.endpoint]);
                this.__internal__isConnected = true;
                this.__internal__resubscribe();
                this.__internal__emit('connected');
                return true;
            };
            this.__internal__resubscribe = () => {
                const subscriptions = this.__internal__subscriptions;
                this.__internal__subscriptions = {};
                Promise.all(Object.keys(subscriptions).map(async (id) => {
                    const { callback, method, params, type } = subscriptions[id];
                    // only re-create subscriptions which are not in author (only area where
                    // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
                    // are not included (and will not be re-broadcast)
                    if (type.startsWith('author_')) {
                        return;
                    }
                    try {
                        await this.subscribe(type, method, params, callback);
                    }
                    catch (error) {
                        l$b.error(error);
                    }
                })).catch(l$b.error);
            };
            this.__internal__timeoutHandlers = () => {
                const now = Date.now();
                const ids = Object.keys(this.__internal__handlers);
                for (let i = 0, count = ids.length; i < count; i++) {
                    const handler = this.__internal__handlers[ids[i]];
                    if ((now - handler.start) > this.__internal__timeout) {
                        try {
                            handler.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout / 1000}s`), undefined);
                        }
                        catch {
                            // ignore
                        }
                        this.__internal__endpointStats.timeout++;
                        this.__internal__stats.total.timeout++;
                        delete this.__internal__handlers[ids[i]];
                    }
                }
            };
            const endpoints = Array.isArray(endpoint)
                ? endpoint
                : [endpoint];
            if (endpoints.length === 0) {
                throw new Error('WsProvider requires at least one Endpoint');
            }
            endpoints.forEach((endpoint) => {
                if (!/^(wss|ws):\/\//.test(endpoint)) {
                    throw new Error(`Endpoint should start with 'ws://', received '${endpoint}'`);
                }
            });
            this.__internal__eventemitter = new EventEmitter$1();
            this.__internal__autoConnectMs = autoConnectMs || 0;
            this.__internal__coder = new RpcCoder();
            this.__internal__endpointIndex = -1;
            this.__internal__endpoints = endpoints;
            this.__internal__headers = headers;
            this.__internal__websocket = null;
            this.__internal__stats = {
                active: { requests: 0, subscriptions: 0 },
                total: defaultEndpointStats()
            };
            this.__internal__endpointStats = defaultEndpointStats();
            this.__internal__timeout = timeout || DEFAULT_TIMEOUT_MS;
            if (autoConnectMs && autoConnectMs > 0) {
                this.connectWithRetry().catch(noop$1);
            }
            this.__internal__isReadyPromise = new Promise((resolve) => {
                this.__internal__eventemitter.once('connected', () => {
                    resolve(this);
                });
            });
        }
        /**
         * @summary `true` when this provider supports subscriptions
         */
        get hasSubscriptions() {
            return !!true;
        }
        /**
         * @summary `true` when this provider supports clone()
         */
        get isClonable() {
            return !!true;
        }
        /**
         * @summary Whether the node is connected or not.
         * @return {boolean} true if connected
         */
        get isConnected() {
            return this.__internal__isConnected;
        }
        /**
         * @description Promise that resolves the first time we are connected and loaded
         */
        get isReady() {
            return this.__internal__isReadyPromise;
        }
        get endpoint() {
            return this.__internal__endpoints[this.__internal__endpointIndex];
        }
        /**
         * @description Returns a clone of the object
         */
        clone() {
            return new WsProvider(this.__internal__endpoints);
        }
        selectEndpointIndex(endpoints) {
            return (this.__internal__endpointIndex + 1) % endpoints.length;
        }
        /**
         * @summary Manually connect
         * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
         * connect manually using this method.
         */
        // eslint-disable-next-line @typescript-eslint/require-await
        async connect() {
            if (this.__internal__websocket) {
                throw new Error('WebSocket is already connected');
            }
            try {
                this.__internal__endpointIndex = this.selectEndpointIndex(this.__internal__endpoints);
                // the as here is Deno-specific - not available on the globalThis
                this.__internal__websocket = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket, xWs.WebSocket)
                    ? new xWs.WebSocket(this.endpoint)
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore - WS may be an instance of ws, which supports options
                    : new xWs.WebSocket(this.endpoint, undefined, {
                        headers: this.__internal__headers
                    });
                if (this.__internal__websocket) {
                    this.__internal__websocket.onclose = this.__internal__onSocketClose;
                    this.__internal__websocket.onerror = this.__internal__onSocketError;
                    this.__internal__websocket.onmessage = this.__internal__onSocketMessage;
                    this.__internal__websocket.onopen = this.__internal__onSocketOpen;
                }
                // timeout any handlers that have not had a response
                this.__internal__timeoutId = setInterval(() => this.__internal__timeoutHandlers(), TIMEOUT_INTERVAL);
            }
            catch (error) {
                l$b.error(error);
                this.__internal__emit('error', error);
                throw error;
            }
        }
        /**
         * @description Connect, never throwing an error, but rather forcing a retry
         */
        async connectWithRetry() {
            if (this.__internal__autoConnectMs > 0) {
                try {
                    await this.connect();
                }
                catch {
                    setTimeout(() => {
                        this.connectWithRetry().catch(noop$1);
                    }, this.__internal__autoConnectMs);
                }
            }
        }
        /**
         * @description Manually disconnect from the connection, clearing auto-connect logic
         */
        // eslint-disable-next-line @typescript-eslint/require-await
        async disconnect() {
            // switch off autoConnect, we are in manual mode now
            this.__internal__autoConnectMs = 0;
            try {
                if (this.__internal__websocket) {
                    // 1000 - Normal closure; the connection successfully completed
                    this.__internal__websocket.close(1000);
                }
            }
            catch (error) {
                l$b.error(error);
                this.__internal__emit('error', error);
                throw error;
            }
        }
        /**
         * @description Returns the connection stats
         */
        get stats() {
            return {
                active: {
                    requests: Object.keys(this.__internal__handlers).length,
                    subscriptions: Object.keys(this.__internal__subscriptions).length
                },
                total: this.__internal__stats.total
            };
        }
        get endpointStats() {
            return this.__internal__endpointStats;
        }
        /**
         * @summary Listens on events after having subscribed using the [[subscribe]] function.
         * @param  {ProviderInterfaceEmitted} type Event
         * @param  {ProviderInterfaceEmitCb}  sub  Callback
         * @return unsubscribe function
         */
        on(type, sub) {
            this.__internal__eventemitter.on(type, sub);
            return () => {
                this.__internal__eventemitter.removeListener(type, sub);
            };
        }
        /**
         * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
         * @param method The RPC methods to execute
         * @param params Encoded parameters as applicable for the method
         * @param subscription Subscription details (internally used)
         */
        send(method, params, isCacheable, subscription) {
            this.__internal__endpointStats.requests++;
            this.__internal__stats.total.requests++;
            const [id, body] = this.__internal__coder.encodeJson(method, params);
            let resultPromise = isCacheable
                ? this.__internal__callCache.get(body)
                : null;
            if (!resultPromise) {
                resultPromise = this.__internal__send(id, body, method, params, subscription);
                if (isCacheable) {
                    this.__internal__callCache.set(body, resultPromise);
                }
            }
            else {
                this.__internal__endpointStats.cached++;
                this.__internal__stats.total.cached++;
            }
            return resultPromise;
        }
        async __internal__send(id, body, method, params, subscription) {
            return new Promise((resolve, reject) => {
                try {
                    if (!this.isConnected || this.__internal__websocket === null) {
                        throw new Error('WebSocket is not connected');
                    }
                    const callback = (error, result) => {
                        error
                            ? reject(error)
                            : resolve(result);
                    };
                    l$b.debug(() => ['calling', method, body]);
                    this.__internal__handlers[id] = {
                        callback,
                        method,
                        params,
                        start: Date.now(),
                        subscription
                    };
                    const bytesSent = body.length;
                    this.__internal__endpointStats.bytesSent += bytesSent;
                    this.__internal__stats.total.bytesSent += bytesSent;
                    this.__internal__websocket.send(body);
                }
                catch (error) {
                    this.__internal__endpointStats.errors++;
                    this.__internal__stats.total.errors++;
                    reject(error);
                }
            });
        }
        /**
         * @name subscribe
         * @summary Allows subscribing to a specific event.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * const provider = new WsProvider('ws://127.0.0.1:9944');
         * const rpc = new Rpc(provider);
         *
         * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
         *   console.log(values)
         * }).then((subscriptionId) => {
         *   console.log('balance changes subscription id: ', subscriptionId)
         * })
         * ```
         */
        subscribe(type, method, params, callback) {
            this.__internal__endpointStats.subscriptions++;
            this.__internal__stats.total.subscriptions++;
            // subscriptions are not cached, LRU applies to .at(<blockHash>) only
            return this.send(method, params, false, { callback, type });
        }
        /**
         * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
         */
        async unsubscribe(type, method, id) {
            const subscription = `${type}::${id}`;
            // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
            // the assigned id now does not match what the API user originally received. It has
            // a slight complication in solving - since we cannot rely on the send id, but rather
            // need to find the actual subscription id to map it
            if (isUndefined(this.__internal__subscriptions[subscription])) {
                l$b.debug(() => `Unable to find active subscription=${subscription}`);
                return false;
            }
            delete this.__internal__subscriptions[subscription];
            try {
                return this.isConnected && !isNull(this.__internal__websocket)
                    ? this.send(method, [id])
                    : true;
            }
            catch {
                return false;
            }
        }
    }

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol */

    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics(d, b);
    };

    function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }

    function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
    }

    function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
    }

    function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    }

    function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
      function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
      function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
      function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
      function fulfill(value) { resume("next", value); }
      function reject(value) { resume("throw", value); }
      function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
      function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
      function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    function isFunction(value) {
        return typeof value === 'function';
    }

    function createErrorClass(createImpl) {
        var _super = function (instance) {
            Error.call(instance);
            instance.stack = new Error().stack;
        };
        var ctorFunc = createImpl(_super);
        ctorFunc.prototype = Object.create(Error.prototype);
        ctorFunc.prototype.constructor = ctorFunc;
        return ctorFunc;
    }

    var UnsubscriptionError = createErrorClass(function (_super) {
        return function UnsubscriptionErrorImpl(errors) {
            _super(this);
            this.message = errors
                ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
                : '';
            this.name = 'UnsubscriptionError';
            this.errors = errors;
        };
    });

    function arrRemove(arr, item) {
        if (arr) {
            var index = arr.indexOf(item);
            0 <= index && arr.splice(index, 1);
        }
    }

    var Subscription = (function () {
        function Subscription(initialTeardown) {
            this.initialTeardown = initialTeardown;
            this.closed = false;
            this._parentage = null;
            this._finalizers = null;
        }
        Subscription.prototype.unsubscribe = function () {
            var e_1, _a, e_2, _b;
            var errors;
            if (!this.closed) {
                this.closed = true;
                var _parentage = this._parentage;
                if (_parentage) {
                    this._parentage = null;
                    if (Array.isArray(_parentage)) {
                        try {
                            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                                var parent_1 = _parentage_1_1.value;
                                parent_1.remove(this);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    else {
                        _parentage.remove(this);
                    }
                }
                var initialFinalizer = this.initialTeardown;
                if (isFunction(initialFinalizer)) {
                    try {
                        initialFinalizer();
                    }
                    catch (e) {
                        errors = e instanceof UnsubscriptionError ? e.errors : [e];
                    }
                }
                var _finalizers = this._finalizers;
                if (_finalizers) {
                    this._finalizers = null;
                    try {
                        for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                            var finalizer = _finalizers_1_1.value;
                            try {
                                execFinalizer(finalizer);
                            }
                            catch (err) {
                                errors = errors !== null && errors !== void 0 ? errors : [];
                                if (err instanceof UnsubscriptionError) {
                                    errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                                }
                                else {
                                    errors.push(err);
                                }
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                if (errors) {
                    throw new UnsubscriptionError(errors);
                }
            }
        };
        Subscription.prototype.add = function (teardown) {
            var _a;
            if (teardown && teardown !== this) {
                if (this.closed) {
                    execFinalizer(teardown);
                }
                else {
                    if (teardown instanceof Subscription) {
                        if (teardown.closed || teardown._hasParent(this)) {
                            return;
                        }
                        teardown._addParent(this);
                    }
                    (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
                }
            }
        };
        Subscription.prototype._hasParent = function (parent) {
            var _parentage = this._parentage;
            return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
        };
        Subscription.prototype._addParent = function (parent) {
            var _parentage = this._parentage;
            this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
        };
        Subscription.prototype._removeParent = function (parent) {
            var _parentage = this._parentage;
            if (_parentage === parent) {
                this._parentage = null;
            }
            else if (Array.isArray(_parentage)) {
                arrRemove(_parentage, parent);
            }
        };
        Subscription.prototype.remove = function (teardown) {
            var _finalizers = this._finalizers;
            _finalizers && arrRemove(_finalizers, teardown);
            if (teardown instanceof Subscription) {
                teardown._removeParent(this);
            }
        };
        Subscription.EMPTY = (function () {
            var empty = new Subscription();
            empty.closed = true;
            return empty;
        })();
        return Subscription;
    }());
    var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
    function isSubscription(value) {
        return (value instanceof Subscription ||
            (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));
    }
    function execFinalizer(finalizer) {
        if (isFunction(finalizer)) {
            finalizer();
        }
        else {
            finalizer.unsubscribe();
        }
    }

    var config = {
        onUnhandledError: null,
        onStoppedNotification: null,
        Promise: undefined,
        useDeprecatedSynchronousErrorHandling: false,
        useDeprecatedNextContext: false,
    };

    var timeoutProvider = {
        setTimeout: function (handler, timeout) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            var delegate = timeoutProvider.delegate;
            if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
                return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
            }
            return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
        },
        clearTimeout: function (handle) {
            var delegate = timeoutProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
        },
        delegate: undefined,
    };

    function reportUnhandledError(err) {
        timeoutProvider.setTimeout(function () {
            {
                throw err;
            }
        });
    }

    function noop() { }

    var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
    function errorNotification(error) {
        return createNotification('E', undefined, error);
    }
    function nextNotification(value) {
        return createNotification('N', value, undefined);
    }
    function createNotification(kind, value, error) {
        return {
            kind: kind,
            value: value,
            error: error,
        };
    }

    var context = null;
    function errorContext(cb) {
        if (config.useDeprecatedSynchronousErrorHandling) {
            var isRoot = !context;
            if (isRoot) {
                context = { errorThrown: false, error: null };
            }
            cb();
            if (isRoot) {
                var _a = context, errorThrown = _a.errorThrown, error = _a.error;
                context = null;
                if (errorThrown) {
                    throw error;
                }
            }
        }
        else {
            cb();
        }
    }

    var Subscriber = (function (_super) {
        __extends(Subscriber, _super);
        function Subscriber(destination) {
            var _this = _super.call(this) || this;
            _this.isStopped = false;
            if (destination) {
                _this.destination = destination;
                if (isSubscription(destination)) {
                    destination.add(_this);
                }
            }
            else {
                _this.destination = EMPTY_OBSERVER;
            }
            return _this;
        }
        Subscriber.create = function (next, error, complete) {
            return new SafeSubscriber(next, error, complete);
        };
        Subscriber.prototype.next = function (value) {
            if (this.isStopped) {
                handleStoppedNotification(nextNotification(value), this);
            }
            else {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (this.isStopped) {
                handleStoppedNotification(errorNotification(err), this);
            }
            else {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (this.isStopped) {
                handleStoppedNotification(COMPLETE_NOTIFICATION, this);
            }
            else {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
                this.isStopped = true;
                _super.prototype.unsubscribe.call(this);
                this.destination = null;
            }
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            try {
                this.destination.error(err);
            }
            finally {
                this.unsubscribe();
            }
        };
        Subscriber.prototype._complete = function () {
            try {
                this.destination.complete();
            }
            finally {
                this.unsubscribe();
            }
        };
        return Subscriber;
    }(Subscription));
    var _bind = Function.prototype.bind;
    function bind(fn, thisArg) {
        return _bind.call(fn, thisArg);
    }
    var ConsumerObserver = (function () {
        function ConsumerObserver(partialObserver) {
            this.partialObserver = partialObserver;
        }
        ConsumerObserver.prototype.next = function (value) {
            var partialObserver = this.partialObserver;
            if (partialObserver.next) {
                try {
                    partialObserver.next(value);
                }
                catch (error) {
                    handleUnhandledError(error);
                }
            }
        };
        ConsumerObserver.prototype.error = function (err) {
            var partialObserver = this.partialObserver;
            if (partialObserver.error) {
                try {
                    partialObserver.error(err);
                }
                catch (error) {
                    handleUnhandledError(error);
                }
            }
            else {
                handleUnhandledError(err);
            }
        };
        ConsumerObserver.prototype.complete = function () {
            var partialObserver = this.partialObserver;
            if (partialObserver.complete) {
                try {
                    partialObserver.complete();
                }
                catch (error) {
                    handleUnhandledError(error);
                }
            }
        };
        return ConsumerObserver;
    }());
    var SafeSubscriber = (function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            var partialObserver;
            if (isFunction(observerOrNext) || !observerOrNext) {
                partialObserver = {
                    next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                    error: error !== null && error !== void 0 ? error : undefined,
                    complete: complete !== null && complete !== void 0 ? complete : undefined,
                };
            }
            else {
                var context_1;
                if (_this && config.useDeprecatedNextContext) {
                    context_1 = Object.create(observerOrNext);
                    context_1.unsubscribe = function () { return _this.unsubscribe(); };
                    partialObserver = {
                        next: observerOrNext.next && bind(observerOrNext.next, context_1),
                        error: observerOrNext.error && bind(observerOrNext.error, context_1),
                        complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                    };
                }
                else {
                    partialObserver = observerOrNext;
                }
            }
            _this.destination = new ConsumerObserver(partialObserver);
            return _this;
        }
        return SafeSubscriber;
    }(Subscriber));
    function handleUnhandledError(error) {
        {
            reportUnhandledError(error);
        }
    }
    function defaultErrorHandler(err) {
        throw err;
    }
    function handleStoppedNotification(notification, subscriber) {
        var onStoppedNotification = config.onStoppedNotification;
        onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
    }
    var EMPTY_OBSERVER = {
        closed: true,
        next: noop,
        error: defaultErrorHandler,
        complete: noop,
    };

    var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

    function identity$1(x) {
        return x;
    }

    function pipeFromArray(fns) {
        if (fns.length === 0) {
            return identity$1;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }

    var Observable = (function () {
        function Observable(subscribe) {
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var _this = this;
            var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
            errorContext(function () {
                var _a = _this, operator = _a.operator, source = _a.source;
                subscriber.add(operator
                    ?
                        operator.call(subscriber, source)
                    : source
                        ?
                            _this._subscribe(subscriber)
                        :
                            _this._trySubscribe(subscriber));
            });
            return subscriber;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                sink.error(err);
            }
        };
        Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var subscriber = new SafeSubscriber({
                    next: function (value) {
                        try {
                            next(value);
                        }
                        catch (err) {
                            reject(err);
                            subscriber.unsubscribe();
                        }
                    },
                    error: reject,
                    complete: resolve,
                });
                _this.subscribe(subscriber);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            var _a;
            return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
        };
        Observable.prototype[observable] = function () {
            return this;
        };
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i] = arguments[_i];
            }
            return pipeFromArray(operations)(this);
        };
        Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    function getPromiseCtor(promiseCtor) {
        var _a;
        return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
    }
    function isObserver(value) {
        return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
    }
    function isSubscriber(value) {
        return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
    }

    function hasLift(source) {
        return isFunction(source === null || source === void 0 ? void 0 : source.lift);
    }
    function operate(init) {
        return function (source) {
            if (hasLift(source)) {
                return source.lift(function (liftedSource) {
                    try {
                        return init(liftedSource, this);
                    }
                    catch (err) {
                        this.error(err);
                    }
                });
            }
            throw new TypeError('Unable to lift unknown Observable type');
        };
    }

    function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
        return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
    }
    var OperatorSubscriber = (function (_super) {
        __extends(OperatorSubscriber, _super);
        function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
            var _this = _super.call(this, destination) || this;
            _this.onFinalize = onFinalize;
            _this.shouldUnsubscribe = shouldUnsubscribe;
            _this._next = onNext
                ? function (value) {
                    try {
                        onNext(value);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                }
                : _super.prototype._next;
            _this._error = onError
                ? function (err) {
                    try {
                        onError(err);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._error;
            _this._complete = onComplete
                ? function () {
                    try {
                        onComplete();
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._complete;
            return _this;
        }
        OperatorSubscriber.prototype.unsubscribe = function () {
            var _a;
            if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
                var closed_1 = this.closed;
                _super.prototype.unsubscribe.call(this);
                !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
            }
        };
        return OperatorSubscriber;
    }(Subscriber));

    function refCount() {
        return operate(function (source, subscriber) {
            var connection = null;
            source._refCount++;
            var refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
                if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                    connection = null;
                    return;
                }
                var sharedConnection = source._connection;
                var conn = connection;
                connection = null;
                if (sharedConnection && (!conn || sharedConnection === conn)) {
                    sharedConnection.unsubscribe();
                }
                subscriber.unsubscribe();
            });
            source.subscribe(refCounter);
            if (!refCounter.closed) {
                connection = source.connect();
            }
        });
    }

    var ConnectableObservable = (function (_super) {
        __extends(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subjectFactory = subjectFactory;
            _this._subject = null;
            _this._refCount = 0;
            _this._connection = null;
            if (hasLift(source)) {
                _this.lift = source.lift;
            }
            return _this;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype._teardown = function () {
            this._refCount = 0;
            var _connection = this._connection;
            this._subject = this._connection = null;
            _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
        };
        ConnectableObservable.prototype.connect = function () {
            var _this = this;
            var connection = this._connection;
            if (!connection) {
                connection = this._connection = new Subscription();
                var subject_1 = this.getSubject();
                connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {
                    _this._teardown();
                    subject_1.complete();
                }, function (err) {
                    _this._teardown();
                    subject_1.error(err);
                }, function () { return _this._teardown(); })));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription.EMPTY;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return refCount()(this);
        };
        return ConnectableObservable;
    }(Observable));

    var ObjectUnsubscribedError = createErrorClass(function (_super) {
        return function ObjectUnsubscribedErrorImpl() {
            _super(this);
            this.name = 'ObjectUnsubscribedError';
            this.message = 'object unsubscribed';
        };
    });

    var Subject = (function (_super) {
        __extends(Subject, _super);
        function Subject() {
            var _this = _super.call(this) || this;
            _this.closed = false;
            _this.currentObservers = null;
            _this.observers = [];
            _this.isStopped = false;
            _this.hasError = false;
            _this.thrownError = null;
            return _this;
        }
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype._throwIfClosed = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
        };
        Subject.prototype.next = function (value) {
            var _this = this;
            errorContext(function () {
                var e_1, _a;
                _this._throwIfClosed();
                if (!_this.isStopped) {
                    if (!_this.currentObservers) {
                        _this.currentObservers = Array.from(_this.observers);
                    }
                    try {
                        for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var observer = _c.value;
                            observer.next(value);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            });
        };
        Subject.prototype.error = function (err) {
            var _this = this;
            errorContext(function () {
                _this._throwIfClosed();
                if (!_this.isStopped) {
                    _this.hasError = _this.isStopped = true;
                    _this.thrownError = err;
                    var observers = _this.observers;
                    while (observers.length) {
                        observers.shift().error(err);
                    }
                }
            });
        };
        Subject.prototype.complete = function () {
            var _this = this;
            errorContext(function () {
                _this._throwIfClosed();
                if (!_this.isStopped) {
                    _this.isStopped = true;
                    var observers = _this.observers;
                    while (observers.length) {
                        observers.shift().complete();
                    }
                }
            });
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = this.closed = true;
            this.observers = this.currentObservers = null;
        };
        Object.defineProperty(Subject.prototype, "observed", {
            get: function () {
                var _a;
                return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
            },
            enumerable: false,
            configurable: true
        });
        Subject.prototype._trySubscribe = function (subscriber) {
            this._throwIfClosed();
            return _super.prototype._trySubscribe.call(this, subscriber);
        };
        Subject.prototype._subscribe = function (subscriber) {
            this._throwIfClosed();
            this._checkFinalizedStatuses(subscriber);
            return this._innerSubscribe(subscriber);
        };
        Subject.prototype._innerSubscribe = function (subscriber) {
            var _this = this;
            var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
            if (hasError || isStopped) {
                return EMPTY_SUBSCRIPTION;
            }
            this.currentObservers = null;
            observers.push(subscriber);
            return new Subscription(function () {
                _this.currentObservers = null;
                arrRemove(observers, subscriber);
            });
        };
        Subject.prototype._checkFinalizedStatuses = function (subscriber) {
            var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
            if (hasError) {
                subscriber.error(thrownError);
            }
            else if (isStopped) {
                subscriber.complete();
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable));
    var AnonymousSubject = (function (_super) {
        __extends(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            var _this = _super.call(this) || this;
            _this.destination = destination;
            _this.source = source;
            return _this;
        }
        AnonymousSubject.prototype.next = function (value) {
            var _a, _b;
            (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
        };
        AnonymousSubject.prototype.error = function (err) {
            var _a, _b;
            (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
        };
        AnonymousSubject.prototype.complete = function () {
            var _a, _b;
            (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var _a, _b;
            return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
        };
        return AnonymousSubject;
    }(Subject));

    var BehaviorSubject = (function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            var _this = _super.call(this) || this;
            _this._value = _value;
            return _this;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: false,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            !subscription.closed && subscriber.next(this._value);
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
            if (hasError) {
                throw thrownError;
            }
            this._throwIfClosed();
            return _value;
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, (this._value = value));
        };
        return BehaviorSubject;
    }(Subject));

    var dateTimestampProvider = {
        now: function () {
            return (dateTimestampProvider.delegate || Date).now();
        },
        delegate: undefined,
    };

    var ReplaySubject = (function (_super) {
        __extends(ReplaySubject, _super);
        function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
            if (_bufferSize === void 0) { _bufferSize = Infinity; }
            if (_windowTime === void 0) { _windowTime = Infinity; }
            if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
            var _this = _super.call(this) || this;
            _this._bufferSize = _bufferSize;
            _this._windowTime = _windowTime;
            _this._timestampProvider = _timestampProvider;
            _this._buffer = [];
            _this._infiniteTimeWindow = true;
            _this._infiniteTimeWindow = _windowTime === Infinity;
            _this._bufferSize = Math.max(1, _bufferSize);
            _this._windowTime = Math.max(1, _windowTime);
            return _this;
        }
        ReplaySubject.prototype.next = function (value) {
            var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
            if (!isStopped) {
                _buffer.push(value);
                !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
            }
            this._trimBuffer();
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype._subscribe = function (subscriber) {
            this._throwIfClosed();
            this._trimBuffer();
            var subscription = this._innerSubscribe(subscriber);
            var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
            var copy = _buffer.slice();
            for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
                subscriber.next(copy[i]);
            }
            this._checkFinalizedStatuses(subscriber);
            return subscription;
        };
        ReplaySubject.prototype._trimBuffer = function () {
            var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
            var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
            _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
            if (!_infiniteTimeWindow) {
                var now = _timestampProvider.now();
                var last = 0;
                for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                    last = i;
                }
                last && _buffer.splice(0, last + 1);
            }
        };
        return ReplaySubject;
    }(Subject));

    var Action = (function (_super) {
        __extends(Action, _super);
        function Action(scheduler, work) {
            return _super.call(this) || this;
        }
        Action.prototype.schedule = function (state, delay) {
            return this;
        };
        return Action;
    }(Subscription));

    var intervalProvider = {
        setInterval: function (handler, timeout) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            var delegate = intervalProvider.delegate;
            if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
                return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
            }
            return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
        },
        clearInterval: function (handle) {
            var delegate = intervalProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
        },
        delegate: undefined,
    };

    var AsyncAction = (function (_super) {
        __extends(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.pending = false;
            return _this;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            var _a;
            if (delay === void 0) { delay = 0; }
            if (this.closed) {
                return this;
            }
            this.state = state;
            var id = this.id;
            var scheduler = this.scheduler;
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.pending = true;
            this.delay = delay;
            this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
            if (delay === void 0) { delay = 0; }
            return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay != null && this.delay === delay && this.pending === false) {
                return id;
            }
            if (id != null) {
                intervalProvider.clearInterval(id);
            }
            return undefined;
        };
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            }
            else if (this.pending === false && this.id != null) {
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, _delay) {
            var errored = false;
            var errorValue;
            try {
                this.work(state);
            }
            catch (e) {
                errored = true;
                errorValue = e ? e : new Error('Scheduled action threw falsy error');
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype.unsubscribe = function () {
            if (!this.closed) {
                var _a = this, id = _a.id, scheduler = _a.scheduler;
                var actions = scheduler.actions;
                this.work = this.state = this.scheduler = null;
                this.pending = false;
                arrRemove(actions, this);
                if (id != null) {
                    this.id = this.recycleAsyncId(scheduler, id, null);
                }
                this.delay = null;
                _super.prototype.unsubscribe.call(this);
            }
        };
        return AsyncAction;
    }(Action));

    var nextHandle = 1;
    var resolved;
    var activeHandles = {};
    function findAndClearHandle(handle) {
        if (handle in activeHandles) {
            delete activeHandles[handle];
            return true;
        }
        return false;
    }
    var Immediate = {
        setImmediate: function (cb) {
            var handle = nextHandle++;
            activeHandles[handle] = true;
            if (!resolved) {
                resolved = Promise.resolve();
            }
            resolved.then(function () { return findAndClearHandle(handle) && cb(); });
            return handle;
        },
        clearImmediate: function (handle) {
            findAndClearHandle(handle);
        },
    };

    var setImmediate = Immediate.setImmediate, clearImmediate = Immediate.clearImmediate;
    var immediateProvider = {
        setImmediate: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = immediateProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
        },
        clearImmediate: function (handle) {
            var delegate = immediateProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
        },
        delegate: undefined,
    };

    var AsapAction = (function (_super) {
        __extends(AsapAction, _super);
        function AsapAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
        };
        AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            var _a;
            if (delay === void 0) { delay = 0; }
            if (delay != null ? delay > 0 : this.delay > 0) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            var actions = scheduler.actions;
            if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
                immediateProvider.clearImmediate(id);
                if (scheduler._scheduled === id) {
                    scheduler._scheduled = undefined;
                }
            }
            return undefined;
        };
        return AsapAction;
    }(AsyncAction));

    var Scheduler = (function () {
        function Scheduler(schedulerActionCtor, now) {
            if (now === void 0) { now = Scheduler.now; }
            this.schedulerActionCtor = schedulerActionCtor;
            this.now = now;
        }
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) { delay = 0; }
            return new this.schedulerActionCtor(this, work).schedule(state, delay);
        };
        Scheduler.now = dateTimestampProvider.now;
        return Scheduler;
    }());

    var AsyncScheduler = (function (_super) {
        __extends(AsyncScheduler, _super);
        function AsyncScheduler(SchedulerAction, now) {
            if (now === void 0) { now = Scheduler.now; }
            var _this = _super.call(this, SchedulerAction, now) || this;
            _this.actions = [];
            _this._active = false;
            return _this;
        }
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this._active) {
                actions.push(action);
                return;
            }
            var error;
            this._active = true;
            do {
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            } while ((action = actions.shift()));
            this._active = false;
            if (error) {
                while ((action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler));

    var AsapScheduler = (function (_super) {
        __extends(AsapScheduler, _super);
        function AsapScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AsapScheduler.prototype.flush = function (action) {
            this._active = true;
            var flushId = this._scheduled;
            this._scheduled = undefined;
            var actions = this.actions;
            var error;
            action = action || actions.shift();
            do {
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            } while ((action = actions[0]) && action.id === flushId && actions.shift());
            this._active = false;
            if (error) {
                while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsapScheduler;
    }(AsyncScheduler));

    var asapScheduler = new AsapScheduler(AsapAction);

    var EMPTY = new Observable(function (subscriber) { return subscriber.complete(); });

    function isScheduler(value) {
        return value && isFunction(value.schedule);
    }

    function last(arr) {
        return arr[arr.length - 1];
    }
    function popResultSelector(args) {
        return isFunction(last(args)) ? args.pop() : undefined;
    }
    function popScheduler(args) {
        return isScheduler(last(args)) ? args.pop() : undefined;
    }

    var isArrayLike$1 = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

    function isPromise(value) {
        return isFunction(value === null || value === void 0 ? void 0 : value.then);
    }

    function isInteropObservable(input) {
        return isFunction(input[observable]);
    }

    function isAsyncIterable(obj) {
        return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
    }

    function createInvalidObservableTypeError(input) {
        return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
    }

    function getSymbolIterator() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
            return '@@iterator';
        }
        return Symbol.iterator;
    }
    var iterator = getSymbolIterator();

    function isIterable(input) {
        return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
    }

    function readableStreamLikeToAsyncGenerator(readableStream) {
        return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
            var reader, _a, value, done;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        reader = readableStream.getReader();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, , 9, 10]);
                        _b.label = 2;
                    case 2:
                        return [4, __await(reader.read())];
                    case 3:
                        _a = _b.sent(), value = _a.value, done = _a.done;
                        if (!done) return [3, 5];
                        return [4, __await(void 0)];
                    case 4: return [2, _b.sent()];
                    case 5: return [4, __await(value)];
                    case 6: return [4, _b.sent()];
                    case 7:
                        _b.sent();
                        return [3, 2];
                    case 8: return [3, 10];
                    case 9:
                        reader.releaseLock();
                        return [7];
                    case 10: return [2];
                }
            });
        });
    }
    function isReadableStreamLike(obj) {
        return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
    }

    function innerFrom(input) {
        if (input instanceof Observable) {
            return input;
        }
        if (input != null) {
            if (isInteropObservable(input)) {
                return fromInteropObservable(input);
            }
            if (isArrayLike$1(input)) {
                return fromArrayLike(input);
            }
            if (isPromise(input)) {
                return fromPromise(input);
            }
            if (isAsyncIterable(input)) {
                return fromAsyncIterable(input);
            }
            if (isIterable(input)) {
                return fromIterable(input);
            }
            if (isReadableStreamLike(input)) {
                return fromReadableStreamLike(input);
            }
        }
        throw createInvalidObservableTypeError(input);
    }
    function fromInteropObservable(obj) {
        return new Observable(function (subscriber) {
            var obs = obj[observable]();
            if (isFunction(obs.subscribe)) {
                return obs.subscribe(subscriber);
            }
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        });
    }
    function fromArrayLike(array) {
        return new Observable(function (subscriber) {
            for (var i = 0; i < array.length && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        });
    }
    function fromPromise(promise) {
        return new Observable(function (subscriber) {
            promise
                .then(function (value) {
                if (!subscriber.closed) {
                    subscriber.next(value);
                    subscriber.complete();
                }
            }, function (err) { return subscriber.error(err); })
                .then(null, reportUnhandledError);
        });
    }
    function fromIterable(iterable) {
        return new Observable(function (subscriber) {
            var e_1, _a;
            try {
                for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                    var value = iterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            subscriber.complete();
        });
    }
    function fromAsyncIterable(asyncIterable) {
        return new Observable(function (subscriber) {
            process$1(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
        });
    }
    function fromReadableStreamLike(readableStream) {
        return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
    }
    function process$1(asyncIterable, subscriber) {
        var asyncIterable_1, asyncIterable_1_1;
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function () {
            var value, e_2_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, 6, 11]);
                        asyncIterable_1 = __asyncValues(asyncIterable);
                        _b.label = 1;
                    case 1: return [4, asyncIterable_1.next()];
                    case 2:
                        if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                        value = asyncIterable_1_1.value;
                        subscriber.next(value);
                        if (subscriber.closed) {
                            return [2];
                        }
                        _b.label = 3;
                    case 3: return [3, 1];
                    case 4: return [3, 11];
                    case 5:
                        e_2_1 = _b.sent();
                        e_2 = { error: e_2_1 };
                        return [3, 11];
                    case 6:
                        _b.trys.push([6, , 9, 10]);
                        if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                        return [4, _a.call(asyncIterable_1)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [3, 10];
                    case 9:
                        if (e_2) throw e_2.error;
                        return [7];
                    case 10: return [7];
                    case 11:
                        subscriber.complete();
                        return [2];
                }
            });
        });
    }

    function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
        if (delay === void 0) { delay = 0; }
        if (repeat === void 0) { repeat = false; }
        var scheduleSubscription = scheduler.schedule(function () {
            work();
            if (repeat) {
                parentSubscription.add(this.schedule(null, delay));
            }
            else {
                this.unsubscribe();
            }
        }, delay);
        parentSubscription.add(scheduleSubscription);
        if (!repeat) {
            return scheduleSubscription;
        }
    }

    function observeOn(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return operate(function (source, subscriber) {
            source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
        });
    }

    function subscribeOn(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return operate(function (source, subscriber) {
            subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
        });
    }

    function scheduleObservable(input, scheduler) {
        return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
    }

    function schedulePromise(input, scheduler) {
        return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
    }

    function scheduleArray(input, scheduler) {
        return new Observable(function (subscriber) {
            var i = 0;
            return scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(input[i++]);
                    if (!subscriber.closed) {
                        this.schedule();
                    }
                }
            });
        });
    }

    function scheduleIterable(input, scheduler) {
        return new Observable(function (subscriber) {
            var iterator$1;
            executeSchedule(subscriber, scheduler, function () {
                iterator$1 = input[iterator]();
                executeSchedule(subscriber, scheduler, function () {
                    var _a;
                    var value;
                    var done;
                    try {
                        (_a = iterator$1.next(), value = _a.value, done = _a.done);
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                    }
                }, 0, true);
            });
            return function () { return isFunction(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return(); };
        });
    }

    function scheduleAsyncIterable(input, scheduler) {
        if (!input) {
            throw new Error('Iterable cannot be null');
        }
        return new Observable(function (subscriber) {
            executeSchedule(subscriber, scheduler, function () {
                var iterator = input[Symbol.asyncIterator]();
                executeSchedule(subscriber, scheduler, function () {
                    iterator.next().then(function (result) {
                        if (result.done) {
                            subscriber.complete();
                        }
                        else {
                            subscriber.next(result.value);
                        }
                    });
                }, 0, true);
            });
        });
    }

    function scheduleReadableStreamLike(input, scheduler) {
        return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
    }

    function scheduled(input, scheduler) {
        if (input != null) {
            if (isInteropObservable(input)) {
                return scheduleObservable(input, scheduler);
            }
            if (isArrayLike$1(input)) {
                return scheduleArray(input, scheduler);
            }
            if (isPromise(input)) {
                return schedulePromise(input, scheduler);
            }
            if (isAsyncIterable(input)) {
                return scheduleAsyncIterable(input, scheduler);
            }
            if (isIterable(input)) {
                return scheduleIterable(input, scheduler);
            }
            if (isReadableStreamLike(input)) {
                return scheduleReadableStreamLike(input, scheduler);
            }
        }
        throw createInvalidObservableTypeError(input);
    }

    function from(input, scheduler) {
        return scheduler ? scheduled(input, scheduler) : innerFrom(input);
    }

    function of() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler(args);
        return from(args, scheduler);
    }

    var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {
        _super(this);
        this.name = 'EmptyError';
        this.message = 'no elements in sequence';
    }; });

    function firstValueFrom(source, config) {
        var hasConfig = typeof config === 'object';
        return new Promise(function (resolve, reject) {
            var subscriber = new SafeSubscriber({
                next: function (value) {
                    resolve(value);
                    subscriber.unsubscribe();
                },
                error: reject,
                complete: function () {
                    if (hasConfig) {
                        resolve(config.defaultValue);
                    }
                    else {
                        reject(new EmptyError());
                    }
                },
            });
            source.subscribe(subscriber);
        });
    }

    function map(project, thisArg) {
        return operate(function (source, subscriber) {
            var index = 0;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                subscriber.next(project.call(thisArg, value, index++));
            }));
        });
    }

    var isArray$1 = Array.isArray;
    function callOrApply(fn, args) {
        return isArray$1(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
    }
    function mapOneOrManyArgs(fn) {
        return map(function (args) { return callOrApply(fn, args); });
    }

    var isArray = Array.isArray;
    var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
    function argsArgArrayOrObject(args) {
        if (args.length === 1) {
            var first_1 = args[0];
            if (isArray(first_1)) {
                return { args: first_1, keys: null };
            }
            if (isPOJO(first_1)) {
                var keys = getKeys(first_1);
                return {
                    args: keys.map(function (key) { return first_1[key]; }),
                    keys: keys,
                };
            }
        }
        return { args: args, keys: null };
    }
    function isPOJO(obj) {
        return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
    }

    function createObject(keys, values) {
        return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
    }

    function combineLatest() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler(args);
        var resultSelector = popResultSelector(args);
        var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
        if (observables.length === 0) {
            return from([], scheduler);
        }
        var result = new Observable(combineLatestInit(observables, scheduler, keys
            ?
                function (values) { return createObject(keys, values); }
            :
                identity$1));
        return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
    }
    function combineLatestInit(observables, scheduler, valueTransform) {
        if (valueTransform === void 0) { valueTransform = identity$1; }
        return function (subscriber) {
            maybeSchedule(scheduler, function () {
                var length = observables.length;
                var values = new Array(length);
                var active = length;
                var remainingFirstValues = length;
                var _loop_1 = function (i) {
                    maybeSchedule(scheduler, function () {
                        var source = from(observables[i], scheduler);
                        var hasFirstValue = false;
                        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                            values[i] = value;
                            if (!hasFirstValue) {
                                hasFirstValue = true;
                                remainingFirstValues--;
                            }
                            if (!remainingFirstValues) {
                                subscriber.next(valueTransform(values.slice()));
                            }
                        }, function () {
                            if (!--active) {
                                subscriber.complete();
                            }
                        }));
                    }, subscriber);
                };
                for (var i = 0; i < length; i++) {
                    _loop_1(i);
                }
            }, subscriber);
        };
    }
    function maybeSchedule(scheduler, execute, subscription) {
        if (scheduler) {
            executeSchedule(subscription, scheduler, execute);
        }
        else {
            execute();
        }
    }

    function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
        var buffer = [];
        var active = 0;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () {
            if (isComplete && !buffer.length && !active) {
                subscriber.complete();
            }
        };
        var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
        var doInnerSub = function (value) {
            expand && subscriber.next(value);
            active++;
            var innerComplete = false;
            innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
                onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
                if (expand) {
                    outerNext(innerValue);
                }
                else {
                    subscriber.next(innerValue);
                }
            }, function () {
                innerComplete = true;
            }, undefined, function () {
                if (innerComplete) {
                    try {
                        active--;
                        var _loop_1 = function () {
                            var bufferedValue = buffer.shift();
                            if (innerSubScheduler) {
                                executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                            }
                            else {
                                doInnerSub(bufferedValue);
                            }
                        };
                        while (buffer.length && active < concurrent) {
                            _loop_1();
                        }
                        checkComplete();
                    }
                    catch (err) {
                        subscriber.error(err);
                    }
                }
            }));
        };
        source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
            isComplete = true;
            checkComplete();
        }));
        return function () {
            additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
        };
    }

    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        if (isFunction(resultSelector)) {
            return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
        }
        else if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
    }

    function mergeAll(concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        return mergeMap(identity$1, concurrent);
    }

    function concatAll() {
        return mergeAll(1);
    }

    function concat() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return concatAll()(from(args, popScheduler(args)));
    }

    function filter(predicate, thisArg) {
        return operate(function (source, subscriber) {
            var index = 0;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
        });
    }

    function catchError(selector) {
        return operate(function (source, subscriber) {
            var innerSub = null;
            var syncUnsub = false;
            var handledResult;
            innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
                handledResult = innerFrom(selector(err, catchError(selector)(source)));
                if (innerSub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    handledResult.subscribe(subscriber);
                }
                else {
                    syncUnsub = true;
                }
            }));
            if (syncUnsub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
        });
    }

    function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
        return function (source, subscriber) {
            var hasState = hasSeed;
            var state = seed;
            var index = 0;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                var i = index++;
                state = hasState
                    ?
                        accumulator(state, value, i)
                    :
                        ((hasState = true), value);
                emitOnNext && subscriber.next(state);
            }, emitBeforeComplete &&
                (function () {
                    hasState && subscriber.next(state);
                    subscriber.complete();
                })));
        };
    }

    function reduce(accumulator, seed) {
        return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
    }

    var arrReducer = function (arr, value) { return (arr.push(value), arr); };
    function toArray() {
        return operate(function (source, subscriber) {
            reduce(arrReducer, [])(source).subscribe(subscriber);
        });
    }

    function fromSubscribable(subscribable) {
        return new Observable(function (subscriber) { return subscribable.subscribe(subscriber); });
    }

    var DEFAULT_CONFIG = {
        connector: function () { return new Subject(); },
    };
    function connect(selector, config) {
        if (config === void 0) { config = DEFAULT_CONFIG; }
        var connector = config.connector;
        return operate(function (source, subscriber) {
            var subject = connector();
            innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
            subscriber.add(source.subscribe(subject));
        });
    }

    function defaultIfEmpty(defaultValue) {
        return operate(function (source, subscriber) {
            var hasValue = false;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                hasValue = true;
                subscriber.next(value);
            }, function () {
                if (!hasValue) {
                    subscriber.next(defaultValue);
                }
                subscriber.complete();
            }));
        });
    }

    function take(count) {
        return count <= 0
            ?
                function () { return EMPTY; }
            : operate(function (source, subscriber) {
                var seen = 0;
                source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                    if (++seen <= count) {
                        subscriber.next(value);
                        if (count <= seen) {
                            subscriber.complete();
                        }
                    }
                }));
            });
    }

    function distinctUntilChanged(comparator, keySelector) {
        if (keySelector === void 0) { keySelector = identity$1; }
        comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
        return operate(function (source, subscriber) {
            var previousKey;
            var first = true;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                var currentKey = keySelector(value);
                if (first || !comparator(previousKey, currentKey)) {
                    first = false;
                    previousKey = currentKey;
                    subscriber.next(value);
                }
            }));
        });
    }
    function defaultCompare(a, b) {
        return a === b;
    }

    function throwIfEmpty(errorFactory) {
        if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
        return operate(function (source, subscriber) {
            var hasValue = false;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                hasValue = true;
                subscriber.next(value);
            }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
        });
    }
    function defaultErrorFactory() {
        return new EmptyError();
    }

    function first(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
            return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity$1, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));
        };
    }

    function multicast(subjectOrSubjectFactory, selector) {
        var subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
        if (isFunction(selector)) {
            return connect(selector, {
                connector: subjectFactory,
            });
        }
        return function (source) { return new ConnectableObservable(source, subjectFactory); };
    }

    function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
        if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {
            timestampProvider = selectorOrScheduler;
        }
        var selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;
        return function (source) { return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source); };
    }

    function startWith() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var scheduler = popScheduler(values);
        return operate(function (source, subscriber) {
            (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
        });
    }

    function switchMap(project, resultSelector) {
        return operate(function (source, subscriber) {
            var innerSubscriber = null;
            var index = 0;
            var isComplete = false;
            var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
                var innerIndex = 0;
                var outerIndex = index++;
                innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                    innerSubscriber = null;
                    checkComplete();
                })));
            }, function () {
                isComplete = true;
                checkComplete();
            }));
        });
    }

    function tap(observerOrNext, error, complete) {
        var tapObserver = isFunction(observerOrNext) || error || complete
            ?
                { next: observerOrNext, error: error, complete: complete }
            : observerOrNext;
        return tapObserver
            ? operate(function (source, subscriber) {
                var _a;
                (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                var isUnsub = true;
                source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                    var _a;
                    (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                    subscriber.next(value);
                }, function () {
                    var _a;
                    isUnsub = false;
                    (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                    subscriber.complete();
                }, function (err) {
                    var _a;
                    isUnsub = false;
                    (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                    subscriber.error(err);
                }, function () {
                    var _a, _b;
                    if (isUnsub) {
                        (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                    }
                    (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
                }));
            })
            :
                identity$1;
    }

    const l$a = /*#__PURE__*/ logger('api/util');

    function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
        // extrinsics to hashes
        for (const [txIndex, x] of extrinsics.entries()) {
            if (x.hash.eq(txHash)) {
                return {
                    blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,
                    events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic &&
                        phase.asApplyExtrinsic.eqn(txIndex)),
                    txIndex
                };
            }
        }
        // if we do get the block after finalized, it _should_ be there
        // only warn on filtering with isInBlock (finalization finalizes after)
        if (status.isInBlock) {
            const allHashes = extrinsics.map((x) => x.hash.toHex());
            l$a.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(', ')}`);
        }
        return {};
    }

    function isKeyringPair(account) {
        return isFunction$1(account.sign);
    }

    /* eslint-disable sort-keys */
    const AllHashers = {
        Blake2_128: null,
        Blake2_256: null,
        Blake2_128Concat: null,
        Twox128: null,
        Twox256: null,
        Twox64Concat: null,
        // new in v11
        Identity: null
    };

    const META_V1_TO_V2 = {
        metadata: {
            description: 'Returns the metadata of a runtime',
            params: [],
            type: 'OpaqueMetadata'
        }
    };
    const runtime$t = {
        Metadata: [
            {
                methods: {
                    metadata_at_version: {
                        description: 'Returns the metadata at a given version.',
                        params: [
                            {
                                name: 'version',
                                type: 'u32'
                            }
                        ],
                        type: 'Option<OpaqueMetadata>'
                    },
                    metadata_versions: {
                        description: 'Returns the supported metadata versions.',
                        params: [],
                        type: 'Vec<u32>'
                    },
                    ...META_V1_TO_V2
                },
                version: 2
            },
            {
                methods: {
                    ...META_V1_TO_V2
                },
                version: 1
            }
        ]
    };

    const v9 = {
        // v9
        ErrorMetadataV9: {
            name: 'Text',
            docs: 'Vec<Text>'
        },
        EventMetadataV9: {
            name: 'Text',
            args: 'Vec<Type>',
            docs: 'Vec<Text>'
        },
        FunctionArgumentMetadataV9: {
            name: 'Text',
            type: 'Type'
        },
        FunctionMetadataV9: {
            name: 'Text',
            args: 'Vec<FunctionArgumentMetadataV9>',
            docs: 'Vec<Text>'
        },
        MetadataV9: {
            modules: 'Vec<ModuleMetadataV9>'
        },
        ModuleConstantMetadataV9: {
            name: 'Text',
            type: 'Type',
            value: 'Bytes',
            docs: 'Vec<Text>'
        },
        ModuleMetadataV9: {
            name: 'Text',
            storage: 'Option<StorageMetadataV9>',
            calls: 'Option<Vec<FunctionMetadataV9>>',
            events: 'Option<Vec<EventMetadataV9>>',
            constants: 'Vec<ModuleConstantMetadataV9>',
            errors: 'Vec<ErrorMetadataV9>'
        },
        StorageEntryMetadataV9: {
            name: 'Text',
            modifier: 'StorageEntryModifierV9',
            type: 'StorageEntryTypeV9',
            fallback: 'Bytes',
            docs: 'Vec<Text>'
        },
        StorageEntryModifierV9: {
            _enum: ['Optional', 'Default', 'Required']
        },
        StorageEntryTypeV9: {
            _enum: {
                Plain: 'Type',
                Map: {
                    hasher: 'StorageHasherV9',
                    key: 'Type',
                    value: 'Type',
                    linked: 'bool'
                },
                DoubleMap: {
                    hasher: 'StorageHasherV9',
                    key1: 'Type',
                    key2: 'Type',
                    value: 'Type',
                    key2Hasher: 'StorageHasherV9'
                }
            }
        },
        StorageHasherV9: {
            _enum: {
                Blake2_128: null,
                Blake2_256: null,
                Twox128: null,
                Twox256: null,
                Twox64Concat: null
            }
        },
        StorageMetadataV9: {
            prefix: 'Text',
            items: 'Vec<StorageEntryMetadataV9>'
        }
    };

    const v10 = {
        // v10
        ErrorMetadataV10: 'ErrorMetadataV9',
        EventMetadataV10: 'EventMetadataV9',
        FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
        FunctionMetadataV10: 'FunctionMetadataV9',
        MetadataV10: {
            modules: 'Vec<ModuleMetadataV10>'
        },
        ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
        ModuleMetadataV10: {
            name: 'Text',
            storage: 'Option<StorageMetadataV10>',
            calls: 'Option<Vec<FunctionMetadataV10>>',
            events: 'Option<Vec<EventMetadataV10>>',
            constants: 'Vec<ModuleConstantMetadataV10>',
            errors: 'Vec<ErrorMetadataV10>'
        },
        StorageEntryModifierV10: 'StorageEntryModifierV9',
        StorageEntryMetadataV10: {
            name: 'Text',
            modifier: 'StorageEntryModifierV10',
            type: 'StorageEntryTypeV10',
            fallback: 'Bytes',
            docs: 'Vec<Text>'
        },
        StorageEntryTypeV10: {
            _enum: {
                Plain: 'Type',
                Map: {
                    hasher: 'StorageHasherV10',
                    key: 'Type',
                    value: 'Type',
                    linked: 'bool'
                },
                DoubleMap: {
                    hasher: 'StorageHasherV10',
                    key1: 'Type',
                    key2: 'Type',
                    value: 'Type',
                    key2Hasher: 'StorageHasherV10'
                }
            }
        },
        StorageMetadataV10: {
            prefix: 'Text',
            items: 'Vec<StorageEntryMetadataV10>'
        },
        StorageHasherV10: {
            _enum: {
                Blake2_128: null,
                Blake2_256: null,
                Blake2_128Concat: null,
                Twox128: null,
                Twox256: null,
                Twox64Concat: null
            }
        }
    };

    const v11 = {
        // v11
        ErrorMetadataV11: 'ErrorMetadataV10',
        EventMetadataV11: 'EventMetadataV10',
        ExtrinsicMetadataV11: {
            version: 'u8',
            signedExtensions: 'Vec<Text>'
        },
        FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
        FunctionMetadataV11: 'FunctionMetadataV10',
        MetadataV11: {
            modules: 'Vec<ModuleMetadataV11>',
            extrinsic: 'ExtrinsicMetadataV11'
        },
        ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
        ModuleMetadataV11: {
            name: 'Text',
            storage: 'Option<StorageMetadataV11>',
            calls: 'Option<Vec<FunctionMetadataV11>>',
            events: 'Option<Vec<EventMetadataV11>>',
            constants: 'Vec<ModuleConstantMetadataV11>',
            errors: 'Vec<ErrorMetadataV11>'
        },
        StorageEntryModifierV11: 'StorageEntryModifierV10',
        StorageEntryMetadataV11: {
            name: 'Text',
            modifier: 'StorageEntryModifierV11',
            type: 'StorageEntryTypeV11',
            fallback: 'Bytes',
            docs: 'Vec<Text>'
        },
        StorageEntryTypeV11: {
            _enum: {
                Plain: 'Type',
                Map: {
                    hasher: 'StorageHasherV11',
                    key: 'Type',
                    value: 'Type',
                    linked: 'bool'
                },
                DoubleMap: {
                    hasher: 'StorageHasherV11',
                    key1: 'Type',
                    key2: 'Type',
                    value: 'Type',
                    key2Hasher: 'StorageHasherV11'
                }
            }
        },
        StorageMetadataV11: {
            prefix: 'Text',
            items: 'Vec<StorageEntryMetadataV11>'
        },
        StorageHasherV11: {
            _enum: AllHashers
        }
    };

    const v12 = {
        // v12
        ErrorMetadataV12: 'ErrorMetadataV11',
        EventMetadataV12: 'EventMetadataV11',
        ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
        FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
        FunctionMetadataV12: 'FunctionMetadataV11',
        MetadataV12: {
            modules: 'Vec<ModuleMetadataV12>',
            extrinsic: 'ExtrinsicMetadataV12'
        },
        ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
        ModuleMetadataV12: {
            name: 'Text',
            storage: 'Option<StorageMetadataV12>',
            calls: 'Option<Vec<FunctionMetadataV12>>',
            events: 'Option<Vec<EventMetadataV12>>',
            constants: 'Vec<ModuleConstantMetadataV12>',
            errors: 'Vec<ErrorMetadataV12>',
            index: 'u8'
        },
        StorageEntryModifierV12: 'StorageEntryModifierV11',
        StorageEntryMetadataV12: 'StorageEntryMetadataV11',
        StorageEntryTypeV12: 'StorageEntryTypeV11',
        StorageMetadataV12: 'StorageMetadataV11',
        StorageHasherV12: 'StorageHasherV11'
    };

    const v13 = {
        // v13
        ErrorMetadataV13: 'ErrorMetadataV12',
        EventMetadataV13: 'EventMetadataV12',
        ExtrinsicMetadataV13: 'ExtrinsicMetadataV12',
        FunctionArgumentMetadataV13: 'FunctionArgumentMetadataV12',
        FunctionMetadataV13: 'FunctionMetadataV12',
        MetadataV13: {
            modules: 'Vec<ModuleMetadataV13>',
            extrinsic: 'ExtrinsicMetadataV13'
        },
        ModuleConstantMetadataV13: 'ModuleConstantMetadataV12',
        ModuleMetadataV13: {
            name: 'Text',
            storage: 'Option<StorageMetadataV13>',
            calls: 'Option<Vec<FunctionMetadataV13>>',
            events: 'Option<Vec<EventMetadataV13>>',
            constants: 'Vec<ModuleConstantMetadataV13>',
            errors: 'Vec<ErrorMetadataV13>',
            index: 'u8'
        },
        StorageEntryModifierV13: 'StorageEntryModifierV12',
        StorageEntryMetadataV13: {
            name: 'Text',
            modifier: 'StorageEntryModifierV13',
            type: 'StorageEntryTypeV13',
            fallback: 'Bytes',
            docs: 'Vec<Text>'
        },
        StorageEntryTypeV13: {
            _enum: {
                Plain: 'Type',
                Map: {
                    hasher: 'StorageHasherV13',
                    key: 'Type',
                    value: 'Type',
                    linked: 'bool'
                },
                DoubleMap: {
                    hasher: 'StorageHasherV13',
                    key1: 'Type',
                    key2: 'Type',
                    value: 'Type',
                    key2Hasher: 'StorageHasherV13'
                },
                NMap: {
                    keyVec: 'Vec<Type>',
                    hashers: 'Vec<StorageHasherV13>',
                    value: 'Type'
                }
            }
        },
        StorageMetadataV13: {
            prefix: 'Text',
            items: 'Vec<StorageEntryMetadataV13>'
        },
        StorageHasherV13: 'StorageHasherV12'
    };

    /* eslint-disable sort-keys */
    const Si1Variant = {
        name: 'Text',
        fields: 'Vec<Si1Field>',
        index: 'u8',
        docs: 'Vec<Text>'
    };
    const v1$1 = {
        Si1Field: {
            name: 'Option<Text>',
            type: 'Si1LookupTypeId',
            typeName: 'Option<Text>',
            docs: 'Vec<Text>'
        },
        Si1LookupTypeId: 'Compact<u32>',
        Si1Path: 'Si0Path',
        Si1Type: {
            path: 'Si1Path',
            params: 'Vec<Si1TypeParameter>',
            def: 'Si1TypeDef',
            docs: 'Vec<Text>'
        },
        Si1TypeDef: {
            _enum: {
                Composite: 'Si1TypeDefComposite',
                Variant: 'Si1TypeDefVariant',
                Sequence: 'Si1TypeDefSequence',
                Array: 'Si1TypeDefArray',
                Tuple: 'Si1TypeDefTuple',
                Primitive: 'Si1TypeDefPrimitive',
                Compact: 'Si1TypeDefCompact',
                BitSequence: 'Si1TypeDefBitSequence',
                // NOTE: This is specific to the implementation for pre-v14 metadata
                // compatibility (always keep this as the last entry in the enum)
                HistoricMetaCompat: 'Type'
            }
        },
        Si1TypeDefArray: {
            len: 'u32',
            type: 'Si1LookupTypeId'
        },
        Si1TypeDefBitSequence: {
            bitStoreType: 'Si1LookupTypeId',
            bitOrderType: 'Si1LookupTypeId'
        },
        Si1TypeDefCompact: {
            type: 'Si1LookupTypeId'
        },
        Si1TypeDefComposite: {
            fields: 'Vec<Si1Field>'
        },
        Si1TypeDefPrimitive: 'Si0TypeDefPrimitive',
        Si1TypeDefSequence: {
            type: 'Si1LookupTypeId'
        },
        Si1TypeDefTuple: 'Vec<Si1LookupTypeId>',
        Si1TypeParameter: {
            name: 'Text',
            type: 'Option<Si1LookupTypeId>'
        },
        Si1TypeDefVariant: {
            variants: 'Vec<Si1Variant>'
        },
        Si1Variant
    };

    const v14 = {
        // registry
        PortableTypeV14: {
            id: 'Si1LookupTypeId',
            type: 'Si1Type'
        },
        // compatibility with earlier layouts, i.e. don't break previous users
        ErrorMetadataV14: {
            ...Si1Variant,
            args: 'Vec<Type>'
        },
        EventMetadataV14: {
            ...Si1Variant,
            args: 'Vec<Type>'
        },
        FunctionArgumentMetadataV14: {
            name: 'Text',
            type: 'Type',
            typeName: 'Option<Type>'
        },
        FunctionMetadataV14: {
            ...Si1Variant,
            args: 'Vec<FunctionArgumentMetadataV14>'
        },
        // V14
        ExtrinsicMetadataV14: {
            type: 'SiLookupTypeId',
            version: 'u8',
            signedExtensions: 'Vec<SignedExtensionMetadataV14>'
        },
        MetadataV14: {
            lookup: 'PortableRegistry',
            pallets: 'Vec<PalletMetadataV14>',
            extrinsic: 'ExtrinsicMetadataV14',
            type: 'SiLookupTypeId'
        },
        PalletCallMetadataV14: {
            type: 'SiLookupTypeId'
        },
        PalletConstantMetadataV14: {
            name: 'Text',
            type: 'SiLookupTypeId',
            value: 'Bytes',
            docs: 'Vec<Text>'
        },
        PalletErrorMetadataV14: {
            type: 'SiLookupTypeId'
        },
        PalletEventMetadataV14: {
            type: 'SiLookupTypeId'
        },
        PalletMetadataV14: {
            name: 'Text',
            storage: 'Option<PalletStorageMetadataV14>',
            calls: 'Option<PalletCallMetadataV14>',
            events: 'Option<PalletEventMetadataV14>',
            constants: 'Vec<PalletConstantMetadataV14>',
            errors: 'Option<PalletErrorMetadataV14>',
            index: 'u8'
        },
        PalletStorageMetadataV14: {
            prefix: 'Text',
            // NOTE: Renamed from entries
            items: 'Vec<StorageEntryMetadataV14>'
        },
        SignedExtensionMetadataV14: {
            identifier: 'Text',
            type: 'SiLookupTypeId',
            additionalSigned: 'SiLookupTypeId'
        },
        StorageEntryMetadataV14: {
            name: 'Text',
            modifier: 'StorageEntryModifierV14',
            type: 'StorageEntryTypeV14',
            fallback: 'Bytes',
            docs: 'Vec<Text>'
        },
        StorageEntryModifierV14: 'StorageEntryModifierV13',
        StorageEntryTypeV14: {
            _enum: {
                Plain: 'SiLookupTypeId',
                Map: {
                    hashers: 'Vec<StorageHasherV14>',
                    key: 'SiLookupTypeId',
                    value: 'SiLookupTypeId'
                }
            }
        },
        StorageHasherV14: 'StorageHasherV13'
    };

    const v15 = {
        // new/adjusted in v15
        CustomMetadata15: {
            map: 'BTreeMap<Text, CustomValueMetadata15>'
        },
        CustomValueMetadata15: {
            type: 'SiLookupTypeId',
            value: 'Bytes'
        },
        ExtrinsicMetadataV15: {
            version: 'u8',
            addressType: 'SiLookupTypeId',
            callType: 'SiLookupTypeId',
            signatureType: 'SiLookupTypeId',
            extraType: 'SiLookupTypeId',
            signedExtensions: 'Vec<SignedExtensionMetadataV14>'
        },
        OuterEnums15: {
            callType: 'SiLookupTypeId',
            eventType: 'SiLookupTypeId',
            errorType: 'SiLookupTypeId'
        },
        PalletMetadataV15: {
            name: 'Text',
            storage: 'Option<PalletStorageMetadataV14>',
            calls: 'Option<PalletCallMetadataV14>',
            events: 'Option<PalletEventMetadataV14>',
            constants: 'Vec<PalletConstantMetadataV14>',
            errors: 'Option<PalletErrorMetadataV14>',
            index: 'u8',
            docs: 'Vec<Text>'
        },
        RuntimeApiMetadataV15: {
            name: 'Text',
            methods: 'Vec<RuntimeApiMethodMetadataV15>',
            docs: 'Vec<Text>'
        },
        RuntimeApiMethodMetadataV15: {
            name: 'Text',
            inputs: 'Vec<RuntimeApiMethodParamMetadataV15>',
            output: 'SiLookupTypeId',
            docs: 'Vec<Text>'
        },
        RuntimeApiMethodParamMetadataV15: {
            name: 'Text',
            type: 'SiLookupTypeId'
        },
        // actual v15 definition
        MetadataV15: {
            lookup: 'PortableRegistry',
            pallets: 'Vec<PalletMetadataV15>',
            extrinsic: 'ExtrinsicMetadataV15',
            type: 'SiLookupTypeId',
            apis: 'Vec<RuntimeApiMetadataV15>',
            outerEnums: 'OuterEnums15',
            custom: 'CustomMetadata15'
        }
    };

    var definitions$16 = {
        rpc: {},
        runtime: runtime$t,
        types: {
            // all known
            ...v9,
            ...v10,
            ...v11,
            ...v12,
            ...v13,
            ...v14,
            ...v15,
            // latest mappings
            // NOTE: For v15, we only added the runtime defintions,
            // hence latest for most pointing to the previous V14
            ErrorMetadataLatest: 'ErrorMetadataV14',
            EventMetadataLatest: 'EventMetadataV14',
            ExtrinsicMetadataLatest: 'ExtrinsicMetadataV15',
            FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV14',
            FunctionMetadataLatest: 'FunctionMetadataV14',
            MetadataLatest: 'MetadataV15',
            PalletCallMetadataLatest: 'PalletCallMetadataV14',
            PalletConstantMetadataLatest: 'PalletConstantMetadataV14',
            PalletErrorMetadataLatest: 'PalletErrorMetadataV14',
            PalletEventMetadataLatest: 'PalletEventMetadataV14',
            PalletMetadataLatest: 'PalletMetadataV15',
            PalletStorageMetadataLatest: 'PalletStorageMetadataV14',
            PortableType: 'PortableTypeV14',
            RuntimeApiMetadataLatest: 'RuntimeApiMetadataV15',
            SignedExtensionMetadataLatest: 'SignedExtensionMetadataV14',
            StorageEntryMetadataLatest: 'StorageEntryMetadataV14',
            StorageEntryModifierLatest: 'StorageEntryModifierV14',
            StorageEntryTypeLatest: 'StorageEntryTypeV14',
            StorageHasher: 'StorageHasherV14',
            // additional types
            OpaqueMetadata: 'Opaque<Bytes>',
            // the enum containing all the mappings
            MetadataAll: {
                _enum: {
                    V0: 'DoNotConstruct<MetadataV0>',
                    V1: 'DoNotConstruct<MetadataV1>',
                    V2: 'DoNotConstruct<MetadataV2>',
                    V3: 'DoNotConstruct<MetadataV3>',
                    V4: 'DoNotConstruct<MetadataV4>',
                    V5: 'DoNotConstruct<MetadataV5>',
                    V6: 'DoNotConstruct<MetadataV6>',
                    V7: 'DoNotConstruct<MetadataV7>',
                    V8: 'DoNotConstruct<MetadataV8>',
                    // First version on Kusama in V9, dropping will be problematic
                    V9: 'MetadataV9',
                    V10: 'MetadataV10',
                    V11: 'MetadataV11',
                    V12: 'MetadataV12',
                    V13: 'MetadataV13',
                    V14: 'MetadataV14',
                    V15: 'MetadataV15'
                }
            }
        }
    };

    const CORE_V1_TO_V4 = {
        execute_block: {
            description: 'Execute the given block.',
            params: [
                {
                    name: 'block',
                    type: 'Block'
                }
            ],
            type: 'Null'
        }
    };
    const CORE_V1_TO_V2 = {
        version: {
            description: 'Returns the version of the runtime.',
            params: [],
            type: 'RuntimeVersionPre3'
        }
    };
    const CORE_V2_TO_V4 = {
        initialize_block: {
            description: 'Initialize a block with the given header.',
            params: [
                {
                    name: 'header',
                    type: 'Header'
                }
            ],
            type: 'Null'
        }
    };
    const runtime$s = {
        Core: [
            {
                methods: {
                    version: {
                        description: 'Returns the version of the runtime.',
                        params: [],
                        type: 'RuntimeVersion'
                    },
                    ...CORE_V1_TO_V4,
                    ...CORE_V2_TO_V4
                },
                version: 4
            },
            {
                methods: {
                    version: {
                        description: 'Returns the version of the runtime.',
                        params: [],
                        type: 'RuntimeVersionPre4'
                    },
                    ...CORE_V1_TO_V4,
                    ...CORE_V2_TO_V4
                },
                version: 3
            },
            {
                methods: {
                    ...CORE_V1_TO_V2,
                    ...CORE_V1_TO_V4,
                    ...CORE_V2_TO_V4
                },
                version: 2
            },
            {
                methods: {
                    initialise_block: {
                        description: 'Initialize a block with the given header.',
                        params: [
                            {
                                name: 'header',
                                type: 'Header'
                            }
                        ],
                        type: 'Null'
                    },
                    ...CORE_V1_TO_V2,
                    ...CORE_V1_TO_V4
                },
                version: 1
            }
        ]
    };

    const numberTypes = {
        Fixed64: 'Int<64, Fixed64>',
        FixedI64: 'Int<64, FixedI64>',
        FixedU64: 'UInt<64, FixedU64>',
        Fixed128: 'Int<128, Fixed128>',
        FixedI128: 'Int<128, FixedI128>',
        FixedU128: 'UInt<128, FixedU128>',
        I32F32: 'Int<64, I32F32>',
        U32F32: 'UInt<64, U32F32>',
        PerU16: 'UInt<16, PerU16>',
        Perbill: 'UInt<32, Perbill>',
        Percent: 'UInt<8, Percent>',
        Permill: 'UInt<32, Permill>',
        Perquintill: 'UInt<64, Perquintill>'
    };
    const knownOrigins = {
        //
        // (1) Defaults from Substrate
        //
        Council: 'CollectiveOrigin',
        System: 'SystemOrigin',
        TechnicalCommittee: 'CollectiveOrigin',
        //
        // (2) Defaults from Polkadot
        //
        Xcm: 'XcmOrigin',
        XcmPallet: 'XcmOrigin',
        //
        // (3) Defaults from Acala
        //
        Authority: 'AuthorityOrigin',
        GeneralCouncil: 'CollectiveOrigin'
    };
    var definitions$15 = {
        rpc: {},
        runtime: runtime$s,
        types: {
            ...numberTypes,
            AccountId: 'AccountId32',
            AccountId20: 'GenericEthereumAccountId',
            AccountId32: 'GenericAccountId32',
            AccountId33: 'GenericAccountId33',
            AccountIdOf: 'AccountId',
            AccountIndex: 'GenericAccountIndex',
            Address: 'MultiAddress',
            AssetId: 'u32',
            Balance: 'UInt<128, Balance>',
            BalanceOf: 'Balance',
            Block: 'GenericBlock',
            BlockNumber: 'u32',
            BlockNumberFor: 'BlockNumber',
            BlockNumberOf: 'BlockNumber',
            Call: 'GenericCall',
            CallHash: 'Hash',
            CallHashOf: 'CallHash',
            ChangesTrieConfiguration: {
                digestInterval: 'u32',
                digestLevels: 'u32'
            },
            ChangesTrieSignal: {
                _enum: {
                    NewConfiguration: 'Option<ChangesTrieConfiguration>'
                }
            },
            ConsensusEngineId: 'GenericConsensusEngineId',
            CodecHash: 'Hash',
            CrateVersion: {
                major: 'u16',
                minor: 'u8',
                patch: 'u8'
            },
            Digest: {
                logs: 'Vec<DigestItem>'
            },
            DigestItem: {
                _enum: {
                    Other: 'Bytes',
                    AuthoritiesChange: 'Vec<AuthorityId>',
                    ChangesTrieRoot: 'Hash',
                    SealV0: 'SealV0',
                    Consensus: 'Consensus',
                    Seal: 'Seal',
                    PreRuntime: 'PreRuntime',
                    ChangesTrieSignal: 'ChangesTrieSignal',
                    RuntimeEnvironmentUpdated: 'Null' // 8
                }
            },
            ExtrinsicsWeight: {
                normal: 'Weight',
                operational: 'Weight'
            },
            H32: '[u8; 4; H32]',
            H64: '[u8; 8; H64]',
            H128: '[u8; 16; H128]',
            H160: '[u8; 20; H160]',
            H256: '[u8; 32; H256]',
            H512: '[u8; 64; H512]',
            H1024: '[u8; 128; H1024]',
            H2048: '[u8; 256; H2048]',
            Hash: 'H256',
            Header: {
                parentHash: 'Hash',
                number: 'Compact<BlockNumber>',
                stateRoot: 'Hash',
                extrinsicsRoot: 'Hash',
                digest: 'Digest'
            },
            HeaderPartial: {
                parentHash: 'Hash',
                // since we only parse JSON with this, having non-compact works
                number: 'BlockNumber'
            },
            IndicesLookupSource: 'GenericLookupSource',
            Index: 'u32',
            Justification: '(ConsensusEngineId, EncodedJustification)',
            EncodedJustification: 'Bytes',
            Justifications: 'Vec<Justification>',
            KeyValue: '(StorageKey, StorageData)',
            KeyTypeId: 'u32',
            LockIdentifier: '[u8; 8]',
            LookupSource: 'MultiAddress',
            LookupTarget: 'AccountId',
            ModuleId: 'LockIdentifier',
            MultiAddress: 'GenericMultiAddress',
            MultiSigner: {
                _enum: {
                    Ed25519: '[u8; 32]',
                    Sr25519: '[u8; 32]',
                    Ecdsa: '[u8; 33]'
                }
            },
            Moment: 'UInt<64, Moment>',
            OpaqueCall: 'Bytes',
            Origin: 'DoNotConstruct<Origin>',
            OriginCaller: {
                _enum: {
                    // this should be dynamically built from the actual modules, based on index
                    System: 'SystemOrigin'
                }
            },
            PalletId: 'LockIdentifier',
            PalletsOrigin: 'OriginCaller',
            PalletVersion: {
                major: 'u16',
                minor: 'u8',
                patch: 'u8'
            },
            Pays: {
                _enum: ['Yes', 'No']
            },
            Phantom: 'Null',
            PhantomData: 'Null',
            Releases: {
                _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
            },
            RuntimeCall: 'Call',
            RuntimeEvent: 'Event',
            RuntimeDbWeight: {
                read: 'Weight',
                write: 'Weight'
            },
            SignedBlock: 'SignedBlockWithJustifications',
            SignedBlockWithJustification: {
                block: 'Block',
                justification: 'Option<EncodedJustification>'
            },
            SignedBlockWithJustifications: {
                block: 'Block',
                justifications: 'Option<Justifications>'
            },
            Slot: 'u64',
            SlotDuration: 'u64',
            StorageData: 'Bytes',
            StorageInfo: {
                palletName: 'Bytes',
                storage_name: 'Bytes',
                prefix: 'Bytes',
                maxValues: 'Option<u32>',
                maxSize: 'Option<u32>'
            },
            StorageProof: {
                trieNodes: 'Vec<Bytes>'
            },
            TransactionPriority: 'u64',
            TransactionLongevity: 'u64',
            TransactionTag: 'Bytes',
            TransactionInfo: {
                _alias: {
                    dataSize: 'size'
                },
                chunkRoot: 'H256',
                contentHash: 'H256',
                dataSize: 'u32',
                blockChunks: 'u32'
            },
            TransactionStorageProof: {
                chunk: 'Vec<u8>',
                proof: 'Vec<Vec<u8>>'
            },
            ValidatorId: 'AccountId',
            ValidatorIdOf: 'ValidatorId',
            WeightV0: 'u32',
            WeightV1: 'u64',
            WeightV2: {
                refTime: 'Compact<u64>',
                proofSize: 'Compact<u64>'
            },
            Weight: 'WeightV2',
            WeightMultiplier: 'Fixed64',
            // digest
            PreRuntime: '(ConsensusEngineId, Bytes)',
            SealV0: '(u64, Signature)',
            Seal: '(ConsensusEngineId, Bytes)',
            Consensus: '(ConsensusEngineId, Bytes)'
        }
    };

    /* eslint-disable sort-keys */
    const v0$1 = {
        Si0Field: {
            name: 'Option<Text>',
            type: 'Si0LookupTypeId',
            typeName: 'Option<Text>',
            docs: 'Vec<Text>'
        },
        Si0LookupTypeId: 'u32',
        Si0Path: 'Vec<Text>',
        Si0Type: {
            path: 'Si0Path',
            params: 'Vec<Si0LookupTypeId>',
            def: 'Si0TypeDef'
        },
        Si0TypeDef: {
            _enum: {
                Composite: 'Si0TypeDefComposite',
                Variant: 'Si0TypeDefVariant',
                Sequence: 'Si0TypeDefSequence',
                Array: 'Si0TypeDefArray',
                Tuple: 'Si0TypeDefTuple',
                Primitive: 'Si0TypeDefPrimitive',
                Compact: 'Si0TypeDefCompact',
                Phantom: 'Si0TypeDefPhantom',
                BitSequence: 'Si0TypeDefBitSequence'
            }
        },
        Si0TypeDefArray: {
            len: 'u32',
            type: 'Si0LookupTypeId'
        },
        Si0TypeDefBitSequence: {
            bitStoreType: 'Si0LookupTypeId',
            bitOrderType: 'Si0LookupTypeId'
        },
        Si0TypeDefCompact: {
            type: 'Si0LookupTypeId'
        },
        Si0TypeDefComposite: {
            fields: 'Vec<Si0Field>'
        },
        Si0TypeDefPhantom: 'Null',
        Si0TypeDefVariant: {
            variants: 'Vec<Si0Variant>'
        },
        Si0TypeDefPrimitive: {
            _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
        },
        Si0TypeDefSequence: {
            type: 'Si0LookupTypeId'
        },
        Si0TypeDefTuple: 'Vec<Si0LookupTypeId>',
        Si0TypeParameter: {
            name: 'Text',
            type: 'Option<Si0LookupTypeId>'
        },
        Si0Variant: {
            name: 'Text',
            fields: 'Vec<Si0Field>',
            index: 'Option<u8>',
            discriminant: 'Option<u64>',
            docs: 'Vec<Text>'
        }
    };

    /* eslint-disable sort-keys */
    var definitions$14 = {
        rpc: {},
        types: {
            ...v0$1,
            ...v1$1,
            // latest mappings
            SiField: 'Si1Field',
            SiLookupTypeId: 'Si1LookupTypeId',
            SiPath: 'Si1Path',
            SiType: 'Si1Type',
            SiTypeDef: 'Si1TypeDef',
            SiTypeDefArray: 'Si1TypeDefArray',
            SiTypeDefBitSequence: 'Si1TypeDefBitSequence',
            SiTypeDefCompact: 'Si1TypeDefCompact',
            SiTypeDefComposite: 'Si1TypeDefComposite',
            SiTypeDefPrimitive: 'Si1TypeDefPrimitive',
            SiTypeDefSequence: 'Si1TypeDefSequence',
            SiTypeDefTuple: 'Si1TypeDefTuple',
            SiTypeParameter: 'Si1TypeParameter',
            SiTypeDefVariant: 'Si1TypeDefVariant',
            SiVariant: 'Si1Variant'
        }
    };

    const runtime$r = {
        AssetConversionApi: [
            {
                methods: {
                    get_reserves: {
                        description: 'Get pool reserves',
                        params: [
                            {
                                name: 'asset1',
                                type: 'XcmV3MultiLocation'
                            },
                            {
                                name: 'asset2',
                                type: 'XcmV3MultiLocation'
                            }
                        ],
                        type: 'Option<(Balance,Balance)>'
                    },
                    quote_price_exact_tokens_for_tokens: {
                        description: 'Quote price: exact tokens for tokens',
                        params: [
                            {
                                name: 'asset1',
                                type: 'XcmV3MultiLocation'
                            },
                            {
                                name: 'asset2',
                                type: 'XcmV3MultiLocation'
                            },
                            {
                                name: 'amount',
                                type: 'u128'
                            },
                            {
                                name: 'include_fee',
                                type: 'bool'
                            }
                        ],
                        type: 'Option<(Balance)>'
                    },
                    quote_price_tokens_for_exact_tokens: {
                        description: 'Quote price: tokens for exact tokens',
                        params: [
                            {
                                name: 'asset1',
                                type: 'XcmV3MultiLocation'
                            },
                            {
                                name: 'asset2',
                                type: 'XcmV3MultiLocation'
                            },
                            {
                                name: 'amount',
                                type: 'u128'
                            },
                            {
                                name: 'include_fee',
                                type: 'bool'
                            }
                        ],
                        type: 'Option<(Balance)>'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$13 = {
        rpc: {},
        runtime: runtime$r,
        types: {}
    };

    const runtime$q = {
        AssetsApi: [
            {
                methods: {
                    account_balances: {
                        description: 'Return the current set of authorities.',
                        params: [
                            {
                                name: 'account',
                                type: 'AccountId'
                            }
                        ],
                        type: 'Vec<(u32, TAssetBalance)>'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$12 = {
        rpc: {},
        runtime: runtime$q,
        types: {
            AssetApprovalKey: {
                owner: 'AccountId',
                delegate: 'AccountId'
            },
            AssetApproval: {
                amount: 'TAssetBalance',
                deposit: 'TAssetDepositBalance'
            },
            AssetBalance: {
                balance: 'TAssetBalance',
                isFrozen: 'bool',
                isSufficient: 'bool'
            },
            AssetDestroyWitness: {
                accounts: 'Compact<u32>',
                sufficients: 'Compact<u32>',
                approvals: 'Compact<u32>'
            },
            AssetDetails: {
                owner: 'AccountId',
                issuer: 'AccountId',
                admin: 'AccountId',
                freezer: 'AccountId',
                supply: 'TAssetBalance',
                deposit: 'TAssetDepositBalance',
                minBalance: 'TAssetBalance',
                isSufficient: 'bool',
                accounts: 'u32',
                sufficients: 'u32',
                approvals: 'u32',
                isFrozen: 'bool'
            },
            AssetMetadata: {
                deposit: 'TAssetDepositBalance',
                name: 'Vec<u8>',
                symbol: 'Vec<u8>',
                decimals: 'u8',
                isFrozen: 'bool'
            },
            TAssetBalance: 'u64',
            TAssetDepositBalance: 'BalanceOf'
        }
    };

    const runtime$p = {
        AuraApi: [
            {
                methods: {
                    authorities: {
                        description: 'Return the current set of authorities.',
                        params: [],
                        type: 'Vec<AuthorityId>'
                    },
                    slot_duration: {
                        description: 'Returns the slot duration for Aura.',
                        params: [],
                        type: 'SlotDuration'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$11 = {
        rpc: {},
        runtime: runtime$p,
        types: {
            RawAuraPreDigest: {
                slotNumber: 'u64'
            }
        }
    };

    var definitions$10 = {
        rpc: {},
        types: {
            UncleEntryItem: {
                _enum: {
                    InclusionHeight: 'BlockNumber',
                    Uncle: '(Hash, Option<AccountId>)'
                }
            }
        }
    };

    const rpc$g = {
        epochAuthorship: {
            description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
            isUnsafe: true,
            params: [],
            type: 'HashMap<AuthorityId, EpochAuthorship>'
        }
    };

    const V1_V2_SHARED = {
        current_epoch: {
            description: 'Returns information regarding the current epoch.',
            params: [],
            type: 'Epoch'
        },
        current_epoch_start: {
            description: 'Returns the slot that started the current epoch.',
            params: [],
            type: 'Slot'
        },
        generate_key_ownership_proof: {
            description: 'Generates a proof of key ownership for the given authority in the current epoch.',
            params: [
                {
                    name: 'slot',
                    type: 'Slot'
                },
                {
                    name: 'authorityId',
                    type: 'AuthorityId'
                }
            ],
            type: 'Option<OpaqueKeyOwnershipProof>'
        },
        next_epoch: {
            description: 'Returns information regarding the next epoch (which was already previously announced).',
            params: [],
            type: 'Epoch'
        },
        submit_report_equivocation_unsigned_extrinsic: {
            description: 'Submits an unsigned extrinsic to report an equivocation.',
            params: [
                {
                    name: 'equivocationProof',
                    type: 'BabeEquivocationProof'
                },
                {
                    name: 'keyOwnerProof',
                    type: 'OpaqueKeyOwnershipProof'
                }
            ],
            type: 'Option<Null>'
        }
    };
    const runtime$o = {
        BabeApi: [
            {
                methods: {
                    configuration: {
                        description: 'Return the genesis configuration for BABE. The configuration is only read on genesis.',
                        params: [],
                        type: 'BabeGenesisConfiguration'
                    },
                    ...V1_V2_SHARED
                },
                version: 2
            },
            {
                methods: {
                    configuration: {
                        description: 'Return the configuration for BABE. Version 1.',
                        params: [],
                        type: 'BabeGenesisConfigurationV1'
                    },
                    ...V1_V2_SHARED
                },
                version: 1
            }
        ]
    };

    var definitions$$ = {
        rpc: rpc$g,
        runtime: runtime$o,
        types: {
            AllowedSlots: {
                _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
            },
            BabeAuthorityWeight: 'u64',
            BabeEpochConfiguration: {
                c: '(u64, u64)',
                allowedSlots: 'AllowedSlots'
            },
            BabeBlockWeight: 'u32',
            BabeEquivocationProof: {
                offender: 'AuthorityId',
                slotNumber: 'SlotNumber',
                firstHeader: 'Header',
                secondHeader: 'Header'
            },
            BabeGenesisConfiguration: {
                slotDuration: 'u64',
                epochLength: 'u64',
                c: '(u64, u64)',
                genesisAuthorities: 'Vec<(AuthorityId, BabeAuthorityWeight)>',
                randomness: 'Randomness',
                allowedSlots: 'AllowedSlots'
            },
            BabeGenesisConfigurationV1: {
                slotDuration: 'u64',
                epochLength: 'u64',
                c: '(u64, u64)',
                genesisAuthorities: 'Vec<(AuthorityId, BabeAuthorityWeight)>',
                randomness: 'Randomness',
                secondarySlots: 'bool'
            },
            BabeWeight: 'u64',
            MaybeRandomness: 'Option<Randomness>',
            MaybeVrf: 'Option<VrfData>',
            Epoch: {
                epochIndex: 'u64',
                startSlot: 'Slot',
                duration: 'u64',
                authorities: 'Vec<(AuthorityId, BabeAuthorityWeight)>',
                randomness: 'Hash',
                config: 'BabeEpochConfiguration'
            },
            EpochAuthorship: {
                primary: 'Vec<u64>',
                secondary: 'Vec<u64>',
                secondary_vrf: 'Vec<u64>'
            },
            NextConfigDescriptor: {
                _enum: {
                    V0: 'Null',
                    V1: 'NextConfigDescriptorV1'
                }
            },
            NextConfigDescriptorV1: {
                c: '(u64, u64)',
                allowedSlots: 'AllowedSlots'
            },
            OpaqueKeyOwnershipProof: 'Bytes',
            Randomness: 'Hash',
            RawBabePreDigest: {
                _enum: {
                    Phantom: 'Null',
                    Primary: 'RawBabePreDigestPrimary',
                    SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
                    SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
                }
            },
            RawBabePreDigestPrimary: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber',
                vrfOutput: 'VrfOutput',
                vrfProof: 'VrfProof'
            },
            RawBabePreDigestSecondaryPlain: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber'
            },
            RawBabePreDigestSecondaryVRF: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber',
                vrfOutput: 'VrfOutput',
                vrfProof: 'VrfProof'
            },
            RawBabePreDigestTo159: {
                _enum: {
                    Primary: 'RawBabePreDigestPrimaryTo159',
                    Secondary: 'RawBabePreDigestSecondaryTo159'
                }
            },
            RawBabePreDigestPrimaryTo159: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber',
                weight: 'BabeBlockWeight',
                vrfOutput: 'VrfOutput',
                vrfProof: 'VrfProof'
            },
            RawBabePreDigestSecondaryTo159: {
                authorityIndex: 'u32',
                slotNumber: 'SlotNumber',
                weight: 'BabeBlockWeight'
            },
            // a cross old/new compatible version of the digest, that is _only_ useful
            // for partial parsing and extraction of the author. This assumes that all
            // entries has the authorityIndex in the first position - and that it is all
            // we are interested in
            RawBabePreDigestCompat: {
                _enum: {
                    Zero: 'u32',
                    One: 'u32',
                    Two: 'u32',
                    Three: 'u32'
                }
            },
            SlotNumber: 'u64',
            VrfData: '[u8; 32]',
            VrfOutput: '[u8; 32]',
            VrfProof: '[u8; 64]'
        }
    };

    var definitions$_ = {
        rpc: {},
        types: {
            AccountData: {
                free: 'Balance',
                reserved: 'Balance',
                miscFrozen: 'Balance',
                feeFrozen: 'Balance'
            },
            BalanceLockTo212: {
                id: 'LockIdentifier',
                amount: 'Balance',
                until: 'BlockNumber',
                reasons: 'WithdrawReasons'
            },
            BalanceLock: {
                id: 'LockIdentifier',
                amount: 'Balance',
                reasons: 'Reasons'
            },
            BalanceStatus: {
                _enum: ['Free', 'Reserved']
            },
            Reasons: {
                _enum: ['Fee', 'Misc', 'All']
            },
            ReserveData: {
                id: 'ReserveIdentifier',
                amount: 'Balance'
            },
            ReserveIdentifier: '[u8; 8]',
            VestingSchedule: {
                offset: 'Balance',
                perBlock: 'Balance',
                startingBlock: 'BlockNumber'
            },
            WithdrawReasons: {
                _set: {
                    TransactionPayment: 1,
                    Transfer: 2,
                    Reserve: 4,
                    Fee: 8,
                    Tip: 16
                }
            }
        }
    };

    const rpc$f = {
        getFinalizedHead: {
            description: 'Returns hash of the latest BEEFY finalized block as seen by this client.',
            params: [],
            type: 'H256'
        },
        subscribeJustifications: {
            description: 'Returns the block most recently finalized by BEEFY, alongside side its justification.',
            params: [],
            pubsub: [
                'justifications',
                'subscribeJustifications',
                'unsubscribeJustifications'
            ],
            type: 'BeefySignedCommitment'
        }
    };

    const BEEFY_V1_V3 = {
        beefy_genesis: {
            description: 'Return the block number where BEEFY consensus is enabled/started',
            params: [],
            type: 'Option<BlockNumber>'
        },
        generate_key_ownership_proof: {
            description: 'Generates a proof of key ownership for the given authority in the given set.',
            params: [
                {
                    name: 'setId',
                    type: 'ValidatorSetId'
                },
                {
                    name: 'authorityId',
                    type: 'AuthorityId'
                }
            ],
            type: 'Option<OpaqueKeyOwnershipProof>'
        },
        submit_report_equivocation_unsigned_extrinsic: {
            description: 'Submits an unsigned extrinsic to report an equivocation.',
            params: [
                {
                    name: 'equivocationProof',
                    type: 'BeefyEquivocationProof'
                },
                {
                    name: 'keyOwnerProof',
                    type: 'OpaqueKeyOwnershipProof'
                }
            ],
            type: 'Option<Null>'
        },
        validator_set: {
            description: 'Return the current active BEEFY validator set',
            params: [],
            type: 'Option<ValidatorSet>'
        }
    };
    const BEEFY_MMR_V1 = {
        authority_set_proof: {
            description: 'Return the currently active BEEFY authority set proof.',
            params: [],
            type: 'BeefyAuthoritySet'
        },
        next_authority_set_proof: {
            description: 'Return the next/queued BEEFY authority set proof.',
            params: [],
            type: 'BeefyNextAuthoritySet'
        }
    };
    const runtime$n = {
        BeefyApi: [
            {
                methods: BEEFY_V1_V3,
                version: 3
            },
            {
                methods: BEEFY_V1_V3,
                version: 2
            },
            {
                methods: BEEFY_V1_V3,
                version: 1
            }
        ],
        BeefyMmrApi: [
            {
                methods: BEEFY_MMR_V1,
                version: 1
            }
        ]
    };

    var definitions$Z = {
        rpc: rpc$f,
        runtime: runtime$n,
        types: {
            BeefyAuthoritySet: {
                id: 'u64',
                len: 'u32',
                root: 'H256'
            },
            BeefyCommitment: {
                payload: 'BeefyPayload',
                blockNumber: 'BlockNumber',
                validatorSetId: 'ValidatorSetId'
            },
            BeefyId: '[u8; 33]',
            BeefyEquivocationProof: {
                first: 'BeefyVoteMessage',
                second: 'BeefyVoteMessage'
            },
            BeefySignedCommitment: {
                commitment: 'BeefyCommitment',
                signatures: 'Vec<Option<EcdsaSignature>>'
            },
            BeefyNextAuthoritySet: {
                id: 'u64',
                len: 'u32',
                root: 'H256'
            },
            BeefyPayload: 'Vec<(BeefyPayloadId, Bytes)>',
            BeefyPayloadId: '[u8;2]',
            BeefyVoteMessage: {
                commitment: 'BeefyCommitment',
                id: 'AuthorityId',
                signature: 'Signature'
            },
            MmrRootHash: 'H256',
            ValidatorSetId: 'u64',
            ValidatorSet: {
                validators: 'Vec<AuthorityId>',
                id: 'ValidatorSetId'
            }
        }
    };

    const runtime$m = {
        Benchmark: [
            {
                methods: {
                    benchmark_metadata: {
                        description: 'Get the benchmark metadata available for this runtime.',
                        params: [
                            {
                                name: 'extra',
                                type: 'bool'
                            }
                        ],
                        type: '(Vec<BenchmarkList>, Vec<StorageInfo>)'
                    },
                    dispatch_benchmark: {
                        description: 'Dispatch the given benchmark.',
                        params: [
                            {
                                name: 'config',
                                type: 'BenchmarkConfig'
                            }
                        ],
                        type: 'Result<Vec<BenchmarkBatch>, Text>'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$Y = {
        rpc: {},
        runtime: runtime$m,
        types: {
            BenchmarkBatch: {
                pallet: 'Text',
                instance: 'Text',
                benchmark: 'Text',
                results: 'Vec<BenchmarkResult>'
            },
            BenchmarkConfig: {
                pallet: 'Bytes',
                benchmark: 'Bytes',
                selectedComponents: 'Vec<(BenchmarkParameter, u32)>',
                verify: 'bool',
                internalRepeats: 'u32'
            },
            BenchmarkList: {
                pallet: 'Bytes',
                instance: 'Bytes',
                benchmarks: 'Vec<BenchmarkMetadata>'
            },
            BenchmarkMetadata: {
                name: 'Bytes',
                components: 'Vec<(BenchmarkParameter, u32, u32)>'
            },
            BenchmarkParameter: {
                _enum: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
            },
            BenchmarkResult: {
                components: 'Vec<(BenchmarkParameter, u32)>',
                extrinsicTime: 'u128',
                storageRootTime: 'u128',
                reads: 'u32',
                repeatReads: 'u32',
                writes: 'u32',
                repeatWrites: 'u32',
                proofSize: 'u32',
                benchKeys: 'Vec<(Vec<u8>, u32, u32, bool)>'
            }
        }
    };

    const BB_V2_TO_V4 = {
        // this was removed after V4
        random_seed: {
            description: 'Generate a random seed.',
            params: [],
            type: 'Hash'
        }
    };
    const BB_V2_TO_V5 = {
        apply_extrinsic: {
            description: 'Apply the given extrinsic.',
            params: [
                {
                    name: 'extrinsic',
                    type: 'Extrinsic'
                }
            ],
            type: 'ApplyExtrinsicResultPre6'
        }
    };
    const BB_V2_TO_V6 = {
        check_inherents: {
            description: 'Check that the inherents are valid.',
            params: [
                {
                    name: 'block',
                    type: 'Block'
                },
                {
                    name: 'data',
                    type: 'InherentData'
                }
            ],
            type: 'CheckInherentsResult'
        },
        inherent_extrinsics: {
            description: 'Generate inherent extrinsics.',
            params: [
                {
                    name: 'inherent',
                    type: 'InherentData'
                }
            ],
            type: 'Vec<Extrinsic>'
        }
    };
    const BB_V3_TO_V6 = {
        // renamed in v3 from finalize_block
        finalize_block: {
            description: 'Finish the current block.',
            params: [],
            type: 'Header'
        }
    };
    const runtime$l = {
        BlockBuilder: [
            {
                methods: {
                    apply_extrinsic: {
                        description: 'Apply the given extrinsic.',
                        params: [
                            {
                                name: 'extrinsic',
                                type: 'Extrinsic'
                            }
                        ],
                        type: 'ApplyExtrinsicResult'
                    },
                    ...BB_V2_TO_V6,
                    ...BB_V3_TO_V6
                },
                version: 6
            },
            {
                methods: {
                    // apply_extrinsic result changed in 6
                    ...BB_V2_TO_V5,
                    ...BB_V2_TO_V6,
                    ...BB_V3_TO_V6
                },
                version: 5
            },
            {
                methods: {
                    // random_seed removed
                    ...BB_V2_TO_V4,
                    ...BB_V2_TO_V5,
                    ...BB_V2_TO_V6,
                    ...BB_V3_TO_V6
                },
                version: 4
            },
            {
                methods: {
                    // finalize_block renamed
                    ...BB_V2_TO_V4,
                    ...BB_V2_TO_V6,
                    ...BB_V3_TO_V6
                },
                version: 3
            },
            {
                methods: {
                    finalise_block: {
                        description: 'Finish the current block.',
                        params: [],
                        type: 'Header'
                    },
                    ...BB_V2_TO_V4,
                    ...BB_V2_TO_V6
                },
                version: 2
            }
        ]
    };

    var definitions$X = {
        rpc: {},
        runtime: runtime$l,
        types: {
            CheckInherentsResult: {
                okay: 'bool',
                fatalError: 'bool',
                errors: 'InherentData'
            },
            InherentData: {
                data: 'BTreeMap<InherentIdentifier, Bytes>'
            },
            InherentIdentifier: '[u8; 8]'
        }
    };

    var definitions$W = {
        rpc: {},
        types: {
            CollectiveOrigin: {
                _enum: {
                    Members: '(MemberCount, MemberCount)',
                    Member: 'AccountId'
                }
            },
            MemberCount: 'u32',
            ProposalIndex: 'u32',
            VotesTo230: {
                index: 'ProposalIndex',
                threshold: 'MemberCount',
                ayes: 'Vec<AccountId>',
                nays: 'Vec<AccountId>'
            },
            Votes: {
                index: 'ProposalIndex',
                threshold: 'MemberCount',
                ayes: 'Vec<AccountId>',
                nays: 'Vec<AccountId>',
                end: 'BlockNumber'
            }
        }
    };

    var definitions$V = {
        rpc: {},
        types: {
            AuthorityId: 'AccountId',
            RawVRFOutput: '[u8; 32]'
        }
    };

    const rpc$e = {
        call: {
            deprecated: 'Use the runtime interface `api.call.contractsApi.call` instead',
            description: 'Executes a call to a contract',
            params: [
                {
                    name: 'callRequest',
                    type: 'ContractCallRequest'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'ContractExecResult'
        },
        getStorage: {
            deprecated: 'Use the runtime interface `api.call.contractsApi.getStorage` instead',
            description: 'Returns the value under a specified storage key in a contract',
            params: [
                {
                    name: 'address',
                    type: 'AccountId'
                },
                {
                    name: 'key',
                    type: 'H256'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Option<Bytes>'
        },
        instantiate: {
            deprecated: 'Use the runtime interface `api.call.contractsApi.instantiate` instead',
            description: 'Instantiate a new contract',
            params: [
                {
                    name: 'request',
                    type: 'InstantiateRequestV1'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'ContractInstantiateResult'
        },
        rentProjection: {
            deprecated: 'Not available in newer versions of the contracts interfaces',
            description: 'Returns the projected time a given contract will be able to sustain paying its rent',
            params: [
                {
                    name: 'address',
                    type: 'AccountId'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Option<BlockNumber>'
        },
        uploadCode: {
            deprecated: 'Use the runtime interface `api.call.contractsApi.uploadCode` instead',
            description: 'Upload new code without instantiating a contract from it',
            // The RPC here is terribly misnamed - somebody forgot how the RPCs
            // are actually done, ie. <module>_<camelCasedMethod>
            endpoint: 'contracts_upload_code',
            params: [
                {
                    name: 'uploadRequest',
                    type: 'CodeUploadRequest'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'CodeUploadResult'
        }
    };

    const SHARED_V1_V2 = {
        get_storage: {
            description: 'Query a given storage key in a given contract.',
            params: [
                {
                    name: 'address',
                    type: 'AccountId'
                },
                {
                    name: 'key',
                    type: 'Bytes'
                }
            ],
            type: 'Option<Bytes>'
        },
        upload_code: {
            description: 'Upload new code without instantiating a contract from it.',
            params: [
                {
                    name: 'origin',
                    type: 'AccountId'
                },
                {
                    name: 'code',
                    type: 'Bytes'
                },
                {
                    name: 'storageDepositLimit',
                    type: 'Option<Balance>'
                }
            ],
            type: 'CodeUploadResult'
        }
    };
    const runtime$k = {
        ContractsApi: [
            {
                methods: {
                    call: {
                        description: 'Perform a call from a specified account to a given contract.',
                        params: [
                            {
                                name: 'origin',
                                type: 'AccountId'
                            },
                            {
                                name: 'dest',
                                type: 'AccountId'
                            },
                            {
                                name: 'value',
                                type: 'Balance'
                            },
                            {
                                name: 'gasLimit',
                                type: 'Option<WeightV2>'
                            },
                            {
                                name: 'storageDepositLimit',
                                type: 'Option<Balance>'
                            },
                            {
                                name: 'inputData',
                                type: 'Vec<u8>'
                            }
                        ],
                        type: 'ContractExecResult'
                    },
                    instantiate: {
                        description: 'Instantiate a new contract.',
                        params: [
                            {
                                name: 'origin',
                                type: 'AccountId'
                            },
                            {
                                name: 'value',
                                type: 'Balance'
                            },
                            {
                                name: 'gasLimit',
                                type: 'Option<WeightV2>'
                            },
                            {
                                name: 'storageDepositLimit',
                                type: 'Option<Balance>'
                            },
                            {
                                name: 'code',
                                type: 'CodeSource'
                            },
                            {
                                name: 'data',
                                type: 'Bytes'
                            },
                            {
                                name: 'salt',
                                type: 'Bytes'
                            }
                        ],
                        type: 'ContractInstantiateResult'
                    },
                    ...SHARED_V1_V2
                },
                version: 2
            },
            {
                methods: {
                    call: {
                        description: 'Perform a call from a specified account to a given contract.',
                        params: [
                            {
                                name: 'origin',
                                type: 'AccountId'
                            },
                            {
                                name: 'dest',
                                type: 'AccountId'
                            },
                            {
                                name: 'value',
                                type: 'Balance'
                            },
                            {
                                name: 'gasLimit',
                                type: 'u64'
                            },
                            {
                                name: 'storageDepositLimit',
                                type: 'Option<Balance>'
                            },
                            {
                                name: 'inputData',
                                type: 'Vec<u8>'
                            }
                        ],
                        type: 'ContractExecResultU64'
                    },
                    instantiate: {
                        description: 'Instantiate a new contract.',
                        params: [
                            {
                                name: 'origin',
                                type: 'AccountId'
                            },
                            {
                                name: 'value',
                                type: 'Balance'
                            },
                            {
                                name: 'gasLimit',
                                type: 'u64'
                            },
                            {
                                name: 'storageDepositLimit',
                                type: 'Option<Balance>'
                            },
                            {
                                name: 'code',
                                type: 'CodeSource'
                            },
                            {
                                name: 'data',
                                type: 'Bytes'
                            },
                            {
                                name: 'salt',
                                type: 'Bytes'
                            }
                        ],
                        type: 'ContractInstantiateResultU64'
                    },
                    ...SHARED_V1_V2
                },
                version: 1
            }
        ]
    };

    var definitions$U = {
        rpc: rpc$e,
        runtime: runtime$k,
        types: {
            AliveContractInfo: {
                trieId: 'TrieId',
                storageSize: 'u32',
                pairCount: 'u32',
                codeHash: 'CodeHash',
                rentAllowance: 'Balance',
                rentPaid: 'Balance',
                deductBlock: 'BlockNumber',
                lastWrite: 'Option<BlockNumber>',
                _reserved: 'Option<Null>'
            },
            CodeHash: 'Hash',
            CodeSource: {
                _enum: {
                    Upload: 'Bytes',
                    Existing: 'Hash'
                }
            },
            CodeUploadRequest: {
                origin: 'AccountId',
                code: 'Bytes',
                storageDepositLimit: 'Option<Balance>'
            },
            CodeUploadResult: 'Result<CodeUploadResultValue, DispatchError>',
            CodeUploadResultValue: {
                codeHash: 'CodeHash',
                deposit: 'Balance'
            },
            ContractCallRequest: {
                origin: 'AccountId',
                dest: 'AccountId',
                value: 'Balance',
                gasLimit: 'u64',
                storageDepositLimit: 'Option<Balance>',
                inputData: 'Bytes'
            },
            ContractExecResultSuccessTo255: {
                status: 'u8',
                data: 'Raw'
            },
            ContractExecResultTo255: {
                _enum: {
                    Success: 'ContractExecResultSuccessTo255',
                    Error: 'Null'
                }
            },
            ContractExecResultSuccessTo260: {
                flags: 'ContractReturnFlags',
                data: 'Bytes',
                gasConsumed: 'u64'
            },
            ContractExecResultTo260: {
                _enum: {
                    Success: 'ContractExecResultSuccessTo260',
                    Error: 'Null'
                }
            },
            ContractExecResultOk: {
                flags: 'ContractReturnFlags',
                data: 'Bytes'
            },
            ContractExecResultResult: 'Result<ContractExecResultOk, DispatchError>',
            ContractExecResultTo267: {
                gasConsumed: 'u64',
                debugMessage: 'Text',
                result: 'ContractExecResultResult'
            },
            ContractExecResult: {
                gasConsumed: 'Weight',
                gasRequired: 'Weight',
                storageDeposit: 'StorageDeposit',
                debugMessage: 'Text',
                result: 'ContractExecResultResult'
            },
            ContractExecResultU64: {
                gasConsumed: 'u64',
                gasRequired: 'u64',
                storageDeposit: 'StorageDeposit',
                debugMessage: 'Text',
                result: 'ContractExecResultResult'
            },
            ContractInfo: {
                _enum: {
                    Alive: 'AliveContractInfo',
                    Tombstone: 'TombstoneContractInfo'
                }
            },
            ContractCallFlags: {
                _set: {
                    _bitLength: 32,
                    ForwardInput: 1,
                    CloneInput: 2,
                    TailCall: 4,
                    AllowReentry: 8
                }
            },
            ContractReturnFlags: {
                _set: {
                    _bitLength: 32,
                    Revert: 1
                }
            },
            ContractStorageKey: '[u8; 32]',
            DeletedContract: {
                pairCount: 'u32',
                trieId: 'TrieId'
            },
            ExecReturnValue: {
                flags: 'ContractReturnFlags',
                data: 'Bytes'
            },
            Gas: 'u64',
            HostFnWeightsTo264: {
                caller: 'Weight',
                address: 'Weight',
                gasLeft: 'Weight',
                balance: 'Weight',
                valueTransferred: 'Weight',
                minimumBalance: 'Weight',
                tombstoneDeposit: 'Weight',
                rentAllowance: 'Weight',
                blockNumber: 'Weight',
                now: 'Weight',
                weightToFee: 'Weight',
                gas: 'Weight',
                input: 'Weight',
                inputPerByte: 'Weight',
                return: 'Weight',
                returnPerByte: 'Weight',
                terminate: 'Weight',
                restoreTo: 'Weight',
                restoreToPerDelta: 'Weight',
                random: 'Weight',
                depositEvent: 'Weight',
                depositEventPerTopic: 'Weight',
                depositEventPerByte: 'Weight',
                setRentAllowance: 'Weight',
                setStorage: 'Weight',
                setStoragePerByte: 'Weight',
                clearStorage: 'Weight',
                getStorage: 'Weight',
                getStoragePerByte: 'Weight',
                transfer: 'Weight',
                call: 'Weight',
                callTransferSurcharge: 'Weight',
                callPerInputByte: 'Weight',
                callPerOutputByte: 'Weight',
                instantiate: 'Weight',
                instantiatePerInputByte: 'Weight',
                instantiatePerOutputByte: 'Weight',
                hashSha2256: 'Weight',
                hashSha2256PerByte: 'Weight',
                hashKeccak256: 'Weight',
                hashKeccak256PerByte: 'Weight',
                hashBlake2256: 'Weight',
                hashBlake2256PerByte: 'Weight',
                hashBlake2128: 'Weight',
                hashBlake2128PerByte: 'Weight'
            },
            HostFnWeights: {
                caller: 'Weight',
                address: 'Weight',
                gasLeft: 'Weight',
                balance: 'Weight',
                valueTransferred: 'Weight',
                minimumBalance: 'Weight',
                tombstoneDeposit: 'Weight',
                rentAllowance: 'Weight',
                blockNumber: 'Weight',
                now: 'Weight',
                weightToFee: 'Weight',
                gas: 'Weight',
                input: 'Weight',
                inputPerByte: 'Weight',
                return: 'Weight',
                returnPerByte: 'Weight',
                terminate: 'Weight',
                terminatePerCodeByte: 'Weight',
                restoreTo: 'Weight',
                restoreToPerCallerCodeByte: 'Weight',
                restoreToPerTombstoneCodeByte: 'Weight',
                restoreToPerDelta: 'Weight',
                random: 'Weight',
                depositEvent: 'Weight',
                depositEventPerTopic: 'Weight',
                depositEventPerByte: 'Weight',
                setRentAllowance: 'Weight',
                setStorage: 'Weight',
                setStoragePerByte: 'Weight',
                clearStorage: 'Weight',
                getStorage: 'Weight',
                getStoragePerByte: 'Weight',
                transfer: 'Weight',
                call: 'Weight',
                callPerCodeByte: 'Weight',
                callTransferSurcharge: 'Weight',
                callPerInputByte: 'Weight',
                callPerOutputByte: 'Weight',
                instantiate: 'Weight',
                instantiatePerCodeByte: 'Weight',
                instantiatePerInputByte: 'Weight',
                instantiatePerOutputByte: 'Weight',
                instantiatePerSaltByte: 'Weight',
                hashSha2256: 'Weight',
                hashSha2256PerByte: 'Weight',
                hashKeccak256: 'Weight',
                hashKeccak256PerByte: 'Weight',
                hashBlake2256: 'Weight',
                hashBlake2256PerByte: 'Weight',
                hashBlake2128: 'Weight',
                hashBlake2128PerByte: 'Weight',
                rentParams: 'Weight'
            },
            InstantiateRequestV1: {
                origin: 'AccountId',
                value: 'Balance',
                gasLimit: 'Gas',
                code: 'Bytes',
                data: 'Bytes',
                salt: 'Bytes'
            },
            InstantiateRequestV2: {
                _fallback: 'InstantiateRequestV1',
                origin: 'AccountId',
                value: 'Balance',
                gasLimit: 'Gas',
                storageDepositLimit: 'Option<Balance>',
                code: 'Bytes',
                data: 'Bytes',
                salt: 'Bytes'
            },
            InstantiateRequest: {
                _fallback: 'InstantiateRequestV2',
                origin: 'AccountId',
                value: 'Balance',
                gasLimit: 'Gas',
                storageDepositLimit: 'Option<Balance>',
                code: 'CodeSource',
                data: 'Bytes',
                salt: 'Bytes'
            },
            ContractInstantiateResultTo267: 'Result<InstantiateReturnValueTo267, Null>',
            ContractInstantiateResultTo299: 'Result<InstantiateReturnValueOk, Null>',
            ContractInstantiateResult: {
                gasConsumed: 'WeightV2',
                gasRequired: 'WeightV2',
                storageDeposit: 'StorageDeposit',
                debugMessage: 'Text',
                result: 'InstantiateReturnValue'
            },
            ContractInstantiateResultU64: {
                // only this one can fail, the current version (above) _should_ be correctly
                // versioned now, aka no more deprecated RPCs involved, only runtime calls
                _fallback: 'ContractInstantiateResultTo299',
                gasConsumed: 'u64',
                gasRequired: 'u64',
                storageDeposit: 'StorageDeposit',
                debugMessage: 'Text',
                result: 'InstantiateReturnValue'
            },
            InstantiateReturnValueTo267: {
                result: 'ExecReturnValue',
                accountId: 'AccountId',
                rentProjection: 'Option<RentProjection>'
            },
            InstantiateReturnValueOk: {
                result: 'ExecReturnValue',
                accountId: 'AccountId'
            },
            InstantiateReturnValue: 'Result<InstantiateReturnValueOk, DispatchError>',
            InstructionWeights: {
                i64const: 'u32',
                i64load: 'u32',
                i64store: 'u32',
                select: 'u32',
                rIf: 'u32',
                br: 'u32',
                brIf: 'u32',
                brIable: 'u32',
                brIablePerEntry: 'u32',
                call: 'u32',
                callIndirect: 'u32',
                callIndirectPerParam: 'u32',
                localGet: 'u32',
                localSet: 'u32',
                local_tee: 'u32',
                globalGet: 'u32',
                globalSet: 'u32',
                memoryCurrent: 'u32',
                memoryGrow: 'u32',
                i64clz: 'u32',
                i64ctz: 'u32',
                i64popcnt: 'u32',
                i64eqz: 'u32',
                i64extendsi32: 'u32',
                i64extendui32: 'u32',
                i32wrapi64: 'u32',
                i64eq: 'u32',
                i64ne: 'u32',
                i64lts: 'u32',
                i64ltu: 'u32',
                i64gts: 'u32',
                i64gtu: 'u32',
                i64les: 'u32',
                i64leu: 'u32',
                i64ges: 'u32',
                i64geu: 'u32',
                i64add: 'u32',
                i64sub: 'u32',
                i64mul: 'u32',
                i64divs: 'u32',
                i64divu: 'u32',
                i64rems: 'u32',
                i64remu: 'u32',
                i64and: 'u32',
                i64or: 'u32',
                i64xor: 'u32',
                i64shl: 'u32',
                i64shrs: 'u32',
                i64shru: 'u32',
                i64rotl: 'u32',
                i64rotr: 'u32'
            },
            LimitsTo264: {
                eventTopics: 'u32',
                stackHeight: 'u32',
                globals: 'u32',
                parameters: 'u32',
                memoryPages: 'u32',
                tableSize: 'u32',
                brTableSize: 'u32',
                subjectLen: 'u32',
                codeSize: 'u32'
            },
            Limits: {
                eventTopics: 'u32',
                stackHeight: 'u32',
                globals: 'u32',
                parameters: 'u32',
                memoryPages: 'u32',
                tableSize: 'u32',
                brTableSize: 'u32',
                subjectLen: 'u32'
            },
            PrefabWasmModule: {
                scheduleVersion: 'Compact<u32>',
                initial: 'Compact<u32>',
                maximum: 'Compact<u32>',
                refcount: 'Compact<u64>',
                _reserved: 'Option<Null>',
                code: 'Bytes',
                originalCodeLen: 'u32'
            },
            RentProjection: {
                _enum: {
                    EvictionAt: 'BlockNumber',
                    NoEviction: 'Null'
                }
            },
            ScheduleTo212: {
                version: 'u32',
                putCodePerByteCost: 'Gas',
                growMemCost: 'Gas',
                regularOpCost: 'Gas',
                returnDataPerByteCost: 'Gas',
                eventDataPerByteCost: 'Gas',
                eventPerTopicCost: 'Gas',
                eventBaseCost: 'Gas',
                sandboxDataReadCost: 'Gas',
                sandboxDataWriteCost: 'Gas',
                maxEventTopics: 'u32',
                maxStackHeight: 'u32',
                maxMemoryPages: 'u32',
                enablePrintln: 'bool',
                maxSubjectLen: 'u32'
            },
            ScheduleTo258: {
                version: 'u32',
                putCodePerByteCost: 'Gas',
                growMemCost: 'Gas',
                regularOpCost: 'Gas',
                returnDataPerByteCost: 'Gas',
                eventDataPerByteCost: 'Gas',
                eventPerTopicCost: 'Gas',
                eventBaseCost: 'Gas',
                sandboxDataReadCost: 'Gas',
                sandboxDataWriteCost: 'Gas',
                transferCost: 'Gas',
                maxEventTopics: 'u32',
                maxStackHeight: 'u32',
                maxMemoryPages: 'u32',
                enablePrintln: 'bool',
                maxSubjectLen: 'u32'
            },
            ScheduleTo264: {
                version: 'u32',
                enablePrintln: 'bool',
                limits: 'LimitsTo264',
                instructionWeights: 'InstructionWeights',
                hostFnWeights: 'HostFnWeightsTo264'
            },
            Schedule: {
                version: 'u32',
                enablePrintln: 'bool',
                limits: 'Limits',
                instructionWeights: 'InstructionWeights',
                hostFnWeights: 'HostFnWeights'
            },
            SeedOf: 'Hash',
            StorageDeposit: {
                _enum: {
                    Refund: 'Balance',
                    Charge: 'Balance'
                }
            },
            TombstoneContractInfo: 'Hash',
            TrieId: 'Bytes'
        }
    };

    const AllConvictions = [
        // 0.1x votes, unlocked.
        'None',
        // 1x votes, locked for an enactment period following a successful vote.
        'Locked1x',
        // 2x votes, locked for 2x enactment periods following a successful vote.
        'Locked2x',
        // 3x votes, locked for 4x...
        'Locked3x',
        // 4x votes, locked for 8x...
        'Locked4x',
        // 5x votes, locked for 16x...
        'Locked5x',
        // 6x votes, locked for 32x...
        'Locked6x'
    ];
    var definitions$T = {
        rpc: {},
        types: {
            AccountVote: {
                _enum: {
                    Standard: 'AccountVoteStandard',
                    Split: 'AccountVoteSplit'
                }
            },
            AccountVoteSplit: {
                aye: 'Balance',
                nay: 'Balance'
            },
            AccountVoteStandard: {
                vote: 'Vote',
                balance: 'Balance'
            },
            Conviction: {
                _enum: AllConvictions
            },
            Delegations: {
                votes: 'Balance',
                capital: 'Balance'
            },
            PreimageStatus: {
                _enum: {
                    Missing: 'BlockNumber',
                    Available: 'PreimageStatusAvailable'
                }
            },
            PreimageStatusAvailable: {
                data: 'Bytes',
                provider: 'AccountId',
                deposit: 'Balance',
                since: 'BlockNumber',
                expiry: 'Option<BlockNumber>'
            },
            PriorLock: '(BlockNumber, Balance)',
            PropIndex: 'u32',
            Proposal: 'Call',
            ProxyState: {
                _enum: {
                    Open: 'AccountId',
                    Active: 'AccountId'
                }
            },
            ReferendumIndex: 'u32',
            ReferendumInfoTo239: {
                end: 'BlockNumber',
                proposalHash: 'Hash',
                threshold: 'VoteThreshold',
                delay: 'BlockNumber'
            },
            ReferendumInfo: {
                _enum: {
                    Ongoing: 'ReferendumStatus',
                    Finished: 'ReferendumInfoFinished'
                }
            },
            ReferendumInfoFinished: {
                approved: 'bool',
                end: 'BlockNumber'
            },
            ReferendumStatus: {
                end: 'BlockNumber',
                proposalHash: 'Hash',
                threshold: 'VoteThreshold',
                delay: 'BlockNumber',
                tally: 'Tally'
            },
            Tally: {
                ayes: 'Balance',
                nays: 'Balance',
                turnout: 'Balance'
            },
            Voting: {
                _enum: {
                    Direct: 'VotingDirect',
                    Delegating: 'VotingDelegating'
                }
            },
            VotingDirect: {
                votes: 'Vec<VotingDirectVote>',
                delegations: 'Delegations',
                prior: 'PriorLock'
            },
            VotingDirectVote: '(ReferendumIndex, AccountVote)',
            VotingDelegating: {
                balance: 'Balance',
                target: 'AccountId',
                conviction: 'Conviction',
                delegations: 'Delegations',
                prior: 'PriorLock'
            }
        }
    };

    const rpc$d = {
        getBlockStats: {
            description: 'Reexecute the specified `block_hash` and gather statistics while doing so',
            isUnsafe: true,
            params: [
                {
                    isHistoric: true,
                    name: 'at',
                    type: 'Hash'
                }
            ],
            type: 'Option<BlockStats>'
        }
    };

    var definitions$S = {
        rpc: rpc$d,
        types: {
            BlockStats: {
                witnessLen: 'u64',
                witnessCompactLen: 'u64',
                blockLen: 'u64',
                blockNumExtrinsics: 'u64'
            }
        }
    };

    const runtime$j = {
        AuthorityDiscoveryApi: [
            {
                methods: {
                    authorities: {
                        description: 'Retrieve authority identifiers of the current and next authority set.',
                        params: [],
                        type: 'Vec<AuthorityId>'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$R = {
        rpc: {},
        runtime: runtime$j,
        types: {}
    };

    var definitions$Q = {
        rpc: {},
        types: {
            ApprovalFlag: 'u32',
            DefunctVoter: {
                who: 'AccountId',
                voteCount: 'Compact<u32>',
                candidateCount: 'Compact<u32>'
            },
            Renouncing: {
                _enum: {
                    Member: 'Null',
                    RunnerUp: 'Null',
                    Candidate: 'Compact<u32>'
                }
            },
            SetIndex: 'u32',
            Vote: 'GenericVote',
            VoteIndex: 'u32',
            VoterInfo: {
                lastActive: 'VoteIndex',
                lastWin: 'VoteIndex',
                pot: 'Balance',
                stake: 'Balance'
            },
            VoteThreshold: {
                _enum: [
                    'Super Majority Approve',
                    'Super Majority Against',
                    'Simple Majority'
                ]
            }
        }
    };

    const rpc$c = {
        createBlock: {
            description: 'Instructs the manual-seal authorship task to create a new block',
            params: [
                {
                    name: 'createEmpty',
                    type: 'bool'
                },
                {
                    name: 'finalize',
                    type: 'bool'
                },
                {
                    isOptional: true,
                    name: 'parentHash',
                    type: 'BlockHash'
                }
            ],
            type: 'CreatedBlock'
        },
        finalizeBlock: {
            description: 'Instructs the manual-seal authorship task to finalize a block',
            params: [
                {
                    name: 'hash',
                    type: 'BlockHash'
                },
                {
                    isOptional: true,
                    name: 'justification',
                    type: 'Justification'
                }
            ],
            type: 'bool'
        }
    };

    var definitions$P = {
        rpc: rpc$c,
        types: {
            CreatedBlock: {
                _alias: {
                    blockHash: 'hash'
                },
                blockHash: 'BlockHash',
                aux: 'ImportedAux'
            },
            ImportedAux: {
                headerOnly: 'bool',
                clearJustificationRequests: 'bool',
                needsJustification: 'bool',
                badJustification: 'bool',
                needsFinalityProof: 'bool',
                isNewBest: 'bool'
            }
        }
    };

    var definitions$O = {
        rpc: {},
        types: {
            EvmAccount: {
                nonce: 'u256',
                balance: 'u256'
            },
            EvmCallInfo: {
                exitReason: 'ExitReason',
                value: 'Bytes',
                usedGas: 'U256',
                logs: 'Vec<EvmLog>'
            },
            EvmCreateInfo: {
                exitReason: 'ExitReason',
                value: 'H160',
                usedGas: 'U256',
                logs: 'Vec<EvmLog>'
            },
            EvmCallInfoV2: {
                exitReason: 'ExitReason',
                value: 'Bytes',
                usedGas: 'U256',
                weightInfo: 'Option<EvmWeightInfo>',
                logs: 'Vec<EvmLog>'
            },
            EvmCreateInfoV2: {
                exitReason: 'ExitReason',
                value: 'H160',
                usedGas: 'U256',
                weightInfo: 'Option<EvmWeightInfo>',
                logs: 'Vec<EvmLog>'
            },
            EvmLog: {
                address: 'H160',
                topics: 'Vec<H256>',
                data: 'Bytes'
            },
            EvmVicinity: {
                gasPrice: 'u256',
                origin: 'H160'
            },
            EvmWeightInfo: {
                refTimeLimit: 'Option<u64>',
                proofSizeLimit: 'Option<u64>',
                refTimeUsage: 'Option<u64>',
                proofSizeUsage: 'Option<u64>'
            },
            ExitError: {
                _enum: {
                    StackUnderflow: 'Null',
                    StackOverflow: 'Null',
                    InvalidJump: 'Null',
                    InvalidRange: 'Null',
                    DesignatedInvalid: 'Null',
                    CallTooDeep: 'Null',
                    CreateCollision: 'Null',
                    CreateContractLimit: 'Null',
                    OutOfOffset: 'Null',
                    OutOfGas: 'Null',
                    OutOfFund: 'Null',
                    PCUnderflow: 'Null',
                    CreateEmpty: 'Null',
                    Other: 'Text'
                }
            },
            ExitFatal: {
                _enum: {
                    NotSupported: 'Null',
                    UnhandledInterrupt: 'Null',
                    CallErrorAsFatal: 'ExitError',
                    Other: 'Text'
                }
            },
            ExitReason: {
                _enum: {
                    Succeed: 'ExitSucceed',
                    Error: 'ExitError',
                    Revert: 'ExitRevert',
                    Fatal: 'ExitFatal'
                }
            },
            ExitRevert: {
                _enum: ['Reverted']
            },
            ExitSucceed: {
                _enum: ['Stopped', 'Returned', 'Suicided']
            }
        }
    };

    var definitions$N = {
        rpc: {},
        types: {
            Extrinsic: 'GenericExtrinsic',
            ExtrinsicEra: 'GenericExtrinsicEra',
            ExtrinsicPayload: 'GenericExtrinsicPayload',
            ExtrinsicSignature: 'MultiSignature',
            ExtrinsicV4: 'GenericExtrinsicV4',
            ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
            ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
            ExtrinsicUnknown: 'GenericExtrinsicUnknown',
            ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
            // eras
            Era: 'ExtrinsicEra',
            ImmortalEra: 'GenericImmortalEra',
            MortalEra: 'GenericMortalEra',
            // signatures & signer
            AnySignature: 'H512',
            MultiSignature: {
                _enum: {
                    Ed25519: 'Ed25519Signature',
                    Sr25519: 'Sr25519Signature',
                    Ecdsa: 'EcdsaSignature'
                }
            },
            Signature: 'H512',
            SignerPayload: 'GenericSignerPayload',
            EcdsaSignature: '[u8; 65]',
            Ed25519Signature: 'H512',
            Sr25519Signature: 'H512'
        }
    };

    const runtime$i = {
        FungiblesApi: [
            {
                methods: {
                    query_account_balances: {
                        description: 'Returns the list of all `MultiAsset` that an `AccountId` has',
                        params: [
                            {
                                name: 'account',
                                type: 'AccountId'
                            }
                        ],
                        type: 'Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>'
                    }
                },
                version: 1
            },
            {
                methods: {
                    query_account_balances: {
                        description: 'Returns the list of all `MultiAsset` that an `AccountId` has',
                        params: [
                            {
                                name: 'account',
                                type: 'AccountId'
                            }
                        ],
                        type: 'Result<XcmVersionedMultiAssets, FungiblesAccessError>'
                    }
                },
                version: 2
            }
        ]
    };

    var definitions$M = {
        rpc: {},
        runtime: runtime$i,
        types: {
            FungiblesAccessError: {
                _enum: ['AssetIdConversionFailed', 'AmountToBalanceConversionFailed']
            }
        }
    };

    var definitions$L = {
        rpc: {},
        types: {
            AssetOptions: {
                initalIssuance: 'Compact<Balance>',
                permissions: 'PermissionLatest'
            },
            Owner: {
                _enum: {
                    None: 'Null',
                    Address: 'AccountId'
                }
            },
            PermissionsV1: {
                update: 'Owner',
                mint: 'Owner',
                burn: 'Owner'
            },
            PermissionVersions: {
                _enum: {
                    V1: 'PermissionsV1'
                }
            },
            PermissionLatest: 'PermissionsV1'
        }
    };

    var definitions$K = {
        rpc: {},
        types: {
            ActiveGilt: {
                proportion: 'Perquintill',
                amount: 'Balance',
                who: 'AccountId',
                expiry: 'BlockNumber'
            },
            ActiveGiltsTotal: {
                frozen: 'Balance',
                proportion: 'Perquintill',
                index: 'ActiveIndex',
                target: 'Perquintill'
            },
            ActiveIndex: 'u32',
            GiltBid: {
                amount: 'Balance',
                who: 'AccountId'
            }
        }
    };

    const rpc$b = {
        proveFinality: {
            description: 'Prove finality for the given block number, returning the Justification for the last block in the set.',
            params: [
                {
                    name: 'blockNumber',
                    type: 'BlockNumber'
                }
            ],
            type: 'Option<EncodedFinalityProofs>'
        },
        roundState: {
            description: 'Returns the state of the current best round state as well as the ongoing background rounds',
            params: [],
            type: 'ReportedRoundStates'
        },
        subscribeJustifications: {
            description: 'Subscribes to grandpa justifications',
            params: [],
            pubsub: [
                'justifications',
                'subscribeJustifications',
                'unsubscribeJustifications'
            ],
            type: 'JustificationNotification'
        }
    };

    const GRANDPA_V2_V3 = {
        generate_key_ownership_proof: {
            description: 'Generates a proof of key ownership for the given authority in the given set.',
            params: [
                {
                    name: 'setId',
                    type: 'SetId'
                },
                {
                    name: 'authorityId',
                    type: 'AuthorityId'
                }
            ],
            type: 'Option<OpaqueKeyOwnershipProof>'
        },
        grandpa_authorities: {
            description: 'Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.',
            params: [],
            type: 'AuthorityList'
        },
        submit_report_equivocation_unsigned_extrinsic: {
            description: 'Submits an unsigned extrinsic to report an equivocation.',
            params: [
                {
                    name: 'equivocationProof',
                    type: 'GrandpaEquivocationProof'
                },
                {
                    name: 'keyOwnerProof',
                    type: 'OpaqueKeyOwnershipProof'
                }
            ],
            type: 'Option<Null>'
        }
    };
    const runtime$h = {
        GrandpaApi: [
            {
                methods: {
                    current_set_id: {
                        description: 'Get current GRANDPA authority set id.',
                        params: [],
                        type: 'SetId'
                    },
                    ...GRANDPA_V2_V3
                },
                version: 3
            },
            {
                methods: GRANDPA_V2_V3,
                version: 2
            }
        ]
    };

    var definitions$J = {
        rpc: rpc$b,
        runtime: runtime$h,
        types: {
            AuthorityIndex: 'u64',
            AuthorityList: 'Vec<NextAuthority>',
            AuthoritySet: {
                currentAuthorities: 'AuthorityList',
                setId: 'u64',
                pendingStandardChanges: 'ForkTreePendingChange',
                pendingForcedChanges: 'Vec<PendingChange>',
                authoritySetChanges: 'AuthoritySetChanges'
            },
            ForkTreePendingChange: {
                roots: 'Vec<ForkTreePendingChangeNode>',
                bestFinalizedNumber: 'Option<BlockNumber>'
            },
            ForkTreePendingChangeNode: {
                hash: 'BlockHash',
                number: 'BlockNumber',
                data: 'PendingChange',
                children: 'Vec<ForkTreePendingChangeNode>'
            },
            AuthoritySetChange: '(U64, BlockNumber)',
            AuthoritySetChanges: 'Vec<AuthoritySetChange>',
            AuthorityWeight: 'u64',
            DelayKind: {
                _enum: {
                    Finalized: 'Null',
                    Best: 'DelayKindBest'
                }
            },
            DelayKindBest: {
                medianLastFinalized: 'BlockNumber'
            },
            EncodedFinalityProofs: 'Bytes',
            GrandpaEquivocation: {
                _enum: {
                    Prevote: 'GrandpaEquivocationValue',
                    Precommit: 'GrandpaEquivocationValue'
                }
            },
            GrandpaEquivocationProof: {
                setId: 'SetId',
                equivocation: 'GrandpaEquivocation'
            },
            GrandpaEquivocationValue: {
                roundNumber: 'u64',
                identity: 'AuthorityId',
                first: '(GrandpaPrevote, AuthoritySignature)',
                second: '(GrandpaPrevote, AuthoritySignature)'
            },
            GrandpaPrevote: {
                targetHash: 'Hash',
                targetNumber: 'BlockNumber'
            },
            GrandpaCommit: {
                targetHash: 'BlockHash',
                targetNumber: 'BlockNumber',
                precommits: 'Vec<GrandpaSignedPrecommit>'
            },
            GrandpaPrecommit: {
                targetHash: 'BlockHash',
                targetNumber: 'BlockNumber'
            },
            GrandpaSignedPrecommit: {
                precommit: 'GrandpaPrecommit',
                signature: 'AuthoritySignature',
                id: 'AuthorityId'
            },
            GrandpaJustification: {
                round: 'u64',
                commit: 'GrandpaCommit',
                votesAncestries: 'Vec<Header>'
            },
            JustificationNotification: 'Bytes',
            KeyOwnerProof: 'MembershipProof',
            NextAuthority: '(AuthorityId, AuthorityWeight)',
            PendingChange: {
                nextAuthorities: 'AuthorityList',
                delay: 'BlockNumber',
                canonHeight: 'BlockNumber',
                canonHash: 'BlockHash',
                delayKind: 'DelayKind'
            },
            PendingPause: {
                scheduledAt: 'BlockNumber',
                delay: 'BlockNumber'
            },
            PendingResume: {
                scheduledAt: 'BlockNumber',
                delay: 'BlockNumber'
            },
            Precommits: {
                currentWeight: 'u32',
                missing: 'BTreeSet<AuthorityId>'
            },
            Prevotes: {
                currentWeight: 'u32',
                missing: 'BTreeSet<AuthorityId>'
            },
            ReportedRoundStates: {
                setId: 'u32',
                best: 'RoundState',
                background: 'Vec<RoundState>'
            },
            RoundState: {
                round: 'u32',
                totalWeight: 'u32',
                thresholdWeight: 'u32',
                prevotes: 'Prevotes',
                precommits: 'Precommits'
            },
            SetId: 'u64',
            StoredPendingChange: {
                scheduledAt: 'BlockNumber',
                delay: 'BlockNumber',
                nextAuthorities: 'AuthorityList'
            },
            StoredState: {
                _enum: {
                    Live: 'Null',
                    PendingPause: 'PendingPause',
                    Paused: 'Null',
                    PendingResume: 'PendingResume'
                }
            }
        }
    };

    var definitions$I = {
        rpc: {},
        types: {
            IdentityFields: {
                _set: {
                    _bitLength: 64,
                    // Mapped here to 32 bits, in Rust these are 64-bit values
                    Display: 1,
                    Legal: 2,
                    Web: 4,
                    Riot: 8,
                    Email: 16,
                    PgpFingerprint: 32,
                    Image: 64,
                    Twitter: 128
                }
            },
            IdentityInfoAdditional: '(Data, Data)',
            IdentityInfoTo198: {
                additional: 'Vec<IdentityInfoAdditional>',
                display: 'Data',
                legal: 'Data',
                web: 'Data',
                riot: 'Data',
                email: 'Data',
                pgpFingerprint: 'Option<H160>',
                image: 'Data'
            },
            IdentityInfo: {
                _fallback: 'IdentityInfoTo198',
                additional: 'Vec<IdentityInfoAdditional>',
                display: 'Data',
                legal: 'Data',
                web: 'Data',
                riot: 'Data',
                email: 'Data',
                pgpFingerprint: 'Option<H160>',
                image: 'Data',
                twitter: 'Data'
            },
            IdentityJudgement: {
                _enum: {
                    Unknown: 'Null',
                    FeePaid: 'Balance',
                    Reasonable: 'Null',
                    KnownGood: 'Null',
                    OutOfDate: 'Null',
                    LowQuality: 'Null',
                    Erroneous: 'Null'
                }
            },
            RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
            RegistrationTo198: {
                judgements: 'Vec<RegistrationJudgement>',
                deposit: 'Balance',
                info: 'IdentityInfoTo198'
            },
            Registration: {
                _fallback: 'RegistrationTo198',
                judgements: 'Vec<RegistrationJudgement>',
                deposit: 'Balance',
                info: 'IdentityInfo'
            },
            RegistrarIndex: 'u32',
            RegistrarInfo: {
                account: 'AccountId',
                fee: 'Balance',
                fields: 'IdentityFields'
            }
        }
    };

    var definitions$H = {
        rpc: {},
        types: {
            AuthIndex: 'u32',
            AuthoritySignature: 'Signature',
            Heartbeat: {
                blockNumber: 'BlockNumber',
                networkState: 'OpaqueNetworkState',
                sessionIndex: 'SessionIndex',
                authorityIndex: 'AuthIndex',
                validatorsLen: 'u32'
            },
            HeartbeatTo244: {
                blockNumber: 'BlockNumber',
                networkState: 'OpaqueNetworkState',
                sessionIndex: 'SessionIndex',
                authorityIndex: 'AuthIndex'
            },
            OpaqueMultiaddr: 'Opaque<Bytes>',
            OpaquePeerId: 'Opaque<Bytes>',
            OpaqueNetworkState: {
                peerId: 'OpaquePeerId',
                externalAddresses: 'Vec<OpaqueMultiaddr>'
            }
        }
    };

    var definitions$G = {
        rpc: {},
        types: {
            CallIndex: '(u8, u8)',
            LotteryConfig: {
                price: 'Balance',
                start: 'BlockNumber',
                length: 'BlockNumber',
                delay: 'BlockNumber',
                repeat: 'bool'
            }
        }
    };

    const rpc$a = {
        generateProof: {
            description: 'Generate MMR proof for the given block numbers.',
            params: [
                {
                    name: 'blockNumbers',
                    type: 'Vec<u64>'
                },
                {
                    isOptional: true,
                    name: 'bestKnownBlockNumber',
                    type: 'u64'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'MmrLeafBatchProof'
        },
        root: {
            description: 'Get the MMR root hash for the current best block.',
            params: [
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'MmrHash'
        },
        verifyProof: {
            description: 'Verify an MMR proof',
            params: [
                {
                    name: 'proof',
                    type: 'MmrLeafBatchProof'
                }
            ],
            type: 'bool'
        },
        verifyProofStateless: {
            description: 'Verify an MMR proof statelessly given an mmr_root',
            params: [
                {
                    name: 'root',
                    type: 'MmrHash'
                },
                {
                    name: 'proof',
                    type: 'MmrLeafBatchProof'
                }
            ],
            type: 'bool'
        }
    };

    const MMR_V2 = {
        generate_proof: {
            description: 'Generate MMR proof for the given block numbers.',
            params: [
                {
                    name: 'blockNumbers',
                    type: 'Vec<BlockNumber>'
                },
                {
                    name: 'bestKnownBlockNumber',
                    type: 'Option<BlockNumber>'
                }
            ],
            type: 'Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>'
        },
        root: {
            description: 'Return the on-chain MMR root hash.',
            params: [],
            type: 'Result<Hash, MmrError>'
        },
        verify_proof: {
            description: 'Verify MMR proof against on-chain MMR.',
            params: [
                {
                    name: 'leaves',
                    type: 'Vec<MmrEncodableOpaqueLeaf>'
                },
                {
                    name: 'proof',
                    type: 'MmrBatchProof'
                }
            ],
            type: 'Result<(), MmrError>'
        },
        verify_proof_stateless: {
            description: 'Verify MMR proof against given root hash.',
            params: [
                {
                    name: 'root',
                    type: 'Hash'
                },
                {
                    name: 'leaves',
                    type: 'Vec<MmrEncodableOpaqueLeaf>'
                },
                {
                    name: 'proof',
                    type: 'MmrBatchProof'
                }
            ],
            type: 'Result<(), MmrError>'
        }
    };
    const MMR_V1 = {
        generate_batch_proof: {
            description: 'Generate MMR proof for a series of leaves under given indices.',
            params: [
                {
                    name: 'leafIndices',
                    type: 'Vec<MmrLeafIndex>'
                }
            ],
            type: 'Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>'
        },
        generate_proof: {
            description: 'Generate MMR proof for a leaf under given index.',
            params: [
                {
                    name: 'leafIndex',
                    type: 'MmrLeafIndex'
                }
            ],
            type: 'Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>'
        },
        mmr_root: {
            description: 'Return the on-chain MMR root hash.',
            params: [],
            type: 'Result<Hash, MmrError>'
        },
        verify_batch_proof: {
            description: 'Verify MMR proof against on-chain MMR for a batch of leaves.',
            params: [
                {
                    name: 'leaves',
                    type: 'Vec<MmrEncodableOpaqueLeaf>'
                },
                {
                    name: 'proof',
                    type: 'MmrBatchProof'
                }
            ],
            type: 'Result<(), MmrError>'
        },
        verify_batch_proof_stateless: {
            description: 'Verify MMR proof against given root hash or a batch of leaves.',
            params: [
                {
                    name: 'root',
                    type: 'Hash'
                },
                {
                    name: 'leaves',
                    type: 'Vec<MmrEncodableOpaqueLeaf>'
                },
                {
                    name: 'proof',
                    type: 'MmrBatchProof'
                }
            ],
            type: 'Result<(), MmrError>'
        },
        verify_proof: {
            description: 'Verify MMR proof against on-chain MMR.',
            params: [
                {
                    name: 'leaf',
                    type: 'MmrEncodableOpaqueLeaf'
                },
                {
                    name: 'proof',
                    type: 'MmrProof'
                }
            ],
            type: 'Result<(), MmrError>'
        },
        verify_proof_stateless: {
            description: 'Verify MMR proof against given root hash.',
            params: [
                {
                    name: 'root',
                    type: 'Hash'
                },
                {
                    name: 'leaf',
                    type: 'MmrEncodableOpaqueLeaf'
                },
                {
                    name: 'proof',
                    type: 'MmrProof'
                }
            ],
            type: 'Result<(), MmrError>'
        }
    };
    const runtime$g = {
        MmrApi: [
            {
                methods: MMR_V2,
                version: 2
            },
            {
                methods: MMR_V1,
                version: 1
            }
        ]
    };

    var definitions$F = {
        rpc: rpc$a,
        runtime: runtime$g,
        types: {
            MmrBatchProof: {
                leafIndices: 'Vec<MmrLeafIndex>',
                leafCount: 'MmrNodeIndex',
                items: 'Vec<Hash>'
            },
            MmrEncodableOpaqueLeaf: 'Bytes',
            MmrError: {
                _enum: ['Push', 'GetRoot', 'Commit', 'GenerateProof', 'Verify', 'LeafNotFound', ' PalletNotIncluded', 'InvalidLeafIndex']
            },
            MmrHash: 'Hash',
            MmrLeafBatchProof: {
                blockHash: 'BlockHash',
                leaves: 'Bytes',
                proof: 'Bytes'
            },
            MmrLeafIndex: 'u64',
            MmrLeafProof: {
                blockHash: 'BlockHash',
                leaf: 'Bytes',
                proof: 'Bytes'
            },
            MmrNodeIndex: 'u64',
            MmrProof: {
                leafIndex: 'MmrLeafIndex',
                leafCount: 'MmrNodeIndex',
                items: 'Vec<Hash>'
            }
        }
    };

    const runtime$f = {
        NftsApi: [
            {
                methods: {
                    attribute: {
                        description: 'An attribute',
                        params: [
                            {
                                name: 'collection',
                                type: 'NftCollectionId'
                            },
                            {
                                name: 'item',
                                type: 'NftItemId'
                            },
                            {
                                name: 'key',
                                type: 'Bytes'
                            }
                        ],
                        type: 'Option<Bytes>'
                    },
                    collection_attribute: {
                        description: 'A collection attribute',
                        params: [
                            {
                                name: 'collection',
                                type: 'NftCollectionId'
                            },
                            {
                                name: 'key',
                                type: 'Bytes'
                            }
                        ],
                        type: 'Option<Bytes>'
                    },
                    collection_owner: {
                        description: 'A collection owner',
                        params: [
                            {
                                name: 'collection',
                                type: 'NftCollectionId'
                            }
                        ],
                        type: 'Option<AccountId>'
                    },
                    custom_attribute: {
                        description: 'A custom attribute',
                        params: [
                            {
                                name: 'account',
                                type: 'AccountId'
                            },
                            {
                                name: 'collection',
                                type: 'NftCollectionId'
                            },
                            {
                                name: 'item',
                                type: 'NftItemId'
                            },
                            {
                                name: 'key',
                                type: 'Bytes'
                            }
                        ],
                        type: 'Option<Bytes>'
                    },
                    owner: {
                        description: 'Collection owner',
                        params: [
                            {
                                name: 'collection',
                                type: 'NftCollectionId'
                            },
                            {
                                name: 'item',
                                type: 'NftItemId'
                            }
                        ],
                        type: 'Option<AccountId>'
                    },
                    system_attribute: {
                        description: 'System attribute',
                        params: [
                            {
                                name: 'collection',
                                type: 'NftCollectionId'
                            },
                            {
                                name: 'item',
                                type: 'NftItemId'
                            },
                            {
                                name: 'key',
                                type: 'Bytes'
                            }
                        ],
                        type: 'Option<Bytes>'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$E = {
        rpc: {},
        runtime: runtime$f,
        types: {
            NftCollectionId: 'u32',
            NftItemId: 'u32'
        }
    };

    const runtime$e = {
        NominationPoolsApi: [
            {
                methods: {
                    balance_to_points: {
                        description: 'Returns the equivalent points of `new_funds` for a given pool.',
                        params: [
                            {
                                name: 'poolId',
                                type: 'NpPoolId'
                            },
                            {
                                name: 'newFunds',
                                type: 'Balance'
                            }
                        ],
                        type: 'Balance'
                    },
                    pending_rewards: {
                        description: 'Returns the pending rewards for the given member.',
                        params: [
                            {
                                name: 'member',
                                type: 'AccountId'
                            }
                        ],
                        type: 'Balance'
                    },
                    points_to_balance: {
                        description: 'Returns the equivalent balance of `points` for a given pool.',
                        params: [
                            {
                                name: 'poolId',
                                type: 'NpPoolId'
                            },
                            {
                                name: 'points',
                                type: 'Balance'
                            }
                        ],
                        type: 'Balance'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$D = {
        rpc: {},
        runtime: runtime$e,
        types: {
            NpApiError: {
                _enum: ['MemberNotFound', 'OverflowInPendingRewards']
            },
            NpPoolId: 'u32'
        }
    };

    var definitions$C = {
        rpc: {},
        types: {
            DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
            Kind: '[u8; 16]',
            OffenceDetails: {
                offender: 'Offender',
                reporters: 'Vec<Reporter>'
            },
            Offender: 'IdentificationTuple',
            OpaqueTimeSlot: 'Bytes',
            ReportIdOf: 'Hash',
            Reporter: 'AccountId'
        }
    };

    const runtime$d = {
        DifficultyApi: [
            {
                methods: {
                    difficulty: {
                        description: 'Return the target difficulty of the next block.',
                        params: [],
                        // This is Difficulty in the original, however this is chain-specific
                        type: 'Raw'
                    }
                },
                version: 1
            }
        ],
        TimestampApi: [
            {
                methods: {
                    timestamp: {
                        description: 'API necessary for timestamp-based difficulty adjustment algorithms.',
                        params: [],
                        type: 'Moment'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$B = {
        rpc: {},
        runtime: runtime$d,
        types: {}
    };

    var definitions$A = {
        rpc: {},
        types: {
            ProxyDefinition: {
                delegate: 'AccountId',
                proxyType: 'ProxyType',
                delay: 'BlockNumber'
            },
            ProxyType: {
                _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
            },
            ProxyAnnouncement: {
                real: 'AccountId',
                callHash: 'Hash',
                height: 'BlockNumber'
            }
        }
    };

    var definitions$z = {
        rpc: {},
        types: {
            ActiveRecovery: {
                created: 'BlockNumber',
                deposit: 'Balance',
                friends: 'Vec<AccountId>'
            },
            RecoveryConfig: {
                delayPeriod: 'BlockNumber',
                deposit: 'Balance',
                friends: 'Vec<AccountId>',
                threshold: 'u16'
            }
        }
    };

    var definitions$y = {
        rpc: {},
        types: {
            Period: '(BlockNumber, u32)',
            Priority: 'u8',
            SchedulePeriod: 'Period',
            SchedulePriority: 'Priority',
            Scheduled: {
                maybeId: 'Option<Bytes>',
                priority: 'SchedulePriority',
                call: 'Call',
                maybePeriodic: 'Option<SchedulePeriod>',
                origin: 'PalletsOrigin'
            },
            ScheduledTo254: {
                maybeId: 'Option<Bytes>',
                priority: 'SchedulePriority',
                call: 'Call',
                maybePeriodic: 'Option<SchedulePeriod>'
            },
            TaskAddress: '(BlockNumber, u32)'
        }
    };

    const runtime$c = {
        SessionKeys: [
            {
                methods: {
                    decode_session_keys: {
                        description: 'Decode the given public session keys.',
                        params: [
                            {
                                name: 'encoded',
                                type: 'Bytes'
                            }
                        ],
                        type: 'Option<Vec<(Bytes, KeyTypeId)>>'
                    },
                    generate_session_keys: {
                        description: 'Generate a set of session keys with optionally using the given seed.',
                        params: [
                            {
                                name: 'seed',
                                type: 'Option<Bytes>'
                            }
                        ],
                        type: 'Bytes'
                    }
                },
                version: 1
            }
        ]
    };

    const keyTypes = {
        // key for beefy
        BeefyKey: '[u8; 33]',
        // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
        Keys: 'SessionKeys4',
        SessionKeys1: '(AccountId)',
        SessionKeys2: '(AccountId, AccountId)',
        SessionKeys3: '(AccountId, AccountId, AccountId)',
        SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
        SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys6B: '(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
        SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys7B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
        SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys8B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
        SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys9B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
        SessionKeys10: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
        SessionKeys10B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)'
    };
    var definitions$x = {
        rpc: {},
        runtime: runtime$c,
        types: {
            ...keyTypes,
            FullIdentification: 'Exposure',
            IdentificationTuple: '(ValidatorId, FullIdentification)',
            MembershipProof: {
                session: 'SessionIndex',
                trieNodes: 'Vec<Bytes>',
                validatorCount: 'ValidatorCount'
            },
            SessionIndex: 'u32',
            ValidatorCount: 'u32'
        }
    };

    var definitions$w = {
        rpc: {},
        types: {
            Bid: {
                who: 'AccountId',
                kind: 'BidKind',
                value: 'Balance'
            },
            BidKind: {
                _enum: {
                    Deposit: 'Balance',
                    Vouch: '(AccountId, Balance)'
                }
            },
            // a society-specific Judgement (not the same as identity Judgement)
            SocietyJudgement: {
                _enum: ['Rebid', 'Reject', 'Approve']
            },
            // a society-specific Vote
            SocietyVote: {
                _enum: ['Skeptic', 'Reject', 'Approve']
            },
            StrikeCount: 'u32',
            VouchingStatus: {
                _enum: ['Vouching', 'Banned']
            }
        }
    };

    const runtime$b = {
        StakingApi: [
            {
                methods: {
                    nominations_quota: {
                        description: 'Returns the nominations quota for a nominator with a given balance.',
                        params: [
                            {
                                name: 'balance',
                                type: 'Balance'
                            }
                        ],
                        type: 'u32'
                    }
                },
                version: 1
            }
        ]
    };

    const deprecated = {
        Points: 'u32',
        EraPoints: {
            total: 'Points',
            individual: 'Vec<Points>'
        }
    };
    const phragmen = {
        CompactAssignments: 'CompactAssignmentsWith16',
        CompactAssignmentsWith16: {
            votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
            votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
            votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
            votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
            votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
            votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
            votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
            votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
            votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
            votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
            votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
            votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
            votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
            votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
            votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
            votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
        },
        CompactAssignmentsWith24: {
            votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
            votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
            votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
            votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
            votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
            votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
            votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
            votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
            votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
            votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
            votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
            votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
            votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
            votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
            votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
            votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>',
            votes17: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>',
            votes18: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>',
            votes19: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>',
            votes20: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>',
            votes21: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>',
            votes22: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>',
            votes23: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>',
            votes24: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>'
        },
        CompactAssignmentsTo265: 'CompactAssignmentsWith16',
        CompactAssignmentsTo257: {
            votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
            votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
            votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
            votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
            votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
            votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
            votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
            votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
            votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
            votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
            votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
            votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
            votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
            votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
            votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
            votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
        },
        CompactScore: '(ValidatorIndex, OffchainAccuracy)',
        CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
        ElectionCompute: {
            // in previous versions the last entry was "AuthorityId"
            // (since no data attached, and it is via SCALE can rename)
            _enum: ['OnChain', 'Signed', 'Unsigned']
        },
        ElectionPhase: {
            _enum: {
                Off: null,
                Signed: null,
                Unsigned: '(bool, BlockNumber)',
                Emergency: null
            }
        },
        ElectionResult: {
            compute: 'ElectionCompute',
            slotStake: 'Balance',
            electedStashes: 'Vec<AccountId>',
            exposures: 'Vec<(AccountId, Exposure)>'
        },
        ElectionScore: '[u128; 3]',
        ElectionSize: {
            validators: 'Compact<ValidatorIndex>',
            nominators: 'Compact<NominatorIndex>'
        },
        ElectionStatus: {
            _enum: {
                Close: 'Null',
                Open: 'BlockNumber'
            }
        },
        ExtendedBalance: 'u128',
        RawSolution: 'RawSolutionWith16',
        RawSolutionWith16: {
            compact: 'CompactAssignmentsWith16',
            score: 'ElectionScore',
            round: 'u32'
        },
        RawSolutionWith24: {
            compact: 'CompactAssignmentsWith24',
            score: 'ElectionScore',
            round: 'u32'
        },
        RawSolutionTo265: 'RawSolutionWith16',
        ReadySolution: {
            supports: 'SolutionSupports',
            score: 'ElectionScore',
            compute: 'ElectionCompute'
        },
        RoundSnapshot: {
            voters: 'Vec<(AccountId, VoteWeight, Vec<AccountId>)>',
            targets: 'Vec<AccountId>'
        },
        SeatHolder: {
            who: 'AccountId',
            stake: 'Balance',
            deposit: 'Balance'
        },
        SignedSubmission: {
            _fallback: 'SignedSubmissionTo276',
            who: 'AccountId',
            deposit: 'Balance',
            solution: 'RawSolution',
            reward: 'Balance'
        },
        SignedSubmissionTo276: {
            who: 'AccountId',
            deposit: 'Balance',
            solution: 'RawSolution'
        },
        SignedSubmissionOf: 'SignedSubmission',
        SolutionOrSnapshotSize: {
            voters: 'Compact<u32>',
            targets: 'Compact<u32>'
        },
        SolutionSupport: {
            total: 'ExtendedBalance',
            voters: 'Vec<(AccountId, ExtendedBalance)>'
        },
        SolutionSupports: 'Vec<(AccountId, SolutionSupport)>',
        Supports: 'SolutionSupports',
        SubmissionIndicesOf: 'BTreeMap<ElectionScore, u32>',
        Voter: {
            votes: 'Vec<AccountId>',
            stake: 'Balance',
            deposit: 'Balance'
        },
        VoteWeight: 'u64'
    };
    var definitions$v = {
        rpc: {},
        runtime: runtime$b,
        types: {
            ...deprecated,
            ...phragmen,
            ActiveEraInfo: {
                index: 'EraIndex',
                start: 'Option<Moment>'
            },
            EraIndex: 'u32',
            EraRewardPoints: {
                total: 'RewardPoint',
                individual: 'BTreeMap<AccountId, RewardPoint>'
            },
            EraRewards: {
                total: 'u32',
                rewards: 'Vec<u32>'
            },
            Exposure: {
                total: 'Compact<Balance>',
                own: 'Compact<Balance>',
                others: 'Vec<IndividualExposure>'
            },
            Forcing: {
                _enum: [
                    'NotForcing',
                    'ForceNew',
                    'ForceNone',
                    'ForceAlways'
                ]
            },
            IndividualExposure: {
                who: 'AccountId',
                value: 'Compact<Balance>'
            },
            KeyType: 'AccountId',
            MomentOf: 'Moment',
            Nominations: {
                targets: 'Vec<AccountId>',
                submittedIn: 'EraIndex',
                suppressed: 'bool'
            },
            NominatorIndex: 'u32',
            NominatorIndexCompact: 'Compact<NominatorIndex>',
            OffchainAccuracy: 'PerU16',
            OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
            PhragmenScore: '[u128; 3]',
            Points: 'u32',
            RewardDestination: {
                _enum: {
                    Staked: 'Null',
                    Stash: 'Null',
                    Controller: 'Null',
                    Account: 'AccountId',
                    None: 'Null'
                }
            },
            RewardPoint: 'u32',
            SlashJournalEntry: {
                who: 'AccountId',
                amount: 'Balance',
                ownSlash: 'Balance'
            },
            SlashingSpansTo204: {
                spanIndex: 'SpanIndex',
                lastStart: 'EraIndex',
                prior: 'Vec<EraIndex>'
            },
            SlashingSpans: {
                spanIndex: 'SpanIndex',
                lastStart: 'EraIndex',
                lastNonzeroSlash: 'EraIndex',
                prior: 'Vec<EraIndex>'
            },
            SpanIndex: 'u32',
            SpanRecord: {
                slashed: 'Balance',
                paidOut: 'Balance'
            },
            StakingLedgerTo223: {
                stash: 'AccountId',
                total: 'Compact<Balance>',
                active: 'Compact<Balance>',
                unlocking: 'Vec<UnlockChunk>'
            },
            StakingLedgerTo240: {
                _fallback: 'StakingLedgerTo223',
                stash: 'AccountId',
                total: 'Compact<Balance>',
                active: 'Compact<Balance>',
                unlocking: 'Vec<UnlockChunk>',
                lastReward: 'Option<EraIndex>'
            },
            StakingLedger: {
                stash: 'AccountId',
                total: 'Compact<Balance>',
                active: 'Compact<Balance>',
                unlocking: 'Vec<UnlockChunk>',
                claimedRewards: 'Vec<EraIndex>'
            },
            UnappliedSlashOther: '(AccountId, Balance)',
            UnappliedSlash: {
                validator: 'AccountId',
                own: 'Balance',
                others: 'Vec<UnappliedSlashOther>',
                reporters: 'Vec<AccountId>',
                payout: 'Balance'
            },
            UnlockChunk: {
                value: 'Compact<Balance>',
                era: 'Compact<BlockNumber>'
            },
            ValidatorIndex: 'u16',
            ValidatorIndexCompact: 'Compact<ValidatorIndex>',
            ValidatorPrefs: 'ValidatorPrefsWithBlocked',
            ValidatorPrefsWithCommission: {
                commission: 'Compact<Perbill>'
            },
            ValidatorPrefsWithBlocked: {
                commission: 'Compact<Perbill>',
                blocked: 'bool'
            },
            ValidatorPrefsTo196: {
                validatorPayment: 'Compact<Balance>'
            },
            ValidatorPrefsTo145: {
                unstakeThreshold: 'Compact<u32>',
                validatorPayment: 'Compact<Balance>'
            }
        }
    };

    var definitions$u = {
        rpc: {},
        types: {
            WeightToFeeCoefficient: {
                coeffInteger: 'Balance',
                coeffFrac: 'Perbill',
                negative: 'bool',
                degree: 'u8'
            }
        }
    };

    const rpc$9 = {
        genSyncSpec: {
            description: 'Returns the json-serialized chainspec running the node, with a sync state.',
            endpoint: 'sync_state_genSyncSpec',
            params: [
                {
                    name: 'raw',
                    type: 'bool'
                }
            ],
            type: 'Json'
        }
    };

    var definitions$t = {
        rpc: rpc$9,
        types: {}
    };

    const rpc$8 = {
        accountNextIndex: {
            alias: ['account_nextIndex'],
            description: 'Retrieves the next accountIndex as available on the node',
            params: [
                {
                    name: 'accountId',
                    type: 'AccountId'
                }
            ],
            type: 'Index'
        },
        addLogFilter: {
            description: 'Adds the supplied directives to the current log filter',
            isUnsafe: true,
            params: [
                {
                    name: 'directives',
                    type: 'Text'
                }
            ],
            type: 'Null'
        },
        addReservedPeer: {
            description: 'Adds a reserved peer',
            isUnsafe: true,
            params: [
                {
                    name: 'peer',
                    type: 'Text'
                }
            ],
            type: 'Text'
        },
        chain: {
            description: 'Retrieves the chain',
            params: [],
            type: 'Text'
        },
        chainType: {
            description: 'Retrieves the chain type',
            params: [],
            type: 'ChainType'
        },
        dryRun: {
            alias: ['system_dryRunAt'],
            description: 'Dry run an extrinsic at a given block',
            isUnsafe: true,
            params: [
                {
                    name: 'extrinsic',
                    type: 'Bytes'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'ApplyExtrinsicResult'
        },
        health: {
            description: 'Return health status of the node',
            noErrorLog: true,
            params: [],
            type: 'Health'
        },
        localListenAddresses: {
            description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
            params: [],
            type: 'Vec<Text>'
        },
        localPeerId: {
            description: 'Returns the base58-encoded PeerId of the node',
            params: [],
            type: 'Text'
        },
        name: {
            description: 'Retrieves the node name',
            params: [],
            type: 'Text'
        },
        networkState: {
            alias: ['system_unstable_networkState'],
            description: 'Returns current state of the network',
            isUnsafe: true,
            params: [],
            type: 'NetworkState'
        },
        nodeRoles: {
            description: 'Returns the roles the node is running as',
            params: [],
            type: 'Vec<NodeRole>'
        },
        peers: {
            description: 'Returns the currently connected peers',
            isUnsafe: true,
            params: [],
            type: 'Vec<PeerInfo>'
        },
        properties: {
            description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
            params: [],
            type: 'ChainProperties'
        },
        removeReservedPeer: {
            description: 'Remove a reserved peer',
            isUnsafe: true,
            params: [
                {
                    name: 'peerId',
                    type: 'Text'
                }
            ],
            type: 'Text'
        },
        reservedPeers: {
            description: 'Returns the list of reserved peers',
            params: [],
            type: 'Vec<Text>'
        },
        resetLogFilter: {
            description: 'Resets the log filter to Substrate defaults',
            isUnsafe: true,
            params: [],
            type: 'Null'
        },
        syncState: {
            description: 'Returns the state of the syncing of the node',
            params: [],
            type: 'SyncState'
        },
        version: {
            description: 'Retrieves the version of the node',
            params: [],
            type: 'Text'
        }
    };

    const runtime$a = {
        AccountNonceApi: [
            {
                methods: {
                    account_nonce: {
                        description: 'The API to query account nonce (aka transaction index)',
                        params: [
                            {
                                name: 'accountId',
                                type: 'AccountId'
                            }
                        ],
                        type: 'Index'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$s = {
        rpc: rpc$8,
        runtime: runtime$a,
        types: {
            AccountInfo: 'AccountInfoWithTripleRefCount',
            AccountInfoWithRefCountU8: {
                nonce: 'Index',
                refcount: 'u8',
                data: 'AccountData'
            },
            AccountInfoWithRefCount: {
                _fallback: 'AccountInfoWithRefCountU8',
                nonce: 'Index',
                refcount: 'RefCount',
                data: 'AccountData'
            },
            AccountInfoWithDualRefCount: {
                _fallback: 'AccountInfoWithRefCount',
                nonce: 'Index',
                consumers: 'RefCount',
                providers: 'RefCount',
                data: 'AccountData'
            },
            // original naming
            AccountInfoWithProviders: 'AccountInfoWithDualRefCount',
            AccountInfoWithTripleRefCount: {
                _fallback: 'AccountInfoWithDualRefCount',
                nonce: 'Index',
                consumers: 'RefCount',
                providers: 'RefCount',
                sufficients: 'RefCount',
                data: 'AccountData'
            },
            ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
            ApplyExtrinsicResultPre6: 'Result<DispatchOutcomePre6, TransactionValidityError>',
            ArithmeticError: {
                _enum: [
                    'Underflow',
                    'Overflow',
                    'DivisionByZero'
                ]
            },
            BlockLength: {
                max: 'PerDispatchClassU32'
            },
            BlockWeights: {
                baseBlock: 'Weight',
                maxBlock: 'Weight',
                perClass: 'PerDispatchClassWeightsPerClass'
            },
            ChainProperties: 'GenericChainProperties',
            ChainType: {
                _enum: {
                    Development: 'Null',
                    Local: 'Null',
                    Live: 'Null',
                    Custom: 'Text'
                }
            },
            ConsumedWeight: 'PerDispatchClassWeight',
            DigestOf: 'Digest',
            DispatchClass: {
                _enum: ['Normal', 'Operational', 'Mandatory']
            },
            DispatchError: {
                _enum: {
                    Other: 'Null',
                    CannotLookup: 'Null',
                    BadOrigin: 'Null',
                    Module: 'DispatchErrorModule',
                    ConsumerRemaining: 'Null',
                    NoProviders: 'Null',
                    TooManyConsumers: 'Null',
                    Token: 'TokenError',
                    Arithmetic: 'ArithmeticError',
                    Transactional: 'TransactionalError',
                    Exhausted: 'Null',
                    Corruption: 'Null',
                    Unavailable: 'Null'
                }
            },
            DispatchErrorPre6: {
                _enum: {
                    Other: 'Null',
                    CannotLookup: 'Null',
                    BadOrigin: 'Null',
                    Module: 'DispatchErrorModulePre6',
                    ConsumerRemaining: 'Null',
                    NoProviders: 'Null',
                    TooManyConsumers: 'Null',
                    Token: 'TokenError',
                    Arithmetic: 'ArithmeticError',
                    Transactional: 'TransactionalError'
                }
            },
            DispatchErrorPre6First: {
                // The enum was modified mid-flight, affecting asset chains -
                // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
                _enum: {
                    Other: 'Null',
                    CannotLookup: 'Null',
                    BadOrigin: 'Null',
                    Module: 'DispatchErrorModulePre6',
                    ConsumerRemaining: 'Null',
                    NoProviders: 'Null',
                    Token: 'TokenError',
                    Arithmetic: 'ArithmeticError',
                    Transactional: 'TransactionalError'
                }
            },
            DispatchErrorModuleU8: {
                index: 'u8',
                error: 'u8'
            },
            DispatchErrorModuleU8a: {
                index: 'u8',
                error: '[u8; 4]'
            },
            DispatchErrorModule: 'DispatchErrorModuleU8a',
            DispatchErrorModulePre6: 'DispatchErrorModuleU8',
            DispatchErrorTo198: {
                module: 'Option<u8>',
                error: 'u8'
            },
            DispatchInfo: {
                weight: 'Weight',
                class: 'DispatchClass',
                paysFee: 'Pays'
            },
            DispatchInfoTo190: {
                weight: 'Weight',
                class: 'DispatchClass'
            },
            DispatchInfoTo244: {
                weight: 'Weight',
                class: 'DispatchClass',
                paysFee: 'bool'
            },
            DispatchOutcome: 'Result<(), DispatchError>',
            DispatchOutcomePre6: 'Result<(), DispatchErrorPre6>',
            DispatchResult: 'Result<(), DispatchError>',
            DispatchResultOf: 'DispatchResult',
            DispatchResultTo198: 'Result<(), Text>',
            Event: 'GenericEvent',
            EventId: '[u8; 2]',
            EventIndex: 'u32',
            EventRecord: {
                phase: 'Phase',
                event: 'Event',
                topics: 'Vec<Hash>'
            },
            Health: {
                peers: 'u64',
                isSyncing: 'bool',
                shouldHavePeers: 'bool'
            },
            InvalidTransaction: {
                _enum: {
                    Call: 'Null',
                    Payment: 'Null',
                    Future: 'Null',
                    Stale: 'Null',
                    BadProof: 'Null',
                    AncientBirthBlock: 'Null',
                    ExhaustsResources: 'Null',
                    Custom: 'u8',
                    BadMandatory: 'Null',
                    MandatoryDispatch: 'Null',
                    BadSigner: 'Null'
                }
            },
            Key: 'Bytes',
            LastRuntimeUpgradeInfo: {
                specVersion: 'Compact<u32>',
                specName: 'Text'
            },
            NetworkState: {
                peerId: 'Text',
                listenedAddresses: 'Vec<Text>',
                externalAddresses: 'Vec<Text>',
                connectedPeers: 'HashMap<Text, Peer>',
                notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
                averageDownloadPerSec: 'u64',
                averageUploadPerSec: 'u64',
                peerset: 'NetworkStatePeerset'
            },
            NetworkStatePeerset: {
                messageQueue: 'u64',
                nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
            },
            NetworkStatePeersetInfo: {
                connected: 'bool',
                reputation: 'i32'
            },
            NodeRole: {
                _enum: {
                    Full: 'Null',
                    LightClient: 'Null',
                    Authority: 'Null',
                    UnknownRole: 'u8'
                }
            },
            NotConnectedPeer: {
                knownAddresses: 'Vec<Text>',
                latestPingTime: 'Option<PeerPing>',
                versionString: 'Option<Text>'
            },
            Peer: {
                enabled: 'bool',
                endpoint: 'PeerEndpoint',
                knownAddresses: 'Vec<Text>',
                latestPingTime: 'PeerPing',
                open: 'bool',
                versionString: 'Text'
            },
            PeerEndpoint: {
                listening: 'PeerEndpointAddr'
            },
            PeerEndpointAddr: {
                _alias: {
                    localAddr: 'local_addr',
                    sendBackAddr: 'send_back_addr'
                },
                localAddr: 'Text',
                sendBackAddr: 'Text'
            },
            PeerPing: {
                nanos: 'u64',
                secs: 'u64'
            },
            PeerInfo: {
                peerId: 'Text',
                roles: 'Text',
                protocolVersion: 'u32',
                bestHash: 'Hash',
                bestNumber: 'BlockNumber'
            },
            PerDispatchClassU32: {
                normal: 'u32',
                operational: 'u32',
                mandatory: 'u32'
            },
            PerDispatchClassWeight: {
                normal: 'Weight',
                operational: 'Weight',
                mandatory: 'Weight'
            },
            PerDispatchClassWeightsPerClass: {
                normal: 'WeightPerClass',
                operational: 'WeightPerClass',
                mandatory: 'WeightPerClass'
            },
            Phase: {
                _enum: {
                    ApplyExtrinsic: 'u32',
                    Finalization: 'Null',
                    Initialization: 'Null'
                }
            },
            RawOrigin: {
                _enum: {
                    Root: 'Null',
                    Signed: 'AccountId',
                    None: 'Null'
                }
            },
            RefCount: 'u32',
            RefCountTo259: 'u8',
            SyncState: {
                startingBlock: 'BlockNumber',
                currentBlock: 'BlockNumber',
                highestBlock: 'Option<BlockNumber>'
            },
            SystemOrigin: 'RawOrigin',
            TokenError: {
                _enum: [
                    'NoFunds',
                    'WouldDie',
                    'BelowMinimum',
                    'CannotCreate',
                    'UnknownAsset',
                    'Frozen',
                    'Unsupported',
                    // these are dropped, but still in older versions
                    // (if this adjusts, will need to take a re-look)
                    'Underflow',
                    'Overflow'
                ]
            },
            TransactionValidityError: {
                _enum: {
                    Invalid: 'InvalidTransaction',
                    Unknown: 'UnknownTransaction'
                }
            },
            TransactionalError: {
                _enum: [
                    'LimitReached',
                    'NoLayer'
                ]
            },
            UnknownTransaction: {
                _enum: {
                    CannotLookup: 'Null',
                    NoUnsignedValidator: 'Null',
                    Custom: 'u8'
                }
            },
            WeightPerClass: {
                baseExtrinsic: 'Weight',
                maxExtrinsic: 'Option<Weight>',
                maxTotal: 'Option<Weight>',
                reserved: 'Option<Weight>'
            }
        }
    };

    var definitions$r = {
        rpc: {},
        types: {
            Bounty: {
                proposer: 'AccountId',
                value: 'Balance',
                fee: 'Balance',
                curatorDeposit: 'Balance',
                bond: 'Balance',
                status: 'BountyStatus'
            },
            BountyIndex: 'u32',
            BountyStatus: {
                _enum: {
                    Proposed: 'Null',
                    Approved: 'Null',
                    Funded: 'Null',
                    CuratorProposed: 'BountyStatusCuratorProposed',
                    Active: 'BountyStatusActive',
                    PendingPayout: 'BountyStatusPendingPayout'
                }
            },
            BountyStatusActive: {
                curator: 'AccountId',
                updateDue: 'BlockNumber'
            },
            BountyStatusCuratorProposed: {
                curator: 'AccountId'
            },
            BountyStatusPendingPayout: {
                curator: 'AccountId',
                beneficiary: 'AccountId',
                unlockAt: 'BlockNumber'
            },
            OpenTip: {
                reason: 'Hash',
                who: 'AccountId',
                finder: 'AccountId',
                deposit: 'Balance',
                closes: 'Option<BlockNumber>',
                tips: 'Vec<OpenTipTip>',
                findersFee: 'bool'
            },
            OpenTipTo225: {
                reason: 'Hash',
                who: 'AccountId',
                finder: 'Option<OpenTipFinderTo225>',
                closes: 'Option<BlockNumber>',
                tips: 'Vec<OpenTipTip>'
            },
            OpenTipFinderTo225: '(AccountId, Balance)',
            OpenTipTip: '(AccountId, Balance)',
            TreasuryProposal: {
                proposer: 'AccountId',
                value: 'Balance',
                beneficiary: 'AccountId',
                bond: 'Balance'
            }
        }
    };

    var definitions$q = {
        rpc: {},
        types: {
            Multiplier: 'Fixed128'
        }
    };

    const runtime$9 = {
        TaggedTransactionQueue: [
            {
                methods: {
                    validate_transaction: {
                        description: 'Validate the transaction.',
                        params: [
                            {
                                name: 'source',
                                type: 'TransactionSource'
                            },
                            {
                                name: 'tx',
                                type: 'Extrinsic'
                            },
                            {
                                name: 'blockHash',
                                type: 'BlockHash'
                            }
                        ],
                        type: 'TransactionValidity'
                    }
                },
                version: 3
            },
            {
                methods: {
                    validate_transaction: {
                        description: 'Validate the transaction.',
                        params: [
                            {
                                name: 'source',
                                type: 'TransactionSource'
                            },
                            {
                                name: 'tx',
                                type: 'Extrinsic'
                            }
                        ],
                        type: 'TransactionValidity'
                    }
                },
                version: 2
            },
            {
                methods: {
                    validate_transaction: {
                        description: 'Validate the transaction.',
                        params: [
                            {
                                name: 'tx',
                                type: 'Extrinsic'
                            }
                        ],
                        type: 'TransactionValidity'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$p = {
        rpc: {},
        runtime: runtime$9,
        types: {
            TransactionSource: {
                _enum: ['InBlock', 'Local', 'External']
            },
            TransactionValidity: 'Result<ValidTransaction, TransactionValidityError>',
            ValidTransaction: {
                priority: 'TransactionPriority',
                requires: 'Vec<TransactionTag>',
                provides: 'Vec<TransactionTag>',
                longevity: 'TransactionLongevity',
                propagate: 'bool'
            }
        }
    };

    var definitions$o = {
        rpc: {},
        types: {
            ClassId: 'u32',
            InstanceId: 'u32',
            DepositBalance: 'Balance',
            DepositBalanceOf: 'Balance',
            ClassDetails: {
                owner: 'AccountId',
                issuer: 'AccountId',
                admin: 'AccountId',
                freezer: 'AccountId',
                totalDeposit: 'DepositBalance',
                freeHolding: 'bool',
                instances: 'u32',
                instanceMetadatas: 'u32',
                attributes: 'u32',
                isFrozen: 'bool'
            },
            DestroyWitness: {
                instances: 'Compact<u32>',
                instanceMetadatas: 'Compact<u32>',
                attributes: 'Compact<u32>'
            },
            InstanceDetails: {
                owner: 'AccountId',
                approved: 'Option<AccountId>',
                isFrozen: 'bool',
                deposit: 'DepositBalance'
            },
            ClassMetadata: {
                deposit: 'DepositBalance',
                data: 'Vec<u8>',
                isFrozen: 'bool'
            },
            InstanceMetadata: {
                deposit: 'DepositBalance',
                data: 'Vec<u8>',
                isFrozen: 'bool'
            }
        }
    };

    var definitions$n = {
        rpc: {},
        types: {
            Multisig: {
                when: 'Timepoint',
                deposit: 'Balance',
                depositor: 'AccountId',
                approvals: 'Vec<AccountId>'
            },
            Timepoint: {
                height: 'BlockNumber',
                index: 'u32'
            }
        }
    };

    var definitions$m = {
        rpc: {},
        types: {
            VestingInfo: {
                locked: 'Balance',
                perBlock: 'Balance',
                startingBlock: 'BlockNumber'
            }
        }
    };

    var definitions$l = {
        rpc: {},
        types: {
            BlockAttestations: {
                receipt: 'CandidateReceipt',
                valid: 'Vec<AccountId>',
                invalid: 'Vec<AccountId>'
            },
            IncludedBlocks: {
                actualNumber: 'BlockNumber',
                session: 'SessionIndex',
                randomSeed: 'H256',
                activeParachains: 'Vec<ParaId>',
                paraBlocks: 'Vec<Hash>'
            },
            MoreAttestations: {}
        }
    };

    var definitions$k = {
        rpc: {},
        types: {
            BridgedBlockHash: 'H256',
            BridgedBlockNumber: 'BlockNumber',
            BridgedHeader: 'Header',
            BridgeMessageId: '(LaneId, MessageNonce)',
            CallOrigin: {
                _enum: {
                    SourceRoot: 'Null',
                    TargetAccount: '(AccountId, MultiSigner, MultiSignature)',
                    SourceAccount: 'AccountId'
                }
            },
            ChainId: '[u8; 4]',
            DeliveredMessages: {
                begin: 'MessageNonce',
                end: 'MessageNonce',
                // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
                dispatchResults: 'BitVec'
            },
            DispatchFeePayment: {
                _enum: ['AtSourceChain', 'AtTargetChain']
            },
            InboundLaneData: {
                relayers: 'Vec<UnrewardedRelayer>',
                lastConfirmedNonce: 'MessageNonce'
            },
            InboundRelayer: 'AccountId',
            InitializationData: {
                header: 'Header',
                authorityList: 'AuthorityList',
                setId: 'SetId',
                isHalted: 'bool'
            },
            LaneId: '[u8; 4]',
            MessageData: {
                payload: 'Bytes',
                fee: 'Balance'
            },
            MessagesDeliveryProofOf: {
                bridgedHeaderHash: 'BlockHash',
                storageProof: 'Vec<Bytes>',
                lane: 'LaneId'
            },
            MessageKey: {
                laneId: 'LaneId',
                nonce: 'MessageNonce'
            },
            MessageNonce: 'u64',
            MessagesProofOf: {
                bridgedHeaderHash: 'BridgedBlockHash',
                storageProof: 'Vec<Bytes>',
                lane: 'LaneId',
                noncesStart: 'MessageNonce',
                noncesEnd: 'MessageNonce'
            },
            OperatingMode: {
                _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']
            },
            OutboundLaneData: {
                oldestUnprunedNonce: 'MessageNonce',
                latestReceivedNonce: 'MessageNonce',
                latestGeneratedNonce: 'MessageNonce'
            },
            OutboundMessageFee: 'Balance',
            OutboundPayload: {
                specVersion: 'u32',
                weight: 'Weight',
                origin: 'CallOrigin',
                dispatchFeePayment: 'DispatchFeePayment',
                call: 'Bytes'
            },
            Parameter: 'Null',
            RelayerId: 'AccountId',
            UnrewardedRelayer: {
                relayer: 'RelayerId',
                messages: 'DeliveredMessages'
            },
            UnrewardedRelayersState: {
                unrewardedRelayer_Entries: 'MessageNonce',
                messagesInOldestEntry: 'MessageNonce',
                totalMessages: 'MessageNonce'
            }
        }
    };

    var definitions$j = {
        rpc: {},
        types: {
            StatementKind: {
                _enum: ['Regular', 'Saft']
            }
        }
    };

    var definitions$i = {
        rpc: {},
        types: {
            FundIndex: 'u32',
            LastContribution: {
                _enum: {
                    Never: 'Null',
                    PreEnding: 'u32',
                    Ending: 'BlockNumber'
                }
            },
            FundInfo: {
                depositor: 'AccountId',
                verifier: 'Option<MultiSigner>',
                deposit: 'Balance',
                raised: 'Balance',
                end: 'BlockNumber',
                cap: 'Balance',
                lastContribution: 'LastContribution',
                firstPeriod: 'LeasePeriod',
                lastPeriod: 'LeasePeriod',
                trieIndex: 'TrieIndex'
            },
            TrieIndex: 'u32'
        }
    };

    const runtime$8 = {
        CollectCollationInfo: [
            {
                methods: {
                    collect_collation_info: {
                        description: 'Collect information about a collation.',
                        params: [
                            {
                                name: 'header',
                                type: 'Header'
                            }
                        ],
                        type: 'CollationInfo'
                    }
                },
                version: 2
            },
            {
                methods: {
                    collect_collation_info: {
                        description: 'Collect information about a collation.',
                        params: [],
                        type: 'CollationInfoV1'
                    }
                },
                version: 1
            }
        ]
    };

    const dmpQueue = {
        CollationInfo: {
            upwardMessages: 'Vec<UpwardMessage>',
            horizontalMessages: 'Vec<OutboundHrmpMessage>',
            newValidationCode: 'Option<ValidationCode>',
            processedDownwardMessages: 'u32',
            hrmpWatermark: 'RelayBlockNumber',
            headData: 'HeadData'
        },
        CollationInfoV1: {
            upwardMessages: 'Vec<UpwardMessage>',
            horizontalMessages: 'Vec<OutboundHrmpMessage>',
            newValidationCode: 'Option<ValidationCode>',
            processedDownwardMessages: 'u32',
            hrmpWatermark: 'RelayBlockNumber'
        },
        ConfigData: {
            maxIndividual: 'Weight'
        },
        MessageId: '[u8; 32]',
        OverweightIndex: 'u64',
        PageCounter: 'u32',
        PageIndexData: {
            beginUsed: 'PageCounter',
            endUsed: 'PageCounter',
            overweightCount: 'OverweightIndex'
        }
    };
    var definitions$h = {
        rpc: {},
        runtime: runtime$8,
        types: dmpQueue
    };

    const finalityV1 = {
        methods: {
            best_finalized: {
                description: 'Returns number and hash of the best finalized header known to the bridge module.',
                params: [],
                type: '(BlockNumber, Hash)'
            }
        },
        version: 1
    };
    const runtime$7 = {
        KusamaFinalityApi: [finalityV1],
        PolkadotFinalityApi: [finalityV1],
        RococoFinalityApi: [finalityV1],
        WestendFinalityApi: [finalityV1]
    };

    var definitions$g = {
        rpc: {},
        runtime: runtime$7,
        types: {}
    };

    /* eslint-disable sort-keys */
    var hrmpTypes = {
        HrmpChannel: {
            maxCapacity: 'u32',
            maxTotalSize: 'u32',
            maxMessageSize: 'u32',
            msgCount: 'u32',
            totalSize: 'u32',
            mqcHead: 'Option<Hash>',
            senderDeposit: 'Balance',
            recipientDeposit: 'Balance'
        },
        HrmpChannelId: {
            sender: 'u32',
            receiver: 'u32'
        },
        HrmpOpenChannelRequest: {
            confirmed: 'bool',
            age: 'SessionIndex',
            senderDeposit: 'Balance',
            maxMessageSize: 'u32',
            maxCapacity: 'u32',
            maxTotalSize: 'u32'
        }
    };

    const PH_V1_TO_V2 = {
        assumed_validation_data: {
            description: 'Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.',
            params: [
                {
                    name: 'paraId',
                    type: 'ParaId'
                },
                {
                    name: 'hash',
                    type: 'Hash'
                }
            ],
            type: 'Option<(PersistedValidationData, ValidationCodeHash)>'
        },
        availability_cores: {
            description: 'Yields information on all availability cores as relevant to the child block.',
            params: [],
            type: 'Vec<CoreState>'
        },
        candidate_events: {
            description: 'Get a vector of events concerning candidates that occurred within a block.',
            params: [],
            type: 'Vec<CandidateEvent>'
        },
        candidate_pending_availability: {
            description: 'Get the receipt of a candidate pending availability.',
            params: [
                {
                    name: 'paraId',
                    type: 'ParaId'
                }
            ],
            type: 'Option<CommittedCandidateReceipt>'
        },
        check_validation_outputs: {
            description: 'Checks if the given validation outputs pass the acceptance criteria.',
            params: [
                {
                    name: 'paraId',
                    type: 'ParaId'
                },
                {
                    name: 'outputs',
                    type: 'CandidateCommitments'
                }
            ],
            type: 'bool'
        },
        dmq_contents: {
            description: 'Get all the pending inbound messages in the downward message queue for a para.',
            params: [
                {
                    name: 'paraId',
                    type: 'ParaId'
                }
            ],
            type: 'Vec<InboundDownwardMessage>'
        },
        inbound_hrmp_channels_contents: {
            description: 'Get the contents of all channels addressed to the given recipient.',
            params: [
                {
                    name: 'paraId',
                    type: 'ParaId'
                }
            ],
            type: 'Vec<InboundHrmpMessage>'
        },
        on_chain_votes: {
            description: 'Scrape dispute relevant from on-chain, backing votes and resolved disputes.',
            params: [],
            type: 'Option<ScrapedOnChainVotes>'
        },
        persisted_validation_data: {
            description: 'Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.',
            params: [
                {
                    name: 'paraId',
                    type: 'ParaId'
                },
                {
                    name: 'assumption',
                    type: 'OccupiedCoreAssumption'
                }
            ],
            type: 'Option<PersistedValidationData>'
        },
        session_index_for_child: {
            description: 'Returns the session index expected at a child of the block.',
            params: [],
            type: 'SessionIndex'
        },
        validation_code: {
            description: 'Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.',
            params: [
                {
                    name: 'paraId',
                    type: 'ParaId'
                },
                {
                    name: 'assumption',
                    type: 'OccupiedCoreAssumption'
                }
            ],
            type: 'ValidationCode'
        },
        validation_code_by_hash: {
            description: 'Get the validation code from its hash.',
            params: [
                {
                    name: 'hash',
                    type: 'ValidationCodeHash'
                }
            ],
            type: 'Option<ValidationCode>'
        },
        validator_groups: {
            description: 'Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on',
            params: [],
            type: '(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)'
        },
        validators: {
            description: 'Get the current validators.',
            params: [],
            type: 'Vec<ValidatorId>'
        }
    };
    const PH_V2_TO_V3 = {
        pvfs_require_precheck: {
            description: 'Returns code hashes of PVFs that require pre-checking by validators in the active set.',
            params: [],
            type: 'Vec<ValidationCodeHash>'
        },
        session_info: {
            description: 'Get the session info for the given session, if stored.',
            params: [
                {
                    name: 'index',
                    type: 'SessionIndex'
                }
            ],
            type: 'Option<SessionInfo>'
        },
        submit_pvf_check_statement: {
            description: 'Submits a PVF pre-checking statement into the transaction pool.',
            params: [
                {
                    name: 'stmt',
                    type: 'PvfCheckStatement'
                },
                {
                    name: 'signature',
                    type: 'ValidatorSignature'
                }
            ],
            type: 'Null'
        },
        validation_code_hash: {
            description: 'Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.',
            params: [
                {
                    name: 'paraId',
                    type: 'ParaId'
                },
                {
                    name: 'assumption',
                    type: 'OccupiedCoreAssumption'
                }
            ],
            type: 'Option<ValidationCodeHash>'
        }
    };
    const PH_V3 = {
        disputes: {
            description: 'Returns all onchain disputes.',
            params: [],
            type: 'Vec<(SessionIndex, CandidateHash, DisputeState)>'
        }
    };
    const PH_V4 = {
        session_executor_params: {
            description: 'Returns execution parameters for the session.',
            params: [
                {
                    name: 'sessionIndex',
                    type: 'SessionIndex'
                }
            ],
            type: 'Option<ExecutorParams>'
        }
    };
    const PH_V5 = {
        key_ownership_proof: {
            description: 'Returns a merkle proof of a validator session key',
            params: [
                {
                    name: 'validatorId',
                    type: 'ValidatorId'
                }
            ],
            type: 'Option<OpaqueKeyOwnershipProof>'
        },
        submit_report_dispute_lost: {
            description: 'Submit an unsigned extrinsic to slash validators who lost a dispute about a candidate of a past session',
            params: [
                {
                    name: 'disputeProof',
                    type: 'DisputeProof'
                },
                {
                    name: 'keyOwnershipProof',
                    type: 'OpaqueKeyOwnershipProof'
                }
            ],
            type: 'Option<Null>'
        },
        unapplied_slashes: {
            description: 'Returns a list of validators that lost a past session dispute and need to be slashed',
            params: [],
            type: 'Vec<(SessionIndex, CandidateHash, PendingSlashes)>'
        }
    };
    const runtime$6 = {
        ParachainHost: [
            {
                methods: {
                    ...PH_V1_TO_V2,
                    ...PH_V2_TO_V3,
                    ...PH_V3,
                    ...PH_V4,
                    ...PH_V5
                },
                version: 5
            },
            {
                methods: {
                    ...PH_V1_TO_V2,
                    ...PH_V2_TO_V3,
                    ...PH_V3,
                    ...PH_V4
                },
                version: 4
            },
            {
                methods: {
                    ...PH_V1_TO_V2,
                    ...PH_V2_TO_V3,
                    ...PH_V3
                },
                version: 3
            },
            {
                methods: {
                    ...PH_V1_TO_V2,
                    ...PH_V2_TO_V3
                },
                version: 2
            },
            {
                methods: {
                    session_info: {
                        description: 'Get the session info for the given session, if stored.',
                        params: [
                            {
                                name: 'index',
                                type: 'SessionIndex'
                            }
                        ],
                        type: 'Option<OldV1SessionInfo>'
                    },
                    ...PH_V1_TO_V2
                },
                version: 1
            }
        ]
    };

    /* eslint-disable sort-keys */
    const SlotRange10 = {
        _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
    };
    const SlotRange = {
        _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'ZeroFour', 'ZeroFive', 'ZeroSix', 'ZeroSeven', 'OneOne', 'OneTwo', 'OneThree', 'OneFour', 'OneFive', 'OneSix', 'OneSeven', 'TwoTwo', 'TwoThree', 'TwoFour', 'TwoFive', 'TwoSix', 'TwoSeven', 'ThreeThree', 'ThreeFour', 'ThreeFive', 'ThreeSix', 'ThreeSeven', 'FourFour', 'FourFive', 'FourSix', 'FourSeven', 'FiveFive', 'FiveSix', 'FiveSeven', 'SixSix', 'SixSeven', 'SevenSeven']
    };
    const oldTypes = {
        Bidder: {
            _enum: {
                New: 'NewBidder',
                Existing: 'ParaId'
            }
        },
        IncomingParachain: {
            _enum: {
                Unset: 'NewBidder',
                Fixed: 'IncomingParachainFixed',
                Deploy: 'IncomingParachainDeploy'
            }
        },
        IncomingParachainDeploy: {
            code: 'ValidationCode',
            initialHeadData: 'HeadData'
        },
        IncomingParachainFixed: {
            codeHash: 'Hash',
            codeSize: 'u32',
            initialHeadData: 'HeadData'
        },
        NewBidder: {
            who: 'AccountId',
            sub: 'SubId'
        },
        SubId: 'u32'
    };
    var slotTypes = {
        ...oldTypes,
        AuctionIndex: 'u32',
        LeasePeriod: 'BlockNumber',
        LeasePeriodOf: 'BlockNumber',
        SlotRange10,
        SlotRange,
        WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
        WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
        WinningDataEntry: 'Option<(AccountId, ParaId, BalanceOf)>',
        WinnersData10: 'Vec<WinnersDataTuple10>',
        WinnersData: 'Vec<WinnersDataTuple>',
        WinnersDataTuple10: '(AccountId, ParaId, BalanceOf, SlotRange10)',
        WinnersDataTuple: '(AccountId, ParaId, BalanceOf, SlotRange)'
    };

    const proposeTypes = {
        ParachainProposal: {
            proposer: 'AccountId',
            genesisHead: 'HeadData',
            validators: 'Vec<ValidatorId>',
            name: 'Bytes',
            balance: 'Balance'
        },
        RegisteredParachainInfo: {
            validators: 'Vec<ValidatorId>',
            proposer: 'AccountId'
        }
    };
    const cumulusTypes = {
        ServiceQuality: {
            _enum: ['Ordered', 'Fast']
        }
    };
    const disputeTypes = {
        DisputeLocation: {
            _enum: ['Local', 'Remote']
        },
        DisputeResult: {
            _enum: ['Valid', 'Invalid']
        },
        DisputeState: {
            validatorsFor: 'BitVec',
            validatorsAgainst: 'BitVec',
            start: 'BlockNumber',
            concludedAt: 'Option<BlockNumber>'
        },
        DisputeStatement: {
            _enum: {
                Valid: 'ValidDisputeStatementKind',
                Invalid: 'InvalidDisputeStatementKind'
            }
        },
        DisputeStatementSet: {
            candidateHash: 'CandidateHash',
            session: 'SessionIndex',
            statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'
        },
        ExecutorParam: {
            _enum: {
                Phantom: 'Null',
                MaxMemoryPages: 'u32',
                StackLogicalMax: 'u32',
                StackNativeMax: 'u32',
                PrecheckingMaxMemory: 'u64',
                PvfPrepTimeout: '(PvfPrepTimeoutKind, u64)',
                PvfExecTimeout: '(PvfExecTimeoutKind, u64)'
            }
        },
        ExecutorParamsHash: 'Hash',
        ExecutorParams: 'Vec<ExecutorParam>',
        ExplicitDisputeStatement: {
            valid: 'bool',
            candidateHash: 'CandidateHash',
            session: 'SessionIndex'
        },
        InvalidDisputeStatementKind: {
            _enum: ['Explicit']
        },
        MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',
        PvfExecTimeoutKind: {
            _enum: ['Backing', 'Approval']
        },
        PvfPrepTimeoutKind: {
            _enum: ['Precheck', 'Lenient']
        },
        ValidDisputeStatementKind: {
            _enum: {
                Explicit: 'Null',
                BackingSeconded: 'Hash',
                BackingValid: 'Hash',
                ApprovalChecking: 'Null'
            }
        }
    };
    var definitions$f = {
        rpc: {},
        runtime: runtime$6,
        types: {
            ...cumulusTypes,
            ...disputeTypes,
            ...hrmpTypes,
            ...proposeTypes,
            ...slotTypes,
            AbridgedCandidateReceipt: {
                parachainIndex: 'ParaId',
                relayParent: 'Hash',
                headData: 'HeadData',
                collator: 'CollatorId',
                signature: 'CollatorSignature',
                povBlockHash: 'Hash',
                commitments: 'CandidateCommitments'
            },
            AbridgedHostConfiguration: {
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                maxUpwardQueueCount: 'u32',
                maxUpwardQueueSize: 'u32',
                maxUpwardMessageSize: 'u32',
                maxUpwardMessageNumPerCandidate: 'u32',
                hrmpMaxMessageNumPerCandidate: 'u32',
                validationUpgradeFrequency: 'BlockNumber',
                validationUpgradeDelay: 'BlockNumber'
            },
            AbridgedHrmpChannel: {
                maxCapacity: 'u32',
                maxTotalSize: 'u32',
                maxMessageSize: 'u32',
                msgCount: 'u32',
                totalSize: 'u32',
                mqcHead: 'Option<Hash>'
            },
            AssignmentId: 'AccountId',
            AssignmentKind: {
                _enum: {
                    Parachain: 'Null',
                    Parathread: '(CollatorId, u32)'
                }
            },
            AttestedCandidate: {
                candidate: 'AbridgedCandidateReceipt',
                validityVotes: 'Vec<ValidityAttestation>',
                validatorIndices: 'BitVec'
            },
            AuthorityDiscoveryId: 'AccountId',
            AvailabilityBitfield: 'BitVec',
            AvailabilityBitfieldRecord: {
                bitfield: 'AvailabilityBitfield',
                submittedTt: 'BlockNumber'
            },
            BackedCandidate: {
                candidate: 'CommittedCandidateReceipt',
                validityVotes: 'Vec<ValidityAttestation>',
                validatorIndices: 'BitVec'
            },
            BufferedSessionChange: {
                applyAt: 'BlockNumber',
                validators: 'Vec<ValidatorId>',
                queued: 'Vec<ValidatorId>',
                sessionIndex: 'SessionIndex'
            },
            CandidateCommitments: {
                upwardMessages: 'Vec<UpwardMessage>',
                horizontalMessages: 'Vec<OutboundHrmpMessage>',
                newValidationCode: 'Option<ValidationCode>',
                headData: 'HeadData',
                processedDownwardMessages: 'u32',
                hrmpWatermark: 'BlockNumber'
            },
            CandidateDescriptor: {
                paraId: 'ParaId',
                relayParent: 'RelayChainHash',
                collatorId: 'CollatorId',
                persistedValidationDataHash: 'Hash',
                povHash: 'Hash',
                erasureRoot: 'Hash',
                signature: 'CollatorSignature',
                paraHead: 'Hash',
                validationCodeHash: 'ValidationCodeHash'
            },
            CandidateEvent: {
                _enum: {
                    CandidateBacked: '(CandidateReceipt, HeadData, CoreIndex, GroupIndex)',
                    CandidateIncluded: '(CandidateReceipt, HeadData, CoreIndex, GroupIndex)',
                    CandidateTimedOut: '(CandidateReceipt, HeadData, CoreIndex)'
                }
            },
            CandidateHash: 'Hash',
            CandidateInfo: {
                who: 'AccountId',
                deposit: 'Balance'
            },
            CandidatePendingAvailability: {
                core: 'CoreIndex',
                hash: 'CandidateHash',
                descriptor: 'CandidateDescriptor',
                availabilityVotes: 'BitVec',
                backers: 'BitVec',
                relayParentNumber: 'BlockNumber',
                backedInNumber: 'BlockNumber',
                backingGroup: 'GroupIndex'
            },
            CandidateReceipt: {
                descriptor: 'CandidateDescriptor',
                commitmentsHash: 'Hash'
            },
            GlobalValidationData: {
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                blockNumber: 'BlockNumber'
            },
            CollatorId: 'H256',
            CollatorSignature: 'Signature',
            CommittedCandidateReceipt: {
                descriptor: 'CandidateDescriptor',
                commitments: 'CandidateCommitments'
            },
            CoreAssignment: {
                core: 'CoreIndex',
                paraId: 'ParaId',
                kind: 'AssignmentKind',
                groupIdx: 'GroupIndex'
            },
            CoreIndex: 'u32',
            CoreOccupied: {
                _enum: {
                    Parathread: 'ParathreadEntry',
                    Parachain: 'Null'
                }
            },
            CoreState: {
                _enum: {
                    Occupied: 'OccupiedCore',
                    Scheduled: 'ScheduledCore',
                    Free: 'Null'
                }
            },
            DisputeProof: {
                timeSlot: 'DisputesTimeSlot',
                kind: 'SlashingOffenceKind',
                validatorIndex: 'ValidatorIndex',
                validatorId: 'ValidatorId'
            },
            DisputesTimeSlot: {
                sessionIndex: 'SessionIndex',
                candidateHash: 'CandidateHash'
            },
            DoubleVoteReport: {
                identity: 'ValidatorId',
                first: '(Statement, ValidatorSignature)',
                second: '(Statement, ValidatorSignature)',
                proof: 'MembershipProof',
                signingContext: 'SigningContext'
            },
            DownwardMessage: 'Bytes',
            GroupIndex: 'u32',
            GroupRotationInfo: {
                sessionStartBlock: 'BlockNumber',
                groupRotationFrequency: 'BlockNumber',
                now: 'BlockNumber'
            },
            GlobalValidationSchedule: {
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                blockNumber: 'BlockNumber'
            },
            HeadData: 'Bytes',
            HostConfiguration: {
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                maxUpwardQueueCount: 'u32',
                maxUpwardQueueSize: 'u32',
                maxUpwardMessageSize: 'u32',
                maxUpwardMessageNumPerCandidate: 'u32',
                hrmpMaxMessageNumPerCandidate: 'u32',
                validationUpgradeFrequency: 'BlockNumber',
                validationUpgradeDelay: 'BlockNumber',
                maxPovSize: 'u32',
                maxDownwardMessageSize: 'u32',
                preferredDispatchableUpwardMessagesStepWeight: 'Weight',
                hrmpMaxParachainOutboundChannels: 'u32',
                hrmpMaxParathreadOutboundChannels: 'u32',
                hrmpOpenRequestTtl: 'u32',
                hrmpSenderDeposit: 'Balance',
                hrmpRecipientDeposit: 'Balance',
                hrmpChannelMaxCapacity: 'u32',
                hrmpChannelMaxTotalSize: 'u32',
                hrmpMaxParachainInboundChannels: 'u32',
                hrmpMaxParathreadInboundChannels: 'u32',
                hrmpChannelMaxMessageSize: 'u32',
                codeRetentionPeriod: 'BlockNumber',
                parathreadCores: 'u32',
                parathreadRetries: 'u32',
                groupRotationFrequency: 'BlockNumber',
                chainAvailabilityPeriod: 'BlockNumber',
                threadAvailabilityPeriod: 'BlockNumber',
                schedulingLookahead: 'u32',
                maxValidatorsPerCore: 'Option<u32>',
                maxValidators: 'Option<u32>',
                disputePeriod: 'SessionIndex',
                disputePostConclusionAcceptancePeriod: 'BlockNumber',
                disputeMaxSpamSlots: 'u32',
                disputeConclusionByTimeOutPeriod: 'BlockNumber',
                noShowSlots: 'u32',
                nDelayTranches: 'u32',
                zerothDelayTrancheWidth: 'u32',
                neededApprovals: 'u32',
                relayVrfModuloSamples: 'u32'
            },
            InboundDownwardMessage: {
                pubSentAt: 'BlockNumber',
                pubMsg: 'DownwardMessage'
            },
            InboundHrmpMessage: {
                sentAt: 'BlockNumber',
                data: 'Bytes'
            },
            InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
            LocalValidationData: {
                parentHead: 'HeadData',
                balance: 'Balance',
                codeUpgradeAllowed: 'Option<BlockNumber>'
            },
            MessageIngestionType: {
                downwardMessages: 'Vec<InboundDownwardMessage>',
                horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
            },
            MessageQueueChain: 'RelayChainHash',
            OccupiedCore: {
                nextUpOnAvailable: 'Option<ScheduledCore>',
                occupiedSince: 'BlockNumber',
                timeOutAt: 'BlockNumber',
                nextUpOnTimeOut: 'Option<ScheduledCore>',
                availability: 'BitVec',
                groupResponsible: 'GroupIndex',
                candidateHash: 'CandidateHash',
                candidateDescriptor: 'CandidateDescriptor'
            },
            OccupiedCoreAssumption: {
                _enum: ['Included,', 'TimedOut', 'Free']
            },
            OutboundHrmpMessage: {
                recipient: 'u32',
                data: 'Bytes'
            },
            PendingSlashes: {
                _alias: {
                    slashKeys: 'keys'
                },
                slashKeys: 'BTreeMap<ValidatorIndex, ValidatorId>',
                kind: 'SlashingOffenceKind'
            },
            ParachainDispatchOrigin: {
                _enum: ['Signed', 'Parachain', 'Root']
            },
            ParachainInherentData: {
                validationData: 'PersistedValidationData',
                relayChainState: 'StorageProof',
                downwardMessages: 'Vec<InboundDownwardMessage>',
                horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'
            },
            ParachainsInherentData: {
                bitfields: 'SignedAvailabilityBitfields',
                backedCandidates: 'Vec<BackedCandidate>',
                disputes: 'MultiDisputeStatementSet',
                parentHeader: 'Header'
            },
            ParaGenesisArgs: {
                genesisHead: 'Bytes',
                validationCode: 'Bytes',
                parachain: 'bool'
            },
            ParaId: 'u32',
            ParaInfo: {
                manager: 'AccountId',
                deposit: 'Balance',
                locked: 'bool'
            },
            ParaLifecycle: {
                _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']
            },
            ParaPastCodeMeta: {
                upgradeTimes: 'Vec<ReplacementTimes>',
                lastPruned: 'Option<BlockNumber>'
            },
            ParaScheduling: {
                _enum: ['Always', 'Dynamic']
            },
            ParathreadClaim: '(ParaId, CollatorId)',
            ParathreadClaimQueue: {
                queue: 'Vec<QueuedParathread>',
                nextCoreOffset: 'u32'
            },
            ParathreadEntry: {
                claim: 'ParathreadClaim',
                retries: 'u32'
            },
            ParaValidatorIndex: 'u32',
            PersistedValidationData: {
                parentHead: 'HeadData',
                relayParentNumber: 'RelayChainBlockNumber',
                relayParentStorageRoot: 'Hash',
                maxPovSize: 'u32'
            },
            PvfCheckStatement: {
                accept: 'bool',
                subject: 'ValidationCodeHash',
                sessionIndex: 'SessionIndex',
                validatorIndex: 'ParaValidatorIndex'
            },
            QueuedParathread: {
                claim: 'ParathreadEntry',
                coreOffset: 'u32'
            },
            RelayBlockNumber: 'u32',
            RelayChainBlockNumber: 'RelayBlockNumber',
            RelayHash: 'Hash',
            RelayChainHash: 'RelayHash',
            Remark: '[u8; 32]',
            ReplacementTimes: {
                expectedAt: 'BlockNumber',
                activatedAt: 'BlockNumber'
            },
            Retriable: {
                _enum: {
                    Never: 'Null',
                    WithRetries: 'u32'
                }
            },
            ScheduledCore: {
                paraId: 'ParaId',
                collator: 'Option<CollatorId>'
            },
            Scheduling: {
                _enum: ['Always', 'Dynamic']
            },
            ScrapedOnChainVotes: {
                session: 'SessionIndex',
                backingValidatorsPerCandidate: 'Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>',
                disputes: 'MultiDisputeStatementSet'
            },
            SessionInfo: {
                activeValidatorIndices: 'Vec<ParaValidatorIndex>',
                randomSeed: '[u8; 32]',
                disputePeriod: 'SessionIndex',
                validators: 'Vec<ValidatorId>',
                discoveryKeys: 'Vec<AuthorityDiscoveryId>',
                assignmentKeys: 'Vec<AssignmentId>',
                validatorGroups: 'Vec<Vec<ValidatorIndex>>',
                nCores: 'u32',
                zerothDelayTrancheWidth: 'u32',
                relayVrfModuloSamples: 'u32',
                nDelayTranches: 'u32',
                noShowSlots: 'u32',
                neededApprovals: 'u32'
            },
            OldV1SessionInfo: {
                validators: 'Vec<ValidatorId>',
                discoveryKeys: 'Vec<AuthorityDiscoveryId>',
                assignmentKeys: 'Vec<AssignmentId>',
                validatorGroups: 'Vec<Vec<ParaValidatorIndex>>',
                nCores: 'u32',
                zerothDelayTrancheWidth: 'u32',
                relayVrfModuloSamples: 'u32',
                nDelayTranches: 'u32',
                noShowSlots: 'u32',
                neededApprovals: 'u32'
            },
            SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',
            SignedAvailabilityBitfield: {
                payload: 'BitVec',
                validatorIndex: 'ParaValidatorIndex',
                signature: 'ValidatorSignature'
            },
            SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
            SigningContext: {
                sessionIndex: 'SessionIndex',
                parentHash: 'Hash'
            },
            SlashingOffenceKind: {
                _enum: ['ForInvalid', 'AgainstValid']
            },
            Statement: {
                _enum: {
                    Never: 'Null',
                    Candidate: 'Hash',
                    Valid: 'Hash',
                    Invalid: 'Hash'
                }
            },
            TransientValidationData: {
                maxCodeSize: 'u32',
                maxHeadDataSize: 'u32',
                balance: 'Balance',
                codeUpgradeAllowed: 'Option<BlockNumber>',
                dmqLength: 'u32'
            },
            UpgradeGoAhead: {
                _enum: ['Abort', 'GoAhead']
            },
            UpgradeRestriction: {
                _enum: ['Present']
            },
            UpwardMessage: 'Bytes',
            ValidationFunctionParams: {
                maxCodeSize: 'u32',
                relayChainHeight: 'RelayChainBlockNumber',
                codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
            },
            ValidationCode: 'Bytes',
            ValidationCodeHash: 'Hash',
            ValidationData: {
                persisted: 'PersistedValidationData',
                transient: 'TransientValidationData'
            },
            ValidationDataType: {
                validationData: 'ValidationData',
                relayChainState: 'Vec<Bytes>'
            },
            ValidatorSignature: 'Signature',
            ValidityAttestation: {
                _enum: {
                    Never: 'Null',
                    Implicit: 'ValidatorSignature',
                    Explicit: 'ValidatorSignature'
                }
            },
            MessagingStateSnapshot: {
                relayDispatchQueueSize: '(u32, u32)',
                egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'
            },
            MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',
            SystemInherentData: 'ParachainInherentData',
            VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'
        }
    };

    var definitions$e = {
        rpc: {},
        types: {
            Approvals: '[bool; 4]'
        }
    };

    var definitions$d = {
        rpc: {},
        types: {
            AccountStatus: {
                validity: 'AccountValidity',
                freeBalance: 'Balance',
                lockedBalance: 'Balance',
                signature: 'Vec<u8>',
                vat: 'Permill'
            },
            AccountValidity: {
                _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
            }
        }
    };

    var TypeDefInfo;
    (function (TypeDefInfo) {
        TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
        TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
        TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
        TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 3] = "DoNotConstruct";
        TypeDefInfo[TypeDefInfo["Enum"] = 4] = "Enum";
        TypeDefInfo[TypeDefInfo["HashMap"] = 5] = "HashMap";
        TypeDefInfo[TypeDefInfo["Int"] = 6] = "Int";
        TypeDefInfo[TypeDefInfo["Linkage"] = 7] = "Linkage";
        TypeDefInfo[TypeDefInfo["Null"] = 8] = "Null";
        TypeDefInfo[TypeDefInfo["Option"] = 9] = "Option";
        TypeDefInfo[TypeDefInfo["Plain"] = 10] = "Plain";
        TypeDefInfo[TypeDefInfo["Range"] = 11] = "Range";
        TypeDefInfo[TypeDefInfo["RangeInclusive"] = 12] = "RangeInclusive";
        TypeDefInfo[TypeDefInfo["Result"] = 13] = "Result";
        TypeDefInfo[TypeDefInfo["Set"] = 14] = "Set";
        TypeDefInfo[TypeDefInfo["Si"] = 15] = "Si";
        TypeDefInfo[TypeDefInfo["Struct"] = 16] = "Struct";
        TypeDefInfo[TypeDefInfo["Tuple"] = 17] = "Tuple";
        TypeDefInfo[TypeDefInfo["UInt"] = 18] = "UInt";
        TypeDefInfo[TypeDefInfo["Vec"] = 19] = "Vec";
        TypeDefInfo[TypeDefInfo["VecFixed"] = 20] = "VecFixed";
        TypeDefInfo[TypeDefInfo["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
        TypeDefInfo[TypeDefInfo["WrapperOpaque"] = 22] = "WrapperOpaque";
    })(TypeDefInfo || (TypeDefInfo = {}));

    function hasEq(o) {
        return isFunction$1(o.eq);
    }

    function compareArray(a, b) {
        if (Array.isArray(b)) {
            return (a.length === b.length) && isUndefined(a.find((v, index) => hasEq(v)
                ? !v.eq(b[index])
                : v !== b[index]));
        }
        return false;
    }

    /**
     * @name AbstractArray
     * @description
     * This manages codec arrays. It is an extension to Array, providing
     * specific encoding/decoding on top of the base type.
     * @noInheritDoc
     */
    class AbstractArray extends Array {
        /**
         * @description This ensures that operators such as clice, filter, map, etc. return
         * new Array instances (without this we need to apply overrides)
         */
        static get [Symbol.species]() {
            return Array;
        }
        constructor(registry, length) {
            super(length);
            this.registry = registry;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            // We need to loop through all entries since they may have a variable length themselves,
            // e.g. when a Vec or Compact is contained withing, it has a variable length based on data
            const count = this.length;
            let total = compactToU8a(count).length;
            for (let i = 0; i < count; i++) {
                total += this[i].encodedLength;
            }
            return total;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.length === 0;
        }
        /**
         * @description The length of the value
         */
        get length() {
            // only included here since we ignore inherited docs
            return super.length;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return compareArray(this, other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                inner: this.inspectInner(),
                outer: [compactToU8a(this.length)]
            };
        }
        /**
         * @internal
         * @description Internal per-item inspection of internal values
         */
        inspectInner() {
            const count = this.length;
            const inner = new Array(count);
            for (let i = 0; i < count; i++) {
                inner[i] = this[i].inspect();
            }
            return inner;
        }
        /**
         * @description Converts the Object to an standard JavaScript Array
         */
        toArray() {
            return Array.from(this);
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            const count = this.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                result[i] = this[i] && this[i].toHuman(isExtended);
            }
            return result;
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            const count = this.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                // We actually log inside the U8a decoding and use JSON.stringify(...), which
                // means that the Vec may be partially populated (same applies to toHuman, same check)
                result[i] = this[i] && this[i].toJSON();
            }
            return result;
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            const count = this.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                result[i] = this[i] && this[i].toPrimitive();
            }
            return result;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            const count = this.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                result[i] = this[i].toString();
            }
            return `[${result.join(', ')}]`;
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = this.toU8aInner();
            return isBare
                ? u8aConcatStrict(encoded)
                : u8aConcatStrict([compactToU8a(this.length), ...encoded]);
        }
        /**
         * @internal
         * @description Internal per-item SCALE encoding of contained values
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8aInner(isBare) {
            const count = this.length;
            const encoded = new Array(count);
            for (let i = 0; i < count; i++) {
                encoded[i] = this[i].toU8a(isBare);
            }
            return encoded;
        }
    }

    /**
     * @name Base
     * @description A type extends the Base class, when it holds a value
     */
    class AbstractBase {
        constructor(registry, value, initialU8aLength) {
            this.initialU8aLength = initialU8aLength;
            this.__internal__raw = value;
            this.registry = registry;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description returns the inner (wrapped value)
         */
        get inner() {
            return this.__internal__raw;
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.__internal__raw.isEmpty;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return this.__internal__raw.eq(other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return this.__internal__raw.inspect();
        }
        /**
         * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
         */
        toHex(isLe) {
            return this.__internal__raw.toHex(isLe);
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return this.__internal__raw.toHuman(isExtended);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.__internal__raw.toJSON();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.__internal__raw.toPrimitive();
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.__internal__raw.toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return this.__internal__raw.toU8a(isBare);
        }
        /**
         * @description Returns the inner wrapped value (equivalent to valueOf)
         */
        unwrap() {
            return this.__internal__raw;
        }
        /**
         * @description Returns the inner wrapped value
         */
        valueOf() {
            return this.__internal__raw;
        }
    }

    const DEFAULT_UINT_BITS = 64;
    const MAX_NUMBER_BITS = 52;
    const MUL_P = new BN(10000);
    const FORMATTERS = [
        ['Perquintill', BN_QUINTILL],
        ['Perbill', BN_BILLION],
        ['Permill', BN_MILLION],
        ['Percent', BN_HUNDRED]
    ];
    function isToBn(value) {
        return isFunction$1(value.toBn);
    }
    function toPercentage(value, divisor) {
        return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
    }
    /** @internal */
    function decodeAbstractInt(value, isNegative) {
        if (isNumber(value)) {
            if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
                throw new Error('Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1');
            }
            return value;
        }
        else if (isString(value)) {
            if (isHex(value, -1, true)) {
                return hexToBn(value, { isLe: false, isNegative }).toString();
            }
            if (value.includes('.') || value.includes(',') || value.includes('e')) {
                throw new Error('String should not contain decimal points or scientific notation');
            }
            return value;
        }
        else if (isBn(value) || isBigInt(value)) {
            return value.toString();
        }
        else if (isObject$1(value)) {
            if (isToBn(value)) {
                return value.toBn().toString();
            }
            // Allow the construction from an object with a single top-level key. This means that
            // single key objects can be treated equivalently to numbers, assuming they meet the
            // specific requirements. (This is useful in Weights 1.5 where Objects are compact)
            const keys = Object.keys(value);
            if (keys.length !== 1) {
                throw new Error('Unable to construct number from multi-key object');
            }
            return decodeAbstractInt(value[keys[0]], isNegative);
        }
        else if (!value) {
            return 0;
        }
        throw new Error(`Unable to create BN from unknown type ${typeof value}`);
    }
    /**
     * @name AbstractInt
     * @ignore
     * @noInheritDoc
     */
    class AbstractInt extends BN {
        constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
            // Construct via a string/number, which will be passed in the BN constructor.
            // It would be ideal to actually return a BN, but there is an issue:
            // https://github.com/indutny/bn.js/issues/206
            super(
            // shortcut isU8a as used in SCALE decoding
            isU8a(value)
                ? bitLength <= 48
                    ? u8aToNumber(value.subarray(0, bitLength / 8), { isNegative: isSigned })
                    : u8aToBn(value.subarray(0, bitLength / 8), { isLe: true, isNegative: isSigned }).toString()
                : decodeAbstractInt(value, isSigned));
            this.registry = registry;
            this.__internal__bitLength = bitLength;
            this.encodedLength = this.__internal__bitLength / 8;
            this.initialU8aLength = this.__internal__bitLength / 8;
            this.isUnsigned = !isSigned;
            const isNegative = this.isNeg();
            const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
            if (isNegative && !isSigned) {
                throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
            }
            else if (super.bitLength() > maxBits) {
                throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
            }
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is a zero value (align elsewhere)
         */
        get isEmpty() {
            return this.isZero();
        }
        /**
         * @description Returns the number of bits in the value
         */
        bitLength() {
            return this.__internal__bitLength;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        eq(other) {
            // Here we are actually overriding the built-in .eq to take care of both
            // number and BN inputs (no `.eqn` needed) - numbers will be converted
            return super.eq(isHex(other)
                ? hexToBn(other.toString(), { isLe: false, isNegative: !this.isUnsigned })
                : bnToBn(other));
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                outer: [this.toU8a()]
            };
        }
        /**
         * @description True if this value is the max of the type
         */
        isMax() {
            const u8a = this.toU8a().filter((b) => b === 0xff);
            return u8a.length === (this.__internal__bitLength / 8);
        }
        /**
         * @description Returns a BigInt representation of the number
         */
        toBigInt() {
            return BigInt(this.toString());
        }
        /**
         * @description Returns the BN representation of the number. (Compatibility)
         */
        toBn() {
            return this;
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex(isLe = false) {
            // For display/JSON, this is BE, for compare, use isLe
            return bnToHex(this, {
                bitLength: this.bitLength(),
                isLe,
                isNegative: !this.isUnsigned
            });
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(_isExpanded) {
            const rawType = this.toRawType();
            if (rawType === 'Balance') {
                return this.isMax()
                    ? 'everything'
                    // FIXME In the case of multiples we need some way of detecting which instance this belongs
                    // to. as it stands we will always format (incorrectly) against the first token defined
                    : formatBalance(this, { decimals: this.registry.chainDecimals[0], withSi: true, withUnit: this.registry.chainTokens[0] });
            }
            const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
            return divisor
                ? toPercentage(this, divisor)
                : formatNumber(this);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON(onlyHex = false) {
            // FIXME this return type should by string | number, however BN returns string
            // Options here are
            //   - super.bitLength() - the actual used bits, use hex when close to MAX_SAFE_INTEGER
            //   - this.__internal__bitLength - the max used bits, use hex when larger than native Rust type
            return onlyHex || (this.__internal__bitLength > 128) || (super.bitLength() > MAX_NUMBER_BITS)
                ? this.toHex()
                : this.toNumber();
        }
        /**
         * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
         */
        toPrimitive() {
            return super.bitLength() > MAX_NUMBER_BITS
                ? this.toString()
                : this.toNumber();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            // NOTE In the case of balances, which have a special meaning on the UI
            // and can be interpreted differently, return a specific value for it so
            // underlying it always matches (no matter which length it actually is)
            return this instanceof this.registry.createClassUnsafe('Balance')
                ? 'Balance'
                : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
        }
        /**
         * @description Returns the string representation of the value
         * @param base The base to use for the conversion
         */
        toString(base) {
            // only included here since we do not inherit docs
            return super.toString(base);
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         */
        toU8a(_isBare) {
            return bnToU8a(this, {
                bitLength: this.bitLength(),
                isLe: true,
                isNegative: !this.isUnsigned
            });
        }
    }

    function hasMismatch(a, b) {
        return isUndefined(a) || (hasEq(a)
            ? !a.eq(b)
            : a !== b);
    }
    function notEntry(value) {
        return !Array.isArray(value) || value.length !== 2;
    }
    function compareMapArray(a, b) {
        // equal number of entries and each entry in the array should match
        return (a.size === b.length) && !b.some((e) => notEntry(e) ||
            hasMismatch(a.get(e[0]), e[1]));
    }
    function compareMap(a, b) {
        if (Array.isArray(b)) {
            return compareMapArray(a, b);
        }
        else if (b instanceof Map) {
            return compareMapArray(a, [...b.entries()]);
        }
        else if (isObject$1(b)) {
            return compareMapArray(a, Object.entries(b));
        }
        return false;
    }

    function compareSetArray(a, b) {
        // equal number of entries and each entry in the array should match
        return (a.size === b.length) && !b.some((e) => !a.has(e));
    }
    function compareSet(a, b) {
        if (Array.isArray(b)) {
            return compareSetArray(a, b);
        }
        else if (b instanceof Set) {
            return compareSetArray(a, [...b.values()]);
        }
        else if (isObject$1(b)) {
            return compareSetArray(a, Object.values(b));
        }
        return false;
    }

    /** @internal */
    function formatFailure(registry, fn, _result, { message }, u8a, i, count, Type, key) {
        let type = '';
        try {
            type = `: ${new Type(registry).toRawType()}`;
        }
        catch {
            // ignore
        }
        // This is extra debugging info (we most-probably want this in in some way, shape or form,
        // but at this point not quite sure how to include and format it (it can be quite massive)
        // console.error(JSON.stringify(result, null, 2));
        return `${fn}: failed at ${u8aToHex(u8a.subarray(0, 16))}…${key ? ` on ${key}` : ''} (index ${i + 1}/${count})${type}:: ${message}`;
    }
    /**
     * @internal
     *
     * Given an u8a, and an array of Type constructors, decode the u8a against the
     * types, and return an array of decoded values.
     *
     * @param u8a - The u8a to decode.
     * @param result - The result array (will be returned with values pushed)
     * @param types - The array of CodecClass to decode the U8a against.
     */
    function decodeU8a$6(registry, result, u8a, [Types, keys]) {
        const count = result.length;
        let offset = 0;
        let i = 0;
        try {
            while (i < count) {
                const value = new Types[i](registry, u8a.subarray(offset));
                offset += value.initialU8aLength || value.encodedLength;
                result[i] = value;
                i++;
            }
        }
        catch (error) {
            throw new Error(formatFailure(registry, 'decodeU8a', result, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
        }
        return [result, offset];
    }
    /**
     * @internal
     *
     * Split from decodeU8a since this is specialized to zip returns ... while we duplicate, this
     * is all on the hot-path, so it is not great, however there is (some) method behind the madness
     */
    function decodeU8aStruct(registry, result, u8a, [Types, keys]) {
        const count = result.length;
        let offset = 0;
        let i = 0;
        try {
            while (i < count) {
                const value = new Types[i](registry, u8a.subarray(offset));
                offset += value.initialU8aLength || value.encodedLength;
                result[i] = [keys[i], value];
                i++;
            }
        }
        catch (error) {
            throw new Error(formatFailure(registry, 'decodeU8aStruct', result, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
        }
        return [result, offset];
    }
    /**
     * @internal
     *
     * Split from decodeU8a since this is specialized to 1 instance ... while we duplicate, this
     * is all on the hot-path, so it is not great, however there is (some) method behind the madness
     */
    function decodeU8aVec(registry, result, u8a, startAt, Type) {
        const count = result.length;
        let offset = startAt;
        let i = 0;
        try {
            while (i < count) {
                const value = new Type(registry, u8a.subarray(offset));
                offset += value.initialU8aLength || value.encodedLength;
                result[i] = value;
                i++;
            }
        }
        catch (error) {
            throw new Error(formatFailure(registry, 'decodeU8aVec', result, error, u8a.subarray(offset), i, count, Type));
        }
        return [offset, offset - startAt];
    }

    const BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];
    const ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Opaque', 'Option', 'UInt', 'WrapperKeepOpaque', 'WrapperOpaque']);
    const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple
    const mappings = [
        // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
        alias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false),
        alias('VecDeque<', 'Vec<', false),
        // <T::Balance as HasCompact>
        cleanupCompact(),
        // Change BoundedVec<Type, Size> to Vec<Type>
        removeExtensions('Bounded', true),
        // Change WeakVec<Type> to Vec<Type>
        removeExtensions('Weak', false),
        // Remove all the trait prefixes
        removeTraits(),
        // remove PairOf<T> -> (T, T)
        removePairOf(),
        // remove boxing, `Box<Proposal>` -> `Proposal`
        removeWrap('Box<'),
        // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
        removeGenerics(),
        // alias String -> Text (compat with jsonrpc methods)
        alias('String', 'Text'),
        // alias Vec<u8> -> Bytes
        alias('Vec<u8>', 'Bytes'),
        alias('&\\[u8\\]', 'Bytes'),
        alias("&'static\\[u8\\]", 'Bytes'),
        // alias RawAddress -> Address
        alias('RawAddress', 'Address'),
        // lookups, mapped to Address/AccountId as appropriate in runtime
        alias('Lookup::Source', 'LookupSource'),
        alias('Lookup::Target', 'LookupTarget'),
        // HACK duplication between contracts & primitives, however contracts prefixed with exec
        alias('exec::StorageKey', 'ContractStorageKey'),
        // flattens tuples with one value, `(AccountId)` -> `AccountId`
        flattenSingleTuple(),
        // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
        removeColons(),
        // remove all trailing spaces - this should always be the last
        trim()
    ];
    function trim() {
        return (value) => value.trim();
    }
    function findClosing(value, start) {
        let depth = 0;
        for (let i = start, count = value.length; i < count; i++) {
            if (value[i] === '>') {
                if (!depth) {
                    return i;
                }
                depth--;
            }
            else if (value[i] === '<') {
                depth++;
            }
        }
        throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
    }
    function alias(src, dest, withChecks = true) {
        const from = new RegExp(`(^${src}|${BOX_PRECEDING.map((box) => `\\${box}${src}`).join('|')})`, 'g');
        const to = (src) => {
            from.lastIndex = 0;
            return withChecks && BOX_PRECEDING.includes(src[0])
                ? `${src[0]}${dest}`
                : dest;
        };
        return (value) => value.replace(from, to);
    }
    function cleanupCompact() {
        return (value) => {
            if (value.includes(' as HasCompact')) {
                for (let i = 0, count = value.length; i < count; i++) {
                    if (value[i] === '<') {
                        const end = findClosing(value, i + 1) - 14;
                        if (value.substring(end, end + 14) === ' as HasCompact') {
                            value = `Compact<${value.substring(i + 1, end)}>`;
                        }
                    }
                }
            }
            return value;
        };
    }
    function flattenSingleTuple() {
        const from1 = /,\)/g;
        const from2 = /\(([^,]+)\)/;
        return (value) => {
            from1.lastIndex = 0;
            return value
                // tuples may have trailing commas, e.g. (u32, BlockNumber, )
                .replace(from1, ')')
                // change (u32) -> u32
                .replace(from2, '$1');
        };
    }
    function replaceTagWith(value, matcher, replacer) {
        let index = -1;
        while (true) {
            index = value.indexOf(matcher, index + 1);
            if (index === -1) {
                return value;
            }
            const start = index + matcher.length;
            const end = findClosing(value, start);
            value = `${value.substring(0, index)}${replacer(value.substring(start, end))}${value.substring(end + 1)}`;
        }
    }
    function removeExtensions(type, isSized) {
        return (value) => {
            for (let i = 0, count = BOUNDED.length; i < count; i++) {
                const tag = BOUNDED[i];
                value = replaceTagWith(value, `${type}${tag}<`, (v) => {
                    const parts = v
                        .split(',')
                        .map((s) => s.trim())
                        .filter((s) => s);
                    if (isSized) {
                        parts.pop();
                    }
                    return `${tag}<${parts.join(',')}>`;
                });
            }
            return value;
        };
    }
    function removeColons() {
        return (value) => {
            let index = 0;
            while (index !== -1) {
                index = value.indexOf('::');
                if (index === 0) {
                    value = value.substring(2);
                }
                else if (index !== -1) {
                    let start = index;
                    while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
                        start--;
                    }
                    value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
                }
            }
            return value;
        };
    }
    function removeGenerics() {
        return (value) => {
            for (let i = 0, count = value.length; i < count; i++) {
                if (value[i] === '<') {
                    // check against the allowed wrappers, be it Vec<..>, Option<...> ...
                    const box = ALLOWED_BOXES.find((box) => {
                        const start = i - box.length;
                        return ((start >= 0 &&
                            value.substring(start, i) === box) && (
                        // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
                        start === 0 ||
                            BOX_PRECEDING.includes(value[start - 1])));
                    });
                    // we have not found anything, unwrap generic innards
                    if (!box) {
                        const end = findClosing(value, i + 1);
                        value = `${value.substring(0, i)}${value.substring(end + 1)}`;
                    }
                }
            }
            return value;
        };
    }
    function removePairOf() {
        const replacer = (v) => `(${v},${v})`;
        return (value) => replaceTagWith(value, 'PairOf<', replacer);
    }
    function removeTraits() {
        const from1 = /\s/g;
        const from2 = /(T|Self)::/g;
        const from3 = /<(T|Self)asTrait>::/g;
        const from4 = /<Tas[a-z]+::Trait>::/g;
        const from5 = /<LookupasStaticLookup>/g;
        const from6 = /::Type/g;
        return (value) => {
            from1.lastIndex = 0;
            from2.lastIndex = 0;
            from3.lastIndex = 0;
            from4.lastIndex = 0;
            from5.lastIndex = 0;
            from6.lastIndex = 0;
            return value
                // remove all whitespaces
                .replace(from1, '')
                // anything `T::<type>` to end up as `<type>`
                .replace(from2, '')
                // replace `<T as Trait>::` (whitespaces were removed above)
                .replace(from3, '')
                // replace `<T as something::Trait>::` (whitespaces were removed above)
                .replace(from4, '')
                // replace <Lookup as StaticLookup>
                .replace(from5, 'Lookup')
                // replace `<...>::Type`
                .replace(from6, '');
        };
    }
    function removeWrap(check) {
        const replacer = (v) => v;
        return (value) => replaceTagWith(value, check, replacer);
    }
    const sanitizeMap = new Map();
    function sanitize(value) {
        const startValue = value.toString();
        const memoized = sanitizeMap.get(startValue);
        if (memoized) {
            return memoized;
        }
        let result = startValue;
        for (let i = 0, count = mappings.length; i < count; i++) {
            result = mappings[i](result);
        }
        sanitizeMap.set(startValue, result);
        return result;
    }

    /** @internal **/
    function isArrayLike(arg) {
        return arg instanceof Uint8Array || Array.isArray(arg);
    }
    /** @internal **/
    function isEnum(arg) {
        return isCodec(arg) && isNumber(arg.index) && isCodec(arg.value);
    }
    /** @internal */
    function isNumberLike(arg) {
        return isNumber(arg) || isBn(arg) || isBigInt(arg);
    }
    /** @internal */
    function sortArray(a, b) {
        // Vec, Tuple, Bytes etc.
        let sortRes = 0;
        const minLen = Math.min(a.length, b.length);
        for (let i = 0; i < minLen; ++i) {
            sortRes = sortAsc(a[i], b[i]);
            if (sortRes !== 0) {
                return sortRes;
            }
        }
        return a.length - b.length;
    }
    /**
    * Sort keys/values of BTreeSet/BTreeMap in ascending order for encoding compatibility with Rust's BTreeSet/BTreeMap
    * (https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html)
    * (https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html)
    */
    function sortAsc(a, b) {
        if (isNumberLike(a) && isNumberLike(b)) {
            return bnToBn(a).cmp(bnToBn(b));
        }
        else if (a instanceof Map && b instanceof Map) {
            return sortAsc(Array.from(a.values()), Array.from(b.values()));
        }
        else if (isEnum(a) && isEnum(b)) {
            return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
        }
        else if (isArrayLike(a) && isArrayLike(b)) {
            return sortArray(a, b);
        }
        else if (isCodec(a) && isCodec(b)) {
            // Text, Bool etc.
            return sortAsc(a.toU8a(true), b.toU8a(true));
        }
        throw new Error(`Attempting to sort unrecognized values: ${stringify(a)} (typeof ${typeof a}) <-> ${stringify(b)} (typeof ${typeof b})`);
    }
    function sortSet(set) {
        return new Set(Array.from(set).sort(sortAsc));
    }
    function sortMap(map) {
        return new Map(Array.from(map.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
    }

    /**
     * @internal
     * From a type string or class, return the associated type class
     */
    function typeToConstructor(registry, type) {
        return typeof type === 'function'
            ? type
            : registry.createClassUnsafe(type);
    }
    /**
     * @internal
     * Takes an input array of types and returns the associated classes for it
    */
    function typesToConstructors(registry, types) {
        const count = types.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = typeToConstructor(registry, types[i]);
        }
        return result;
    }
    /**
     * @internal
     * Takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`
     */
    function mapToTypeMap(registry, input) {
        const entries = Object.entries(input);
        const count = entries.length;
        const output = [new Array(count), new Array(count)];
        for (let i = 0; i < count; i++) {
            output[1][i] = entries[i][0];
            output[0][i] = typeToConstructor(registry, entries[i][1]);
        }
        return output;
    }

    function typesToMap(registry, [Types, keys]) {
        const result = {};
        for (let i = 0, count = keys.length; i < count; i++) {
            result[keys[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
        }
        return result;
    }

    function decodeCompact(registry, Type, value) {
        if (isU8a(value)) {
            const [decodedLength, bn] = (value[0] & 0b11) < 0b11
                ? compactFromU8aLim(value)
                : compactFromU8a(value);
            return [new Type(registry, bn), decodedLength];
        }
        else if (value instanceof Compact) {
            const raw = value.unwrap();
            return raw instanceof Type
                ? [raw, 0]
                : [new Type(registry, raw), 0];
        }
        else if (value instanceof Type) {
            return [value, 0];
        }
        return [new Type(registry, value), 0];
    }
    /**
     * @name Compact
     * @description
     * A compact length-encoding codec wrapper. It performs the same function as Length, however
     * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
     * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
     * a number and making the compact representation thereof
     */
    class Compact {
        constructor(registry, Type, value = 0, { definition, setDefinition = identity$2 } = {}) {
            this.registry = registry;
            this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type));
            const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);
            this.initialU8aLength = decodedLength;
            this.__internal__raw = raw;
        }
        static with(Type) {
            let definition;
            // eslint-disable-next-line no-return-assign
            const setDefinition = (d) => (definition = d);
            return class extends Compact {
                constructor(registry, value) {
                    super(registry, Type, value, { definition, setDefinition });
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.__internal__raw.isEmpty;
        }
        /**
         * @description Returns the number of bits in the value
         */
        bitLength() {
            return this.__internal__raw.bitLength();
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return this.__internal__raw.eq(other instanceof Compact
                ? other.__internal__raw
                : other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                outer: [this.toU8a()]
            };
        }
        /**
         * @description Returns a BigInt representation of the number
         */
        toBigInt() {
            return this.__internal__raw.toBigInt();
        }
        /**
         * @description Returns the BN representation of the number
         */
        toBn() {
            return this.__internal__raw.toBn();
        }
        /**
         * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
         */
        toHex(isLe) {
            return this.__internal__raw.toHex(isLe);
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return this.__internal__raw.toHuman(isExtended);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.__internal__raw.toJSON();
        }
        /**
         * @description Returns the number representation for the value
         */
        toNumber() {
            return this.__internal__raw.toNumber();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.__internal__raw.toPrimitive();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.__internal__raw.toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         */
        toU8a(_isBare) {
            return compactToU8a(this.__internal__raw.toBn());
        }
        /**
         * @description Returns the embedded [[UInt]] or [[Moment]] value
         */
        unwrap() {
            return this.__internal__raw;
        }
    }

    /**
     * @name DoNotConstruct
     * @description
     * An unknown type that fails on construction with the type info
     */
    class DoNotConstruct {
        constructor(registry, typeName = 'DoNotConstruct') {
            this.registry = registry;
            this.__internal__neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
            throw this.__internal__neverError;
        }
        static with(typeName) {
            return class extends DoNotConstruct {
                constructor(registry) {
                    super(registry, typeName);
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            throw this.__internal__neverError;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            throw this.__internal__neverError;
        }
        /**
         * @description Checks if the value is an empty value (always true)
         */
        get isEmpty() {
            throw this.__internal__neverError;
        }
        /**
         * @description Unimplemented
         */
        eq() {
            throw this.__internal__neverError;
        }
        /**
         * @description Unimplemented
         */
        inspect() {
            throw this.__internal__neverError;
        }
        /**
         * @description Unimplemented
         */
        toHex() {
            throw this.__internal__neverError;
        }
        /**
         * @description Unimplemented
         */
        toHuman() {
            throw this.__internal__neverError;
        }
        /**
         * @description Unimplemented
         */
        toJSON() {
            throw this.__internal__neverError;
        }
        /**
         * @description Unimplemented
         */
        toPrimitive() {
            throw this.__internal__neverError;
        }
        /**
         * @description Unimplemented
         */
        toRawType() {
            throw this.__internal__neverError;
        }
        /**
         * @description Unimplemented
         */
        toString() {
            throw this.__internal__neverError;
        }
        /**
         * @description Unimplemented
         */
        toU8a() {
            throw this.__internal__neverError;
        }
    }

    /**
     * @name Null
     * @description
     * Implements a type that does not contain anything (apart from `null`)
     */
    class Null {
        constructor(registry) {
            this.encodedLength = 0;
            this.isEmpty = true;
            this.initialU8aLength = 0;
            this.registry = registry;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            throw new Error('.hash is not implemented on Null');
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return other instanceof Null || isNull(other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {};
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return '0x';
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return null;
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return null;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Null';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return '';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         */
        toU8a(_isBare) {
            return new Uint8Array();
        }
    }

    function isRustEnum$1(def) {
        const defValues = Object.values(def);
        if (defValues.some((v) => isNumber(v))) {
            if (!defValues.every((v) => isNumber(v) && v >= 0 && v <= 255)) {
                throw new Error('Invalid number-indexed enum definition');
            }
            return false;
        }
        return true;
    }
    function extractDef(registry, _def) {
        const def = {};
        let isBasic;
        let isIndexed;
        if (Array.isArray(_def)) {
            for (let i = 0, count = _def.length; i < count; i++) {
                def[_def[i]] = { Type: Null, index: i };
            }
            isBasic = true;
            isIndexed = false;
        }
        else if (isRustEnum$1(_def)) {
            const [Types, keys] = mapToTypeMap(registry, _def);
            for (let i = 0, count = keys.length; i < count; i++) {
                def[keys[i]] = { Type: Types[i], index: i };
            }
            isBasic = !Object.values(def).some(({ Type }) => Type !== Null);
            isIndexed = false;
        }
        else {
            const entries = Object.entries(_def);
            for (let i = 0, count = entries.length; i < count; i++) {
                const [key, index] = entries[i];
                def[key] = { Type: Null, index };
            }
            isBasic = true;
            isIndexed = true;
        }
        return {
            def,
            isBasic,
            isIndexed
        };
    }
    function getEntryType(def, checkIdx) {
        const values = Object.values(def);
        for (let i = 0, count = values.length; i < count; i++) {
            const { Type, index } = values[i];
            if (index === checkIdx) {
                return Type;
            }
        }
        throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(', ')}`);
    }
    function createFromU8a(registry, def, index, value) {
        const Type = getEntryType(def, index);
        return {
            index,
            value: new Type(registry, value)
        };
    }
    function createFromValue(registry, def, index = 0, value) {
        const Type = getEntryType(def, index);
        return {
            index,
            value: value instanceof Type
                ? value
                : new Type(registry, value)
        };
    }
    function decodeFromJSON(registry, def, key, value) {
        // JSON comes in the form of { "<type (camelCase)>": "<value for type>" }, here we
        // additionally force to lower to ensure forward compat
        const keys = Object.keys(def).map((k) => k.toLowerCase());
        const keyLower = key.toLowerCase();
        const index = keys.indexOf(keyLower);
        if (index === -1) {
            throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);
        }
        try {
            return createFromValue(registry, def, Object.values(def)[index].index, value);
        }
        catch (error) {
            throw new Error(`Enum(${key}):: ${error.message}`);
        }
    }
    function decodeEnum(registry, def, value, index) {
        // NOTE We check the index path first, before looking at values - this allows treating
        // the optional indexes before anything else, more-specific > less-specific
        if (isNumber(index)) {
            return createFromValue(registry, def, index, value);
        }
        else if (isU8a(value) || isHex(value)) {
            const u8a = u8aToU8a(value);
            // nested, we don't want to match isObject below
            if (u8a.length) {
                return createFromU8a(registry, def, u8a[0], u8a.subarray(1));
            }
        }
        else if (value instanceof Enum) {
            return createFromValue(registry, def, value.index, value.value);
        }
        else if (isNumber(value)) {
            return createFromValue(registry, def, value);
        }
        else if (isString(value)) {
            return decodeFromJSON(registry, def, value.toString());
        }
        else if (isObject$1(value)) {
            const key = Object.keys(value)[0];
            return decodeFromJSON(registry, def, key, value[key]);
        }
        // Worst-case scenario, return the first with default
        return createFromValue(registry, def, Object.values(def)[0].index);
    }
    /**
     * @name Enum
     * @description
     * This implements an enum, that based on the value wraps a different type. It is effectively
     * an extension to enum where the value type is determined by the actual index.
     */
    class Enum {
        constructor(registry, Types, value, index, { definition, setDefinition = identity$2 } = {}) {
            const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
            // shortcut isU8a as used in SCALE decoding
            const decoded = isU8a(value) && value.length && !isNumber(index)
                ? createFromU8a(registry, def, value[0], value.subarray(1))
                : decodeEnum(registry, def, value, index);
            this.registry = registry;
            this.__internal__def = def;
            this.__internal__isBasic = isBasic;
            this.__internal__isIndexed = isIndexed;
            this.__internal__indexes = Object.values(def).map(({ index }) => index);
            this.__internal__entryIndex = this.__internal__indexes.indexOf(decoded.index);
            this.__internal__raw = decoded.value;
            if (this.__internal__raw.initialU8aLength) {
                this.initialU8aLength = 1 + this.__internal__raw.initialU8aLength;
            }
        }
        static with(Types) {
            var _a;
            let definition;
            // eslint-disable-next-line no-return-assign
            const setDefinition = (d) => definition = d;
            return _a = class extends Enum {
                    constructor(registry, value, index) {
                        super(registry, Types, value, index, { definition, setDefinition });
                    }
                },
                (() => {
                    const keys = Array.isArray(Types)
                        ? Types
                        : Object.keys(Types);
                    const count = keys.length;
                    const asKeys = new Array(count);
                    const isKeys = new Array(count);
                    for (let i = 0; i < count; i++) {
                        const name = stringPascalCase(keys[i]);
                        asKeys[i] = `as${name}`;
                        isKeys[i] = `is${name}`;
                    }
                    objectProperties(_a.prototype, isKeys, (_, i, self) => self.type === keys[i]);
                    objectProperties(_a.prototype, asKeys, (k, i, self) => {
                        if (self.type !== keys[i]) {
                            throw new Error(`Cannot convert '${self.type}' via ${k}`);
                        }
                        return self.value;
                    });
                })(),
                _a;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return 1 + this.__internal__raw.encodedLength;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description The index of the enum value
         */
        get index() {
            return this.__internal__indexes[this.__internal__entryIndex];
        }
        /**
         * @description The value of the enum
         */
        get inner() {
            return this.__internal__raw;
        }
        /**
         * @description true if this is a basic enum (no values)
         */
        get isBasic() {
            return this.__internal__isBasic;
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.__internal__raw.isEmpty;
        }
        /**
         * @description Checks if the Enum points to a [[Null]] type
         */
        get isNone() {
            return this.__internal__raw instanceof Null;
        }
        /**
         * @description The available keys for this enum
         */
        get defIndexes() {
            return this.__internal__indexes;
        }
        /**
         * @description The available keys for this enum
         */
        get defKeys() {
            return Object.keys(this.__internal__def);
        }
        /**
         * @description The name of the type this enum value represents
         */
        get type() {
            return this.defKeys[this.__internal__entryIndex];
        }
        /**
         * @description The value of the enum
         */
        get value() {
            return this.__internal__raw;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            // cater for the case where we only pass the enum index
            if (isU8a(other)) {
                return !this.toU8a().some((entry, index) => entry !== other[index]);
            }
            else if (isNumber(other)) {
                return this.toNumber() === other;
            }
            else if (this.__internal__isBasic && isString(other)) {
                return this.type === other;
            }
            else if (isHex(other)) {
                return this.toHex() === other;
            }
            else if (other instanceof Enum) {
                return this.index === other.index && this.value.eq(other.value);
            }
            else if (isObject$1(other)) {
                return this.value.eq(other[this.type]);
            }
            // compare the actual wrapper value
            return this.value.eq(other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            if (this.__internal__isBasic) {
                return { outer: [new Uint8Array([this.index])] };
            }
            const { inner, outer = [] } = this.__internal__raw.inspect();
            return {
                inner,
                outer: [new Uint8Array([this.index]), ...outer]
            };
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return this.__internal__isBasic || this.isNone
                ? this.type
                : { [this.type]: this.__internal__raw.toHuman(isExtended) };
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.__internal__isBasic
                ? this.type
                : { [stringCamelCase(this.type)]: this.__internal__raw.toJSON() };
        }
        /**
         * @description Returns the number representation for the value
         */
        toNumber() {
            return this.index;
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.__internal__isBasic
                ? this.type
                : { [stringCamelCase(this.type)]: this.__internal__raw.toPrimitive() };
        }
        /**
         * @description Returns a raw struct representation of the enum types
         */
        _toRawStruct() {
            if (this.__internal__isBasic) {
                return this.__internal__isIndexed
                    ? this.defKeys.reduce((out, key, index) => {
                        out[key] = this.__internal__indexes[index];
                        return out;
                    }, {})
                    : this.defKeys;
            }
            const entries = Object.entries(this.__internal__def);
            return typesToMap(this.registry, entries.reduce((out, [key, { Type }], i) => {
                out[0][i] = Type;
                out[1][i] = key;
                return out;
            }, [new Array(entries.length), new Array(entries.length)]));
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return stringify({ _enum: this._toRawStruct() });
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.isNone
                ? this.type
                : stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return isBare
                ? this.__internal__raw.toU8a(isBare)
                : u8aConcatStrict([
                    new Uint8Array([this.index]),
                    this.__internal__raw.toU8a(isBare)
                ]);
        }
    }

    /**
     * @name Int
     * @description
     * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
     * this handles the encoding and decoding of those numbers. Upon construction
     * the bitLength is provided and any additional use keeps the number to this
     * length. This extends `BN`, so all methods available on a normal `BN` object
     * is available here.
     * @noInheritDoc
     */
    class Int extends AbstractInt {
        constructor(registry, value = 0, bitLength) {
            super(registry, value, bitLength, true);
        }
        static with(bitLength, typeName) {
            return class extends Int {
                constructor(registry, value) {
                    super(registry, value, bitLength);
                }
                toRawType() {
                    return typeName || super.toRawType();
                }
            };
        }
    }

    class None extends Null {
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'None';
        }
    }
    /** @internal */
    function decodeOption(registry, Type, value) {
        if (value instanceof Type) {
            // don't re-create, use as it (which also caters for derived types)
            return value;
        }
        else if (value instanceof Option) {
            if (value.value instanceof Type) {
                // same instance, return it
                return value.value;
            }
            else if (value.isNone) {
                // internal is None, we are also none
                return new None(registry);
            }
            // convert the actual value into known
            return new Type(registry, value.value);
        }
        else if (isNull(value) || isUndefined(value) || value === '0x' || value instanceof None) {
            // anyhting empty we pass as-is
            return new None(registry);
        }
        else if (isU8a(value)) {
            // the isU8a check happens last in the if-tree - since the wrapped value
            // may be an instance of it, so Type and Option checks go in first
            return !value.length || value[0] === 0
                ? new None(registry)
                : new Type(registry, value.subarray(1));
        }
        return new Type(registry, value);
    }
    /**
     * @name Option
     * @description
     * An Option is an optional field. Basically the first byte indicates that there is
     * is value to follow. If the byte is `1` there is an actual value. So the Option
     * implements that - decodes, checks for optionality and wraps the required structure
     * with a value if/as required/found.
     */
    class Option {
        constructor(registry, typeName, value, { definition, setDefinition = identity$2 } = {}) {
            const Type = definition || setDefinition(typeToConstructor(registry, typeName));
            const decoded = isU8a(value) && value.length && !isCodec(value)
                ? value[0] === 0
                    ? new None(registry)
                    : new Type(registry, value.subarray(1))
                : decodeOption(registry, Type, value);
            this.registry = registry;
            this.__internal__Type = Type;
            this.__internal__raw = decoded;
            if (decoded?.initialU8aLength) {
                this.initialU8aLength = 1 + decoded.initialU8aLength;
            }
        }
        static with(Type) {
            let definition;
            const setDefinition = (d) => {
                definition = d;
                return d;
            };
            return class extends Option {
                constructor(registry, value) {
                    super(registry, Type, value, { definition, setDefinition });
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            // boolean byte (has value, doesn't have) along with wrapped length
            return 1 + this.__internal__raw.encodedLength;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the Option has no value
         */
        get isEmpty() {
            return this.isNone;
        }
        /**
         * @description Checks if the Option has no value
         */
        get isNone() {
            return this.__internal__raw instanceof None;
        }
        /**
         * @description Checks if the Option has a value
         */
        get isSome() {
            return !this.isNone;
        }
        /**
         * @description The actual value for the Option
         */
        get value() {
            return this.__internal__raw;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            if (other instanceof Option) {
                return (this.isSome === other.isSome) && this.value.eq(other.value);
            }
            return this.value.eq(other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            if (this.isNone) {
                return { outer: [new Uint8Array([0])] };
            }
            const { inner, outer = [] } = this.__internal__raw.inspect();
            return {
                inner,
                outer: [new Uint8Array([1]), ...outer]
            };
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            // This attempts to align with the JSON encoding - actually in this case
            // the isSome value is correct, however the `isNone` may be problematic
            return this.isNone
                ? '0x'
                : u8aToHex(this.toU8a().subarray(1));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return this.__internal__raw.toHuman(isExtended);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.isNone
                ? null
                : this.__internal__raw.toJSON();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.isNone
                ? null
                : this.__internal__raw.toPrimitive();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType(isBare) {
            const wrapped = this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType();
            return isBare
                ? wrapped
                : `Option<${wrapped}>`;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.__internal__raw.toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            if (isBare) {
                return this.__internal__raw.toU8a(true);
            }
            const u8a = new Uint8Array(this.encodedLength);
            if (this.isSome) {
                u8a.set([1]);
                u8a.set(this.__internal__raw.toU8a(), 1);
            }
            return u8a;
        }
        /**
         * @description Returns the value that the Option represents (if available), throws if null
         */
        unwrap() {
            if (this.isNone) {
                throw new Error('Option: unwrapping a None value');
            }
            return this.__internal__raw;
        }
        /**
         * @description Returns the value that the Option represents (if available) or defaultValue if none
         * @param defaultValue The value to return if the option isNone
         */
        unwrapOr(defaultValue) {
            return this.isSome
                ? this.unwrap()
                : defaultValue;
        }
        /**
         * @description Returns the value that the Option represents (if available) or defaultValue if none
         * @param defaultValue The value to return if the option isNone
         */
        unwrapOrDefault() {
            return this.isSome
                ? this.unwrap()
                : new this.__internal__Type(this.registry);
        }
    }

    /**
     * @name Result
     * @description
     * A Result maps to the Rust Result type, that can either wrap a success or error value
     */
    class Result extends Enum {
        constructor(registry, Ok, Err, value) {
            // NOTE This is order-dependent, Ok (with index 0) needs to be first
            // eslint-disable-next-line sort-keys
            super(registry, { Ok, Err }, value);
        }
        static with(Types) {
            return class extends Result {
                constructor(registry, value) {
                    super(registry, Types.Ok, Types.Err, value);
                }
            };
        }
        /**
         * @description Returns the wrapper Err value (if isErr)
         */
        get asErr() {
            if (!this.isErr) {
                throw new Error('Cannot extract Err value from Ok result, check isErr first');
            }
            return this.value;
        }
        /**
         * @description Returns the wrapper Ok value (if isOk)
         */
        get asOk() {
            if (!this.isOk) {
                throw new Error('Cannot extract Ok value from Err result, check isOk first');
            }
            return this.value;
        }
        /**
         * @description Checks if the Result has no value
         */
        get isEmpty() {
            return this.isOk && this.value.isEmpty;
        }
        /**
         * @description Checks if the Result wraps an Err value
         */
        get isErr() {
            return !this.isOk;
        }
        /**
         * @description Checks if the Result wraps an Ok value
         */
        get isOk() {
            return this.index === 0;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            const Types = this._toRawStruct();
            return `Result<${Types.Ok},${Types.Err}>`;
        }
    }

    /** @internal */
    function decodeTuple(registry, result, value, Classes) {
        if (Array.isArray(value)) {
            const Types = Classes[0];
            for (let i = 0, count = Types.length; i < count; i++) {
                try {
                    const entry = value?.[i];
                    result[i] = entry instanceof Types[i]
                        ? entry
                        : new Types[i](registry, entry);
                }
                catch (error) {
                    throw new Error(`Tuple: failed on ${i}:: ${error.message}`);
                }
            }
            return [result, 0];
        }
        else if (isHex(value)) {
            return decodeU8a$6(registry, result, u8aToU8a(value), Classes);
        }
        else if (!value || !result.length) {
            const Types = Classes[0];
            for (let i = 0, count = Types.length; i < count; i++) {
                result[i] = new Types[i](registry);
            }
            return [result, 0];
        }
        throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${stringify(value)}`);
    }
    /**
     * @name Tuple
     * @description
     * A Tuple defines an anonymous fixed-length array, where each element has its
     * own type. It extends the base JS `Array` object.
     */
    class Tuple extends AbstractArray {
        constructor(registry, Types, value, { definition, setDefinition = identity$2 } = {}) {
            const Classes = definition || setDefinition(Array.isArray(Types)
                ? [typesToConstructors(registry, Types), []]
                : isFunction$1(Types) || isString(Types)
                    ? [[typeToConstructor(registry, Types)], []]
                    : mapToTypeMap(registry, Types));
            super(registry, Classes[0].length);
            this.initialU8aLength = (isU8a(value)
                ? decodeU8a$6(registry, this, value, Classes)
                : decodeTuple(registry, this, value, Classes))[1];
            this.__internal__Types = Classes;
        }
        static with(Types) {
            let definition;
            // eslint-disable-next-line no-return-assign
            const setDefinition = (d) => definition = d;
            return class extends Tuple {
                constructor(registry, value) {
                    super(registry, Types, value, { definition, setDefinition });
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            let total = 0;
            for (let i = 0, count = this.length; i < count; i++) {
                total += this[i].encodedLength;
            }
            return total;
        }
        /**
         * @description The types definition of the tuple
         */
        get Types() {
            return this.__internal__Types[1].length
                ? this.__internal__Types[1]
                : this.__internal__Types[0].map((T) => new T(this.registry).toRawType());
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                inner: this.inspectInner()
            };
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            const types = this.__internal__Types[0].map((T) => this.registry.getClassName(T) || new T(this.registry).toRawType());
            return `(${types.join(',')})`;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            // Overwrite the default toString representation of Array.
            return stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return u8aConcatStrict(this.toU8aInner(isBare));
        }
    }

    /**
     * @name UInt
     * @description
     * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
     * this handles the encoding and decoding of those numbers. Upon construction
     * the bitLength is provided and any additional use keeps the number to this
     * length. This extends `BN`, so all methods available on a normal `BN` object
     * is available here.
     * @noInheritDoc
     */
    class UInt extends AbstractInt {
        static with(bitLength, typeName) {
            return class extends UInt {
                constructor(registry, value) {
                    super(registry, value, bitLength);
                }
                toRawType() {
                    return typeName || super.toRawType();
                }
            };
        }
    }

    const MAX_LENGTH$2 = 64 * 1024;
    const l$9 = logger('Vec');
    function decodeVecLength(value) {
        if (Array.isArray(value)) {
            return [value, value.length, 0];
        }
        else if (isU8a(value) || isHex(value)) {
            const u8a = u8aToU8a(value);
            const [startAt, length] = compactFromU8aLim(u8a);
            if (length > MAX_LENGTH$2) {
                throw new Error(`Vec length ${length.toString()} exceeds ${MAX_LENGTH$2}`);
            }
            return [u8a, length, startAt];
        }
        else if (!value) {
            return [null, 0, 0];
        }
        throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${stringify(value)}`);
    }
    function decodeVec(registry, result, value, startAt, Type) {
        if (Array.isArray(value)) {
            const count = result.length;
            for (let i = 0; i < count; i++) {
                // 26/08/2022 this is actually a false positive - after recent eslint upgdates
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                const entry = value[i];
                try {
                    result[i] = entry instanceof Type
                        ? entry
                        : new Type(registry, entry);
                }
                catch (error) {
                    l$9.error(`Unable to decode on index ${i}`, error.message);
                    throw error;
                }
            }
            return [0, 0];
        }
        else if (!value) {
            return [0, 0];
        }
        // we don't need more checks, we already limited it via the length decoding
        return decodeU8aVec(registry, result, u8aToU8a(value), startAt, Type);
    }
    /**
     * @name Vec
     * @description
     * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
     * construction with the passed `Type` in the constructor. It is an extension to Array, providing
     * specific encoding/decoding on top of the base type.
     */
    class Vec extends AbstractArray {
        constructor(registry, Type, value = [], { definition, setDefinition = identity$2 } = {}) {
            const [decodeFrom, length, startAt] = decodeVecLength(value);
            super(registry, length);
            this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type));
            this.initialU8aLength = (isU8a(decodeFrom)
                ? decodeU8aVec(registry, this, decodeFrom, startAt, this.__internal__Type)
                : decodeVec(registry, this, decodeFrom, startAt, this.__internal__Type))[0];
        }
        static with(Type) {
            let definition;
            // eslint-disable-next-line no-return-assign
            const setDefinition = (d) => (definition = d);
            return class extends Vec {
                constructor(registry, value) {
                    super(registry, Type, value, { definition, setDefinition });
                }
            };
        }
        /**
         * @description The type for the items
         */
        get Type() {
            return this.__internal__Type.name;
        }
        /**
         * @description Finds the index of the value in the array
         */
        indexOf(other) {
            // convert type first, this removes overhead from the eq
            const check = other instanceof this.__internal__Type
                ? other
                : new this.__internal__Type(this.registry, other);
            for (let i = 0, count = this.length; i < count; i++) {
                if (check.eq(this[i])) {
                    return i;
                }
            }
            return -1;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `Vec<${this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType()}>`;
        }
    }

    /**
     * @name VecFixed
     * @description
     * This manages codec arrays of a fixed length
     */
    class VecFixed extends AbstractArray {
        constructor(registry, Type, length, value = [], { definition, setDefinition = identity$2 } = {}) {
            super(registry, length);
            this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type));
            this.initialU8aLength = (isU8a(value)
                ? decodeU8aVec(registry, this, value, 0, this.__internal__Type)
                : decodeVec(registry, this, value, 0, this.__internal__Type))[1];
        }
        static with(Type, length) {
            let definition;
            // eslint-disable-next-line no-return-assign
            const setDefinition = (d) => (definition = d);
            return class extends VecFixed {
                constructor(registry, value) {
                    super(registry, Type, length, value, { definition, setDefinition });
                }
            };
        }
        /**
         * @description The type for the items
         */
        get Type() {
            return new this.__internal__Type(this.registry).toRawType();
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            let total = 0;
            for (let i = 0, count = this.length; i < count; i++) {
                total += this[i].encodedLength;
            }
            return total;
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                inner: this.inspectInner()
            };
        }
        toU8a() {
            // we override, we don't add the length prefix for ourselves, and at the same time we
            // ignore isBare on entries, since they should be properly encoded at all times
            const encoded = this.toU8aInner();
            return encoded.length
                ? u8aConcatStrict(encoded)
                : new Uint8Array([]);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `[${this.Type};${this.length}]`;
        }
    }

    /**
     * @name Raw
     * @description
     * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
     * from other implementations where it will consume the full Uint8Array as passed to it.
     * As such it is meant to be subclassed where the wrapper takes care of the
     * actual lengths instead of used directly.
     * @noInheritDoc
     */
    class Raw extends Uint8Array {
        /**
         * @description This ensures that operators such as clice, filter, map, etc. return
         * new Array instances (without this we need to apply overrides)
         */
        static get [Symbol.species]() {
            return Uint8Array;
        }
        constructor(registry, value, initialU8aLength) {
            super(u8aToU8a(value));
            this.registry = registry;
            this.initialU8aLength = initialU8aLength;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.length;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Returns true if the wrapped value contains only ASCII printable characters
         */
        get isAscii() {
            return isAscii(this);
        }
        /**
         * @description Returns true if the type wraps an empty/default all-0 value
         */
        get isEmpty() {
            return !this.length || isUndefined(this.find((b) => !!b));
        }
        /**
         * @description Returns true if the wrapped value contains only utf8 characters
         */
        get isUtf8() {
            return isUtf8(this);
        }
        /**
         * @description Returns the number of bits in the value
         */
        bitLength() {
            return this.length * 8;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            if (other instanceof Uint8Array) {
                return (this.length === other.length) &&
                    !this.some((b, index) => b !== other[index]);
            }
            return this.eq(u8aToU8a(other));
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                outer: [this.toU8a()]
            };
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return u8aToHex(this);
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toPrimitive();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toHex();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            if (this.isAscii) {
                const text = this.toUtf8();
                // ensure we didn't end up with multibyte codepoints
                if (isAscii(text)) {
                    return text;
                }
            }
            return this.toJSON();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Raw';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.toHex();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         */
        toU8a(_isBare) {
            return Uint8Array.from(this);
        }
        /**
         * @description Returns the wrapped data as a UTF-8 string
         */
        toUtf8() {
            if (!this.isUtf8) {
                throw new Error('The character sequence is not a valid Utf8 string');
            }
            return u8aToString(this);
        }
    }

    /** @internal */
    function decodeBitVecU8a(value) {
        if (!value?.length) {
            return [0, new Uint8Array()];
        }
        // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded
        const [offset, length] = compactFromU8aLim(value);
        const total = offset + Math.ceil(length / 8);
        if (total > value.length) {
            throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
        }
        return [length, value.subarray(offset, total)];
    }
    /** @internal */
    function decodeBitVec(value) {
        if (Array.isArray(value) || isString(value)) {
            const u8a = u8aToU8a(value);
            return [u8a.length / 8, u8a];
        }
        return decodeBitVecU8a(value);
    }
    /**
     * @name BitVec
     * @description
     * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
     * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
     */
    class BitVec extends Raw {
        // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
        // we are dealing with Lsb, which is the default (as of writing) BitVec format used
        // in the Polkadot code (this only affects the toHuman displays)
        constructor(registry, value, isMsb = false) {
            const [decodedLength, u8a] = decodeBitVec(value);
            super(registry, u8a);
            this.__internal__decodedLength = decodedLength;
            this.__internal__isMsb = isMsb;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.length + compactToU8a(this.__internal__decodedLength).length;
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                outer: [compactToU8a(this.__internal__decodedLength), super.toU8a()]
            };
        }
        /**
         * @description Creates a boolean array of the bit values
         */
        toBoolArray() {
            const map = [...this.toU8a(true)].map((v) => [
                !!(v & 128),
                !!(v & 64),
                !!(v & 32),
                !!(v & 16),
                !!(v & 8),
                !!(v & 4),
                !!(v & 2),
                !!(v & 1)
            ]);
            const count = map.length;
            const result = new Array(8 * count);
            for (let i = 0; i < count; i++) {
                const off = i * 8;
                const v = map[i];
                for (let j = 0; j < 8; j++) {
                    result[off + j] = this.__internal__isMsb
                        ? v[j]
                        : v[7 - j];
                }
            }
            return result;
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return `0b${[...this.toU8a(true)]
            .map((d) => `00000000${d.toString(2)}`.slice(-8))
            .map((s) => this.__internal__isMsb ? s : s.split('').reverse().join(''))
            .join('_')}`;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'BitVec';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const bitVec = super.toU8a(isBare);
            return isBare
                ? bitVec
                : u8aConcatStrict([compactToU8a(this.__internal__decodedLength), bitVec]);
        }
    }

    function noopSetDefinition(d) {
        return d;
    }
    /** @internal */
    function decodeStructFromObject(registry, [Types, keys], value, jsonMap) {
        let jsonObj;
        const typeofArray = Array.isArray(value);
        const typeofMap = value instanceof Map;
        const count = keys.length;
        if (!typeofArray && !typeofMap && !isObject$1(value)) {
            throw new Error(`Struct: Cannot decode value ${stringify(value)} (typeof ${typeof value}), expected an input object, map or array`);
        }
        else if (typeofArray && value.length !== count) {
            throw new Error(`Struct: Unable to map ${stringify(value)} array to object with known keys ${keys.join(', ')}`);
        }
        const raw = new Array(count);
        for (let i = 0; i < count; i++) {
            const key = keys[i];
            const jsonKey = jsonMap.get(key) || key;
            const Type = Types[i];
            let assign;
            try {
                if (typeofArray) {
                    assign = value[i];
                }
                else if (typeofMap) {
                    assign = jsonKey && value.get(jsonKey);
                }
                else {
                    assign = jsonKey && value[jsonKey];
                    if (isUndefined(assign)) {
                        if (isUndefined(jsonObj)) {
                            const entries = Object.entries(value);
                            jsonObj = {};
                            for (let e = 0, ecount = entries.length; e < ecount; e++) {
                                jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
                            }
                        }
                        assign = jsonKey && jsonObj[jsonKey];
                    }
                }
                raw[i] = [
                    key,
                    assign instanceof Type
                        ? assign
                        : new Type(registry, assign)
                ];
            }
            catch (error) {
                let type = Type.name;
                try {
                    type = new Type(registry).toRawType();
                }
                catch {
                    // ignore
                }
                throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
            }
        }
        return [raw, 0];
    }
    /**
     * @name Struct
     * @description
     * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
     * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
     * values in the constructor and it manages the decoding. It is important that the constructor
     * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
     * it needs to decoded in the specific defined order.
     * @noInheritDoc
     */
    class Struct extends Map {
        constructor(registry, Types, value, jsonMap = new Map(), { definition, setDefinition = noopSetDefinition } = {}) {
            const typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
            const [decoded, decodedLength] = isU8a(value) || isHex(value)
                ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a(value), typeMap)
                : value instanceof Struct
                    ? [value, 0]
                    : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
            super(decoded);
            this.initialU8aLength = decodedLength;
            this.registry = registry;
            this.__internal__jsonMap = jsonMap;
            this.__internal__Types = typeMap;
        }
        static with(Types, jsonMap) {
            var _a;
            let definition;
            // eslint-disable-next-line no-return-assign
            const setDefinition = (d) => definition = d;
            return _a = class extends Struct {
                    constructor(registry, value) {
                        super(registry, Types, value, jsonMap, { definition, setDefinition });
                    }
                },
                (() => {
                    const keys = Object.keys(Types);
                    objectProperties(_a.prototype, keys, (k, _, self) => self.get(k));
                })(),
                _a;
        }
        /**
         * @description The available keys for this struct
         */
        get defKeys() {
            return this.__internal__Types[1];
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            for (const v of this.values()) {
                if (!v.isEmpty) {
                    return false;
                }
            }
            return true;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            let total = 0;
            for (const v of this.values()) {
                total += v.encodedLength;
            }
            return total;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Returns the Type description of the structure
         */
        get Type() {
            const result = {};
            const [Types, keys] = this.__internal__Types;
            for (let i = 0, count = keys.length; i < count; i++) {
                result[keys[i]] = new Types[i](this.registry).toRawType();
            }
            return result;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return compareMap(this, other);
        }
        /**
         * @description Returns a specific names entry in the structure
         * @param key The name of the entry to retrieve
         */
        get(key) {
            return super.get(key);
        }
        /**
         * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
         */
        getAtIndex(index) {
            return this.toArray()[index];
        }
        /**
         * @description Returns the a types value by name
         */
        getT(key) {
            return super.get(key);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect(isBare) {
            const inner = [];
            for (const [k, v] of this.entries()) {
                inner.push({
                    ...v.inspect(!isBare || isBoolean(isBare)
                        ? isBare
                        : isBare[k]),
                    name: stringCamelCase(k)
                });
            }
            return {
                inner
            };
        }
        /**
         * @description Converts the Object to an standard JavaScript Array
         */
        toArray() {
            return [...this.values()];
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            const json = {};
            for (const [k, v] of this.entries()) {
                json[k] = v.toHuman(isExtended);
            }
            return json;
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            const json = {};
            for (const [k, v] of this.entries()) {
                // Here we pull out the entry against the JSON mapping (if supplied)
                // since this representation goes over RPC and needs to be correct
                json[(this.__internal__jsonMap.get(k) || k)] = v.toJSON();
            }
            return json;
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            const json = {};
            for (const [k, v] of this.entries()) {
                json[k] = v.toPrimitive();
            }
            return json;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return stringify(typesToMap(this.registry, this.__internal__Types));
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = [];
            for (const [k, v] of this.entries()) {
                encoded.push(v.toU8a(!isBare || isBoolean(isBare)
                    ? isBare
                    : isBare[k]));
            }
            return u8aConcatStrict(encoded);
        }
    }

    const l$8 = logger('Map');
    /** @internal */
    function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
        const output = new Map();
        const [offset, count] = compactFromU8aLim(u8a);
        const types = [];
        for (let i = 0; i < count; i++) {
            types.push(KeyClass, ValClass);
        }
        const [values, decodedLength] = decodeU8a$6(registry, new Array(types.length), u8a.subarray(offset), [types, []]);
        for (let i = 0, count = values.length; i < count; i += 2) {
            output.set(values[i], values[i + 1]);
        }
        return [KeyClass, ValClass, output, offset + decodedLength];
    }
    /** @internal */
    function decodeMapFromMap(registry, KeyClass, ValClass, value) {
        const output = new Map();
        for (const [key, val] of value.entries()) {
            const isComplex = KeyClass.prototype instanceof AbstractArray ||
                KeyClass.prototype instanceof Struct ||
                KeyClass.prototype instanceof Enum;
            try {
                output.set(key instanceof KeyClass
                    ? key
                    : new KeyClass(registry, isComplex && typeof key === 'string' ? JSON.parse(key) : key), val instanceof ValClass
                    ? val
                    : new ValClass(registry, val));
            }
            catch (error) {
                l$8.error('Failed to decode key or value:', error.message);
                throw error;
            }
        }
        return [KeyClass, ValClass, output, 0];
    }
    /**
     * Decode input to pass into constructor.
     *
     * @param KeyClass - Type of the map key
     * @param ValClass - Type of the map value
     * @param value - Value to decode, one of:
     * - null
     * - undefined
     * - hex
     * - Uint8Array
     * - Map<any, any>, where both key and value types are either
     *   constructors or decodeable values for their types.
     * @param jsonMap
     * @internal
     */
    function decodeMap(registry, keyType, valType, value) {
        const KeyClass = typeToConstructor(registry, keyType);
        const ValClass = typeToConstructor(registry, valType);
        if (!value) {
            return [KeyClass, ValClass, new Map(), 0];
        }
        else if (isU8a(value) || isHex(value)) {
            return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));
        }
        else if (value instanceof Map) {
            return decodeMapFromMap(registry, KeyClass, ValClass, value);
        }
        else if (isObject$1(value)) {
            return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
        }
        throw new Error('Map: cannot decode type');
    }
    class CodecMap extends Map {
        constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
            const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
            super(type === 'BTreeMap' ? sortMap(decoded) : decoded);
            this.registry = registry;
            this.initialU8aLength = decodedLength;
            this.__internal__KeyClass = KeyClass;
            this.__internal__ValClass = ValClass;
            this.__internal__type = type;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            let len = compactToU8a(this.size).length;
            for (const [k, v] of this.entries()) {
                len += k.encodedLength + v.encodedLength;
            }
            return len;
        }
        /**
         * @description Returns a hash of the value
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.size === 0;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return compareMap(this, other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            const inner = [];
            for (const [k, v] of this.entries()) {
                inner.push(k.inspect());
                inner.push(v.inspect());
            }
            return {
                inner,
                outer: [compactToU8a(this.size)]
            };
        }
        /**
         * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            const json = {};
            for (const [k, v] of this.entries()) {
                json[k instanceof Raw && k.isAscii
                    ? k.toUtf8()
                    : k.toString()] = v.toHuman(isExtended);
            }
            return json;
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            const json = {};
            for (const [k, v] of this.entries()) {
                json[k.toString()] = v.toJSON();
            }
            return json;
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            const json = {};
            for (const [k, v] of this.entries()) {
                json[k instanceof Raw && k.isAscii
                    ? k.toUtf8()
                    : k.toString()] = v.toPrimitive();
            }
            return json;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass) || new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = [];
            if (!isBare) {
                encoded.push(compactToU8a(this.size));
            }
            for (const [k, v] of this.entries()) {
                encoded.push(k.toU8a(isBare), v.toU8a(isBare));
            }
            return u8aConcatStrict(encoded);
        }
    }

    class BTreeMap extends CodecMap {
        static with(keyType, valType) {
            return class extends BTreeMap {
                constructor(registry, value) {
                    super(registry, keyType, valType, value, 'BTreeMap');
                }
            };
        }
    }

    const l$7 = logger('BTreeSet');
    /** @internal */
    function decodeSetFromU8a(registry, ValClass, u8a) {
        const output = new Set();
        const [offset, count] = compactFromU8aLim(u8a);
        const result = new Array(count);
        const [decodedLength] = decodeU8aVec(registry, result, u8a, offset, ValClass);
        for (let i = 0; i < count; i++) {
            output.add(result[i]);
        }
        return [ValClass, output, decodedLength];
    }
    /** @internal */
    function decodeSetFromSet(registry, ValClass, value) {
        const output = new Set();
        value.forEach((val) => {
            try {
                output.add((val instanceof ValClass) ? val : new ValClass(registry, val));
            }
            catch (error) {
                l$7.error('Failed to decode key or value:', error.message);
                throw error;
            }
        });
        return [ValClass, output, 0];
    }
    /**
     * Decode input to pass into constructor.
     *
     * @param ValClass - Type of the map value
     * @param value - Value to decode, one of:
     * - null
     * - undefined
     * - hex
     * - Uint8Array
     * - Set<any>, where both key and value types are either
     *   constructors or decodeable values for their types.
     * @param jsonSet
     * @internal
     */
    function decodeSet$1(registry, valType, value) {
        const ValClass = typeToConstructor(registry, valType);
        if (!value) {
            return [ValClass, new Set(), 0];
        }
        else if (isU8a(value) || isHex(value)) {
            return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));
        }
        else if (Array.isArray(value) || value instanceof Set) {
            return decodeSetFromSet(registry, ValClass, value);
        }
        throw new Error('BTreeSet: cannot decode type');
    }
    class BTreeSet extends Set {
        constructor(registry, valType, rawValue) {
            const [ValClass, values, decodedLength] = decodeSet$1(registry, valType, rawValue);
            super(sortSet(values));
            this.registry = registry;
            this.initialU8aLength = decodedLength;
            this.__internal__ValClass = ValClass;
        }
        static with(valType) {
            return class extends BTreeSet {
                constructor(registry, value) {
                    super(registry, valType, value);
                }
            };
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            let len = compactToU8a(this.size).length;
            for (const v of this.values()) {
                len += v.encodedLength;
            }
            return len;
        }
        /**
         * @description Returns a hash of the value
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.size === 0;
        }
        /**
         * @description The actual set values as a string[]
         */
        get strings() {
            return [...super.values()].map((v) => v.toString());
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return compareSet(this, other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            const inner = [];
            for (const v of this.values()) {
                inner.push(v.inspect());
            }
            return {
                inner,
                outer: [compactToU8a(this.size)]
            };
        }
        /**
         * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            const json = [];
            for (const v of this.values()) {
                json.push(v.toHuman(isExtended));
            }
            return json;
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            const json = [];
            for (const v of this.values()) {
                json.push(v.toJSON());
            }
            return json;
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `BTreeSet<${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            const json = [];
            for (const v of this.values()) {
                json.push(v.toPrimitive());
            }
            return json;
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return stringify(this.toJSON());
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = [];
            if (!isBare) {
                encoded.push(compactToU8a(this.size));
            }
            for (const v of this.values()) {
                encoded.push(v.toU8a(isBare));
            }
            return u8aConcatStrict(encoded);
        }
    }

    const MAX_LENGTH$1 = 10 * 1024 * 1024;
    /** @internal */
    function decodeBytesU8a(value) {
        if (!value.length) {
            return [new Uint8Array(), 0];
        }
        // handle all other Uint8Array inputs, these do have a length prefix
        const [offset, length] = compactFromU8aLim(value);
        const total = offset + length;
        if (length > MAX_LENGTH$1) {
            throw new Error(`Bytes length ${length.toString()} exceeds ${MAX_LENGTH$1}`);
        }
        else if (total > value.length) {
            throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
        }
        return [value.subarray(offset, total), total];
    }
    /**
     * @name Bytes
     * @description
     * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
     * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
     * as what is found in [[Text]] and [[Vec]])
     */
    class Bytes extends Raw {
        constructor(registry, value) {
            const [u8a, decodedLength] = isU8a(value) && !(value instanceof Raw)
                ? decodeBytesU8a(value)
                : Array.isArray(value) || isString(value)
                    ? [u8aToU8a(value), 0]
                    : [value, 0];
            super(registry, u8a, decodedLength);
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.length + compactToU8a(this.length).length;
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect(isBare) {
            const clength = compactToU8a(this.length);
            return {
                outer: isBare
                    ? [super.toU8a()]
                    : this.length
                        ? [clength, super.toU8a()]
                        : [clength]
            };
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Bytes';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return isBare
                ? super.toU8a(isBare)
                : compactAddLength(this);
        }
    }

    class HashMap extends CodecMap {
        static with(keyType, valType) {
            return class extends HashMap {
                constructor(registry, value) {
                    super(registry, keyType, valType, value);
                }
            };
        }
    }

    /**
     * @name bool
     * @description
     * Representation for a boolean value in the system. It extends the base JS `Boolean` class
     * @noInheritDoc
     */
    class bool extends Boolean {
        constructor(registry, value = false) {
            super(isU8a(value)
                ? value[0] === 1
                : value instanceof Boolean
                    ? value.valueOf()
                    : !!value);
            this.initialU8aLength = 1;
            this.registry = registry;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return 1 | 0;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value (true when it wraps false/default)
         */
        get isEmpty() {
            return this.isFalse;
        }
        /**
         * @description Checks if the value is an empty value (always false)
         */
        get isFalse() {
            return !this.isTrue;
        }
        /**
         * @description Checks if the value is an empty value (always false)
         */
        get isTrue() {
            return this.valueOf();
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return this.valueOf() === (other instanceof Boolean
                ? other.valueOf()
                : other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                outer: [this.toU8a()]
            };
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.valueOf();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.toJSON();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'bool';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.toJSON().toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         */
        toU8a(_isBare) {
            return new Uint8Array([this.valueOf() ? 1 : 0]);
        }
    }

    function decodeU8a$5(registry, value) {
        // Encoded as -
        //  - 0 = None
        //  - 1 = True
        //  - 2 = False
        return value[0] === 0
            ? null
            : new bool(registry, value[0] === 1);
    }
    /**
     * @name OptionBool
     * @description A specific implementation of Option<bool> than allows for single-byte encoding
     */
    class OptionBool extends Option {
        constructor(registry, value) {
            super(registry, bool, isU8a(value) || isHex(value)
                ? decodeU8a$5(registry, u8aToU8a(value))
                : value);
            this.initialU8aLength = 1;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return 1 | 0;
        }
        /**
         * @description Checks if the value is an empty value (always false)
         */
        get isFalse() {
            return this.isSome
                ? !this.value.valueOf()
                : false;
        }
        /**
         * @description Checks if the value is an empty value (always false)
         */
        get isTrue() {
            return this.isSome
                ? this.value.valueOf()
                : false;
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return { outer: [this.toU8a()] };
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType(isBare) {
            return isBare
                ? 'bool'
                : 'Option<bool>';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            if (isBare) {
                return super.toU8a(true);
            }
            return this.isSome
                ? new Uint8Array([this.isTrue ? 1 : 2])
                : new Uint8Array([0]);
        }
    }

    /**
     * @name Range
     * @description
     * Rust `Range<T>` representation
     */
    class Range extends Tuple {
        constructor(registry, Type, value, { rangeName = 'Range' } = {}) {
            super(registry, [Type, Type], value);
            this.__internal__rangeName = rangeName;
        }
        static with(Type) {
            return class extends Range {
                constructor(registry, value) {
                    super(registry, Type, value);
                }
            };
        }
        /**
         * @description Returns the starting range value
         */
        get start() {
            return this[0];
        }
        /**
         * @description Returns the ending range value
         */
        get end() {
            return this[1];
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `${this.__internal__rangeName}<${this.start.toRawType()}>`;
        }
    }

    class RangeInclusive extends Range {
        constructor(registry, Type, value) {
            super(registry, Type, value, { rangeName: 'RangeInclusive' });
        }
        static with(Type) {
            return class extends RangeInclusive {
                constructor(registry, value) {
                    super(registry, Type, value);
                }
            };
        }
    }

    const MAX_LENGTH = 128 * 1024;
    /** @internal */
    function decodeText(value) {
        if (isU8a(value)) {
            if (!value.length) {
                return ['', 0];
            }
            // for Raw, the internal buffer does not have an internal length
            // (the same applies in e.g. Bytes, where length is added at encoding-time)
            if (value instanceof Raw) {
                return [u8aToString(value), 0];
            }
            const [offset, length] = compactFromU8aLim(value);
            const total = offset + length;
            if (length > MAX_LENGTH) {
                throw new Error(`Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);
            }
            else if (total > value.length) {
                throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
            }
            return [u8aToString(value.subarray(offset, total)), total];
        }
        else if (isHex(value)) {
            return [u8aToString(hexToU8a(value)), 0];
        }
        return [value ? value.toString() : '', 0];
    }
    /**
     * @name Text
     * @description
     * This is a string wrapper, along with the length. It is used both for strings as well
     * as items such as documentation. It simply extends the standard JS `String` built-in
     * object, inheriting all methods exposed from `String`.
     * @noInheritDoc
     */
    class Text extends String {
        constructor(registry, value) {
            const [str, decodedLength] = decodeText(value);
            super(str);
            this.__internal__override = null;
            this.registry = registry;
            this.initialU8aLength = decodedLength;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return this.length === 0;
        }
        /**
         * @description The length of the value
         */
        get length() {
            // only included here since we ignore inherited docs
            return super.length;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return isString(other)
                ? this.toString() === other.toString()
                : false;
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            const value = stringToU8a(super.toString());
            return {
                outer: value.length
                    ? [compactToU8a(value.length), value]
                    : [compactToU8a(value.length)]
            };
        }
        /**
         * @description Set an override value for this
         */
        setOverride(override) {
            this.__internal__override = override;
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            // like with Vec<u8>, when we are encoding to hex, we don't actually add
            // the length prefix (it is already implied by the actual string length)
            return u8aToHex(this.toU8a(true));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toString();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.toJSON();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Text';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.__internal__override || super.toString();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            // NOTE Here we use the super toString (we are not taking overrides into account,
            // rather encoding the original value the string was constructed with)
            const encoded = stringToU8a(super.toString());
            return isBare
                ? encoded
                : compactAddLength(encoded);
        }
    }

    /**
     * @name Type
     * @description
     * This is a extended version of Text, specifically to handle types. Here we rely fully
     * on what Text provides us, however we also adjust the types received from the runtime,
     * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
     */
    class Type extends Text {
        constructor(registry, value = '') {
            super(registry, value);
            this.setOverride(sanitize(this.toString()));
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Type';
        }
    }

    /** @internal */
    function decodeU8aFixed(value, bitLength) {
        const u8a = u8aToU8a(value);
        const byteLength = bitLength / 8;
        if (!u8a.length) {
            return [new Uint8Array(byteLength), 0];
        }
        if (isU8a(value) ? u8a.length < byteLength : u8a.length !== byteLength) {
            throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
        }
        return [u8a.subarray(0, byteLength), byteLength];
    }
    /**
     * @name U8aFixed
     * @description
     * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
     * to be used directly, rather is should be subclassed with the specific lengths.
     */
    class U8aFixed extends Raw {
        constructor(registry, value = new Uint8Array(), bitLength = 256) {
            const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
            super(registry, u8a, decodedLength);
        }
        static with(bitLength, typeName) {
            return class extends U8aFixed {
                constructor(registry, value) {
                    super(registry, value, bitLength);
                }
                toRawType() {
                    return typeName || super.toRawType();
                }
            };
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `[u8;${this.length}]`;
        }
    }

    function decodeRaw(registry, typeName, value) {
        const Type = typeToConstructor(registry, typeName);
        if (isU8a(value) || isHex(value)) {
            try {
                const [, u8a] = isHex(value)
                    ? [0, u8aToU8a(value)]
                    : (value instanceof Raw)
                        ? [0, value.subarray()]
                        : compactStripLength(value);
                return [Type, new Type(registry, u8a), value];
            }
            catch {
                return [Type, null, value];
            }
        }
        const instance = new Type(registry, value);
        return [Type, instance, compactAddLength(instance.toU8a())];
    }
    class WrapperKeepOpaque extends Bytes {
        constructor(registry, typeName, value, { opaqueName = 'WrapperKeepOpaque' } = {}) {
            const [Type, decoded, u8a] = decodeRaw(registry, typeName, value);
            super(registry, u8a);
            this.__internal__Type = Type;
            this.__internal__decoded = decoded;
            this.__internal__opaqueName = opaqueName;
        }
        static with(Type) {
            return class extends WrapperKeepOpaque {
                constructor(registry, value) {
                    super(registry, Type, value);
                }
            };
        }
        /**
         * @description Checks if the wrapper is decodable
         */
        get isDecoded() {
            return !!this.__internal__decoded;
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return this.__internal__decoded
                ? {
                    inner: [this.__internal__decoded.inspect()],
                    outer: [compactToU8a(this.length)]
                }
                : {
                    outer: [compactToU8a(this.length), this.toU8a(true)]
                };
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return this.__internal__decoded
                ? this.__internal__decoded.toHuman(isExtended)
                : super.toHuman();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.__internal__decoded
                ? this.__internal__decoded.toPrimitive()
                : super.toPrimitive();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type) || (this.__internal__decoded ? this.__internal__decoded.toRawType() : new this.__internal__Type(this.registry).toRawType())}>`;
        }
        /**
         * @description Converts the Object to to a string (either decoded or bytes)
         */
        toString() {
            return this.__internal__decoded
                ? this.__internal__decoded.toString()
                : super.toString();
        }
        /**
         * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
         */
        unwrap() {
            if (!this.__internal__decoded) {
                throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);
            }
            return this.__internal__decoded;
        }
    }

    class WrapperOpaque extends WrapperKeepOpaque {
        constructor(registry, typeName, value) {
            super(registry, typeName, value, { opaqueName: 'WrapperOpaque' });
        }
        static with(Type) {
            return class extends WrapperOpaque {
                constructor(registry, value) {
                    super(registry, Type, value);
                }
            };
        }
        /**
         * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
         */
        get inner() {
            return this.unwrap();
        }
    }

    /**
     * @name Float
     * @description
     * A Codec wrapper for F32 & F64 values. You generally don't want to be using
     * f32/f64 in your runtime, operations on fixed points numbers are preferable. This class
     * was explicitly added since scale-codec has a flag that enables this and it is available
     * in some eth_* RPCs
     */
    class Float extends Number {
        constructor(registry, value, { bitLength = 32 } = {}) {
            super(isU8a(value) || isHex(value)
                ? value.length === 0
                    ? 0
                    : u8aToFloat(u8aToU8a(value), { bitLength })
                : (value || 0));
            this.__internal__bitLength = bitLength;
            this.encodedLength = bitLength / 8;
            this.initialU8aLength = this.encodedLength;
            this.registry = registry;
        }
        static with(bitLength) {
            return class extends Float {
                constructor(registry, value) {
                    super(registry, value, { bitLength });
                }
            };
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Returns true if the type wraps an empty/default all-0 value
         */
        get isEmpty() {
            return this.valueOf() === 0;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return this.valueOf() === Number(other);
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                outer: [this.toU8a()]
            };
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toString();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            // Not sure if this is actually a hex or a string value
            // (would need to check against RPCs to see the result here)
            return this.toHex();
        }
        /**
         * @description Returns the number representation (Same as valueOf)
         */
        toNumber() {
            return this.valueOf();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.toNumber();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return `f${this.__internal__bitLength}`;
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         */
        toU8a(_isBare) {
            return floatToU8a(this, {
                bitLength: this.__internal__bitLength
            });
        }
    }

    /** @internal */
    function decodeJson(value) {
        return Object.entries(value || {});
    }
    /**
     * @name Json
     * @description
     * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
     * implements a Codec, it is limited in that it can only be used with input objects via RPC,
     * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
     * @noInheritDoc
     */
    class Json extends Map {
        constructor(registry, value) {
            const decoded = decodeJson(value);
            super(decoded);
            this.registry = registry;
            objectProperties(this, decoded.map(([k]) => k), (k) => this.get(k));
        }
        /**
         * @description Always 0, never encodes as a Uint8Array
         */
        get encodedLength() {
            return 0 | 0;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description Checks if the value is an empty value
         */
        get isEmpty() {
            return [...this.keys()].length === 0;
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return compareMap(this, other);
        }
        /**
         * @description Returns a typed value from the internal map
         */
        getT(key) {
            return this.get(key);
        }
        /**
         * @description Unimplemented, will throw
         */
        inspect() {
            throw new Error('Unimplemented');
        }
        /**
         * @description Unimplemented, will throw
         */
        toHex() {
            throw new Error('Unimplemented');
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return [...this.entries()].reduce((json, [key, value]) => {
                json[key] = isFunction$1(value.toHuman)
                    ? value.toHuman()
                    : value;
                return json;
            }, {});
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return [...this.entries()].reduce((json, [key, value]) => {
                json[key] = value;
                return json;
            }, {});
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return [...this.entries()].reduce((json, [key, value]) => {
                json[key] = isFunction$1(value.toPrimitive)
                    ? value.toPrimitive()
                    : value;
                return json;
            }, {});
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Json';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return stringify(this.toJSON());
        }
        /**
         * @description Unimplemented, will throw
         */
        toU8a(_isBare) {
            throw new Error('Unimplemented');
        }
    }

    function encodeSet(setValues, values) {
        const encoded = new BN(0);
        for (let i = 0, count = values.length; i < count; i++) {
            encoded.ior(bnToBn(setValues[values[i]] || 0));
        }
        return encoded;
    }
    /** @internal */
    function decodeSetArray(setValues, values) {
        const count = values.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            const key = values[i];
            if (isUndefined(setValues[key])) {
                throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
            }
            result[i] = key;
        }
        return result;
    }
    /** @internal */
    function decodeSetNumber(setValues, _value) {
        const bn = bnToBn(_value);
        const keys = Object.keys(setValues);
        const result = [];
        for (let i = 0, count = keys.length; i < count; i++) {
            const key = keys[i];
            if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
                result.push(key);
            }
        }
        const computed = encodeSet(setValues, result);
        if (!bn.eq(computed)) {
            throw new Error(`Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
        }
        return result;
    }
    /** @internal */
    function decodeSet(setValues, value = 0, bitLength) {
        if (bitLength % 8 !== 0) {
            throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
        }
        const byteLength = bitLength / 8;
        if (isU8a(value)) {
            return value.length === 0
                ? []
                : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), { isLe: true }));
        }
        else if (isString(value)) {
            return decodeSet(setValues, u8aToU8a(value), byteLength);
        }
        else if (value instanceof Set || Array.isArray(value)) {
            const input = Array.isArray(value)
                ? value
                : [...value.values()];
            return decodeSetArray(setValues, input);
        }
        return decodeSetNumber(setValues, value);
    }
    /**
     * @name Set
     * @description
     * An Set is an array of string values, represented an an encoded type by
     * a bitwise representation of the values.
     */
    class CodecSet extends Set {
        constructor(registry, setValues, value, bitLength = 8) {
            super(decodeSet(setValues, value, bitLength));
            /**
             * @description adds a value to the Set (extended to allow for validity checking)
             */
            this.add = (key) => {
                // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
                // we have the isUndefined(this._setValues) in here as well, add is used internally
                // in the Set constructor (so it is undefined at this point, and should allow)
                if (this.__internal__allowed && isUndefined(this.__internal__allowed[key])) {
                    throw new Error(`Set: Invalid key '${key}' on add`);
                }
                super.add(key);
                return this;
            };
            this.registry = registry;
            this.__internal__allowed = setValues;
            this.__internal__byteLength = bitLength / 8;
        }
        static with(values, bitLength) {
            var _a;
            return _a = class extends CodecSet {
                    constructor(registry, value) {
                        super(registry, values, value, bitLength);
                    }
                },
                (() => {
                    const keys = Object.keys(values);
                    const count = keys.length;
                    const isKeys = new Array(count);
                    for (let i = 0; i < count; i++) {
                        isKeys[i] = `is${stringPascalCase(keys[i])}`;
                    }
                    objectProperties(_a.prototype, isKeys, (_, i, self) => self.strings.includes(keys[i]));
                })(),
                _a;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.__internal__byteLength;
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description true is the Set contains no values
         */
        get isEmpty() {
            return this.size === 0;
        }
        /**
         * @description The actual set values as a string[]
         */
        get strings() {
            return [...super.values()];
        }
        /**
         * @description The encoded value for the set members
         */
        get valueEncoded() {
            return encodeSet(this.__internal__allowed, this.strings);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            if (Array.isArray(other)) {
                // we don't actually care about the order, sort the values
                return compareArray(this.strings.sort(), other.sort());
            }
            else if (other instanceof Set) {
                return this.eq([...other.values()]);
            }
            else if (isNumber(other) || isBn(other)) {
                return this.valueEncoded.eq(bnToBn(other));
            }
            return false;
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return {
                outer: [this.toU8a()]
            };
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.strings;
        }
        /**
         * @description The encoded value for the set members
         */
        toNumber() {
            return this.valueEncoded.toNumber();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.toJSON();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return stringify({ _set: this.__internal__allowed });
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return `[${this.strings.join(', ')}]`;
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         */
        toU8a(_isBare) {
            return bnToU8a(this.valueEncoded, {
                bitLength: this.__internal__byteLength * 8,
                isLe: true
            });
        }
    }

    /**
     * @name f32
     * @description
     * A 32-bit float
     */
    class f32 extends Float.with(32) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__FloatType = 'f32';
        }
    }

    /**
     * @name f64
     * @description
     * A 64-bit float
     */
    class f64 extends Float.with(64) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__FloatType = 'f64';
        }
    }

    /**
     * @name i8
     * @description
     * An 8-bit signed integer
     */
    class i8 extends Int.with(8) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__IntType = 'i8';
        }
    }

    /**
     * @name i16
     * @description
     * A 16-bit signed integer
     */
    class i16 extends Int.with(16) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__IntType = 'i16';
        }
    }

    /**
     * @name i32
     * @description
     * A 32-bit signed integer
     */
    class i32 extends Int.with(32) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__IntType = 'i32';
        }
    }

    /**
     * @name i64
     * @description
     * A 64-bit signed integer
     */
    class i64 extends Int.with(64) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__IntType = 'i64';
        }
    }

    /**
     * @name i128
     * @description
     * A 128-bit signed integer
     */
    class i128 extends Int.with(128) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__IntType = 'i128';
        }
    }

    /**
     * @name i256
     * @description
     * A 256-bit signed integer
     */
    class i256 extends Int.with(256) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__IntType = 'i256';
        }
    }

    /**
     * @name ISize
     * @description
     * A System default signed number, typically used in RPC to report non-consensus
     * data. It is a wrapper for [[I32]] as a WASM default (as generated by Rust bindings).
     * It is not to be used, since it creates consensus mismatches.
     */
    class isize extends i32 {
        constructor(registry, value) {
            super(registry, value);
            throw new Error('The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.');
        }
    }

    /**
     * @name u8
     * @description
     * An 8-bit unsigned integer
     */
    class u8 extends UInt.with(8) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__UIntType = 'u8';
        }
    }

    /**
     * @name u16
     * @description
     * A 16-bit unsigned integer
     */
    class u16 extends UInt.with(16) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__UIntType = 'u16';
        }
    }

    /**
     * @name u32
     * @description
     * A 32-bit unsigned integer
     */
    class u32 extends UInt.with(32) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__UIntType = 'u32';
        }
    }

    /**
     * @name u64
     * @description
     * A 64-bit unsigned integer
     */
    class u64 extends UInt.with(64) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__UIntType = 'u64';
        }
    }

    /**
     * @name u128
     * @description
     * A 128-bit unsigned integer
     */
    class u128 extends UInt.with(128) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__UIntType = 'u128';
        }
    }

    /**
     * @name u256
     * @description
     * A 256-bit unsigned integer
     */
    class u256 extends UInt.with(256) {
        constructor() {
            super(...arguments);
            // NOTE without this, we cannot properly determine extensions
            this.__UIntType = 'u256';
        }
    }

    /**
     * @name USize
     * @description
     * A System default unsigned number, typically used in RPC to report non-consensus
     * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
     * It is not to be used, since it created consensus mismatches.
     */
    class usize extends u32 {
        constructor(registry, value) {
            super(registry, value);
            throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
        }
    }

    function typeSplit(type) {
        const result = [];
        // these are the depths of the various tokens: <, [, {, (
        let c = 0;
        let f = 0;
        let s = 0;
        let t = 0;
        // current start position
        let start = 0;
        for (let i = 0, count = type.length; i < count; i++) {
            switch (type[i]) {
                // if we are not nested, add the type
                case ',': {
                    if (!(c || f || s || t)) {
                        result.push(type.substring(start, i).trim());
                        start = i + 1;
                    }
                    break;
                }
                // adjust compact/vec (and friends) depth
                case '<':
                    c++;
                    break;
                case '>':
                    c--;
                    break;
                // adjust fixed vec depths
                case '[':
                    f++;
                    break;
                case ']':
                    f--;
                    break;
                // adjust struct depth
                case '{':
                    s++;
                    break;
                case '}':
                    s--;
                    break;
                // adjust tuple depth
                case '(':
                    t++;
                    break;
                case ')':
                    t--;
                    break;
            }
        }
        // ensure we have all the terminators taken care of
        if (c || f || s || t) {
            throw new Error(`Invalid definition (missing terminators) found in ${type}`);
        }
        // the final leg of the journey
        result.push(type.substring(start, type.length).trim());
        return result;
    }

    const KNOWN_INTERNALS = ['_alias', '_fallback'];
    function getTypeString(typeOrObj) {
        return isString(typeOrObj)
            ? typeOrObj.toString()
            : stringify(typeOrObj);
    }
    function isRustEnum(details) {
        const values = Object.values(details);
        if (values.some((v) => isNumber(v))) {
            if (!values.every((v) => isNumber(v) && v >= 0 && v <= 255)) {
                throw new Error('Invalid number-indexed enum definition');
            }
            return false;
        }
        return true;
    }
    function _decodeEnum(value, details, count, fallbackType) {
        value.info = TypeDefInfo.Enum;
        value.fallbackType = fallbackType;
        // not as pretty, but remain compatible with oo7 for both struct and Array types
        if (Array.isArray(details)) {
            value.sub = details.map((name, index) => ({
                index,
                info: TypeDefInfo.Plain,
                name,
                type: 'Null'
            }));
        }
        else if (isRustEnum(details)) {
            value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread({}, getTypeDef(getTypeString(typeOrObj || 'Null'), { name }, count), { index }));
        }
        else {
            value.sub = Object.entries(details).map(([name, index]) => ({
                index,
                info: TypeDefInfo.Plain,
                name,
                type: 'Null'
            }));
        }
        return value;
    }
    function _decodeSet(value, details, fallbackType) {
        value.info = TypeDefInfo.Set;
        value.fallbackType = fallbackType;
        value.length = details._bitLength;
        value.sub = Object
            .entries(details)
            .filter(([name]) => !name.startsWith('_'))
            .map(([name, index]) => ({
            index,
            info: TypeDefInfo.Plain,
            name,
            type: 'Null'
        }));
        return value;
    }
    function _decodeStruct(value, type, _, count) {
        const parsed = JSON.parse(type);
        const keys = Object.keys(parsed);
        if (parsed._enum) {
            return _decodeEnum(value, parsed._enum, count, parsed._fallback);
        }
        else if (parsed._set) {
            return _decodeSet(value, parsed._set, parsed._fallback);
        }
        value.alias = parsed._alias
            ? new Map(Object.entries(parsed._alias))
            : undefined;
        value.fallbackType = parsed._fallback;
        value.sub = keys
            .filter((name) => !KNOWN_INTERNALS.includes(name))
            .map((name) => getTypeDef(getTypeString(parsed[name]), { name }, count));
        return value;
    }
    function _decodeFixedVec(value, type, _, count) {
        const max = type.length - 1;
        let index = -1;
        let inner = 0;
        for (let i = 1; (i < max) && (index === -1); i++) {
            switch (type[i]) {
                case ';': {
                    if (inner === 0) {
                        index = i;
                    }
                    break;
                }
                case '[':
                case '(':
                case '<':
                    inner++;
                    break;
                case ']':
                case ')':
                case '>':
                    inner--;
                    break;
            }
        }
        if (index === -1) {
            throw new Error(`${type}: Unable to extract location of ';'`);
        }
        const vecType = type.substring(1, index);
        const [strLength, displayName] = type.substring(index + 1, max).split(';');
        const length = parseInt(strLength.trim(), 10);
        if (length > 2048) {
            throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
        }
        value.displayName = displayName;
        value.length = length;
        value.sub = getTypeDef(vecType, {}, count);
        return value;
    }
    function _decodeTuple(value, _, subType, count) {
        value.sub = subType.length === 0
            ? []
            : typeSplit(subType).map((inner) => getTypeDef(inner, {}, count));
        return value;
    }
    function _decodeAnyInt(value, type, _, clazz) {
        const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(',');
        const length = parseInt(strLength.trim(), 10);
        if ((length > 8192) || (length % 8)) {
            throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
        }
        value.displayName = displayName;
        value.length = length;
        return value;
    }
    function _decodeInt(value, type, subType) {
        return _decodeAnyInt(value, type, subType, 'Int');
    }
    function _decodeUInt(value, type, subType) {
        return _decodeAnyInt(value, type, subType, 'UInt');
    }
    function _decodeDoNotConstruct(value, type, _) {
        const NAME_LENGTH = 'DoNotConstruct'.length;
        value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
        return value;
    }
    function hasWrapper(type, [start, end]) {
        return (type.startsWith(start)) && (type.slice(-1 * end.length) === end);
    }
    const nestedExtraction = [
        ['[', ']', TypeDefInfo.VecFixed, _decodeFixedVec],
        ['{', '}', TypeDefInfo.Struct, _decodeStruct],
        ['(', ')', TypeDefInfo.Tuple, _decodeTuple],
        // the inner for these are the same as tuple, multiple values
        ['BTreeMap<', '>', TypeDefInfo.BTreeMap, _decodeTuple],
        ['HashMap<', '>', TypeDefInfo.HashMap, _decodeTuple],
        ['Int<', '>', TypeDefInfo.Int, _decodeInt],
        ['Result<', '>', TypeDefInfo.Result, _decodeTuple],
        ['UInt<', '>', TypeDefInfo.UInt, _decodeUInt],
        ['DoNotConstruct<', '>', TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]
    ];
    const wrappedExtraction = [
        ['BTreeSet<', '>', TypeDefInfo.BTreeSet],
        ['Compact<', '>', TypeDefInfo.Compact],
        ['Linkage<', '>', TypeDefInfo.Linkage],
        ['Opaque<', '>', TypeDefInfo.WrapperOpaque],
        ['Option<', '>', TypeDefInfo.Option],
        ['Range<', '>', TypeDefInfo.Range],
        ['RangeInclusive<', '>', TypeDefInfo.RangeInclusive],
        ['Vec<', '>', TypeDefInfo.Vec],
        ['WrapperKeepOpaque<', '>', TypeDefInfo.WrapperKeepOpaque],
        ['WrapperOpaque<', '>', TypeDefInfo.WrapperOpaque]
    ];
    function extractSubType(type, [start, end]) {
        return type.substring(start.length, type.length - end.length);
    }
    function getTypeDef(_type, { displayName, name } = {}, count = 0) {
        // create the type via Type, allowing types to be sanitized
        const type = sanitize(_type);
        const value = { displayName, info: TypeDefInfo.Plain, name, type };
        if (++count > 64) {
            throw new Error('getTypeDef: Maximum nested limit reached');
        }
        const nested = nestedExtraction.find((nested) => hasWrapper(type, nested));
        if (nested) {
            value.info = nested[2];
            return nested[3](value, type, extractSubType(type, nested), count);
        }
        const wrapped = wrappedExtraction.find((wrapped) => hasWrapper(type, wrapped));
        if (wrapped) {
            value.info = wrapped[2];
            value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
        }
        return value;
    }

    function getTypeDefType({ lookupName, type }) {
        return lookupName || type;
    }
    function getSubDefArray(value) {
        if (!Array.isArray(value.sub)) {
            throw new Error(`Expected subtype as TypeDef[] in ${stringify(value)}`);
        }
        return value.sub;
    }
    function getSubDef(value) {
        if (!value.sub || Array.isArray(value.sub)) {
            throw new Error(`Expected subtype as TypeDef in ${stringify(value)}`);
        }
        return value.sub;
    }
    function getSubType(value) {
        return getTypeDefType(getSubDef(value));
    }
    function getTypeClassMap(value) {
        const subs = getSubDefArray(value);
        const map = {};
        for (let i = 0, count = subs.length; i < count; i++) {
            const sub = subs[i];
            if (!sub.name) {
                throw new Error(`No name found in definition ${stringify(sub)}`);
            }
            map[sub.name] = getTypeDefType(sub);
        }
        return map;
    }
    function getTypeClassArray(value) {
        return getSubDefArray(value).map(getTypeDefType);
    }
    function createInt(Clazz, { displayName, length }) {
        if (!isNumber(length)) {
            throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
        }
        return Clazz.with(length, displayName);
    }
    function createHashMap(Clazz, value) {
        const [keyType, valueType] = getTypeClassArray(value);
        return Clazz.with(keyType, valueType);
    }
    function createWithSub(Clazz, value) {
        return Clazz.with(getSubType(value));
    }
    const infoMapping = {
        [TypeDefInfo.BTreeMap]: (_registry, value) => createHashMap(BTreeMap, value),
        [TypeDefInfo.BTreeSet]: (_registry, value) => createWithSub(BTreeSet, value),
        [TypeDefInfo.Compact]: (_registry, value) => createWithSub(Compact, value),
        [TypeDefInfo.DoNotConstruct]: (_registry, value) => DoNotConstruct.with(value.displayName || value.type),
        [TypeDefInfo.Enum]: (_registry, value) => {
            const subs = getSubDefArray(value);
            return Enum.with(subs.every(({ type }) => type === 'Null')
                ? subs.reduce((out, { index, name }, count) => {
                    if (!name) {
                        throw new Error('No name found in sub definition');
                    }
                    out[name] = index || count;
                    return out;
                }, {})
                : getTypeClassMap(value));
        },
        [TypeDefInfo.HashMap]: (_registry, value) => createHashMap(HashMap, value),
        [TypeDefInfo.Int]: (_registry, value) => createInt(Int, value),
        // We have circular deps between Linkage & Struct
        [TypeDefInfo.Linkage]: (_registry, value) => {
            const type = `Option<${getSubType(value)}>`;
            // eslint-disable-next-line sort-keys
            const Clazz = Struct.with({ previous: type, next: type });
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            Clazz.prototype.toRawType = function () {
                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
                return `Linkage<${this.next.toRawType(true)}>`;
            };
            return Clazz;
        },
        [TypeDefInfo.Null]: (_registry, _value) => Null,
        [TypeDefInfo.Option]: (_registry, value) => {
            if (!value.sub || Array.isArray(value.sub)) {
                throw new Error('Expected type information for Option');
            }
            // NOTE This is opt-in (unhandled), not by default
            // if (value.sub.type === 'bool') {
            //   return OptionBool;
            // }
            return createWithSub(Option, value);
        },
        [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
        [TypeDefInfo.Range]: (_registry, value) => createWithSub(Range, value),
        [TypeDefInfo.RangeInclusive]: (_registry, value) => createWithSub(RangeInclusive, value),
        [TypeDefInfo.Result]: (_registry, value) => {
            const [Ok, Err] = getTypeClassArray(value);
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            return Result.with({ Err, Ok });
        },
        [TypeDefInfo.Set]: (_registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, { index, name }) => {
            if (!name || !isNumber(index)) {
                throw new Error('No name found in sub definition');
            }
            result[name] = index;
            return result;
        }, {}), value.length),
        [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
        [TypeDefInfo.Struct]: (_registry, value) => Struct.with(getTypeClassMap(value), value.alias),
        [TypeDefInfo.Tuple]: (_registry, value) => Tuple.with(getTypeClassArray(value)),
        [TypeDefInfo.UInt]: (_registry, value) => createInt(UInt, value),
        [TypeDefInfo.Vec]: (_registry, { sub }) => {
            if (!sub || Array.isArray(sub)) {
                throw new Error('Expected type information for vector');
            }
            return (sub.type === 'u8'
                ? Bytes
                : Vec.with(getTypeDefType(sub)));
        },
        [TypeDefInfo.VecFixed]: (_registry, { displayName, length, sub }) => {
            if (!isNumber(length) || !sub || Array.isArray(sub)) {
                throw new Error('Expected length & type information for fixed vector');
            }
            return (sub.type === 'u8'
                ? U8aFixed.with((length * 8), displayName)
                : VecFixed.with(getTypeDefType(sub), length));
        },
        [TypeDefInfo.WrapperKeepOpaque]: (_registry, value) => createWithSub(WrapperKeepOpaque, value),
        [TypeDefInfo.WrapperOpaque]: (_registry, value) => createWithSub(WrapperOpaque, value)
    };
    function constructTypeClass(registry, typeDef) {
        try {
            const Type = infoMapping[typeDef.info](registry, typeDef);
            if (!Type) {
                throw new Error('No class created');
            }
            // don't clobber any existing
            if (!Type.__fallbackType && typeDef.fallbackType) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore ...this is the only place we we actually assign this...
                Type.__fallbackType = typeDef.fallbackType;
            }
            return Type;
        }
        catch (error) {
            throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);
        }
    }
    function getTypeClass(registry, typeDef) {
        return registry.getUnsafe(typeDef.type, false, typeDef);
    }
    function createClassUnsafe(registry, type) {
        return (
        // just retrieve via name, no creation via typeDef
        registry.getUnsafe(type) ||
            // we don't have an existing type, create the class via typeDef
            getTypeClass(registry, registry.isLookupType(type)
                ? registry.lookup.getTypeDef(type)
                : getTypeDef(type)));
    }

    function checkInstance(created, matcher) {
        const u8a = created.toU8a();
        const rawType = created.toRawType();
        const isOk = (
        // full match, all ok
        u8aEq(u8a, matcher) ||
            (
            // on a length-prefixed type, just check the actual length
            ['Bytes', 'Text', 'Type'].includes(rawType) &&
                matcher.length === created.length) ||
            (
            // when the created is empty and matcher is also empty, let it slide...
            created.isEmpty &&
                matcher.every((v) => !v)));
        if (!isOk) {
            throw new Error(`${rawType}:: Decoded input doesn't match input, received ${u8aToHex(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex(u8a, 512)} (${u8a.length} bytes)`);
        }
    }
    function checkPedantic(created, [value]) {
        if (isU8a(value)) {
            checkInstance(created, value);
        }
        else if (isHex(value)) {
            checkInstance(created, u8aToU8a(value));
        }
    }
    function initType(registry, Type, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
        const created = new (isOptional
            ? Option.with(Type)
            : Type)(registry, ...params);
        isPedantic && checkPedantic(created, params);
        if (blockHash) {
            created.createdAtHash = createTypeUnsafe(registry, 'BlockHash', [blockHash]);
        }
        if (isFallback) {
            created.isStorageFallback = true;
        }
        return created;
    }
    function createTypeUnsafe(registry, type, params = [], options = {}) {
        let Clazz = null;
        let firstError = null;
        try {
            Clazz = createClassUnsafe(registry, type);
            return initType(registry, Clazz, params, options);
        }
        catch (error) {
            firstError = new Error(`createType(${type}):: ${error.message}`);
        }
        if (Clazz?.__fallbackType) {
            try {
                Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
                return initType(registry, Clazz, params, options);
            }
            catch {
                // swallow, we will throw the first error again
            }
        }
        throw firstError;
    }

    const stringIdentity = (value) => value.toString();
    const INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];
    function paramsNotation(outer, inner, transform = stringIdentity) {
        return `${outer}${inner
        ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>`
        : ''}`;
    }
    function encodeWithParams(registry, typeDef, outer) {
        const { info, sub } = typeDef;
        switch (info) {
            case TypeDefInfo.BTreeMap:
            case TypeDefInfo.BTreeSet:
            case TypeDefInfo.Compact:
            case TypeDefInfo.HashMap:
            case TypeDefInfo.Linkage:
            case TypeDefInfo.Option:
            case TypeDefInfo.Range:
            case TypeDefInfo.RangeInclusive:
            case TypeDefInfo.Result:
            case TypeDefInfo.Vec:
            case TypeDefInfo.WrapperKeepOpaque:
            case TypeDefInfo.WrapperOpaque:
                return paramsNotation(outer, sub, (p) => encodeTypeDef(registry, p));
        }
        throw new Error(`Unable to encode ${stringify(typeDef)} with params`);
    }
    function encodeSubTypes(registry, sub, asEnum, extra) {
        const names = sub.map(({ name }) => name);
        if (!names.every((n) => !!n)) {
            throw new Error(`Subtypes does not have consistent names, ${names.join(', ')}`);
        }
        const inner = objectSpread({}, extra);
        for (let i = 0, count = sub.length; i < count; i++) {
            const def = sub[i];
            if (!def.name) {
                throw new Error(`No name found in ${stringify(def)}`);
            }
            inner[def.name] = encodeTypeDef(registry, def);
        }
        return stringify(asEnum
            ? { _enum: inner }
            : inner);
    }
    const encoders = {
        [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),
        [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),
        [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),
        [TypeDefInfo.DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName }) => `DoNotConstruct<${lookupName || displayName || (isUndefined(lookupIndex) ? 'Unknown' : registry.createLookupType(lookupIndex))}>`,
        [TypeDefInfo.Enum]: (registry, { sub }) => {
            if (!Array.isArray(sub)) {
                throw new Error('Unable to encode Enum type');
            }
            // c-like enums have all Null entries
            // TODO We need to take the disciminant into account and auto-add empty entries
            return sub.every(({ type }) => type === 'Null')
                ? stringify({ _enum: sub.map(({ name }, index) => `${name || `Empty${index}`}`) })
                : encodeSubTypes(registry, sub, true);
        },
        [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),
        [TypeDefInfo.Int]: (_registry, { length = 32 }) => `Int<${length}>`,
        [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),
        [TypeDefInfo.Null]: (_registry, _typeDef) => 'Null',
        [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),
        [TypeDefInfo.Plain]: (_registry, { displayName, type }) => displayName || type,
        [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Range'),
        [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'RangeInclusive'),
        [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),
        [TypeDefInfo.Set]: (_registry, { length = 8, sub }) => {
            if (!Array.isArray(sub)) {
                throw new Error('Unable to encode Set type');
            }
            return stringify({
                _set: sub.reduce((all, { index, name }, count) => objectSpread(all, { [`${name || `Unknown${index || count}`}`]: index || count }), { _bitLength: length || 8 })
            });
        },
        [TypeDefInfo.Si]: (_registry, { lookupName, type }) => lookupName || type,
        [TypeDefInfo.Struct]: (registry, { alias, sub }) => {
            if (!Array.isArray(sub)) {
                throw new Error('Unable to encode Struct type');
            }
            return encodeSubTypes(registry, sub, false, alias
                ? {
                    _alias: [...alias.entries()].reduce((all, [k, v]) => objectSpread(all, { [k]: v }), {})
                }
                : {});
        },
        [TypeDefInfo.Tuple]: (registry, { sub }) => {
            if (!Array.isArray(sub)) {
                throw new Error('Unable to encode Tuple type');
            }
            return `(${sub.map((type) => encodeTypeDef(registry, type)).join(',')})`;
        },
        [TypeDefInfo.UInt]: (_registry, { length = 32 }) => `UInt<${length}>`,
        [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),
        [TypeDefInfo.VecFixed]: (_registry, { length, sub }) => {
            if (!isNumber(length) || !sub || Array.isArray(sub)) {
                throw new Error('Unable to encode VecFixed type');
            }
            return `[${sub.type};${length}]`;
        },
        [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperKeepOpaque'),
        [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperOpaque')
    };
    function encodeType(registry, typeDef, withLookup = true) {
        return withLookup && typeDef.lookupName
            ? typeDef.lookupName
            : encoders[typeDef.info](registry, typeDef);
    }
    function encodeTypeDef(registry, typeDef) {
        // In the case of contracts we do have the unfortunate situation where the displayName would
        // refer to "Option" when it is an option. For these, string it out, only using when actually
        // not a top-level element to be used
        return (typeDef.displayName && !INFO_WRAP.some((i) => typeDef.displayName === i))
            ? typeDef.displayName
            : encodeType(registry, typeDef);
    }
    function withTypeString(registry, typeDef) {
        return objectSpread({}, typeDef, {
            type: encodeType(registry, typeDef, false)
        });
    }

    const XCM_MAPPINGS = ['AssetInstance', 'Fungibility', 'Junction', 'Junctions', 'MultiAsset', 'MultiAssetFilter', 'MultiLocation', 'Response', 'WildFungibility', 'WildMultiAsset', 'Xcm', 'XcmError', 'XcmOrder'];
    function mapXcmTypes(version) {
        return XCM_MAPPINGS.reduce((all, key) => objectSpread(all, { [key]: `${key}${version}` }), {});
    }

    const v0 = {
        FungibilityV0: 'FungibilityV1',
        WildFungibilityV0: 'WildFungibilityV1',
        AssetInstanceV0: {
            _enum: {
                Undefined: 'Null',
                Index8: 'u8',
                Index16: 'Compact<u16>',
                Index32: 'Compact<u32>',
                Index64: 'Compact<u64>',
                Index128: 'Compact<u128>',
                Array4: '[u8; 4]',
                Array8: '[u8; 8]',
                Array16: '[u8; 16]',
                Array32: '[u8; 32]',
                Blob: 'Vec<u8>'
            }
        },
        JunctionV0: {
            _enum: {
                Parent: 'Null',
                Parachain: 'Compact<u32>',
                AccountId32: {
                    network: 'NetworkId',
                    id: 'AccountId'
                },
                AccountIndex64: {
                    network: 'NetworkId',
                    index: 'Compact<u64>'
                },
                AccountKey20: {
                    network: 'NetworkId',
                    key: '[u8; 20]'
                },
                PalletInstance: 'u8',
                GeneralIndex: 'Compact<u128>',
                GeneralKey: 'Vec<u8>',
                OnlyChild: 'Null',
                Plurality: {
                    id: 'BodyId',
                    part: 'BodyPart'
                }
            }
        },
        MultiAssetV0: {
            _enum: {
                None: 'Null',
                All: 'Null',
                AllFungible: 'Null',
                AllNonFungible: 'Null',
                AllAbstractFungible: 'Vec<u8>',
                AllAbstractNonFungible: 'Vec<u8>',
                AllConcreteFungible: 'MultiLocationV0',
                AllConcreteNonFungible: 'MultiLocationV0',
                AbstractFungible: {
                    id: 'Vec<u8>',
                    instance: 'Compact<u128>'
                },
                AbstractNonFungible: {
                    class: 'Vec<u8>',
                    instance: 'AssetInstanceV0'
                },
                ConcreteFungible: {
                    id: 'MultiLocationV0',
                    amount: 'Compact<u128>'
                },
                ConcreteNonFungible: {
                    class: 'MultiLocationV0',
                    instance: 'AssetInstanceV0'
                }
            }
        },
        MultiLocationV0: {
            _enum: {
                Here: 'Null',
                X1: 'JunctionV0',
                X2: '(JunctionV0, JunctionV0)',
                X3: '(JunctionV0, JunctionV0, JunctionV0)',
                X4: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
                X5: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
                X6: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
                X7: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
                X8: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)'
            }
        },
        OriginKindV0: {
            _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
        },
        ResponseV0: {
            _enum: {
                Assets: 'Vec<MultiAssetV0>'
            }
        },
        XcmV0: {
            _enum: {
                WithdrawAsset: {
                    assets: 'Vec<MultiAssetV0>',
                    effects: 'Vec<XcmOrderV0>'
                },
                ReserveAssetDeposit: {
                    assets: 'Vec<MultiAssetV0>',
                    effects: 'Vec<XcmOrderV0>'
                },
                ReceiveTeleportedAsset: {
                    assets: 'Vec<MultiAssetV0>',
                    effects: 'Vec<XcmOrderV0>'
                },
                QueryResponse: {
                    queryId: 'Compact<u64>',
                    response: 'ResponseV0'
                },
                TransferAsset: {
                    assets: 'Vec<MultiAssetV0>',
                    dest: 'MultiLocationV0'
                },
                TransferReserveAsset: {
                    assets: 'Vec<MultiAssetV0>',
                    dest: 'MultiLocationV0',
                    effects: 'Vec<XcmOrderV0>'
                },
                Transact: {
                    originType: 'XcmOriginKind',
                    requireWeightAtMost: 'u64',
                    call: 'DoubleEncodedCall'
                },
                HrmpNewChannelOpenRequest: {
                    sender: 'Compact<u32>',
                    maxMessageSize: 'Compact<u32>',
                    maxCapacity: 'Compact<u32>'
                },
                HrmpChannelAccepted: {
                    recipient: 'Compact<u32>'
                },
                HrmpChannelClosing: {
                    initiator: 'Compact<u32>',
                    sender: 'Compact<u32>',
                    recipient: 'Compact<u32>'
                },
                RelayedFrom: {
                    who: 'MultiLocationV0',
                    message: 'XcmV0'
                }
            }
        },
        XcmErrorV0: {
            _enum: {
                Undefined: 'Null',
                Overflow: 'Null',
                Unimplemented: 'Null',
                UnhandledXcmVersion: 'Null',
                UnhandledXcmMessage: 'Null',
                UnhandledEffect: 'Null',
                EscalationOfPrivilege: 'Null',
                UntrustedReserveLocation: 'Null',
                UntrustedTeleportLocation: 'Null',
                DestinationBufferOverflow: 'Null',
                SendFailed: 'Null',
                CannotReachDestination: '(MultiLocation, Xcm)',
                MultiLocationFull: 'Null',
                FailedToDecode: 'Null',
                BadOrigin: 'Null',
                ExceedsMaxMessageSize: 'Null',
                FailedToTransactAsset: 'Null',
                WeightLimitReached: 'Weight',
                Wildcard: 'Null',
                TooMuchWeightRequired: 'Null',
                NotHoldingFees: 'Null',
                WeightNotComputable: 'Null',
                Barrier: 'Null',
                NotWithdrawable: 'Null',
                LocationCannotHold: 'Null',
                TooExpensive: 'Null',
                AssetNotFound: 'Null',
                RecursionLimitReached: 'Null'
            }
        },
        XcmOrderV0: {
            _enum: {
                Null: 'Null',
                DepositAsset: {
                    assets: 'Vec<MultiAssetV0>',
                    dest: 'MultiLocationV0'
                },
                DepositReserveAsset: {
                    assets: 'Vec<MultiAssetV0>',
                    dest: 'MultiLocationV0',
                    effects: 'Vec<XcmOrderV0>'
                },
                ExchangeAsset: {
                    give: 'Vec<MultiAssetV0>',
                    receive: 'Vec<MultiAssetV0>'
                },
                InitiateReserveWithdraw: {
                    assets: 'Vec<MultiAssetV0>',
                    reserve: 'MultiLocationV0',
                    effects: 'Vec<XcmOrderV0>'
                },
                InitiateTeleport: {
                    assets: 'Vec<MultiAssetV0>',
                    dest: 'MultiLocationV0',
                    effects: 'Vec<XcmOrderV0>'
                },
                QueryHolding: {
                    queryId: 'Compact<u64>',
                    dest: 'MultiLocationV0',
                    assets: 'Vec<MultiAssetV0>'
                },
                BuyExecution: {
                    fees: 'MultiAssetV0',
                    weight: 'u64',
                    debt: 'u64',
                    haltOnError: 'bool',
                    xcm: 'Vec<XcmV0>'
                }
            }
        }
    };

    const v1 = {
        AssetInstanceV1: {
            _enum: {
                Undefined: 'Null',
                Index: 'Compact<u128>',
                Array4: '[u8; 4]',
                Array8: '[u8; 8]',
                Array16: '[u8; 16]',
                Array32: '[u8; 32]',
                Blob: 'Bytes'
            }
        },
        FungibilityV1: {
            _enum: {
                Fungible: 'Compact<u128>',
                NonFungible: 'AssetInstanceV1'
            }
        },
        JunctionV1: {
            _enum: {
                Parachain: 'Compact<u32>',
                AccountId32: {
                    network: 'NetworkId',
                    id: 'AccountId'
                },
                AccountIndex64: {
                    network: 'NetworkId',
                    index: 'Compact<u64>'
                },
                AccountKey20: {
                    network: 'NetworkId',
                    key: '[u8; 20]'
                },
                PalletInstance: 'u8',
                GeneralIndex: 'Compact<u128>',
                GeneralKey: 'Vec<u8>',
                OnlyChild: 'Null',
                Plurality: {
                    id: 'BodyId',
                    part: 'BodyPart'
                }
            }
        },
        JunctionsV1: {
            _enum: {
                Here: 'Null',
                X1: 'JunctionV1',
                X2: '(JunctionV1, JunctionV1)',
                X3: '(JunctionV1, JunctionV1, JunctionV1)',
                X4: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
                X5: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
                X6: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
                X7: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
                X8: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)'
            }
        },
        MultiAssetsV1: 'Vec<MultiAssetV1>',
        MultiAssetV1: {
            id: 'XcmAssetId',
            fungibility: 'FungibilityV1'
        },
        MultiAssetFilterV1: {
            _enum: {
                Definite: 'MultiAssetsV1',
                Wild: 'WildMultiAssetV1'
            }
        },
        MultiLocationV1: {
            parents: 'u8',
            interior: 'JunctionsV1'
        },
        OriginKindV1: 'OriginKindV0',
        ResponseV1: {
            _enum: {
                Assets: 'MultiAssetsV1'
            }
        },
        WildFungibilityV1: {
            _enum: ['Fungible', 'NonFungible']
        },
        WildMultiAssetV1: {
            _enum: {
                All: 'Null',
                AllOf: {
                    id: 'XcmAssetId',
                    fungibility: 'WildFungibilityV1'
                }
            }
        },
        XcmV1: {
            _enum: {
                WithdrawAsset: {
                    assets: 'MultiAssetsV1',
                    effects: 'Vec<XcmOrderV1>'
                },
                ReserveAssetDeposit: {
                    assets: 'MultiAssetsV1',
                    effects: 'Vec<XcmOrderV1>'
                },
                ReceiveTeleportedAsset: {
                    assets: 'MultiAssetsV1',
                    effects: 'Vec<XcmOrderV1>'
                },
                QueryResponse: {
                    queryId: 'Compact<u64>',
                    response: 'ResponseV1'
                },
                TransferAsset: {
                    assets: 'MultiAssetsV1',
                    dest: 'MultiLocationV1'
                },
                TransferReserveAsset: {
                    assets: 'MultiAssetsV1',
                    dest: 'MultiLocationV1',
                    effects: 'Vec<XcmOrderV1>'
                },
                Transact: {
                    originType: 'XcmOriginKind',
                    requireWeightAtMost: 'u64',
                    call: 'DoubleEncodedCall'
                },
                HrmpNewChannelOpenRequest: {
                    sender: 'Compact<u32>',
                    maxMessageSize: 'Compact<u32>',
                    maxCapacity: 'Compact<u32>'
                },
                HrmpChannelAccepted: {
                    recipient: 'Compact<u32>'
                },
                HrmpChannelClosing: {
                    initiator: 'Compact<u32>',
                    sender: 'Compact<u32>',
                    recipient: 'Compact<u32>'
                },
                RelayedFrom: {
                    who: 'MultiLocationV1',
                    message: 'XcmV1'
                }
            }
        },
        XcmErrorV1: {
            _enum: {
                Undefined: 'Null',
                Overflow: 'Null',
                Unimplemented: 'Null',
                UnhandledXcmVersion: 'Null',
                UnhandledXcmMessage: 'Null',
                UnhandledEffect: 'Null',
                EscalationOfPrivilege: 'Null',
                UntrustedReserveLocation: 'Null',
                UntrustedTeleportLocation: 'Null',
                DestinationBufferOverflow: 'Null',
                SendFailed: 'Null',
                CannotReachDestination: '(MultiLocationV1, XcmV1)',
                MultiLocationFull: 'Null',
                FailedToDecode: 'Null',
                BadOrigin: 'Null',
                ExceedsMaxMessageSize: 'Null',
                FailedToTransactAsset: 'Null',
                WeightLimitReached: 'Weight',
                Wildcard: 'Null',
                TooMuchWeightRequired: 'Null',
                NotHoldingFees: 'Null',
                WeightNotComputable: 'Null',
                Barrier: 'Null',
                NotWithdrawable: 'Null',
                LocationCannotHold: 'Null',
                TooExpensive: 'Null',
                AssetNotFound: 'Null',
                DestinationUnsupported: 'Null',
                RecursionLimitReached: 'Null'
            }
        },
        XcmOrderV1: {
            _enum: {
                Noop: 'Null',
                DepositAsset: {
                    assets: 'MultiAssetFilterV1',
                    maxAssets: 'u32',
                    beneficiary: 'MultiLocationV1'
                },
                DepositReserveAsset: {
                    assets: 'MultiAssetFilterV1',
                    maxAssets: 'u32',
                    dest: 'MultiLocationV1',
                    effects: 'Vec<XcmOrderV1>'
                },
                ExchangeAsset: {
                    give: 'MultiAssetFilterV1',
                    receive: 'MultiAssetsV1'
                },
                InitiateReserveWithdraw: {
                    assets: 'MultiAssetFilterV1',
                    reserve: 'MultiLocationV1',
                    effects: 'Vec<XcmOrderV1>'
                },
                InitiateTeleport: {
                    assets: 'MultiAssetFilterV1',
                    dest: 'MultiLocationV1',
                    effects: 'Vec<XcmOrderV1>'
                },
                QueryHolding: {
                    queryId: 'Compact<u64>',
                    dest: 'MultiLocationV1',
                    assets: 'MultiAssetFilterV1'
                },
                BuyExecution: {
                    fees: 'MultiAssetV1',
                    weight: 'u64',
                    debt: 'u64',
                    haltOnError: 'bool',
                    instructions: 'Vec<XcmV1>'
                }
            }
        }
    };

    const v2 = {
        AssetInstanceV2: 'AssetInstanceV1',
        FungibilityV2: 'FungibilityV1',
        JunctionV2: 'JunctionV1',
        JunctionsV2: 'JunctionsV1',
        MultiAssetsV2: 'MultiAssetsV1',
        MultiAssetV2: 'MultiAssetV1',
        MultiAssetFilterV2: 'MultiAssetFilterV1',
        MultiLocationV2: 'MultiLocationV1',
        OriginKindV2: 'OriginKindV1',
        WildFungibilityV2: 'WildFungibilityV1',
        ResponseV2: {
            _enum: {
                Null: 'Null',
                Assets: 'MultiAssetsV2',
                ExecutionResult: 'ResponseV2Result'
            }
        },
        ResponseV2Error: '(u32, XcmErrorV2)',
        ResponseV2Result: 'Result<Null, ResponseV2Error>',
        WeightLimitV2: {
            _enum: {
                Unlimited: 'Null',
                Limited: 'Compact<u64>'
            }
        },
        InstructionV2: {
            _enum: {
                WithdrawAsset: 'MultiAssetsV2',
                ReserveAssetDeposited: 'MultiAssetsV2',
                ReceiveTeleportedAsset: 'MultiAssetsV2',
                QueryResponse: {
                    queryId: 'Compact<u64>',
                    response: 'ResponseV2',
                    maxWeight: 'Compact<u64>'
                },
                TransferAsset: {
                    assets: 'MultiAssetsV2',
                    beneficiary: 'MultiLocationV2'
                },
                TransferReserveAsset: {
                    assets: 'MultiAssetsV2',
                    dest: 'MultiLocationV2',
                    xcm: 'XcmV2'
                },
                Transact: {
                    originType: 'OriginKindV2',
                    requireWeightAtMost: 'u64',
                    call: 'DoubleEncodedCall'
                },
                HrmpNewChannelOpenRequest: {
                    sender: 'Compact<u32>',
                    maxMessageSize: 'Compact<u32>',
                    maxCapacity: 'Compact<u32>'
                },
                HrmpChannelAccepted: {
                    recipient: 'Compact<u32>'
                },
                HrmpChannelClosing: {
                    initiator: 'Compact<u32>',
                    sender: 'Compact<u32>',
                    recipient: 'Compact<u32>'
                },
                ClearOrigin: 'Null',
                DescendOrigin: 'InteriorMultiLocation',
                ReportError: {
                    queryId: 'Compact<u64>',
                    dest: 'MultiLocationV2',
                    maxResponseWeight: 'Compact<u64>'
                },
                DepositAsset: {
                    assets: 'MultiAssetFilterV2',
                    maxAssets: 'u32',
                    beneficiary: 'MultiLocationV2'
                },
                DepositReserveAsset: {
                    assets: 'MultiAssetFilterV2',
                    maxAssets: 'u32',
                    dest: 'MultiLocationV2',
                    xcm: 'XcmV2'
                },
                ExchangeAsset: {
                    give: 'MultiAssetFilterV2',
                    receive: 'MultiAssetsV2'
                },
                InitiateReserveWithdraw: {
                    assets: 'MultiAssetFilterV2',
                    reserve: 'MultiLocationV2',
                    xcm: 'XcmV2'
                },
                InitiateTeleport: {
                    assets: 'MultiAssetFilterV2',
                    dest: 'MultiLocationV2',
                    xcm: 'XcmV2'
                },
                QueryHolding: {
                    query_id: 'Compact<u64>',
                    dest: 'MultiLocationV2',
                    assets: 'MultiAssetFilterV2',
                    maxResponse_Weight: 'Compact<u64>'
                },
                BuyExecution: {
                    fees: 'MultiAssetV2',
                    weightLimit: 'WeightLimitV2'
                },
                RefundSurplus: 'Null',
                SetErrorHandler: 'XcmV2',
                SetAppendix: 'XcmV2',
                ClearError: 'Null',
                ClaimAsset: {
                    assets: 'MultiAssetsV2',
                    ticket: 'MultiLocationV2'
                },
                Trap: 'u64'
            }
        },
        WildMultiAssetV2: 'WildMultiAssetV1',
        XcmV2: 'Vec<InstructionV2>',
        XcmErrorV2: {
            _enum: {
                Undefined: 'Null',
                Overflow: 'Null',
                Unimplemented: 'Null',
                UnhandledXcmVersion: 'Null',
                UnhandledXcmMessage: 'Null',
                UnhandledEffect: 'Null',
                EscalationOfPrivilege: 'Null',
                UntrustedReserveLocation: 'Null',
                UntrustedTeleportLocation: 'Null',
                DestinationBufferOverflow: 'Null',
                MultiLocationFull: 'Null',
                MultiLocationNotInvertible: 'Null',
                FailedToDecode: 'Null',
                BadOrigin: 'Null',
                ExceedsMaxMessageSize: 'Null',
                FailedToTransactAsset: 'Null',
                WeightLimitReached: 'Weight',
                Wildcard: 'Null',
                TooMuchWeightRequired: 'Null',
                NotHoldingFees: 'Null',
                WeightNotComputable: 'Null',
                Barrier: 'Null',
                NotWithdrawable: 'Null',
                LocationCannotHold: 'Null',
                TooExpensive: 'Null',
                AssetNotFound: 'Null',
                DestinationUnsupported: 'Null',
                RecursionLimitReached: 'Null',
                Transport: 'Null',
                Unroutable: 'Null',
                UnknownWeightRequired: 'Null',
                Trap: 'u64',
                UnknownClaim: 'Null',
                InvalidLocation: 'Null'
            }
        },
        XcmOrderV2: 'XcmOrderV1'
    };

    const XCM_LATEST = 'V2';
    const xcm = {
        XcmOrigin: {
            _enum: {
                Xcm: 'MultiLocation'
            }
        },
        XcmpMessageFormat: {
            _enum: ['ConcatenatedVersionedXcm', 'ConcatenatedEncodedBlob', 'Signals']
        },
        XcmAssetId: {
            _enum: {
                Concrete: 'MultiLocation',
                Abstract: 'Bytes'
            }
        },
        InboundStatus: {
            _enum: ['Ok', 'Suspended']
        },
        OutboundStatus: {
            _enum: ['Ok', 'Suspended']
        },
        MultiAssets: 'Vec<MultiAsset>'
    };
    const location$1 = {
        BodyId: {
            _enum: {
                Unit: 'Null',
                Named: 'Vec<u8>',
                Index: 'Compact<u32>',
                Executive: 'Null',
                Technical: 'Null',
                Legislative: 'Null',
                Judicial: 'Null'
            }
        },
        BodyPart: {
            _enum: {
                Voice: 'Null',
                Members: 'Compact<u32>',
                Fraction: {
                    nom: 'Compact<u32>',
                    denom: 'Compact<u32>'
                },
                AtLeastProportion: {
                    nom: 'Compact<u32>',
                    denom: 'Compact<u32>'
                },
                MoreThanProportion: {
                    nom: 'Compact<u32>',
                    denom: 'Compact<u32>'
                }
            }
        },
        InteriorMultiLocation: 'Junctions',
        NetworkId: {
            _enum: {
                Any: 'Null',
                Named: 'Vec<u8>',
                Polkadot: 'Null',
                Kusama: 'Null'
            }
        }
    };
    var definitions$c = {
        rpc: {},
        types: {
            ...location$1,
            ...xcm,
            ...v0,
            ...v1,
            ...v2,
            ...mapXcmTypes(XCM_LATEST),
            DoubleEncodedCall: {
                encoded: 'Vec<u8>'
            },
            XcmOriginKind: {
                _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
            },
            Outcome: {
                _enum: {
                    Complete: 'Weight',
                    Incomplete: '(Weight, XcmErrorV0)',
                    Error: 'XcmErrorV0'
                }
            },
            QueryId: 'u64',
            QueryStatus: {
                _enum: {
                    Pending: {
                        responder: 'VersionedMultiLocation',
                        maybeNotify: 'Option<(u8, u8)>',
                        timeout: 'BlockNumber'
                    },
                    Ready: {
                        response: 'VersionedResponse',
                        at: 'BlockNumber'
                    }
                }
            },
            QueueConfigData: {
                suspendThreshold: 'u32',
                dropThreshold: 'u32',
                resumeThreshold: 'u32',
                thresholdWeight: 'Weight',
                weightRestrictDecay: 'Weight'
            },
            VersionMigrationStage: {
                _enum: {
                    MigrateSupportedVersion: 'Null',
                    MigrateVersionNotifiers: 'Null',
                    NotifyCurrentTargets: 'Option<Bytes>',
                    MigrateAndNotifyOldTargets: 'Null'
                }
            },
            VersionedMultiAsset: {
                _enum: {
                    V0: 'MultiAssetV0',
                    V1: 'MultiAssetV1',
                    V2: 'MultiAssetV2'
                }
            },
            VersionedMultiAssets: {
                _enum: {
                    V0: 'Vec<MultiAssetV0>',
                    V1: 'MultiAssetsV1',
                    V2: 'MultiAssetsV2'
                }
            },
            VersionedMultiLocation: {
                _enum: {
                    V0: 'MultiLocationV0',
                    V1: 'MultiLocationV1',
                    V2: 'MultiLocationV2'
                }
            },
            VersionedResponse: {
                V0: 'ResponseV0',
                V1: 'ResponseV1',
                V2: 'ResponseV2'
            },
            VersionedXcm: {
                _enum: {
                    V0: 'XcmV0',
                    V1: 'XcmV1',
                    V2: 'XcmV2'
                }
            },
            XcmVersion: 'u32'
        }
    };

    /* eslint-disable sort-keys */
    const layout$1 = {
        ContractCryptoHasher: {
            _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
        },
        ContractDiscriminant: 'u32',
        ContractLayoutArray: {
            offset: 'ContractLayoutKey',
            len: 'u32',
            cellsPerElem: 'u64',
            layout: 'ContractStorageLayout'
        },
        ContractLayoutCell: {
            key: 'ContractLayoutKey',
            ty: 'SiLookupTypeId'
        },
        ContractLayoutEnum: {
            dispatchKey: 'ContractLayoutKey',
            variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
        },
        ContractLayoutHash: {
            offset: 'ContractLayoutKey',
            strategy: 'ContractLayoutHashingStrategy',
            layout: 'ContractStorageLayout'
        },
        ContractLayoutHashingStrategy: {
            hasher: 'ContractCryptoHasher',
            postfix: 'Vec<u8>',
            prefix: 'Vec<u8>'
        },
        ContractLayoutKey: '[u8; 32]',
        ContractLayoutStruct: {
            fields: 'Vec<ContractLayoutStructField>'
        },
        ContractLayoutStructField: {
            layout: 'ContractStorageLayout',
            name: 'Text'
        },
        ContractStorageLayout: {
            _enum: {
                Cell: 'ContractLayoutCell',
                Hash: 'ContractLayoutHash',
                Array: 'ContractLayoutArray',
                Struct: 'ContractLayoutStruct',
                Enum: 'ContractLayoutEnum'
            }
        }
    };
    const spec = {
        ContractConstructorSpecV0: {
            name: 'Text',
            selector: 'ContractSelector',
            args: 'Vec<ContractMessageParamSpecV0>',
            docs: 'Vec<Text>'
        },
        ContractConstructorSpecV1: {
            name: 'Vec<Text>',
            selector: 'ContractSelector',
            args: 'Vec<ContractMessageParamSpecV0>',
            docs: 'Vec<Text>'
        },
        ContractConstructorSpecV2: {
            label: 'Text',
            selector: 'ContractSelector',
            args: 'Vec<ContractMessageParamSpecV2>',
            docs: 'Vec<Text>'
        },
        ContractConstructorSpecV3: {
            label: 'Text',
            selector: 'ContractSelector',
            payable: 'bool',
            args: 'Vec<ContractMessageParamSpecV2>',
            docs: 'Vec<Text>'
        },
        ContractConstructorSpecV4: {
            label: 'Text',
            selector: 'ContractSelector',
            payable: 'bool',
            args: 'Vec<ContractMessageParamSpecV2>',
            docs: 'Vec<Text>',
            default: 'bool',
            returnType: 'Option<ContractTypeSpec>'
        },
        ContractContractSpecV0: {
            constructors: 'Vec<ContractConstructorSpecV0>',
            messages: 'Vec<ContractMessageSpecV0>',
            events: 'Vec<ContractEventSpecV0>',
            docs: 'Vec<Text>'
        },
        ContractContractSpecV1: {
            constructors: 'Vec<ContractConstructorSpecV1>',
            messages: 'Vec<ContractMessageSpecV1>',
            events: 'Vec<ContractEventSpecV1>',
            docs: 'Vec<Text>'
        },
        ContractContractSpecV2: {
            constructors: 'Vec<ContractConstructorSpecV2>',
            messages: 'Vec<ContractMessageSpecV2>',
            events: 'Vec<ContractEventSpecV2>',
            docs: 'Vec<Text>'
        },
        ContractContractSpecV3: {
            constructors: 'Vec<ContractConstructorSpecV3>',
            messages: 'Vec<ContractMessageSpecV2>',
            events: 'Vec<ContractEventSpecV2>',
            docs: 'Vec<Text>'
        },
        ContractContractSpecV4: {
            constructors: 'Vec<ContractConstructorSpecV4>',
            messages: 'Vec<ContractMessageSpecV3>',
            events: 'Vec<ContractEventSpecV2>',
            docs: 'Vec<Text>',
            environment: 'ContractEnvironmentV4'
        },
        ContractDisplayName: 'SiPath',
        ContractEventParamSpecV0: {
            name: 'Text',
            indexed: 'bool',
            type: 'ContractTypeSpec',
            docs: 'Vec<Text>'
        },
        ContractEventParamSpecV2: {
            label: 'Text',
            indexed: 'bool',
            type: 'ContractTypeSpec',
            docs: 'Vec<Text>'
        },
        ContractEventSpecV0: {
            name: 'Text',
            args: 'Vec<ContractEventParamSpecV0>',
            docs: 'Vec<Text>'
        },
        ContractEventSpecV1: {
            name: 'Text',
            args: 'Vec<ContractEventParamSpecV0>',
            docs: 'Vec<Text>'
        },
        ContractEventSpecV2: {
            label: 'Text',
            args: 'Vec<ContractEventParamSpecV2>',
            docs: 'Vec<Text>'
        },
        ContractMessageParamSpecV0: {
            name: 'Text',
            type: 'ContractTypeSpec'
        },
        ContractMessageParamSpecV2: {
            label: 'Text',
            type: 'ContractTypeSpec'
        },
        ContractMessageSpecV0: {
            name: 'Text',
            selector: 'ContractSelector',
            mutates: 'bool',
            payable: 'bool',
            args: 'Vec<ContractMessageParamSpecV0>',
            returnType: 'Option<ContractTypeSpec>',
            docs: 'Vec<Text>'
        },
        ContractMessageSpecV1: {
            name: 'Vec<Text>',
            selector: 'ContractSelector',
            mutates: 'bool',
            payable: 'bool',
            args: 'Vec<ContractMessageParamSpecV0>',
            returnType: 'Option<ContractTypeSpec>',
            docs: 'Vec<Text>'
        },
        ContractMessageSpecV2: {
            label: 'Text',
            selector: 'ContractSelector',
            mutates: 'bool',
            payable: 'bool',
            args: 'Vec<ContractMessageParamSpecV2>',
            returnType: 'Option<ContractTypeSpec>',
            docs: 'Vec<Text>'
        },
        ContractMessageSpecV3: {
            label: 'Text',
            selector: 'ContractSelector',
            mutates: 'bool',
            payable: 'bool',
            args: 'Vec<ContractMessageParamSpecV2>',
            returnType: 'Option<ContractTypeSpec>',
            docs: 'Vec<Text>',
            default: 'bool'
        },
        ContractSelector: '[u8; 4]',
        ContractTypeSpec: {
            type: 'SiLookupTypeId',
            displayName: 'ContractDisplayName'
        }
    };
    const latest = {
        ContractConstructorSpecLatest: 'ContractConstructorSpecV4',
        ContractEventSpecLatest: 'ContractEventSpecV2',
        ContractEventParamSpecLatest: 'ContractEventParamSpecV2',
        ContractMessageParamSpecLatest: 'ContractMessageParamSpecV2',
        ContractMessageSpecLatest: 'ContractMessageSpecV3',
        ContractMetadataLatest: 'ContractMetadataV4'
    };
    var definitions$b = {
        rpc: {},
        types: {
            ...layout$1,
            ...spec,
            ...latest,
            ContractProjectInfo: {
                source: 'ContractProjectSource',
                contract: 'ContractProjectContract'
            },
            ContractMetadataV0: {
                metadataVersion: 'Text',
                types: 'Vec<Si0Type>',
                spec: 'ContractContractSpecV0'
            },
            ContractMetadataV1: {
                types: 'Vec<PortableType>',
                spec: 'ContractContractSpecV1'
            },
            ContractMetadataV2: {
                types: 'Vec<PortableType>',
                spec: 'ContractContractSpecV2'
            },
            ContractMetadataV3: {
                types: 'Vec<PortableType>',
                spec: 'ContractContractSpecV3'
            },
            ContractMetadataV4: {
                types: 'Vec<PortableType>',
                spec: 'ContractContractSpecV4'
            },
            ContractMetadata: {
                _enum: {
                    V0: 'ContractMetadataV0',
                    V1: 'ContractMetadataV1',
                    V2: 'ContractMetadataV2',
                    V3: 'ContractMetadataV3',
                    V4: 'ContractMetadataV4'
                }
            },
            ContractProjectV0: {
                metadataVersion: 'Text',
                source: 'ContractProjectSource',
                contract: 'ContractProjectContract',
                types: 'Vec<Si0Type>',
                spec: 'ContractContractSpecV0'
            },
            ContractProject: '(ContractProjectInfo, ContractMetadata)',
            ContractProjectContract: {
                _alias: {
                    docs: 'documentation'
                },
                name: 'Text',
                version: 'Text',
                authors: 'Vec<Text>',
                description: 'Option<Text>',
                docs: 'Option<Text>',
                repository: 'Option<Text>',
                homepage: 'Option<Text>',
                license: 'Option<Text>'
            },
            ContractProjectSource: {
                _alias: {
                    wasmHash: 'hash'
                },
                wasmHash: '[u8; 32]',
                language: 'Text',
                compiler: 'Text',
                wasm: 'Raw'
            },
            ContractEnvironmentV4: {
                _alias: {
                    hashType: 'hash'
                },
                // NOTE These are not marked optional in the Rust code, however since we
                // convert from older versions to newer, we may not have these fields.
                // The Option<...> works since our inputs are always JSON, so it will
                // be None when not specified.
                //
                // Additionally we don't mark the full structure as Option, rather we
                // do it on a per-field basis since fields may be added as the versions
                // progress.
                accountId: 'Option<ContractTypeSpec>',
                balance: 'Option<ContractTypeSpec>',
                blockNumber: 'Option<ContractTypeSpec>',
                hashType: 'Option<ContractTypeSpec>',
                timestamp: 'Option<ContractTypeSpec>',
                maxEventTopics: 'Option<u32>'
            }
        }
    };

    const netRpc = {
        listening: {
            aliasSection: 'net',
            description: 'Returns true if client is actively listening for network connections. Otherwise false.',
            params: [],
            type: 'bool'
        },
        peerCount: {
            aliasSection: 'net',
            description: 'Returns number of peers connected to node.',
            params: [],
            type: 'Text'
        },
        version: {
            aliasSection: 'net',
            description: 'Returns protocol version.',
            params: [],
            type: 'Text'
        }
    };
    const web3Rpc = {
        clientVersion: {
            aliasSection: 'web3',
            description: 'Returns current client version.',
            params: [],
            type: 'Text'
        },
        sha3: {
            aliasSection: 'web3',
            description: 'Returns sha3 of the given data',
            params: [{ name: 'data', type: 'Bytes' }],
            type: 'H256'
        }
    };
    const rpc$7 = {
        ...netRpc,
        ...web3Rpc,
        accounts: {
            description: 'Returns accounts list.',
            params: [],
            type: 'Vec<H160>'
        },
        blockNumber: {
            description: 'Returns the blockNumber',
            params: [],
            type: 'U256'
        },
        call: {
            description: 'Call contract, returning the output data.',
            params: [
                {
                    name: 'request',
                    type: 'EthCallRequest'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'number',
                    type: 'BlockNumber'
                }
            ],
            type: 'Bytes'
        },
        chainId: {
            description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
            params: [],
            type: 'U64'
        },
        coinbase: {
            description: 'Returns block author.',
            params: [],
            type: 'H160'
        },
        estimateGas: {
            description: 'Estimate gas needed for execution of given contract.',
            params: [
                {
                    name: 'request',
                    type: 'EthCallRequest'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'number',
                    type: 'BlockNumber'
                }
            ],
            type: 'U256'
        },
        feeHistory: {
            description: 'Returns fee history for given block count & reward percentiles',
            params: [
                {
                    name: 'blockCount',
                    type: 'U256'
                },
                {
                    name: 'newestBlock',
                    type: 'BlockNumber'
                },
                {
                    name: 'rewardPercentiles',
                    type: 'Option<Vec<f64>>'
                }
            ],
            type: 'EthFeeHistory'
        },
        gasPrice: {
            description: 'Returns current gas price.',
            params: [],
            type: 'U256'
        },
        getBalance: {
            description: 'Returns balance of the given account.',
            params: [
                {
                    name: 'address',
                    type: 'H160'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'number',
                    type: 'BlockNumber'
                }
            ],
            type: 'U256'
        },
        getBlockByHash: {
            description: 'Returns block with given hash.',
            params: [
                {
                    name: 'hash',
                    type: 'H256'
                },
                {
                    name: 'full',
                    type: 'bool'
                }
            ],
            type: 'Option<EthRichBlock>'
        },
        getBlockByNumber: {
            description: 'Returns block with given number.',
            params: [
                {
                    name: 'block',
                    type: 'BlockNumber'
                },
                { name: 'full', type: 'bool' }
            ],
            type: 'Option<EthRichBlock>'
        },
        getBlockTransactionCountByHash: {
            description: 'Returns the number of transactions in a block with given hash.',
            params: [
                {
                    name: 'hash',
                    type: 'H256'
                }
            ],
            type: 'U256'
        },
        getBlockTransactionCountByNumber: {
            description: 'Returns the number of transactions in a block with given block number.',
            params: [
                {
                    name: 'block',
                    type: 'BlockNumber'
                }
            ],
            type: 'U256'
        },
        getCode: {
            description: 'Returns the code at given address at given time (block number).',
            params: [
                {
                    name: 'address',
                    type: 'H160'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'number',
                    type: 'BlockNumber'
                }
            ],
            type: 'Bytes'
        },
        getFilterChanges: {
            description: 'Returns filter changes since last poll.',
            params: [
                {
                    name: 'index',
                    type: 'U256'
                }
            ],
            type: 'EthFilterChanges'
        },
        getFilterLogs: {
            description: 'Returns all logs matching given filter (in a range \'from\' - \'to\').',
            params: [
                {
                    name: 'index',
                    type: 'U256'
                }
            ],
            type: 'Vec<EthLog>'
        },
        getLogs: {
            description: 'Returns logs matching given filter object.',
            params: [
                {
                    name: 'filter',
                    type: 'EthFilter'
                }
            ],
            type: 'Vec<EthLog>'
        },
        getProof: {
            description: 'Returns proof for account and storage.',
            params: [
                {
                    name: 'address',
                    type: 'H160'
                },
                {
                    name: 'storageKeys',
                    type: 'Vec<H256>'
                },
                {
                    name: 'number',
                    type: 'BlockNumber'
                }
            ],
            type: 'EthAccount'
        },
        getStorageAt: {
            description: 'Returns content of the storage at given address.',
            params: [
                {
                    name: 'address',
                    type: 'H160'
                },
                {
                    name: 'index',
                    type: 'U256'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'number',
                    type: 'BlockNumber'
                }
            ],
            type: 'H256'
        },
        getTransactionByBlockHashAndIndex: {
            description: 'Returns transaction at given block hash and index.',
            params: [
                {
                    name: 'hash',
                    type: 'H256'
                },
                {
                    name: 'index',
                    type: 'U256'
                }
            ],
            type: 'EthTransaction'
        },
        getTransactionByBlockNumberAndIndex: {
            description: 'Returns transaction by given block number and index.',
            params: [
                {
                    name: 'number',
                    type: 'BlockNumber'
                },
                {
                    name: 'index',
                    type: 'U256'
                }
            ],
            type: 'EthTransaction'
        },
        getTransactionByHash: {
            description: 'Get transaction by its hash.',
            params: [
                {
                    name: 'hash',
                    type: 'H256'
                }
            ],
            type: 'EthTransaction'
        },
        getTransactionCount: {
            description: 'Returns the number of transactions sent from given address at given time (block number).',
            params: [
                {
                    name: 'address',
                    type: 'H160'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'number',
                    type: 'BlockNumber'
                }
            ],
            type: 'U256'
        },
        getTransactionReceipt: {
            description: 'Returns transaction receipt by transaction hash.',
            params: [
                {
                    name: 'hash',
                    type: 'H256'
                }
            ],
            type: 'EthReceipt'
        },
        getUncleByBlockHashAndIndex: {
            description: 'Returns an uncles at given block and index.',
            params: [
                {
                    name: 'hash',
                    type: 'H256'
                },
                {
                    name: 'index',
                    type: 'U256'
                }
            ],
            type: 'EthRichBlock'
        },
        getUncleByBlockNumberAndIndex: {
            description: 'Returns an uncles at given block and index.',
            params: [
                {
                    name: 'number',
                    type: 'BlockNumber'
                },
                {
                    name: 'index',
                    type: 'U256'
                }
            ],
            type: 'EthRichBlock'
        },
        getUncleCountByBlockHash: {
            description: 'Returns the number of uncles in a block with given hash.',
            params: [
                {
                    name: 'hash',
                    type: 'H256'
                }
            ],
            type: 'U256'
        },
        getUncleCountByBlockNumber: {
            description: 'Returns the number of uncles in a block with given block number.',
            params: [
                {
                    name: 'number',
                    type: 'BlockNumber'
                }
            ],
            type: 'U256'
        },
        getWork: {
            description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
            params: [],
            type: 'EthWork'
        },
        hashrate: {
            description: 'Returns the number of hashes per second that the node is mining with.',
            params: [],
            type: 'U256'
        },
        maxPriorityFeePerGas: {
            description: 'Returns max priority fee per gas',
            params: [],
            type: 'U256'
        },
        mining: {
            description: 'Returns true if client is actively mining new blocks.',
            params: [],
            type: 'bool'
        },
        newBlockFilter: {
            description: 'Returns id of new block filter.',
            params: [],
            type: 'U256'
        },
        newFilter: {
            description: 'Returns id of new filter.',
            params: [
                {
                    name: 'filter',
                    type: 'EthFilter'
                }
            ],
            type: 'U256'
        },
        newPendingTransactionFilter: {
            description: 'Returns id of new block filter.',
            params: [],
            type: 'U256'
        },
        protocolVersion: {
            description: 'Returns protocol version encoded as a string (quotes are necessary).',
            params: [],
            type: 'u64'
        },
        sendRawTransaction: {
            description: 'Sends signed transaction, returning its hash.',
            params: [
                {
                    name: 'bytes',
                    type: 'Bytes'
                }
            ],
            type: 'H256'
        },
        sendTransaction: {
            description: 'Sends transaction; will block waiting for signer to return the transaction hash',
            params: [
                {
                    name: 'tx',
                    type: 'EthTransactionRequest'
                }
            ],
            type: 'H256'
        },
        submitHashrate: {
            description: 'Used for submitting mining hashrate.',
            params: [
                {
                    name: 'index',
                    type: 'U256'
                },
                {
                    name: 'hash',
                    type: 'H256'
                }
            ],
            type: 'bool'
        },
        submitWork: {
            description: 'Used for submitting a proof-of-work solution.',
            params: [
                {
                    name: 'nonce',
                    type: 'H64'
                },
                {
                    name: 'headerHash',
                    type: 'H256'
                },
                {
                    name: 'mixDigest',
                    type: 'H256'
                }
            ],
            type: 'bool'
        },
        subscribe: {
            description: 'Subscribe to Eth subscription.',
            params: [
                { name: 'kind', type: 'EthSubKind' },
                {
                    isOptional: true,
                    name: 'params',
                    type: 'EthSubParams'
                }
            ],
            pubsub: [
                'subscription',
                'subscribe',
                'unsubscribe'
            ],
            type: 'Null'
        },
        syncing: {
            description: 'Returns an object with data about the sync status or false.',
            params: [],
            type: 'EthSyncStatus'
        },
        uninstallFilter: {
            description: 'Uninstalls filter.',
            params: [
                {
                    name: 'index',
                    type: 'U256'
                }
            ],
            type: 'bool'
        }
    };

    const ethMethodsV4 = {
        account_basic: {
            description: 'Returns pallet_evm::Accounts by address.',
            params: [
                {
                    name: 'address',
                    type: 'H160'
                }
            ],
            type: 'EvmAccount'
        },
        account_code_at: {
            description: 'For a given account address, returns pallet_evm::AccountCodes.',
            params: [
                {
                    name: 'address',
                    type: 'H160'
                }
            ],
            type: 'Bytes'
        },
        author: {
            description: 'Returns the converted FindAuthor::find_author authority id.',
            params: [],
            type: 'H160'
        },
        call: {
            description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
            params: [
                {
                    name: 'from',
                    type: 'H160'
                },
                {
                    name: 'to',
                    type: 'H160'
                },
                {
                    name: 'data',
                    type: 'Vec<u8>'
                },
                {
                    name: 'value',
                    type: 'U256'
                },
                {
                    name: 'gasLimit',
                    type: 'U256'
                },
                {
                    name: 'maxFeePerGas',
                    type: 'Option<U256>'
                },
                {
                    name: 'maxPriorityFeePerGas',
                    type: 'Option<U256>'
                },
                {
                    name: 'nonce',
                    type: 'Option<U256>'
                },
                {
                    name: 'estimate',
                    type: 'bool'
                },
                {
                    name: 'accessList',
                    type: 'Option<Vec<(H160, Vec<H256>)>>'
                }
            ],
            type: 'Result<EvmCallInfo, DispatchError>'
        },
        chain_id: {
            description: 'Returns runtime defined pallet_evm::ChainId.',
            params: [],
            type: 'u64'
        },
        create: {
            description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
            params: [
                {
                    name: 'from',
                    type: 'H160'
                },
                {
                    name: 'data',
                    type: 'Vec<u8>'
                },
                {
                    name: 'value',
                    type: 'U256'
                },
                {
                    name: 'gasLimit',
                    type: 'U256'
                },
                {
                    name: 'maxFeePerGas',
                    type: 'Option<U256>'
                },
                {
                    name: 'maxPriorityFeePerGas',
                    type: 'Option<U256>'
                },
                {
                    name: 'nonce',
                    type: 'Option<U256>'
                },
                {
                    name: 'estimate',
                    type: 'bool'
                },
                {
                    name: 'accessList',
                    type: 'Option<Vec<(H160, Vec<H256>)>>'
                }
            ],
            type: 'Result<EvmCreateInfo, DispatchError>'
        },
        current_all: {
            description: 'Return all the current data for a block in a single runtime call.',
            params: [],
            type: '(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)'
        },
        current_block: {
            description: 'Return the current block.',
            params: [],
            type: 'BlockV2'
        },
        current_receipts: {
            description: 'Return the current receipt.',
            params: [],
            type: 'Option<Vec<EthReceiptV3>>'
        },
        current_transaction_statuses: {
            description: 'Return the current transaction status.',
            params: [],
            type: 'Option<Vec<EthTransactionStatus>>'
        },
        elasticity: {
            description: 'Return the elasticity multiplier.',
            params: [],
            type: 'Option<Permill>'
        },
        extrinsic_filter: {
            description: 'Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.',
            params: [
                {
                    name: 'xts',
                    type: 'Vec<Extrinsic>'
                }
            ],
            type: 'Vec<TransactionV2>'
        },
        gas_price: {
            description: 'Returns FixedGasPrice::min_gas_price',
            params: [],
            type: 'u256'
        },
        storage_at: {
            description: 'For a given account address and index, returns pallet_evm::AccountStorages.',
            params: [
                {
                    name: 'address',
                    type: 'H160'
                },
                {
                    name: 'index',
                    type: 'u256'
                }
            ],
            type: 'H256'
        }
    };
    const ethMethodsV5 = {
        call: {
            description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
            params: [
                {
                    name: 'from',
                    type: 'H160'
                },
                {
                    name: 'to',
                    type: 'H160'
                },
                {
                    name: 'data',
                    type: 'Vec<u8>'
                },
                {
                    name: 'value',
                    type: 'U256'
                },
                {
                    name: 'gasLimit',
                    type: 'U256'
                },
                {
                    name: 'maxFeePerGas',
                    type: 'Option<U256>'
                },
                {
                    name: 'maxPriorityFeePerGas',
                    type: 'Option<U256>'
                },
                {
                    name: 'nonce',
                    type: 'Option<U256>'
                },
                {
                    name: 'estimate',
                    type: 'bool'
                },
                {
                    name: 'accessList',
                    type: 'Option<Vec<(H160, Vec<H256>)>>'
                }
            ],
            type: 'Result<EvmCallInfoV2, DispatchError>'
        },
        create: {
            description: 'Returns a frame_ethereum::call response. If `estimate` is true,',
            params: [
                {
                    name: 'from',
                    type: 'H160'
                },
                {
                    name: 'data',
                    type: 'Vec<u8>'
                },
                {
                    name: 'value',
                    type: 'U256'
                },
                {
                    name: 'gasLimit',
                    type: 'U256'
                },
                {
                    name: 'maxFeePerGas',
                    type: 'Option<U256>'
                },
                {
                    name: 'maxPriorityFeePerGas',
                    type: 'Option<U256>'
                },
                {
                    name: 'nonce',
                    type: 'Option<U256>'
                },
                {
                    name: 'estimate',
                    type: 'bool'
                },
                {
                    name: 'accessList',
                    type: 'Option<Vec<(H160, Vec<H256>)>>'
                }
            ],
            type: 'Result<EvmCreateInfoV2, DispatchError>'
        }
    };
    const runtime$5 = {
        ConvertTransactionRuntimeApi: [
            {
                methods: {
                    convert_transaction: {
                        description: 'Converts an Ethereum-style transaction to Extrinsic',
                        params: [
                            {
                                name: 'transaction',
                                type: 'TransactionV2'
                            }
                        ],
                        type: 'Extrinsic'
                    }
                },
                version: 2
            }
        ],
        DebugRuntimeApi: [
            {
                methods: {
                    trace_block: {
                        description: 'Trace all block extrinsics',
                        params: [
                            {
                                name: 'extrinsics',
                                type: 'Vec<Extrinsic>'
                            },
                            {
                                name: 'knownTransactions',
                                type: 'Vec<H256>'
                            }
                        ],
                        type: 'Result<(), DispatchError>'
                    },
                    trace_transaction: {
                        description: 'Trace transaction extrinsics',
                        params: [
                            {
                                name: 'extrinsics',
                                type: 'Vec<Extrinsic>'
                            },
                            {
                                name: 'transaction',
                                type: 'EthTransaction'
                            }
                        ],
                        type: 'Result<(), DispatchError>'
                    }
                },
                version: 4
            }
        ],
        EthereumRuntimeRPCApi: [
            {
                methods: {
                    ...ethMethodsV4
                },
                version: 4
            },
            {
                methods: {
                    ...ethMethodsV4,
                    ...ethMethodsV5
                },
                version: 5
            }
        ]
    };

    const V0 = {
        BlockV0: {
            header: 'EthHeader',
            transactions: 'Vec<TransactionV0>',
            ommers: 'Vec<EthHeader>'
        },
        LegacyTransaction: {
            nonce: 'U256',
            gasPrice: 'U256',
            gasLimit: 'U256',
            action: 'EthTransactionAction',
            value: 'U256',
            input: 'Bytes',
            signature: 'EthTransactionSignature'
        },
        TransactionV0: 'LegacyTransaction'
    };
    const V1 = {
        BlockV1: {
            header: 'EthHeader',
            transactions: 'Vec<TransactionV1>',
            ommers: 'Vec<EthHeader>'
        },
        EIP2930Transaction: {
            chainId: 'u64',
            nonce: 'U256',
            gasPrice: 'U256',
            gasLimit: 'U256',
            action: 'EthTransactionAction',
            value: 'U256',
            input: 'Bytes',
            accessList: 'EthAccessList',
            oddYParity: 'bool',
            r: 'H256',
            s: 'H256'
        },
        TransactionV1: {
            _enum: {
                Legacy: 'LegacyTransaction',
                EIP2930: 'EIP2930Transaction'
            }
        }
    };
    const V2 = {
        BlockV2: {
            header: 'EthHeader',
            transactions: 'Vec<TransactionV2>',
            ommers: 'Vec<EthHeader>'
        },
        EIP1559Transaction: {
            chainId: 'u64',
            nonce: 'U256',
            maxPriorityFeePerGas: 'U256',
            maxFeePerGas: 'U256',
            gasLimit: 'U256',
            action: 'EthTransactionAction',
            value: 'U256',
            input: 'Bytes',
            accessList: 'EthAccessList',
            oddYParity: 'bool',
            r: 'H256',
            s: 'H256'
        },
        TransactionV2: {
            _enum: {
                Legacy: 'LegacyTransaction',
                EIP2930: 'EIP2930Transaction',
                EIP1559: 'EIP1559Transaction'
            }
        }
    };
    const types = {
        ...V0,
        ...V1,
        ...V2,
        EthereumAccountId: 'GenericEthereumAccountId',
        EthereumAddress: 'GenericEthereumAccountId',
        EthereumLookupSource: 'GenericEthereumLookupSource',
        EthereumSignature: '[u8; 65]',
        EthAccessListItem: {
            address: 'EthAddress',
            slots: 'Vec<H256>'
        },
        EthAccessList: 'Vec<EthAccessListItem>',
        EthAccount: {
            address: 'EthAddress',
            balance: 'U256',
            nonce: 'U256',
            codeHash: 'H256',
            storageHash: 'H256',
            accountProof: 'Vec<Bytes>',
            storageProof: 'Vec<EthStorageProof>'
        },
        EthAddress: 'H160',
        EthBlock: {
            header: 'EthHeader',
            transactions: 'Vec<EthTransaction>',
            ommers: 'Vec<EthHeader>'
        },
        EthHeader: {
            parentHash: 'H256',
            ommersHash: 'H256',
            beneficiary: 'EthAddress',
            stateRoot: 'H256',
            transactionsRoot: 'H256',
            receiptsRoot: 'H256',
            logsBloom: 'EthBloom',
            difficulty: 'U256',
            number: 'U256',
            gasLimit: 'U256',
            gasUsed: 'U256',
            timestamp: 'u64',
            extraData: 'Bytes',
            mixMash: 'H256',
            nonce: 'H64'
        },
        EthRichBlock: {
            _alias: {
                blockHash: 'hash',
                blockSize: 'size'
            },
            blockHash: 'Option<H256>',
            parentHash: 'H256',
            sha3Uncles: 'H256',
            author: 'EthAddress',
            miner: 'EthAddress',
            stateRoot: 'H256',
            transactionsRoot: 'H256',
            receiptsRoot: 'H256',
            number: 'Option<U256>',
            gasUsed: 'U256',
            gasLimit: 'U256',
            extraData: 'Bytes',
            logsBloom: 'EthBloom',
            timestamp: 'U256',
            difficulty: 'U256',
            totalDifficulty: 'Option<U256>',
            sealFields: 'Vec<Bytes>',
            uncles: 'Vec<H256>',
            transactions: 'Vec<EthTransaction>',
            blockSize: 'Option<U256>'
        },
        EthBloom: 'H2048',
        EthCallRequest: {
            from: 'Option<EthAddress>',
            to: 'Option<EthAddress>',
            gasPrice: 'Option<U256>',
            gas: 'Option<U256>',
            value: 'Option<U256>',
            data: 'Option<Bytes>',
            nonce: 'Option<U256>'
        },
        EthFeeHistory: {
            oldestBlock: 'U256',
            baseFeePerGas: 'Vec<U256>',
            gasUsedRatio: 'Vec<f64>',
            reward: 'Option<Vec<Vec<U256>>>'
        },
        EthFilter: {
            fromBlock: 'Option<BlockNumber>',
            toBlock: 'Option<BlockNumber>',
            blockHash: 'Option<H256>',
            address: 'Option<EthFilterAddress>',
            topics: 'Option<EthFilterTopic>'
        },
        EthFilterAddress: {
            _enum: {
                Single: 'EthAddress',
                Multiple: 'Vec<EthAddress>',
                Null: 'Null'
            }
        },
        EthFilterChanges: {
            _enum: {
                Logs: 'Vec<EthLog>',
                Hashes: 'Vec<H256>',
                Empty: 'Null'
            }
        },
        EthFilterTopic: {
            _enum: {
                Single: 'EthFilterTopicInner',
                Multiple: 'Vec<EthFilterTopicInner>',
                Null: 'Null'
            }
        },
        EthFilterTopicEntry: 'Option<H256>',
        EthFilterTopicInner: {
            _enum: {
                Single: 'EthFilterTopicEntry',
                Multiple: 'Vec<EthFilterTopicEntry>',
                Null: 'Null'
            }
        },
        EthRichHeader: {
            _alias: {
                blockHash: 'hash',
                blockSize: 'size'
            },
            blockHash: 'Option<H256>',
            parentHash: 'H256',
            sha3Uncles: 'H256',
            author: 'EthAddress',
            miner: 'EthAddress',
            stateRoot: 'H256',
            transactionsRoot: 'H256',
            receiptsRoot: 'H256',
            number: 'Option<U256>',
            gasUsed: 'U256',
            gasLimit: 'U256',
            extraData: 'Bytes',
            logsBloom: 'EthBloom',
            timestamp: 'U256',
            difficulty: 'U256',
            sealFields: 'Vec<Bytes>',
            blockSize: 'Option<U256>'
        },
        EthLog: {
            address: 'EthAddress',
            topics: 'Vec<H256>',
            data: 'Bytes',
            blockHash: 'Option<H256>',
            blockNumber: 'Option<U256>',
            transactionHash: 'Option<H256>',
            transactionIndex: 'Option<U256>',
            logIndex: 'Option<U256>',
            transactionLogIndex: 'Option<U256>',
            removed: 'bool'
        },
        EthReceipt: {
            transactionHash: 'Option<H256>',
            transactionIndex: 'Option<U256>',
            blockHash: 'Option<H256>',
            from: 'Option<EthAddress>',
            to: 'Option<EthAddress>',
            blockNumber: 'Option<U256>',
            cumulativeGasUsed: 'U256',
            gasUsed: 'Option<U256>',
            contractAddress: 'Option<EthAddress>',
            logs: 'Vec<EthLog>',
            root: 'Option<H256>',
            logsBloom: 'EthBloom',
            statusCode: 'Option<U64>'
        },
        // not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
        EthReceiptV0: 'EthReceipt',
        EthReceiptV3: 'EthReceipt',
        EthStorageProof: {
            key: 'U256',
            value: 'U256',
            proof: 'Vec<Bytes>'
        },
        EthSubKind: {
            _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
        },
        EthSubParams: {
            _enum: {
                None: 'Null',
                Logs: 'EthFilter'
            }
        },
        EthSubResult: {
            _enum: {
                Header: 'EthRichHeader',
                Log: 'EthLog',
                TransactionHash: 'H256',
                SyncState: 'EthSyncStatus'
            }
        },
        EthSyncInfo: {
            startingBlock: 'U256',
            currentBlock: 'U256',
            highestBlock: 'U256',
            warpChunksAmount: 'Option<U256>',
            warpChunksProcessed: 'Option<U256>'
        },
        EthSyncStatus: {
            _enum: {
                Info: 'EthSyncInfo',
                None: 'Null'
            }
        },
        EthTransaction: {
            hash: 'H256',
            nonce: 'U256',
            blockHash: 'Option<H256>',
            blockNumber: 'Option<U256>',
            transactionIndex: 'Option<U256>',
            from: 'H160',
            to: 'Option<H160>',
            value: 'U256',
            gasPrice: 'Option<U256>',
            maxFeePerGas: 'Option<U256>',
            maxPriorityFeePerGas: 'Option<U256>',
            gas: 'U256',
            input: 'Bytes',
            creates: 'Option<H160>',
            raw: 'Bytes',
            publicKey: 'Option<H512>',
            chainId: 'Option<U64>',
            standardV: 'U256',
            v: 'U256',
            r: 'U256',
            s: 'U256',
            accessList: 'Option<Vec<EthAccessListItem>>',
            transactionType: 'Option<U256>'
        },
        EthTransactionSignature: {
            v: 'u64',
            r: 'H256',
            s: 'H256'
        },
        EthTransactionAction: {
            _enum: {
                Call: 'H160',
                Create: 'Null'
            }
        },
        EthTransactionCondition: {
            _enum: {
                block: 'u64',
                time: 'u64'
            }
        },
        EthTransactionRequest: {
            from: 'Option<EthAddress>',
            to: 'Option<EthAddress>',
            gasPrice: 'Option<U256>',
            gas: 'Option<U256>',
            value: 'Option<U256>',
            data: 'Option<Bytes>',
            nonce: 'Option<U256>'
        },
        EthTransactionStatus: {
            transactionHash: 'H256',
            transactionIndex: 'u32',
            from: 'EthAddress',
            to: 'Option<EthAddress>',
            contractAddress: 'Option<EthAddress>',
            logs: 'Vec<EthLog>',
            logsBloom: 'EthBloom'
        },
        EthWork: {
            powHash: 'H256',
            seedHash: 'H256',
            target: 'H256',
            number: 'Option<u64>'
        }
    };
    var definitions$a = { rpc: rpc$7, runtime: runtime$5, types };

    const runtime$4 = {
        // deprecated, the NimbusApi is current - this is for backwards compat
        AuthorFilterAPI: [
            {
                methods: {
                    can_author: {
                        description: 'The runtime api used to predict whether an author will be eligible in the given slot',
                        params: [
                            {
                                name: 'author',
                                type: 'AccountId'
                            },
                            {
                                name: 'relayParent',
                                type: 'u32'
                            },
                            {
                                name: 'parentHeader',
                                type: 'Header'
                            }
                        ],
                        type: 'bool'
                    }
                },
                version: 2
            },
            {
                methods: {
                    can_author: {
                        description: 'The runtime api used to predict whether an author will be eligible in the given slot',
                        params: [
                            {
                                name: 'author',
                                type: 'AccountId'
                            },
                            {
                                name: 'relayParent',
                                type: 'u32'
                            }
                        ],
                        type: 'bool'
                    }
                },
                version: 1
            }
        ],
        NimbusApi: [
            {
                methods: {
                    can_author: {
                        description: 'The runtime api used to predict whether a Nimbus author will be eligible in the given slot',
                        params: [
                            {
                                name: 'author',
                                type: 'AccountId'
                            },
                            {
                                name: 'relayParent',
                                type: 'u32'
                            },
                            {
                                name: 'parentHeader',
                                type: 'Header'
                            }
                        ],
                        type: 'bool'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$9 = {
        rpc: {},
        runtime: runtime$4,
        types: {}
    };

    const runtime$3 = {
        // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
        OracleApi: [
            {
                methods: {
                    get_all_values: {
                        description: 'Retrieves all values',
                        params: [
                            {
                                name: 'providerId',
                                // This is a Codec type
                                type: 'Raw'
                            }
                        ],
                        // This won't actually work as expected - since we have
                        // no information about the actual Raw sizes, we cannot
                        // handle it in this format (it would need an override
                        // for the specific Codec). So return the Raw value.
                        // type: 'Vec<(Raw, Option<Raw>)>'
                        type: 'Raw'
                    },
                    get_value: {
                        description: 'Retrieves a single value',
                        params: [
                            {
                                name: 'providerId',
                                // This is a Codec type
                                type: 'Raw'
                            },
                            {
                                name: 'key',
                                // This is a Codec type
                                type: 'Raw'
                            }
                        ],
                        // This is an Option<Codec> type
                        type: 'Option<Raw>'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$8 = {
        rpc: {},
        runtime: runtime$3,
        types: {}
    };

    const runtime$2 = {
        // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
        TokensApi: [
            {
                methods: {
                    query_existential_deposit: {
                        description: 'Query the existential amount for a specific currency',
                        params: [
                            {
                                name: 'currencyId',
                                // This is CurrencyId, as per the return value, we are unsure
                                // if this is specialized and/or global to the chain or not
                                type: 'Raw'
                            }
                        ],
                        // This is Balance - since we don't understand enough about the way
                        // in which this is used, we default to u128 here (it certainly could
                        // be a specialized type that doesn't map to the on-chain Balance)
                        type: 'u128'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$7 = {
        rpc: {},
        runtime: runtime$2,
        types: {}
    };

    const rpc$6 = {
        methods: {
            description: 'Retrieves the list of RPC methods that are exposed by the node',
            params: [],
            type: 'RpcMethods'
        }
    };

    var definitions$6 = {
        rpc: rpc$6,
        types: {
            RpcMethods: {
                version: 'u32',
                methods: 'Vec<Text>'
            }
        }
    };

    const rpc$5 = {
        hasKey: {
            description: 'Returns true if the keystore has private keys for the given public key and key type.',
            isUnsafe: true,
            params: [
                {
                    name: 'publicKey',
                    type: 'Bytes'
                },
                {
                    name: 'keyType',
                    type: 'Text'
                }
            ],
            type: 'bool'
        },
        hasSessionKeys: {
            description: 'Returns true if the keystore has private keys for the given session public keys.',
            isUnsafe: true,
            params: [
                {
                    name: 'sessionKeys',
                    type: 'Bytes'
                }
            ],
            type: 'bool'
        },
        insertKey: {
            description: 'Insert a key into the keystore.',
            isUnsafe: true,
            params: [
                {
                    name: 'keyType',
                    type: 'Text'
                },
                {
                    name: 'suri',
                    type: 'Text'
                },
                {
                    name: 'publicKey',
                    type: 'Bytes'
                }
            ],
            type: 'Bytes'
        },
        pendingExtrinsics: {
            description: 'Returns all pending extrinsics, potentially grouped by sender',
            params: [],
            type: 'Vec<Extrinsic>'
        },
        removeExtrinsic: {
            description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
            isUnsafe: true,
            params: [
                {
                    name: 'bytesOrHash',
                    type: 'Vec<ExtrinsicOrHash>'
                }
            ],
            type: 'Vec<Hash>'
        },
        rotateKeys: {
            description: 'Generate new session keys and returns the corresponding public keys',
            isUnsafe: true,
            params: [],
            type: 'Bytes'
        },
        submitAndWatchExtrinsic: {
            description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
            isSigned: true,
            params: [
                {
                    name: 'extrinsic',
                    type: 'Extrinsic'
                }
            ],
            pubsub: [
                'extrinsicUpdate',
                'submitAndWatchExtrinsic',
                'unwatchExtrinsic'
            ],
            type: 'ExtrinsicStatus'
        },
        submitExtrinsic: {
            description: 'Submit a fully formatted extrinsic for block inclusion',
            isSigned: true,
            params: [
                {
                    name: 'extrinsic',
                    type: 'Extrinsic'
                }
            ],
            type: 'Hash'
        }
    };

    var definitions$5 = {
        rpc: rpc$5,
        types: {
            ExtrinsicOrHash: {
                _enum: {
                    Hash: 'Hash',
                    Extrinsic: 'Bytes'
                }
            },
            ExtrinsicStatus: {
                _enum: {
                    Future: 'Null',
                    Ready: 'Null',
                    Broadcast: 'Vec<Text>',
                    InBlock: 'Hash',
                    Retracted: 'Hash',
                    FinalityTimeout: 'Hash',
                    Finalized: 'Hash',
                    Usurped: 'Hash',
                    Dropped: 'Null',
                    Invalid: 'Null'
                }
            }
        }
    };

    const rpc$4 = {
        getBlock: {
            description: 'Get header and body of a relay chain block',
            params: [
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'hash',
                    type: 'BlockHash'
                }
            ],
            type: 'SignedBlock'
        },
        getBlockHash: {
            description: 'Get the block hash for a specific block',
            params: [
                {
                    isOptional: true,
                    name: 'blockNumber',
                    type: 'BlockNumber'
                }
            ],
            type: 'BlockHash'
        },
        getFinalizedHead: {
            alias: ['chain_getFinalisedHead'],
            description: 'Get hash of the last finalized block in the canon chain',
            params: [],
            type: 'BlockHash'
        },
        getHeader: {
            alias: ['chain_getHead'],
            description: 'Retrieves the header for a specific block',
            params: [
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'hash',
                    type: 'BlockHash'
                }
            ],
            type: 'Header'
        },
        subscribeAllHeads: {
            description: 'Retrieves the newest header via subscription',
            params: [],
            pubsub: [
                'allHead',
                'subscribeAllHeads',
                'unsubscribeAllHeads'
            ],
            type: 'Header'
        },
        subscribeFinalizedHeads: {
            alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
            description: 'Retrieves the best finalized header via subscription',
            params: [],
            pubsub: [
                'finalizedHead',
                'subscribeFinalizedHeads',
                'unsubscribeFinalizedHeads'
            ],
            type: 'Header'
        },
        subscribeNewHeads: {
            alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
            description: 'Retrieves the best header via subscription',
            params: [],
            // NOTE These still has the aliassed version, compatible with 1.x
            pubsub: [
                'newHead',
                'subscribeNewHead',
                'unsubscribeNewHead'
            ],
            type: 'Header'
        }
    };

    var definitions$4 = {
        rpc: rpc$4,
        types: {
            BlockHash: 'Hash'
        }
    };

    const rpc$3 = {
        getKeys: {
            description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
            params: [
                {
                    name: 'childKey',
                    type: 'PrefixedStorageKey'
                },
                {
                    name: 'prefix',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'Hash'
                }
            ],
            type: 'Vec<StorageKey>'
        },
        getKeysPaged: {
            alias: ['childstate_getKeysPagedAt'],
            description: 'Returns the keys with prefix from a child storage with pagination support',
            params: [
                {
                    name: 'childKey',
                    type: 'PrefixedStorageKey'
                },
                {
                    name: 'prefix',
                    type: 'StorageKey'
                },
                {
                    name: 'count',
                    type: 'u32'
                },
                {
                    isOptional: true,
                    name: 'startKey',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'Hash'
                }
            ],
            type: 'Vec<StorageKey>'
        },
        getStorage: {
            description: 'Returns a child storage entry at a specific block state',
            params: [
                {
                    name: 'childKey',
                    type: 'PrefixedStorageKey'
                },
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'Hash'
                }
            ],
            type: 'Option<StorageData>'
        },
        getStorageEntries: {
            description: 'Returns child storage entries for multiple keys at a specific block state',
            params: [
                {
                    name: 'childKey',
                    type: 'PrefixedStorageKey'
                },
                {
                    name: 'keys',
                    type: 'Vec<StorageKey>'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'Hash'
                }
            ],
            type: 'Vec<Option<StorageData>>'
        },
        getStorageHash: {
            description: 'Returns the hash of a child storage entry at a block state',
            params: [
                {
                    name: 'childKey',
                    type: 'PrefixedStorageKey'
                },
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'Hash'
                }
            ],
            type: 'Option<Hash>'
        },
        getStorageSize: {
            description: 'Returns the size of a child storage entry at a block state',
            params: [
                {
                    name: 'childKey',
                    type: 'PrefixedStorageKey'
                },
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'Hash'
                }
            ],
            type: 'Option<u64>'
        }
    };

    var definitions$3 = {
        rpc: rpc$3,
        types: {
            // StorageKey extends Bytes
            PrefixedStorageKey: 'StorageKey'
        }
    };

    const rpc$2 = {
        localStorageGet: {
            description: 'Get offchain local storage under given key and prefix',
            isUnsafe: true,
            params: [
                {
                    name: 'kind',
                    type: 'StorageKind'
                },
                {
                    name: 'key',
                    type: 'Bytes'
                }
            ],
            type: 'Option<Bytes>'
        },
        localStorageSet: {
            description: 'Set offchain local storage under given key and prefix',
            isUnsafe: true,
            params: [
                {
                    name: 'kind',
                    type: 'StorageKind'
                },
                {
                    name: 'key',
                    type: 'Bytes'
                },
                {
                    name: 'value',
                    type: 'Bytes'
                }
            ],
            type: 'Null'
        }
    };

    const runtime$1 = {
        OffchainWorkerApi: [
            {
                methods: {
                    offchain_worker: {
                        description: 'Starts the off-chain task for given block header.',
                        params: [
                            {
                                name: 'header',
                                type: 'Header'
                            }
                        ],
                        type: 'Null'
                    }
                },
                version: 2
            },
            {
                methods: {
                    offchain_worker: {
                        description: 'Starts the off-chain task for given block header.',
                        params: [
                            {
                                name: 'number',
                                type: 'BlockNumber'
                            }
                        ],
                        type: 'Null'
                    }
                },
                version: 1
            }
        ]
    };

    var definitions$2 = {
        rpc: rpc$2,
        runtime: runtime$1,
        types: {
            StorageKind: {
                _enum: {
                    PERSISTENT: 1,
                    LOCAL: 2
                }
            }
        }
    };

    const rpc$1 = {
        queryFeeDetails: {
            // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
            deprecated: 'Use `api.call.transactionPaymentApi.queryFeeDetails` instead',
            description: 'Query the detailed fee of a given encoded extrinsic',
            params: [
                {
                    name: 'extrinsic',
                    type: 'Bytes'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'FeeDetails'
        },
        queryInfo: {
            // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
            deprecated: 'Use `api.call.transactionPaymentApi.queryInfo` instead',
            description: 'Retrieves the fee information for an encoded extrinsic',
            params: [
                {
                    name: 'extrinsic',
                    type: 'Bytes'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            // NOTE: Stuck on V1 forever (at least for the time being)
            type: 'RuntimeDispatchInfoV1'
        }
    };

    const V1_TO_V4_SHARED_PAY = {
        query_fee_details: {
            description: 'The transaction fee details',
            params: [
                {
                    name: 'uxt',
                    type: 'Extrinsic'
                },
                {
                    name: 'len',
                    type: 'u32'
                }
            ],
            type: 'FeeDetails'
        }
    };
    const V1_TO_V3_SHARED_CALL = {
        query_call_fee_details: {
            description: 'The call fee details',
            params: [
                {
                    name: 'call',
                    type: 'Call'
                },
                {
                    name: 'len',
                    type: 'u32'
                }
            ],
            type: 'FeeDetails'
        }
    };
    const V2_TO_V4_SHARED_PAY = {
        query_info: {
            description: 'The transaction info',
            params: [
                {
                    name: 'uxt',
                    type: 'Extrinsic'
                },
                {
                    name: 'len',
                    type: 'u32'
                }
            ],
            type: 'RuntimeDispatchInfo'
        }
    };
    const V2_V3_SHARED_CALL = {
        query_call_info: {
            description: 'The call info',
            params: [
                {
                    name: 'call',
                    type: 'Call'
                },
                {
                    name: 'len',
                    type: 'u32'
                }
            ],
            type: 'RuntimeDispatchInfo'
        }
    };
    const V3_SHARED_PAY_CALL = {
        query_length_to_fee: {
            description: 'Query the output of the current LengthToFee given some input',
            params: [
                {
                    name: 'length',
                    type: 'u32'
                }
            ],
            type: 'Balance'
        },
        query_weight_to_fee: {
            description: 'Query the output of the current WeightToFee given some input',
            params: [
                {
                    name: 'weight',
                    type: 'Weight'
                }
            ],
            type: 'Balance'
        }
    };
    const runtime = {
        TransactionPaymentApi: [
            {
                // V4 is equivalent to V3 (V4 just dropped all V1 references)
                methods: {
                    ...V3_SHARED_PAY_CALL,
                    ...V2_TO_V4_SHARED_PAY,
                    ...V1_TO_V4_SHARED_PAY
                },
                version: 4
            },
            {
                methods: {
                    ...V3_SHARED_PAY_CALL,
                    ...V2_TO_V4_SHARED_PAY,
                    ...V1_TO_V4_SHARED_PAY
                },
                version: 3
            },
            {
                methods: {
                    ...V2_TO_V4_SHARED_PAY,
                    ...V1_TO_V4_SHARED_PAY
                },
                version: 2
            },
            {
                methods: {
                    query_info: {
                        description: 'The transaction info',
                        params: [
                            {
                                name: 'uxt',
                                type: 'Extrinsic'
                            },
                            {
                                name: 'len',
                                type: 'u32'
                            }
                        ],
                        // NOTE: _Should_ be V1 (as per current Substrate), however the interface was
                        // changed mid-flight between versions. So we have some of each depending on
                        // runtime. (We do detect the weight type, so correct)
                        type: 'RuntimeDispatchInfo'
                    },
                    ...V1_TO_V4_SHARED_PAY
                },
                version: 1
            }
        ],
        TransactionPaymentCallApi: [
            {
                methods: {
                    ...V3_SHARED_PAY_CALL,
                    ...V2_V3_SHARED_CALL,
                    ...V1_TO_V3_SHARED_CALL
                },
                version: 3
            },
            {
                methods: {
                    ...V2_V3_SHARED_CALL,
                    ...V1_TO_V3_SHARED_CALL
                },
                version: 2
            },
            {
                methods: {
                    CALL: {
                        description: 'The call info',
                        params: [
                            {
                                name: 'call',
                                type: 'Call'
                            },
                            {
                                name: 'len',
                                type: 'u32'
                            }
                        ],
                        // NOTE: As per the above comment, the below is correct according to Substrate, but
                        // _may_ yield fallback decoding on some versions of the runtime
                        type: 'RuntimeDispatchInfo'
                    },
                    ...V1_TO_V3_SHARED_CALL
                },
                version: 1
            }
        ]
    };

    var definitions$1 = {
        rpc: rpc$1,
        runtime,
        types: {
            FeeDetails: {
                inclusionFee: 'Option<InclusionFee>'
                // skipped in serde
                // tip: 'Balance'
            },
            InclusionFee: {
                baseFee: 'Balance',
                lenFee: 'Balance',
                adjustedWeightFee: 'Balance'
            },
            RuntimeDispatchInfo: {
                weight: 'Weight',
                class: 'DispatchClass',
                partialFee: 'Balance'
            },
            RuntimeDispatchInfoV1: {
                weight: 'WeightV1',
                class: 'DispatchClass',
                partialFee: 'Balance'
            },
            RuntimeDispatchInfoV2: {
                weight: 'WeightV2',
                class: 'DispatchClass',
                partialFee: 'Balance'
            }
        }
    };

    const rpc = {
        call: {
            alias: ['state_callAt'],
            description: 'Perform a call to a builtin on the chain',
            params: [
                {
                    name: 'method',
                    type: 'Text'
                },
                {
                    name: 'data',
                    type: 'Bytes'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Bytes'
        },
        getChildKeys: {
            description: 'Retrieves the keys with prefix of a specific child storage',
            params: [
                {
                    name: 'childStorageKey',
                    type: 'StorageKey'
                },
                {
                    name: 'childDefinition',
                    type: 'StorageKey'
                },
                {
                    name: 'childType',
                    type: 'u32'
                },
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Vec<StorageKey>'
        },
        getChildReadProof: {
            description: 'Returns proof of storage for child key entries at a specific block state.',
            params: [
                {
                    name: 'childStorageKey',
                    type: 'PrefixedStorageKey'
                },
                {
                    name: 'keys',
                    type: 'Vec<StorageKey>'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'ReadProof'
        },
        getChildStorage: {
            description: 'Retrieves the child storage for a key',
            params: [
                {
                    name: 'childStorageKey',
                    type: 'StorageKey'
                },
                {
                    name: 'childDefinition',
                    type: 'StorageKey'
                },
                {
                    name: 'childType',
                    type: 'u32'
                },
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'StorageData'
        },
        getChildStorageHash: {
            description: 'Retrieves the child storage hash',
            params: [
                {
                    name: 'childStorageKey',
                    type: 'StorageKey'
                },
                {
                    name: 'childDefinition',
                    type: 'StorageKey'
                },
                {
                    name: 'childType',
                    type: 'u32'
                },
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Hash'
        },
        getChildStorageSize: {
            description: 'Retrieves the child storage size',
            params: [
                {
                    name: 'childStorageKey',
                    type: 'StorageKey'
                },
                {
                    name: 'childDefinition',
                    type: 'StorageKey'
                },
                {
                    name: 'childType',
                    type: 'u32'
                },
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'u64'
        },
        getKeys: {
            deprecated: 'Use `api.rpc.state.getKeysPaged` to retrieve keys',
            description: 'Retrieves the keys with a certain prefix',
            params: [
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Vec<StorageKey>'
        },
        getKeysPaged: {
            alias: ['state_getKeysPagedAt'],
            description: 'Returns the keys with prefix with pagination support.',
            params: [
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    name: 'count',
                    type: 'u32'
                },
                {
                    isOptional: true,
                    name: 'startKey',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Vec<StorageKey>'
        },
        getMetadata: {
            description: 'Returns the runtime metadata',
            params: [
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Metadata'
        },
        getPairs: {
            deprecated: 'Use `api.rpc.state.getKeysPaged` to retrieve keys',
            description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
            isUnsafe: true,
            params: [
                {
                    name: 'prefix',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Vec<KeyValue>'
        },
        getReadProof: {
            description: 'Returns proof of storage entries at a specific block state',
            params: [
                {
                    name: 'keys',
                    type: 'Vec<StorageKey>'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'ReadProof'
        },
        getRuntimeVersion: {
            alias: ['chain_getRuntimeVersion'],
            description: 'Get the runtime version',
            params: [
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'RuntimeVersion'
        },
        getStorage: {
            alias: ['state_getStorageAt'],
            description: 'Retrieves the storage for a key',
            params: [
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'StorageData'
        },
        getStorageHash: {
            alias: ['state_getStorageHashAt'],
            description: 'Retrieves the storage hash',
            params: [
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Hash'
        },
        getStorageSize: {
            alias: ['state_getStorageSizeAt'],
            description: 'Retrieves the storage size',
            params: [
                {
                    name: 'key',
                    type: 'StorageKey'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'u64'
        },
        queryStorage: {
            description: 'Query historical storage entries (by key) starting from a start block',
            isUnsafe: true,
            params: [
                {
                    name: 'keys',
                    type: 'Vec<StorageKey>'
                },
                {
                    name: 'fromBlock',
                    type: 'Hash'
                },
                {
                    isOptional: true,
                    name: 'toBlock',
                    type: 'BlockHash'
                }
            ],
            type: 'Vec<StorageChangeSet>'
        },
        queryStorageAt: {
            description: 'Query storage entries (by key) starting at block hash given as the second parameter',
            params: [
                {
                    name: 'keys',
                    type: 'Vec<StorageKey>'
                },
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'Vec<StorageChangeSet>'
        },
        subscribeRuntimeVersion: {
            alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
            description: 'Retrieves the runtime version via subscription',
            params: [],
            pubsub: [
                'runtimeVersion',
                'subscribeRuntimeVersion',
                'unsubscribeRuntimeVersion'
            ],
            type: 'RuntimeVersion'
        },
        subscribeStorage: {
            description: 'Subscribes to storage changes for the provided keys',
            // NOTE Just marking it here to follow the logic - this is unsafe when no
            // keys are provided (i.e. subscribing to all), generally this is used
            // extensively with normal subscriptions
            // isUnsafe: true,
            params: [
                {
                    isOptional: true,
                    name: 'keys',
                    type: 'Vec<StorageKey>'
                }
            ],
            pubsub: [
                'storage',
                'subscribeStorage',
                'unsubscribeStorage'
            ],
            type: 'StorageChangeSet'
        },
        traceBlock: {
            description: 'Provides a way to trace the re-execution of a single block',
            isUnsafe: true,
            params: [
                {
                    name: 'block',
                    type: 'Hash'
                },
                {
                    name: 'targets',
                    type: 'Option<Text>'
                },
                {
                    name: 'storageKeys',
                    type: 'Option<Text>'
                },
                {
                    name: 'methods',
                    type: 'Option<Text>'
                }
            ],
            type: 'TraceBlockResponse'
        },
        trieMigrationStatus: {
            description: 'Check current migration state',
            isUnsafe: true,
            params: [
                {
                    isHistoric: true,
                    isOptional: true,
                    name: 'at',
                    type: 'BlockHash'
                }
            ],
            type: 'MigrationStatusResult'
        }
    };

    var definitions = {
        rpc,
        types: {
            ApiId: '[u8; 8]',
            BlockTrace: {
                blockHash: 'Text',
                parentHash: 'Text',
                tracingTargets: 'Text',
                storageKeys: 'Text',
                spans: 'Vec<BlockTraceSpan>',
                events: 'Vec<BlockTraceEvent>'
            },
            BlockTraceEvent: {
                target: 'Text',
                data: 'BlockTraceEventData',
                parentId: 'Option<u64>'
            },
            BlockTraceEventData: {
                stringValues: 'HashMap<Text, Text>'
            },
            BlockTraceSpan: {
                id: 'u64',
                parentId: 'Option<u64>',
                name: 'Text',
                target: 'Text',
                wasm: 'bool'
            },
            KeyValueOption: '(StorageKey, Option<StorageData>)',
            MigrationStatusResult: {
                topRemainingToMigrate: 'u64',
                childRemainingToMigrate: 'u64'
            },
            ReadProof: {
                at: 'Hash',
                proof: 'Vec<Bytes>'
            },
            RuntimeVersionApi: '(ApiId, u32)',
            RuntimeVersion: {
                specName: 'Text',
                implName: 'Text',
                authoringVersion: 'u32',
                specVersion: 'u32',
                implVersion: 'u32',
                apis: 'Vec<RuntimeVersionApi>',
                transactionVersion: 'u32',
                stateVersion: 'u8'
            },
            RuntimeVersionPre4: {
                specName: 'Text',
                implName: 'Text',
                authoringVersion: 'u32',
                specVersion: 'u32',
                implVersion: 'u32',
                apis: 'Vec<RuntimeVersionApi>',
                transactionVersion: 'u32'
            },
            RuntimeVersionPre3: {
                specName: 'Text',
                implName: 'Text',
                authoringVersion: 'u32',
                specVersion: 'u32',
                implVersion: 'u32',
                apis: 'Vec<RuntimeVersionApi>'
            },
            RuntimeVersionPartial: {
                specName: 'Text',
                specVersion: 'u32',
                apis: 'Vec<RuntimeVersionApi>'
            },
            SpecVersion: 'u32',
            StorageChangeSet: {
                block: 'Hash',
                changes: 'Vec<KeyValueOption>'
            },
            TraceBlockResponse: {
                _enum: {
                    TraceError: 'TraceError',
                    BlockTrace: 'BlockTrace'
                }
            },
            TraceError: {
                error: 'Text'
            }
        }
    };

    var typeDefinitions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        assetConversion: definitions$13,
        assets: definitions$12,
        aura: definitions$11,
        authorship: definitions$10,
        babe: definitions$$,
        balances: definitions$_,
        beefy: definitions$Z,
        benchmark: definitions$Y,
        blockbuilder: definitions$X,
        collective: definitions$W,
        consensus: definitions$V,
        contracts: definitions$U,
        democracy: definitions$T,
        dev: definitions$S,
        discovery: definitions$R,
        elections: definitions$Q,
        engine: definitions$P,
        evm: definitions$O,
        extrinsics: definitions$N,
        fungibles: definitions$M,
        genericAsset: definitions$L,
        gilt: definitions$K,
        grandpa: definitions$J,
        identity: definitions$I,
        imOnline: definitions$H,
        lottery: definitions$G,
        mmr: definitions$F,
        nfts: definitions$E,
        nompools: definitions$D,
        offences: definitions$C,
        pow: definitions$B,
        proxy: definitions$A,
        recovery: definitions$z,
        scheduler: definitions$y,
        session: definitions$x,
        society: definitions$w,
        staking: definitions$v,
        support: definitions$u,
        syncstate: definitions$t,
        system: definitions$s,
        treasury: definitions$r,
        txpayment: definitions$q,
        txqueue: definitions$p,
        uniques: definitions$o,
        utility: definitions$n,
        vesting: definitions$m,
        attestations: definitions$l,
        bridges: definitions$k,
        claims: definitions$j,
        crowdloan: definitions$i,
        cumulus: definitions$h,
        finality: definitions$g,
        parachains: definitions$f,
        poll: definitions$e,
        purchase: definitions$d,
        xcm: definitions$c,
        contractsAbi: definitions$b,
        eth: definitions$a,
        nimbus: definitions$9,
        ormlOracle: definitions$8,
        ormlTokens: definitions$7,
        rpc: definitions$6,
        author: definitions$5,
        chain: definitions$4,
        childstate: definitions$3,
        offchain: definitions$2,
        payment: definitions$1,
        state: definitions,
        metadata: definitions$16,
        runtime: definitions$15,
        scaleInfo: definitions$14
    });

    const jsonrpc = {};
    Object.keys(typeDefinitions).forEach((s) => Object.entries(typeDefinitions[s].rpc || {}).forEach(([method, def]) => {
        // allow for section overrides
        const section = def.aliasSection || s;
        if (!jsonrpc[section]) {
            jsonrpc[section] = {};
        }
        jsonrpc[section][method] = objectSpread({}, def, {
            isSubscription: !!def.pubsub,
            jsonrpc: `${section}_${method}`,
            method,
            section
        });
    }));
    var rpcDefinitions = jsonrpc;

    const l$6 = logger('PortableRegistry');
    const TYPE_UNWRAP = { toNumber: () => -1 };
    const PRIMITIVE_ALIAS = {
        Char: 'u32',
        Str: 'Text'
    };
    const PATHS_ALIAS = splitNamespace([
        // full matching on exact names...
        // these are well-known types with additional encoding
        'sp_core::crypto::AccountId32',
        'sp_runtime::generic::era::Era',
        'sp_runtime::multiaddress::MultiAddress',
        // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
        'fp_account::AccountId20',
        'account::AccountId20',
        'polkadot_runtime_common::claims::EthereumAddress',
        // weights 2 is a structure, however for 1.5. with a single field it
        // should be flatenned (can appear in Compact<Weight> extrinsics)
        'frame_support::weights::weight_v2::Weight',
        'sp_weights::weight_v2::Weight',
        // wildcard matching in place...
        // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
        '*_democracy::vote::Vote',
        '*_conviction_voting::vote::Vote',
        '*_identity::types::Data',
        // these are opaque Vec<u8> wrappers
        'sp_core::OpaqueMetadata',
        'sp_core::OpaquePeerId',
        'sp_core::offchain::OpaqueMultiaddr',
        // shorten some well-known types
        'primitive_types::*',
        'sp_arithmetic::per_things::*',
        // runtime
        '*_runtime::RuntimeCall',
        '*_runtime::RuntimeEvent',
        // ink!
        'ink::env::types::*',
        'ink::primitives::types::*',
        'ink_env::types::*',
        'ink_primitives::types::*',
        // noir
        'np_runtime::accountname::AccountName',
        'np_runtime::universaladdress::UniversalAddress'
    ]);
    const PATHS_SET = splitNamespace([
        'pallet_identity::types::BitFlags'
    ]);
    const BITVEC_NS_LSB = ['bitvec::order::Lsb0', 'BitOrderLsb0'];
    const BITVEC_NS_MSB = ['bitvec::order::Msb0', 'BitOrderMsb0'];
    const BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB];
    const WRAPPERS = ['BoundedBTreeMap', 'BoundedBTreeSet', 'BoundedVec', 'Box', 'BTreeMap', 'BTreeSet', 'Cow', 'Option', 'Range', 'RangeInclusive', 'Result', 'WeakBoundedVec', 'WrapperKeepOpaque', 'WrapperOpaque'];
    const RESERVED = [
        // JS reserved words
        'entries', 'keys', 'new', 'size',
        // exposed by all Codec objects
        'hash', 'registry'
    ];
    const PATH_RM_INDEX_1 = ['generic', 'misc', 'pallet', 'traits', 'types'];
    /** @internal Converts a Text[] into string[] (used as part of definitions) */
    function sanitizeDocs(docs) {
        const count = docs.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = docs[i].toString();
        }
        return result;
    }
    /** @internal Split a namespace with :: into individual parts */
    function splitNamespace(values) {
        const count = values.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = values[i].split('::');
        }
        return result;
    }
    /** @internal Match a namespace based on parts (alongside wildcards) */
    function matchParts(first, second) {
        return first.length === second.length && first.every((a, index) => {
            const b = second[index].toString();
            if ((a === '*') || (a === b)) {
                return true;
            }
            if (a.includes('*') && a.includes('_') && b.includes('_')) {
                let suba = a.split('_');
                let subb = b.split('_');
                // match initial *'s to multiples if we have a match for the other
                if (suba[0] === '*') {
                    const indexOf = subb.indexOf(suba[1]);
                    if (indexOf !== -1) {
                        suba = suba.slice(1);
                        subb = subb.slice(indexOf);
                    }
                }
                // check for * matches at the end, adjust accordingly
                if ((suba.length === 2) && (suba[1] === '*') && (suba[0] === subb[0])) {
                    return true;
                }
                return matchParts(suba, subb);
            }
            return false;
        });
    }
    /** @internal check if the path matches the PATHS_ALIAS (with wildcards) */
    function getAliasPath({ def, path }) {
        // specific logic for weights - we override when non-complex struct
        // (as applied in Weight 1.5 where we also have `Compact<{ refTime: u64 }>)
        if (['frame_support::weights::weight_v2::Weight', 'sp_weights::weight_v2::Weight'].includes(path.join('::'))) {
            return !def.isComposite || def.asComposite.fields.length === 1
                ? 'WeightV1'
                : null;
        }
        // TODO We need to handle ink! Balance in some way
        return path.length && PATHS_ALIAS.some((a) => matchParts(a, path))
            ? path[path.length - 1].toString()
            : null;
    }
    /** @internal Converts a type name into a JS-API compatible name */
    function extractNameFlat(portable, lookupIndex, params, path, isInternal = false) {
        const count = path.length;
        // if we have no path or determined as a wrapper, we just skip it
        if (count === 0 || WRAPPERS.includes(path[count - 1].toString())) {
            return null;
        }
        const camels = new Array(count);
        const lowers = new Array(count);
        // initially just create arrays of the camelCase and lowercase path
        // parts - we will check these to extract the final values. While
        // we have 2 loops here, we also don't do the same operation twice
        for (let i = 0; i < count; i++) {
            const c = stringPascalCase(isInternal
                ? path[i].replace('pallet_', '')
                : path[i]);
            const l = c.toLowerCase();
            camels[i] = c;
            lowers[i] = l;
        }
        let name = '';
        for (let i = 0; i < count; i++) {
            const l = lowers[i];
            // Remove ::{generic, misc, pallet, traits, types}::
            if (i !== 1 || !PATH_RM_INDEX_1.includes(l)) {
                // sp_runtime::generic::digest::Digest -> sp_runtime::generic::Digest
                // sp_runtime::multiaddress::MultiAddress -> sp_runtime::MultiAddress
                if (l !== lowers[i + 1]) {
                    name += camels[i];
                }
            }
        }
        // do magic for RawOrigin lookup, e.g. pallet_collective::RawOrigin
        if (camels[1] === 'RawOrigin' && count === 2 && params.length === 2 && params[1].type.isSome) {
            const instanceType = portable[params[1].type.unwrap().toNumber()];
            if (instanceType.type.path.length === 2) {
                name = `${name}${instanceType.type.path[1].toString()}`;
            }
        }
        return { lookupIndex, name, params };
    }
    /** @internal Alias for extractNameFlat with PortableType as a last parameter */
    function extractName(portable, lookupIndex, { type: { params, path } }) {
        return extractNameFlat(portable, lookupIndex, params, path);
    }
    /** @internal Check for dupes from a specific index onwards */
    function nextDupeMatches(name, startAt, names) {
        const result = [names[startAt]];
        for (let i = startAt + 1, count = names.length; i < count; i++) {
            const v = names[i];
            if (v.name === name) {
                result.push(v);
            }
        }
        return result;
    }
    /** @internal Checks to see if a type is a full duplicate (with all params matching) */
    function rewriteDupes(input, rewrite) {
        const count = input.length;
        for (let i = 0; i < count; i++) {
            const a = input[i];
            for (let j = i + 1; j < count; j++) {
                const b = input[j];
                // if the indexes are not the same and the names match, we have a dupe
                if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
                    return false;
                }
            }
        }
        // add all the adjusted values to the rewite map
        for (let i = 0; i < count; i++) {
            const p = input[i];
            rewrite[p.lookupIndex] = p.name;
        }
        return true;
    }
    /** @internal Find duplicates and adjust the names based on parameters */
    function removeDupeNames(lookup, portable, names) {
        const rewrite = {};
        return names
            .map((original, startAt) => {
            const { lookupIndex, name, params } = original;
            if (!name) {
                // the name is empty (this is not expected, but have a failsafe)
                return null;
            }
            else if (rewrite[lookupIndex]) {
                // we have already rewritten this one, we can skip it
                return original;
            }
            // those where the name is matching starting from this index
            const allSame = nextDupeMatches(name, startAt, names);
            // we only have one, so all ok
            if (allSame.length === 1) {
                return original;
            }
            // are there param differences between matching names
            const anyDiff = allSame.some((o) => params.length !== o.params.length ||
                params.some((p, index) => !p.name.eq(o.params[index].name) ||
                    p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber()));
            // everything matches, we can combine these
            if (!anyDiff) {
                return original;
            }
            // TODO We probably want to attach all the indexes with differences,
            // not just the first
            // find the first parameter that yields differences
            const paramIdx = params.findIndex(({ type }, index) => allSame.every(({ params }, aIndex) => params[index].type.isSome && (aIndex === 0 ||
                !params[index].type.eq(type))));
            // No param found that is different
            if (paramIdx === -1) {
                return original;
            }
            // see if using the param type helps
            const sameCount = allSame.length;
            const adjusted = new Array(sameCount);
            // loop through all, specifically checking that index where the
            // first param yields differences
            for (let i = 0; i < sameCount; i++) {
                const { lookupIndex, name, params } = allSame[i];
                const { def, path } = lookup.getSiType(params[paramIdx].type.unwrap());
                // if it is not a primitive and it doesn't have a path, we really cannot
                // do anything at this point
                if (!def.isPrimitive && !path.length) {
                    return null;
                }
                adjusted[i] = {
                    lookupIndex,
                    name: def.isPrimitive
                        ? `${name}${def.asPrimitive.toString()}`
                        : `${name}${path[path.length - 1].toString()}`
                };
            }
            // check to see if the adjusted names have no issues
            if (rewriteDupes(adjusted, rewrite)) {
                return original;
            }
            // TODO This is duplicated from the section just above...
            // ... we certainly need a better solution here
            //
            // Last-ditch effort to use the full type path - ugly
            // loop through all, specifically checking that index where the
            // first param yields differences
            for (let i = 0; i < sameCount; i++) {
                const { lookupIndex, name, params } = allSame[i];
                const { def, path } = lookup.getSiType(params[paramIdx].type.unwrap());
                const flat = extractNameFlat(portable, lookupIndex, params, path, true);
                if (def.isPrimitive || !flat) {
                    return null;
                }
                adjusted[i] = {
                    lookupIndex,
                    name: `${name}${flat.name}`
                };
            }
            // check to see if the adjusted names have no issues
            if (rewriteDupes(adjusted, rewrite)) {
                return original;
            }
            return null;
        })
            .filter((n) => !!n)
            .map(({ lookupIndex, name, params }) => ({
            lookupIndex,
            name: rewrite[lookupIndex] || name,
            params
        }));
    }
    /** @internal Detect on-chain types (AccountId/Signature) as set as the default */
    function registerTypes(lookup, lookups, names, params) {
        // Register the types we extracted
        lookup.registry.register(lookups);
        // Try and extract the AccountId/Address/Signature type from UncheckedExtrinsic
        if (params.SpRuntimeUncheckedExtrinsic) {
            // Address, Call, Signature, Extra
            const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
            const siAddress = lookup.getSiType(addrParam.type.unwrap());
            const siSignature = lookup.getSiType(sigParam.type.unwrap());
            const nsSignature = siSignature.path.join('::');
            let nsAccountId = siAddress.path.join('::');
            const isMultiAddress = nsAccountId === 'sp_runtime::multiaddress::MultiAddress';
            // With multiaddress, we check the first type param again
            if (isMultiAddress) {
                // AccountId, AccountIndex
                const [idParam] = siAddress.params;
                nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join('::');
            }
            lookup.registry.register({
                // known: account::AccountId20, fp_account::AccountId20, primitive_types::H160
                AccountId: nsAccountId.endsWith('::AccountId20') || nsAccountId.endsWith('::H160')
                    ? 'AccountId20'
                    : 'AccountId32',
                Address: isMultiAddress
                    ? 'MultiAddress'
                    : 'AccountId',
                ExtrinsicSignature: ['sp_runtime::MultiSignature'].includes(nsSignature)
                    ? 'MultiSignature'
                    : names[sigParam.type.unwrap().toNumber()] || 'MultiSignature'
            });
        }
    }
    /**
     * @internal Extracts aliases based on what we know the runtime config looks like in a
     * Substrate chain. Specifically we want to have access to the Call and Event params
     **/
    function extractAliases(params, isContract) {
        const hasParams = Object.keys(params).some((k) => !k.startsWith('Pallet'));
        const alias = {};
        if (params.SpRuntimeUncheckedExtrinsic) {
            // Address, Call, Signature, Extra
            const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
            alias[type.unwrap().toNumber()] = 'Call';
        }
        else if (hasParams && !isContract) {
            l$6.warn('Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic');
        }
        if (params.FrameSystemEventRecord) {
            // Event, Topic
            const [{ type }] = params.FrameSystemEventRecord;
            alias[type.unwrap().toNumber()] = 'Event';
        }
        else if (hasParams && !isContract) {
            l$6.warn('Unable to determine runtime Event type, cannot inspect frame_system::EventRecord');
        }
        return alias;
    }
    /** @internal Extracts all the intreresting type information for this registry */
    function extractTypeInfo(lookup, portable) {
        const nameInfo = [];
        const types = {};
        for (let i = 0, count = portable.length; i < count; i++) {
            const type = portable[i];
            const lookupIndex = type.id.toNumber();
            const extracted = extractName(portable, lookupIndex, portable[i]);
            if (extracted) {
                nameInfo.push(extracted);
            }
            types[lookupIndex] = type;
        }
        const lookups = {};
        const names = {};
        const params = {};
        const dedup = removeDupeNames(lookup, portable, nameInfo);
        for (let i = 0, count = dedup.length; i < count; i++) {
            const { lookupIndex, name, params: p } = dedup[i];
            names[lookupIndex] = name;
            lookups[name] = lookup.registry.createLookupType(lookupIndex);
            params[name] = p;
        }
        return { lookups, names, params, types };
    }
    class PortableRegistry extends Struct {
        constructor(registry, value, isContract) {
            // const timeStart = performance.now()
            super(registry, {
                types: 'Vec<PortableType>'
            }, value);
            this.__internal__typeDefs = {};
            const { lookups, names, params, types } = extractTypeInfo(this, this.types);
            this.__internal__alias = extractAliases(params, isContract);
            this.__internal__lookups = lookups;
            this.__internal__names = names;
            this.__internal__params = params;
            this.__internal__types = types;
            // console.log('PortableRegistry', `${(performance.now() - timeStart).toFixed(2)}ms`)
        }
        /**
         * @description Returns all the available type names for this chain
         **/
        get names() {
            return Object.values(this.__internal__names).sort();
        }
        /**
         * @description Returns all the available parameterized types for this chain
         **/
        get paramTypes() {
            return this.__internal__params;
        }
        /**
         * @description The types of the registry
         */
        get types() {
            return this.getT('types');
        }
        /**
         * @description Register all available types into the registry (generally for internal usage)
         */
        register() {
            registerTypes(this, this.__internal__lookups, this.__internal__names, this.__internal__params);
        }
        /**
         * @description Returns the name for a specific lookup
         */
        getName(lookupId) {
            return this.__internal__names[this.__internal__getLookupId(lookupId)];
        }
        /**
         * @description Finds a specific type in the registry
         */
        getSiType(lookupId) {
            // NOTE catch-22 - this may already be used as part of the constructor, so
            // ensure that we have actually initialized it correctly
            const found = (this.__internal__types || this.types)[this.__internal__getLookupId(lookupId)];
            if (!found) {
                throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
            }
            return found.type;
        }
        /**
         * @description Lookup the type definition for the index
         */
        getTypeDef(lookupId) {
            const lookupIndex = this.__internal__getLookupId(lookupId);
            if (!this.__internal__typeDefs[lookupIndex]) {
                const lookupName = this.__internal__names[lookupIndex];
                const empty = {
                    info: TypeDefInfo.DoNotConstruct,
                    lookupIndex,
                    lookupName,
                    type: this.registry.createLookupType(lookupIndex)
                };
                // Set named items since we will get into circular lookups along the way
                if (lookupName) {
                    this.__internal__typeDefs[lookupIndex] = empty;
                }
                const extracted = this.__internal__extract(this.getSiType(lookupId), lookupIndex);
                // For non-named items, we only set this right at the end
                if (!lookupName) {
                    this.__internal__typeDefs[lookupIndex] = empty;
                }
                Object.keys(extracted).forEach((k) => {
                    if (k !== 'lookupName' || extracted[k]) {
                        // these are safe since we are looking through the keys as set
                        this.__internal__typeDefs[lookupIndex][k] = extracted[k];
                    }
                });
                // don't set lookupName on lower-level, we want to always direct to the type
                if (extracted.info === TypeDefInfo.Plain) {
                    this.__internal__typeDefs[lookupIndex].lookupNameRoot = this.__internal__typeDefs[lookupIndex].lookupName;
                    delete this.__internal__typeDefs[lookupIndex].lookupName;
                }
            }
            return this.__internal__typeDefs[lookupIndex];
        }
        /**
         * @description For a specific field, perform adjustments to not have built-in conflicts
         */
        sanitizeField(name) {
            let nameField = null;
            let nameOrig = null;
            if (name.isSome) {
                nameField = stringCamelCase(name.unwrap());
                if (nameField.includes('#')) {
                    nameOrig = nameField;
                    nameField = nameOrig.replace(/#/g, '_');
                }
                else if (RESERVED.includes(nameField)) {
                    nameOrig = nameField;
                    nameField = `${nameField}_`;
                }
            }
            return [nameField, nameOrig];
        }
        /** @internal Creates a TypeDef based on an internal lookupId */
        __internal__createSiDef(lookupId) {
            const typeDef = this.getTypeDef(lookupId);
            const lookupIndex = lookupId.toNumber();
            // Setup for a lookup on complex types
            return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName
                ? {
                    docs: typeDef.docs,
                    info: TypeDefInfo.Si,
                    lookupIndex,
                    lookupName: this.__internal__names[lookupIndex],
                    type: this.registry.createLookupType(lookupId)
                }
                : typeDef;
        }
        /** @internal Converts a lookupId input to the actual lookup index */
        __internal__getLookupId(lookupId) {
            if (isString(lookupId)) {
                if (!this.registry.isLookupType(lookupId)) {
                    throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
                }
                return parseInt(lookupId.replace('Lookup', ''), 10);
            }
            else if (isNumber(lookupId)) {
                return lookupId;
            }
            return lookupId.toNumber();
        }
        /** @internal Converts a type into a TypeDef for Codec usage */
        __internal__extract(type, lookupIndex) {
            const namespace = type.path.join('::');
            let typeDef;
            const aliasType = this.__internal__alias[lookupIndex] || getAliasPath(type);
            try {
                if (aliasType) {
                    typeDef = this.__internal__extractAliasPath(lookupIndex, aliasType);
                }
                else {
                    switch (type.def.type) {
                        case 'Array':
                            typeDef = this.__internal__extractArray(lookupIndex, type.def.asArray);
                            break;
                        case 'BitSequence':
                            typeDef = this.__internal__extractBitSequence(lookupIndex, type.def.asBitSequence);
                            break;
                        case 'Compact':
                            typeDef = this.__internal__extractCompact(lookupIndex, type.def.asCompact);
                            break;
                        case 'Composite':
                            typeDef = this.__internal__extractComposite(lookupIndex, type, type.def.asComposite);
                            break;
                        case 'HistoricMetaCompat':
                            typeDef = this.__internal__extractHistoric(lookupIndex, type.def.asHistoricMetaCompat);
                            break;
                        case 'Primitive':
                            typeDef = this.__internal__extractPrimitive(lookupIndex, type);
                            break;
                        case 'Sequence':
                            typeDef = this.__internal__extractSequence(lookupIndex, type.def.asSequence);
                            break;
                        case 'Tuple':
                            typeDef = this.__internal__extractTuple(lookupIndex, type.def.asTuple);
                            break;
                        case 'Variant':
                            typeDef = this.__internal__extractVariant(lookupIndex, type, type.def.asVariant);
                            break;
                        default: assertUnreachable(type.def.type);
                    }
                }
            }
            catch (error) {
                throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ''}: Error extracting ${stringify(type)}: ${error.message}`);
            }
            return objectSpread({
                docs: sanitizeDocs(type.docs),
                namespace
            }, typeDef);
        }
        /** @internal Extracts a ScaleInfo Array into TypeDef.VecFixed */
        __internal__extractArray(_, { len, type }) {
            const length = len.toNumber();
            if (length > 2048) {
                throw new Error('Only support for [Type; <length>], where length <= 2048');
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.VecFixed,
                length,
                sub: this.__internal__createSiDef(type)
            });
        }
        /** @internal Extracts a ScaleInfo BitSequence into TypeDef.Plain */
        __internal__extractBitSequence(_, { bitOrderType, bitStoreType }) {
            // With the v3 of scale-info this swapped around, but obviously the decoder cannot determine
            // the order. With that in-mind, we apply a detection for LSb0/Msb and set accordingly
            const a = this.__internal__createSiDef(bitOrderType);
            const b = this.__internal__createSiDef(bitStoreType);
            const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || '')
                ? [a, b]
                : [b, a];
            if (!bitOrder.namespace || !BITVEC_NS.includes(bitOrder.namespace)) {
                throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || '<unknown>'}`);
            }
            else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== 'u8') {
                throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
            }
            BITVEC_NS_LSB.includes(bitOrder.namespace);
            return {
                info: TypeDefInfo.Plain,
                type: 'BitVec'
            };
        }
        /** @internal Extracts a ScaleInfo Compact into TypeDef.Compact */
        __internal__extractCompact(_, { type }) {
            return withTypeString(this.registry, {
                info: TypeDefInfo.Compact,
                sub: this.__internal__createSiDef(type)
            });
        }
        /** @internal Extracts a ScaleInfo Composite into TypeDef.{BTree*, Range*, Wrapper*} */
        __internal__extractComposite(lookupIndex, { params, path }, { fields }) {
            if (path.length) {
                const pathFirst = path[0].toString();
                const pathLast = path[path.length - 1].toString();
                if (path.length === 1 && pathFirst === 'BTreeMap') {
                    if (params.length !== 2) {
                        throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
                    }
                    return withTypeString(this.registry, {
                        info: TypeDefInfo.BTreeMap,
                        sub: params.map(({ type }) => this.__internal__createSiDef(type.unwrap()))
                    });
                }
                else if (path.length === 1 && pathFirst === 'BTreeSet') {
                    if (params.length !== 1) {
                        throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
                    }
                    return withTypeString(this.registry, {
                        info: TypeDefInfo.BTreeSet,
                        sub: this.__internal__createSiDef(params[0].type.unwrap())
                    });
                }
                else if (['Range', 'RangeInclusive'].includes(pathFirst)) {
                    if (params.length !== 1) {
                        throw new Error(`Range requires 1 parameter, found ${params.length}`);
                    }
                    return withTypeString(this.registry, {
                        info: pathFirst === 'Range'
                            ? TypeDefInfo.Range
                            : TypeDefInfo.RangeInclusive,
                        sub: this.__internal__createSiDef(params[0].type.unwrap()),
                        type: pathFirst
                    });
                }
                else if (['WrapperKeepOpaque', 'WrapperOpaque'].includes(pathLast)) {
                    if (params.length !== 1) {
                        throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
                    }
                    return withTypeString(this.registry, {
                        info: pathLast === 'WrapperKeepOpaque'
                            ? TypeDefInfo.WrapperKeepOpaque
                            : TypeDefInfo.WrapperOpaque,
                        sub: this.__internal__createSiDef(params[0].type.unwrap()),
                        type: pathLast
                    });
                }
            }
            return PATHS_SET.some((p) => matchParts(p, path))
                ? this.__internal__extractCompositeSet(lookupIndex, params, fields)
                : this.__internal__extractFields(lookupIndex, fields);
        }
        /** @internal Extracts a ScaleInfo CompositeSet into TypeDef.Set */
        __internal__extractCompositeSet(_, params, fields) {
            if (params.length !== 1 || fields.length !== 1) {
                throw new Error('Set handling expects param/field as single entries');
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.Set,
                length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
                sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index, name }) => ({
                    // This will be an issue > 2^53 - 1 ... don't have those (yet)
                    index: index.toNumber(),
                    info: TypeDefInfo.Plain,
                    name: name.toString(),
                    type: 'Null'
                }))
            });
        }
        /** @internal Extracts ScaleInfo enum/struct fields into TypeDef.{Struct, Tuple} */
        __internal__extractFields(lookupIndex, fields) {
            let isStruct = true;
            let isTuple = true;
            const count = fields.length;
            for (let f = 0; f < count; f++) {
                const { name } = fields[f];
                isStruct = isStruct && name.isSome;
                isTuple = isTuple && name.isNone;
            }
            if (!isTuple && !isStruct) {
                throw new Error('Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)');
            }
            if (count === 0) {
                return {
                    info: TypeDefInfo.Null,
                    type: 'Null'
                };
            }
            else if (isTuple && count === 1) {
                const typeDef = this.__internal__createSiDef(fields[0].type);
                return objectSpread({}, typeDef, lookupIndex === -1
                    ? null
                    : {
                        lookupIndex,
                        lookupName: this.__internal__names[lookupIndex],
                        lookupNameRoot: typeDef.lookupName
                    }, fields[0].typeName.isSome
                    ? { typeName: sanitize(fields[0].typeName.unwrap()) }
                    : null);
            }
            const [sub, alias] = this.__internal__extractFieldsAlias(fields);
            return withTypeString(this.registry, objectSpread({
                info: isTuple // Tuple check first
                    ? TypeDefInfo.Tuple
                    : TypeDefInfo.Struct,
                sub
            }, alias.size
                ? { alias }
                : null, lookupIndex === -1
                ? null
                : {
                    lookupIndex,
                    lookupName: this.__internal__names[lookupIndex]
                }));
        }
        /** @internal Apply field aliassed (with no JS conflicts) */
        __internal__extractFieldsAlias(fields) {
            const alias = new Map();
            const count = fields.length;
            const sub = new Array(count);
            for (let i = 0; i < count; i++) {
                const { docs, name, type, typeName } = fields[i];
                const typeDef = this.__internal__createSiDef(type);
                if (name.isNone) {
                    sub[i] = typeDef;
                }
                else {
                    const [nameField, nameOrig] = this.sanitizeField(name);
                    if (nameField && nameOrig) {
                        alias.set(nameField, nameOrig);
                    }
                    sub[i] = objectSpread({
                        docs: sanitizeDocs(docs),
                        name: nameField
                    }, typeDef, typeName.isSome
                        ? { typeName: sanitize(typeName.unwrap()) }
                        : null);
                }
            }
            return [sub, alias];
        }
        /** @internal Extracts an internal Historic (pre V14) type  */
        __internal__extractHistoric(_, type) {
            return objectSpread({
                displayName: type.toString(),
                isFromSi: true
            }, getTypeDef(type));
        }
        /** @internal Extracts a ScaleInfo Primitive into TypeDef.Plain */
        __internal__extractPrimitive(_, type) {
            const typeStr = type.def.asPrimitive.type.toString();
            return {
                info: TypeDefInfo.Plain,
                type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
            };
        }
        /** @internal Applies an alias path onto the TypeDef */
        __internal__extractAliasPath(_, type) {
            return {
                info: TypeDefInfo.Plain,
                type
            };
        }
        /** @internal Extracts a ScaleInfo Sequence into TypeDef.Vec (with Bytes shortcut) */
        __internal__extractSequence(lookupIndex, { type }) {
            const sub = this.__internal__createSiDef(type);
            if (sub.type === 'u8') {
                return {
                    info: TypeDefInfo.Plain,
                    type: 'Bytes'
                };
            }
            return withTypeString(this.registry, {
                info: TypeDefInfo.Vec,
                lookupIndex,
                lookupName: this.__internal__names[lookupIndex],
                sub
            });
        }
        /** @internal Extracts a ScaleInfo Tuple into TypeDef.Tuple */
        __internal__extractTuple(lookupIndex, ids) {
            if (ids.length === 0) {
                return {
                    info: TypeDefInfo.Null,
                    type: 'Null'
                };
            }
            else if (ids.length === 1) {
                return this.getTypeDef(ids[0]);
            }
            const sub = ids.map((t) => this.__internal__createSiDef(t));
            return withTypeString(this.registry, {
                info: TypeDefInfo.Tuple,
                lookupIndex,
                lookupName: this.__internal__names[lookupIndex],
                sub
            });
        }
        /** @internal Extracts a ScaleInfo Variant into TypeDef.{Option, Result, Enum} */
        __internal__extractVariant(lookupIndex, { params, path }, { variants }) {
            if (path.length) {
                const specialVariant = path[0].toString();
                if (specialVariant === 'Option') {
                    if (params.length !== 1) {
                        throw new Error(`Option requires 1 parameter, found ${params.length}`);
                    }
                    // NOTE This is opt-in (unhandled), not by default
                    // if (sub.type === 'bool') {
                    //   return withTypeString(this.registry, {
                    //     info: TypeDefInfo.Plain,
                    //     type: 'OptionBool'
                    //   });
                    // }
                    return withTypeString(this.registry, {
                        info: TypeDefInfo.Option,
                        sub: this.__internal__createSiDef(params[0].type.unwrap())
                    });
                }
                else if (specialVariant === 'Result') {
                    if (params.length !== 2) {
                        throw new Error(`Result requires 2 parameters, found ${params.length}`);
                    }
                    return withTypeString(this.registry, {
                        info: TypeDefInfo.Result,
                        sub: params.map(({ type }, index) => objectSpread({
                            name: ['Ok', 'Error'][index]
                        }, this.__internal__createSiDef(type.unwrap())))
                    });
                }
            }
            if (variants.length === 0) {
                return {
                    info: TypeDefInfo.Null,
                    type: 'Null'
                };
            }
            return this.__internal__extractVariantEnum(lookupIndex, variants);
        }
        /** @internal Extracts a ScaleInfo Variant into TypeDef.Enum */
        __internal__extractVariantEnum(lookupIndex, variants) {
            const sub = [];
            // we may get entries out of order, arrange them first before creating with gaps filled
            // NOTE: Since we mutate, use a copy of the array as an input
            variants
                .slice()
                .sort((a, b) => a.index.cmp(b.index))
                .forEach(({ fields, index: bnIndex, name }) => {
                const index = bnIndex.toNumber();
                while (sub.length !== index) {
                    sub.push({
                        index: sub.length,
                        info: TypeDefInfo.Null,
                        name: `__Unused${sub.length}`,
                        type: 'Null'
                    });
                }
                sub.push(objectSpread(this.__internal__extractFields(-1, fields), {
                    index,
                    name: name.toString()
                }));
            });
            return withTypeString(this.registry, {
                info: TypeDefInfo.Enum,
                lookupIndex,
                lookupName: this.__internal__names[lookupIndex],
                sub
            });
        }
    }

    /** @internal */
    function flattenUniq(list, result = []) {
        for (let i = 0, count = list.length; i < count; i++) {
            const entry = list[i];
            if (Array.isArray(entry)) {
                flattenUniq(entry, result);
            }
            else {
                result.push(entry);
            }
        }
        return [...new Set(result)];
    }

    function getSiName(lookup, type) {
        const typeDef = lookup.getTypeDef(type);
        return typeDef.lookupName || typeDef.type;
    }

    function extractSubSingle(_, { sub }) {
        const { lookupName, type } = sub;
        return extractTypes$1([lookupName || type]);
    }
    function extractSubArray(_, { sub }) {
        return extractTypes$1(sub.map(({ lookupName, type }) => lookupName || type));
    }
    function unhandled(type, { info }) {
        throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info]})`);
    }
    const mapping = {
        [TypeDefInfo.BTreeMap]: extractSubArray,
        [TypeDefInfo.BTreeSet]: extractSubSingle,
        [TypeDefInfo.Compact]: extractSubSingle,
        [TypeDefInfo.DoNotConstruct]: unhandled,
        [TypeDefInfo.Enum]: extractSubArray,
        [TypeDefInfo.HashMap]: extractSubArray,
        [TypeDefInfo.Int]: unhandled,
        [TypeDefInfo.Linkage]: extractSubSingle,
        [TypeDefInfo.Null]: unhandled,
        [TypeDefInfo.Option]: extractSubSingle,
        [TypeDefInfo.Plain]: (_, typeDef) => typeDef.lookupName || typeDef.type,
        [TypeDefInfo.Range]: extractSubSingle,
        [TypeDefInfo.RangeInclusive]: extractSubSingle,
        [TypeDefInfo.Result]: extractSubArray,
        [TypeDefInfo.Set]: extractSubArray,
        [TypeDefInfo.Si]: unhandled,
        [TypeDefInfo.Struct]: extractSubArray,
        [TypeDefInfo.Tuple]: extractSubArray,
        [TypeDefInfo.UInt]: unhandled,
        [TypeDefInfo.Vec]: extractSubSingle,
        [TypeDefInfo.VecFixed]: extractSubSingle,
        [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
        [TypeDefInfo.WrapperOpaque]: extractSubSingle
    };
    /** @internal */
    function extractTypes$1(types) {
        const count = types.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            const type = types[i];
            const typeDef = getTypeDef(type);
            result[i] = mapping[typeDef.info](type, typeDef);
        }
        return result;
    }

    const l$5 = logger('metadata');
    /** @internal */
    function validateTypes(registry, throwError, types) {
        const missing = flattenUniq(extractTypes$1(types))
            .filter((type) => !registry.hasType(type) &&
            !registry.isLookupType(type))
            .sort();
        if (missing.length !== 0) {
            const message = `Unknown types found, no types for ${missing.join(', ')}`;
            if (throwError) {
                throw new Error(message);
            }
            else {
                l$5.warn(message);
            }
        }
        return types;
    }

    /** @internal */
    function extractTypes(lookup, types) {
        return types.map(({ type }) => lookup.getTypeDef(type).type);
    }
    /** @internal */
    function extractFieldTypes(lookup, type) {
        return lookup.getSiType(type).def.asVariant.variants.map(({ fields }) => extractTypes(lookup, fields));
    }
    /** @internal */
    function getPalletNames({ lookup, pallets }) {
        return pallets.reduce((all, { calls, constants, events, storage }) => {
            all.push([extractTypes(lookup, constants)]);
            if (calls.isSome) {
                all.push(extractFieldTypes(lookup, calls.unwrap().type));
            }
            if (events.isSome) {
                all.push(extractFieldTypes(lookup, events.unwrap().type));
            }
            if (storage.isSome) {
                all.push(storage.unwrap().items.map(({ type }) => {
                    if (type.isPlain) {
                        return [lookup.getTypeDef(type.asPlain).type];
                    }
                    const { hashers, key, value } = type.asMap;
                    return hashers.length === 1
                        ? [
                            lookup.getTypeDef(value).type,
                            lookup.getTypeDef(key).type
                        ]
                        : [
                            lookup.getTypeDef(value).type,
                            ...lookup.getSiType(key).def.asTuple.map((t) => lookup.getTypeDef(t).type)
                        ];
                }));
            }
            return all;
        }, []);
    }
    /** @internal */
    function getUniqTypes(registry, meta, throwError) {
        return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
    }

    function trimDocs(docs) {
        const strings = docs.map((d) => d.toString().trim());
        const firstEmpty = strings.findIndex((d) => !d.length);
        return firstEmpty === -1
            ? strings
            : strings.slice(0, firstEmpty);
    }
    /** @internal */
    function toCallsOnly(registry, { extrinsic, lookup, pallets }) {
        return registry.createTypeUnsafe('MetadataLatest', [{
                extrinsic,
                lookup: {
                    types: lookup.types.map(({ id, type }) => registry.createTypeUnsafe('PortableType', [{
                            id,
                            type: objectSpread({}, type, { docs: trimDocs(type.docs) })
                        }]))
                },
                pallets: pallets.map(({ calls, index, name }) => ({
                    calls: registry.createTypeUnsafe('Option<PalletCallMetadataLatest>', [calls.unwrapOr(null)]),
                    index,
                    name
                }))
            }]).toJSON();
    }

    /** @internal */
    function unwrapStorageSi(type) {
        return type.isPlain
            ? type.asPlain
            : type.asMap.value;
    }
    /** @internal */
    function unwrapStorageType(registry, type, isOptional) {
        const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
        return isOptional
            ? `Option<${outputType}>`
            : outputType;
    }

    function lazyVariants(lookup, { type }, getName, creator) {
        const result = {};
        const variants = lookup.getSiType(type).def.asVariant.variants;
        for (let i = 0, count = variants.length; i < count; i++) {
            lazyMethod(result, variants[i], creator, getName, i);
        }
        return result;
    }

    const emptyCheck = {
        extrinsic: {},
        payload: {}
    };

    const polkadot = {
        LimitParathreadCommits: emptyCheck,
        OnlyStakingAndClaims: emptyCheck,
        PrevalidateAttests: emptyCheck,
        RestrictFunctionality: emptyCheck,
        TransactionCallFilter: emptyCheck,
        ValidateDoubleVoteReports: emptyCheck
    };

    const shell = {
        DisallowSigned: emptyCheck
    };

    const statemint = {
        ChargeAssetTxPayment: {
            extrinsic: {
                tip: 'Compact<Balance>',
                // eslint-disable-next-line sort-keys
                assetId: 'Option<AssetId>'
            },
            payload: {}
        }
    };

    const CheckMortality = {
        extrinsic: {
            era: 'ExtrinsicEra'
        },
        payload: {
            blockHash: 'Hash'
        }
    };
    const substrate$1 = {
        ChargeTransactionPayment: {
            extrinsic: {
                tip: 'Compact<Balance>'
            },
            payload: {}
        },
        CheckBlockGasLimit: emptyCheck,
        CheckEra: CheckMortality,
        CheckGenesis: {
            extrinsic: {},
            payload: {
                genesisHash: 'Hash'
            }
        },
        CheckMortality,
        CheckNonZeroSender: emptyCheck,
        CheckNonce: {
            extrinsic: {
                nonce: 'Compact<Index>'
            },
            payload: {}
        },
        CheckSpecVersion: {
            extrinsic: {},
            payload: {
                specVersion: 'u32'
            }
        },
        CheckTxVersion: {
            extrinsic: {},
            payload: {
                transactionVersion: 'u32'
            }
        },
        CheckVersion: {
            extrinsic: {},
            payload: {
                specVersion: 'u32'
            }
        },
        CheckWeight: emptyCheck,
        LockStakingStatus: emptyCheck,
        ValidateEquivocationReport: emptyCheck
    };

    const allExtensions = objectSpread({}, substrate$1, polkadot, shell, statemint);
    const fallbackExtensions = [
        'CheckVersion',
        'CheckGenesis',
        'CheckEra',
        'CheckNonce',
        'CheckWeight',
        'ChargeTransactionPayment',
        'CheckBlockGasLimit'
    ];
    function findUnknownExtensions(extensions, userExtensions = {}) {
        const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
        return extensions.filter((k) => !names.includes(k));
    }
    function expandExtensionTypes(extensions, type, userExtensions = {}) {
        return extensions
            // Always allow user extensions first - these should provide overrides
            .map((k) => userExtensions[k] || allExtensions[k])
            .filter((info) => !!info)
            .reduce((result, info) => objectSpread(result, info[type]), {});
    }

    /** @internal */
    function decodeEvent(registry, value) {
        if (!value?.length) {
            return { DataType: Null };
        }
        const index = value.subarray(0, 2);
        return {
            DataType: registry.findMetaEvent(index),
            value: {
                data: value.subarray(2),
                index
            }
        };
    }
    /**
     * @name GenericEventData
     * @description
     * Wrapper for the actual data that forms part of an [[Event]]
     */
    class GenericEventData extends Tuple {
        constructor(registry, value, meta, section = '<unknown>', method = '<unknown>') {
            const fields = meta?.fields || [];
            super(registry, fields.map(({ type }) => registry.createLookupType(type)), value);
            this.__internal__names = null;
            this.__internal__meta = meta;
            this.__internal__method = method;
            this.__internal__section = section;
            this.__internal__typeDef = fields.map(({ type }) => registry.lookup.getTypeDef(type));
            const names = fields
                .map(({ name }) => registry.lookup.sanitizeField(name)[0])
                .filter((n) => !!n);
            if (names.length === fields.length) {
                this.__internal__names = names;
                objectProperties(this, names, (_, i) => this[i]);
            }
        }
        /**
         * @description The wrapped [[EventMetadata]]
         */
        get meta() {
            return this.__internal__meta;
        }
        /**
         * @description The method as a string
         */
        get method() {
            return this.__internal__method;
        }
        /**
         * @description The field names (as available)
         */
        get names() {
            return this.__internal__names;
        }
        /**
         * @description The section as a string
         */
        get section() {
            return this.__internal__section;
        }
        /**
         * @description The [[TypeDef]] for this event
         */
        get typeDef() {
            return this.__internal__typeDef;
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            if (this.__internal__names !== null) {
                const json = {};
                for (let i = 0, count = this.__internal__names.length; i < count; i++) {
                    json[this.__internal__names[i]] = this[i].toHuman(isExtended);
                }
                return json;
            }
            return super.toHuman(isExtended);
        }
    }
    /**
     * @name GenericEvent
     * @description
     * A representation of a system event. These are generated via the [[Metadata]] interfaces and
     * specific to a specific Substrate runtime
     */
    class GenericEvent extends Struct {
        // Currently we _only_ decode from Uint8Array, since we expect it to
        // be used via EventRecord
        constructor(registry, _value) {
            const { DataType, value } = decodeEvent(registry, _value);
            super(registry, {
                index: 'EventId',
                // eslint-disable-next-line sort-keys
                data: DataType
            }, value);
        }
        /**
         * @description The wrapped [[EventData]]
         */
        get data() {
            return this.getT('data');
        }
        /**
         * @description The [[EventId]], identifying the raw event
         */
        get index() {
            return this.getT('index');
        }
        /**
         * @description The [[EventMetadata]] with the documentation
         */
        get meta() {
            return this.data.meta;
        }
        /**
         * @description The method string identifying the event
         */
        get method() {
            return this.data.method;
        }
        /**
         * @description The section string identifying the event
         */
        get section() {
            return this.data.section;
        }
        /**
         * @description The [[TypeDef]] for the event
         */
        get typeDef() {
            return this.data.typeDef;
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExpanded) {
            return objectSpread({
                method: this.method,
                section: this.section
            }, isExpanded
                ? { docs: this.meta.docs.map((d) => d.toString()) }
                : null, super.toHuman(isExpanded));
        }
    }

    const EXTRINSIC_VERSION = 4;
    /**
     * @name GenericExtrinsicV4
     * @description
     * The third generation of compact extrinsics
     */
    class GenericExtrinsicV4 extends Struct {
        constructor(registry, value, { isSigned } = {}) {
            super(registry, {
                signature: 'ExtrinsicSignatureV4',
                // eslint-disable-next-line sort-keys
                method: 'Call'
            }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
        }
        /** @internal */
        static decodeExtrinsic(registry, value, isSigned = false) {
            if (value instanceof GenericExtrinsicV4) {
                return value;
            }
            else if (value instanceof registry.createClassUnsafe('Call')) {
                return { method: value };
            }
            else if (isU8a(value)) {
                // here we decode manually since we need to pull through the version information
                const signature = registry.createTypeUnsafe('ExtrinsicSignatureV4', [value, { isSigned }]);
                const method = registry.createTypeUnsafe('Call', [value.subarray(signature.encodedLength)]);
                return {
                    method,
                    signature
                };
            }
            return value || {};
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description The [[Call]] this extrinsic wraps
         */
        get method() {
            return this.getT('method');
        }
        /**
         * @description The [[ExtrinsicSignatureV4]]
         */
        get signature() {
            return this.getT('signature');
        }
        /**
         * @description The version for the signature
         */
        get version() {
            return EXTRINSIC_VERSION;
        }
        /**
         * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
         */
        addSignature(signer, signature, payload) {
            this.signature.addSignature(signer, signature, payload);
            return this;
        }
        /**
         * @description Sign the extrinsic with a specific keypair
         */
        sign(account, options) {
            this.signature.sign(this.method, account, options);
            return this;
        }
        /**
         * @describe Adds a fake signature to the extrinsic
         */
        signFake(signer, options) {
            this.signature.signFake(this.method, signer, options);
            return this;
        }
    }

    const BIT_SIGNED = 0b10000000;
    const BIT_UNSIGNED = 0;
    const EMPTY_U8A = new Uint8Array();
    const DEFAULT_VERSION = 4;
    const IMMORTAL_ERA = new Uint8Array([0]);
    const UNMASK_VERSION = 0b01111111;

    const VERSIONS$1 = [
        'ExtrinsicUnknown',
        'ExtrinsicUnknown',
        'ExtrinsicUnknown',
        'ExtrinsicUnknown',
        'ExtrinsicV4'
    ];
    /** @internal */
    function newFromValue(registry, value, version) {
        if (value instanceof GenericExtrinsic) {
            return value.unwrap();
        }
        const isSigned = (version & BIT_SIGNED) === BIT_SIGNED;
        const type = VERSIONS$1[version & UNMASK_VERSION] || VERSIONS$1[0];
        // we cast here since the VERSION definition is incredibly broad - we don't have a
        // slice for "only add extrinsic types", and more string definitions become unwieldy
        return registry.createTypeUnsafe(type, [value, { isSigned, version }]);
    }
    /** @internal */
    function decodeExtrinsic(registry, value, version = DEFAULT_VERSION) {
        if (isU8a(value) || Array.isArray(value) || isHex(value)) {
            return decodeU8a$4(registry, u8aToU8a(value), version);
        }
        else if (value instanceof registry.createClassUnsafe('Call')) {
            return newFromValue(registry, { method: value }, version);
        }
        return newFromValue(registry, value, version);
    }
    /** @internal */
    function decodeU8a$4(registry, value, version) {
        if (!value.length) {
            return newFromValue(registry, new Uint8Array(), version);
        }
        const [offset, length] = compactFromU8a(value);
        const total = offset + length.toNumber();
        if (total > value.length) {
            throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
        }
        const data = value.subarray(offset, total);
        return newFromValue(registry, data.subarray(1), data[0]);
    }
    class ExtrinsicBase extends AbstractBase {
        constructor(registry, value, initialU8aLength) {
            super(registry, value, initialU8aLength);
            const signKeys = Object.keys(registry.getSignedExtensionTypes());
            const getter = (key) => this.inner.signature[key];
            // This is on the abstract class, ensuring that hasOwnProperty operates
            // correctly, i.e. it needs to be on the base class exposing it
            for (let i = 0, count = signKeys.length; i < count; i++) {
                objectProperty(this, signKeys[i], getter);
            }
        }
        /**
         * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
         */
        get args() {
            return this.method.args;
        }
        /**
         * @description The argument definitions, compatible with [[Call]]
         */
        get argsDef() {
            return this.method.argsDef;
        }
        /**
         * @description The actual `[sectionIndex, methodIndex]` as used in the Call
         */
        get callIndex() {
            return this.method.callIndex;
        }
        /**
         * @description The actual data for the Call
         */
        get data() {
            return this.method.data;
        }
        /**
         * @description The era for this extrinsic
         */
        get era() {
            return this.inner.signature.era;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description `true` id the extrinsic is signed
         */
        get isSigned() {
            return this.inner.signature.isSigned;
        }
        /**
         * @description The length of the actual data, excluding prefix
         */
        get length() {
            return this.toU8a(true).length;
        }
        /**
         * @description The [[FunctionMetadataLatest]] that describes the extrinsic
         */
        get meta() {
            return this.method.meta;
        }
        /**
         * @description The [[Call]] this extrinsic wraps
         */
        get method() {
            return this.inner.method;
        }
        /**
         * @description The nonce for this extrinsic
         */
        get nonce() {
            return this.inner.signature.nonce;
        }
        /**
         * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
         */
        get signature() {
            return this.inner.signature.signature;
        }
        /**
         * @description The [[Address]] that signed
         */
        get signer() {
            return this.inner.signature.signer;
        }
        /**
         * @description Forwards compat
         */
        get tip() {
            return this.inner.signature.tip;
        }
        /**
         * @description Returns the raw transaction version (not flagged with signing information)
        */
        get type() {
            return this.inner.version;
        }
        get inner() {
            return this.unwrap();
        }
        /**
         * @description Returns the encoded version flag
        */
        get version() {
            return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
        }
        /**
         * @description Checks if the source matches this in type
         */
        is(other) {
            return this.method.is(other);
        }
        unwrap() {
            return super.unwrap();
        }
    }
    /**
     * @name GenericExtrinsic
     * @description
     * Representation of an Extrinsic in the system. It contains the actual call,
     * (optional) signature and encodes with an actual length prefix
     *
     * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
     *
     * Can be:
     * - signed, to create a transaction
     * - left as is, to create an inherent
     */
    class GenericExtrinsic extends ExtrinsicBase {
        constructor(registry, value, { version } = {}) {
            super(registry, decodeExtrinsic(registry, value, version));
        }
        /**
         * @description returns a hash of the contents
         */
        get hash() {
            if (!this.__internal__hashCache) {
                this.__internal__hashCache = super.hash;
            }
            return this.__internal__hashCache;
        }
        /**
         * @description Injects an already-generated signature into the extrinsic
         */
        addSignature(signer, signature, payload) {
            this.inner.addSignature(signer, signature, payload);
            this.__internal__hashCache = undefined;
            return this;
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            const encoded = u8aConcat(...this.toU8aInner());
            return {
                inner: this.isSigned
                    ? this.inner.inspect().inner
                    : this.inner.method.inspect().inner,
                outer: [compactToU8a(encoded.length), new Uint8Array([this.version])]
            };
        }
        /**
         * @description Sign the extrinsic with a specific keypair
         */
        sign(account, options) {
            this.inner.sign(account, options);
            this.__internal__hashCache = undefined;
            return this;
        }
        /**
         * @describe Adds a fake signature to the extrinsic
         */
        signFake(signer, options) {
            this.inner.signFake(signer, options);
            this.__internal__hashCache = undefined;
            return this;
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex(isBare) {
            return u8aToHex(this.toU8a(isBare));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExpanded) {
            return objectSpread({}, {
                isSigned: this.isSigned,
                method: this.method.toHuman(isExpanded)
            }, this.isSigned
                ? {
                    era: this.era.toHuman(isExpanded),
                    nonce: this.nonce.toHuman(isExpanded),
                    signature: this.signature.toHex(),
                    signer: this.signer.toHuman(isExpanded),
                    tip: this.tip.toHuman(isExpanded)
                }
                : null);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toHex();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Extrinsic';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value is not length-prefixed
         */
        toU8a(isBare) {
            const encoded = u8aConcat(...this.toU8aInner());
            return isBare
                ? encoded
                : compactAddLength(encoded);
        }
        toU8aInner() {
            // we do not apply bare to the internal values, rather this only determines out length addition,
            // where we strip all lengths this creates an extrinsic that cannot be decoded
            return [
                new Uint8Array([this.version]),
                this.inner.toU8a()
            ];
        }
    }
    GenericExtrinsic.LATEST_EXTRINSIC_VERSION = EXTRINSIC_VERSION;

    function getTrailingZeros(period) {
        const binary = period.toString(2);
        let index = 0;
        while (binary[binary.length - 1 - index] === '0') {
            index++;
        }
        return index;
    }
    /** @internal */
    function decodeMortalEra(registry, value) {
        if (isU8a(value) || isHex(value) || Array.isArray(value)) {
            return decodeMortalU8a(registry, u8aToU8a(value));
        }
        else if (!value) {
            return [new u64(registry), new u64(registry)];
        }
        else if (isObject$1(value)) {
            return decodeMortalObject(registry, value);
        }
        throw new Error('Invalid data passed to Mortal era');
    }
    /** @internal */
    function decodeMortalObject(registry, value) {
        const { current, period } = value;
        let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
        calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
        const phase = current % calPeriod;
        const quantizeFactor = Math.max(calPeriod >> 12, 1);
        const quantizedPhase = phase / quantizeFactor * quantizeFactor;
        return [new u64(registry, calPeriod), new u64(registry, quantizedPhase)];
    }
    /** @internal */
    function decodeMortalU8a(registry, value) {
        if (value.length === 0) {
            return [new u64(registry), new u64(registry)];
        }
        const first = u8aToBn(value.subarray(0, 1)).toNumber();
        const second = u8aToBn(value.subarray(1, 2)).toNumber();
        const encoded = first + (second << 8);
        const period = 2 << (encoded % (1 << 4));
        const quantizeFactor = Math.max(period >> 12, 1);
        const phase = (encoded >> 4) * quantizeFactor;
        if (period < 4 || phase >= period) {
            throw new Error('Invalid data passed to Mortal era');
        }
        return [new u64(registry, period), new u64(registry, phase)];
    }
    /** @internal */
    function decodeExtrinsicEra(value = new Uint8Array()) {
        if (isU8a(value)) {
            return (!value.length || value[0] === 0)
                ? new Uint8Array([0])
                : new Uint8Array([1, value[0], value[1]]);
        }
        else if (!value) {
            return new Uint8Array([0]);
        }
        else if (value instanceof GenericExtrinsicEra) {
            return decodeExtrinsicEra(value.toU8a());
        }
        else if (isHex(value)) {
            return decodeExtrinsicEra(hexToU8a(value));
        }
        else if (isObject$1(value)) {
            const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
            const mortal = entries.find(([k]) => k.toLowerCase() === 'mortalera');
            const immortal = entries.find(([k]) => k.toLowerCase() === 'immortalera');
            // this is to de-serialize from JSON
            return mortal
                ? { MortalEra: mortal[1] }
                : immortal
                    ? { ImmortalEra: immortal[1] }
                    : { MortalEra: value };
        }
        throw new Error('Invalid data passed to Era');
    }
    /**
     * @name ImmortalEra
     * @description
     * The ImmortalEra for an extrinsic
     */
    class ImmortalEra extends Raw {
        constructor(registry, _value) {
            // For immortals, we always provide the known value (i.e. treated as a
            // constant no matter how it is constructed - it is a fixed structure)
            super(registry, IMMORTAL_ERA);
        }
    }
    /**
     * @name MortalEra
     * @description
     * The MortalEra for an extrinsic, indicating period and phase
     */
    class MortalEra extends Tuple {
        constructor(registry, value) {
            super(registry, {
                period: u64,
                phase: u64
            }, decodeMortalEra(registry, value));
        }
        /**
         * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
         */
        get encodedLength() {
            return 2 | 0;
        }
        /**
         * @description The period of this Mortal wraps as a [[U64]]
         */
        get period() {
            return this[0];
        }
        /**
         * @description The phase of this Mortal wraps as a [[U64]]
         */
        get phase() {
            return this[1];
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return {
                period: formatNumber(this.period),
                phase: formatNumber(this.phase)
            };
        }
        /**
         * @description Returns a JSON representation of the actual value
         */
        toJSON() {
            return this.toHex();
        }
        /**
         * @description Encodes the value as a Uint8Array as per the parity-codec specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         * Period and phase are encoded:
         *   - The period of validity from the block hash found in the signing material.
         *   - The phase in the period that this transaction's lifetime begins (and, importantly,
         *     implies which block hash is included in the signature material). If the `period` is
         *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
         *     `period` is.
         */
        toU8a(_isBare) {
            const period = this.period.toNumber();
            const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + ((this.phase.toNumber() / Math.max(period >> 12, 1)) << 4);
            return new Uint8Array([
                encoded & 0xff,
                encoded >> 8
            ]);
        }
        /**
         * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
         */
        birth(current) {
            const phase = this.phase.toNumber();
            const period = this.period.toNumber();
            // FIXME No toNumber() here
            return (~~((Math.max(bnToBn(current).toNumber(), phase) - phase) / period) * period) + phase;
        }
        /**
         * @description Get the block number of the first block at which the era has ended.
         */
        death(current) {
            // FIXME No toNumber() here
            return this.birth(current) + this.period.toNumber();
        }
    }
    /**
     * @name GenericExtrinsicEra
     * @description
     * The era for an extrinsic, indicating either a mortal or immortal extrinsic
     */
    class GenericExtrinsicEra extends Enum {
        constructor(registry, value) {
            super(registry, {
                ImmortalEra,
                MortalEra
            }, decodeExtrinsicEra(value));
        }
        /**
         * @description Override the encoded length method
         */
        get encodedLength() {
            return this.isImmortalEra
                ? this.asImmortalEra.encodedLength
                : this.asMortalEra.encodedLength;
        }
        /**
         * @description Returns the item as a [[ImmortalEra]]
         */
        get asImmortalEra() {
            if (!this.isImmortalEra) {
                throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
            }
            return this.inner;
        }
        /**
         * @description Returns the item as a [[MortalEra]]
         */
        get asMortalEra() {
            if (!this.isMortalEra) {
                throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
            }
            return this.inner;
        }
        /**
         * @description `true` if Immortal
         */
        get isImmortalEra() {
            return this.index === 0;
        }
        /**
         * @description `true` if Mortal
         */
        get isMortalEra() {
            return this.index > 0;
        }
        /**
         * @description Encodes the value as a Uint8Array as per the parity-codec specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return this.isMortalEra
                ? this.asMortalEra.toU8a(isBare)
                : this.asImmortalEra.toU8a(isBare);
        }
    }

    const VERSIONS = [
        'ExtrinsicPayloadUnknown',
        'ExtrinsicPayloadUnknown',
        'ExtrinsicPayloadUnknown',
        'ExtrinsicPayloadUnknown',
        'ExtrinsicPayloadV4'
    ];
    /** @internal */
    function decodeExtrinsicPayload(registry, value, version = DEFAULT_VERSION) {
        if (value instanceof GenericExtrinsicPayload) {
            return value.unwrap();
        }
        return registry.createTypeUnsafe(VERSIONS[version] || VERSIONS[0], [value, { version }]);
    }
    /**
     * @name GenericExtrinsicPayload
     * @description
     * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
     * on the contents included
     */
    class GenericExtrinsicPayload extends AbstractBase {
        constructor(registry, value, { version } = {}) {
            super(registry, decodeExtrinsicPayload(registry, value, version));
        }
        /**
         * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
         */
        get blockHash() {
            return this.inner.blockHash;
        }
        /**
         * @description The [[ExtrinsicEra]]
         */
        get era() {
            return this.inner.era;
        }
        /**
         * @description The genesis block [[BlockHash]] the signature applies to
         */
        get genesisHash() {
            // NOTE only v3+
            return this.inner.genesisHash || this.registry.createTypeUnsafe('Hash', []);
        }
        /**
         * @description The [[Bytes]] contained in the payload
         */
        get method() {
            return this.inner.method;
        }
        /**
         * @description The [[Index]]
         */
        get nonce() {
            return this.inner.nonce;
        }
        /**
         * @description The specVersion as a [[u32]] for this payload
         */
        get specVersion() {
            // NOTE only v3+
            return this.inner.specVersion || this.registry.createTypeUnsafe('u32', []);
        }
        /**
         * @description The [[Balance]]
         */
        get tip() {
            // NOTE from v2+
            return this.inner.tip || this.registry.createTypeUnsafe('Compact<Balance>', []);
        }
        /**
         * @description The transaction version as a [[u32]] for this payload
         */
        get transactionVersion() {
            // NOTE only v4+
            return this.inner.transactionVersion || this.registry.createTypeUnsafe('u32', []);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return this.inner.eq(other);
        }
        /**
         * @description Sign the payload with the keypair
         */
        sign(signerPair) {
            const signature = this.inner.sign(signerPair);
            // This is extensible, so we could quite readily extend to send back extra
            // information, such as for instance the payload, i.e. `payload: this.toHex()`
            // For the case here we sign via the extrinsic, we ignore the return, so generally
            // this is applicable for external signing
            return {
                signature: u8aToHex(signature)
            };
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExtended) {
            return this.inner.toHuman(isExtended);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toHex();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'ExtrinsicPayload';
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.toHex();
        }
        /**
         * @description Returns a serialized u8a form
         */
        toU8a(isBare) {
            // call our parent, with only the method stripped
            return super.toU8a(isBare ? { method: true } : false);
        }
    }

    /**
     * @name GenericExtrinsicPayloadUnknown
     * @description
     * A default handler for payloads where the version is not known (default throw)
     */
    class GenericExtrinsicPayloadUnknown extends Struct {
        constructor(registry, _value, { version = 0 } = {}) {
            super(registry, {});
            throw new Error(`Unsupported extrinsic payload version ${version}`);
        }
    }

    /**
     * @name GenericExtrinsicUnknown
     * @description
     * A default handler for extrinsics where the version is not known (default throw)
     */
    class GenericExtrinsicUnknown extends Struct {
        constructor(registry, _value, { isSigned = false, version = 0 } = {}) {
            super(registry, {});
            throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & UNMASK_VERSION}`);
        }
    }

    const knownTypes = {
        address: 'Address',
        blockHash: 'Hash',
        blockNumber: 'BlockNumber',
        era: 'ExtrinsicEra',
        genesisHash: 'Hash',
        method: 'Call',
        nonce: 'Compact<Index>',
        runtimeVersion: 'RuntimeVersion',
        signedExtensions: 'Vec<Text>',
        tip: 'Compact<Balance>',
        version: 'u8'
    };
    /**
     * @name GenericSignerPayload
     * @description
     * A generic signer payload that can be used for serialization between API and signer
     */
    class GenericSignerPayload extends Struct {
        constructor(registry, value) {
            const extensionTypes = objectSpread({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
            super(registry, objectSpread({}, extensionTypes, knownTypes), value);
            this.__internal__extraTypes = {};
            const getter = (key) => this.get(key);
            // add all extras that are not in the base types
            for (const [key, type] of Object.entries(extensionTypes)) {
                if (!knownTypes[key]) {
                    this.__internal__extraTypes[key] = type;
                }
                objectProperty(this, key, getter);
            }
        }
        get address() {
            return this.getT('address');
        }
        get blockHash() {
            return this.getT('blockHash');
        }
        get blockNumber() {
            return this.getT('blockNumber');
        }
        get era() {
            return this.getT('era');
        }
        get genesisHash() {
            return this.getT('genesisHash');
        }
        get method() {
            return this.getT('method');
        }
        get nonce() {
            return this.getT('nonce');
        }
        get runtimeVersion() {
            return this.getT('runtimeVersion');
        }
        get signedExtensions() {
            return this.getT('signedExtensions');
        }
        get tip() {
            return this.getT('tip');
        }
        get version() {
            return this.getT('version');
        }
        /**
         * @description Creates an representation of the structure as an ISignerPayload JSON
         */
        toPayload() {
            const result = {};
            const keys = Object.keys(this.__internal__extraTypes);
            // add any explicit overrides we may have
            for (let i = 0, count = keys.length; i < count; i++) {
                const key = keys[i];
                const value = this.getT(key);
                // Don't include Option.isNone
                if (!(value instanceof Option) || value.isSome) {
                    // NOTE In the spread below we convert (mostly) to Hex to align
                    // with the typings. In the case of "unknown" fields, we use the
                    // primitive toJSON conversion (which is serializable). Technically
                    // we can include isNone in here as well ("null" is allowed), however
                    // for empty fields we just skip it completely (historical compat)
                    result[key] = value.toJSON();
                }
            }
            return objectSpread(result, {
                // the known defaults as managed explicitly and has different
                // formatting in cases, e.g. we mostly expose a hex format here
                address: this.address.toString(),
                blockHash: this.blockHash.toHex(),
                blockNumber: this.blockNumber.toHex(),
                era: this.era.toHex(),
                genesisHash: this.genesisHash.toHex(),
                method: this.method.toHex(),
                nonce: this.nonce.toHex(),
                signedExtensions: this.signedExtensions.map((e) => e.toString()),
                specVersion: this.runtimeVersion.specVersion.toHex(),
                tip: this.tip.toHex(),
                transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
                version: this.version.toNumber()
            });
        }
        /**
         * @description Creates a representation of the payload in raw Exrinsic form
         */
        toRaw() {
            const payload = this.toPayload();
            const data = u8aToHex(this.registry
                .createTypeUnsafe('ExtrinsicPayload', [payload, { version: payload.version }])
                // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
                .toU8a({ method: true }));
            return {
                address: payload.address,
                data,
                type: 'payload'
            };
        }
    }

    function sign(registry, signerPair, u8a, options) {
        const encoded = u8a.length > 256
            ? registry.hash(u8a)
            : u8a;
        return signerPair.sign(encoded, options);
    }

    /**
     * @name GenericExtrinsicPayloadV4
     * @description
     * A signing payload for an [[Extrinsic]]. For the final encoding, it is
     * variable length based on the contents included
     */
    class GenericExtrinsicPayloadV4 extends Struct {
        constructor(registry, value) {
            super(registry, objectSpread({ method: 'Bytes' }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
            // Do detection for the type of extrinsic, in the case of MultiSignature
            // this is an enum, in the case of AnySignature, this is a Hash only
            // (which may be 64 or 65 bytes)
            this.__internal__signOptions = {
                withType: registry.createTypeUnsafe('ExtrinsicSignature', []) instanceof Enum
            };
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            return super.inspect({ method: true });
        }
        /**
         * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
         */
        get blockHash() {
            return this.getT('blockHash');
        }
        /**
         * @description The [[ExtrinsicEra]]
         */
        get era() {
            return this.getT('era');
        }
        /**
         * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
         */
        get genesisHash() {
            return this.getT('genesisHash');
        }
        /**
         * @description The [[Bytes]] contained in the payload
         */
        get method() {
            return this.getT('method');
        }
        /**
         * @description The [[Index]]
         */
        get nonce() {
            return this.getT('nonce');
        }
        /**
         * @description The specVersion for this signature
         */
        get specVersion() {
            return this.getT('specVersion');
        }
        /**
         * @description The tip [[Balance]]
         */
        get tip() {
            return this.getT('tip');
        }
        /**
         * @description The transactionVersion for this signature
         */
        get transactionVersion() {
            return this.getT('transactionVersion');
        }
        /**
         * @description The (optional) asset id for this signature for chains that support transaction fees in assets
         */
        get assetId() {
            return this.getT('assetId');
        }
        /**
         * @description Sign the payload with the keypair
         */
        sign(signerPair) {
            // NOTE The `toU8a({ method: true })` argument is absolutely critical, we
            // don't want the method (Bytes) to have the length prefix included. This
            // means that the data-as-signed is un-decodable, but is also doesn't need
            // the extra information, only the pure data (and is not decoded) ...
            // The same applies to V1..V3, if we have a V5, carry this comment
            return sign(this.registry, signerPair, this.toU8a({ method: true }), this.__internal__signOptions);
        }
    }

    const FAKE_SIGNATURE = new Uint8Array(256).fill(1);
    function toAddress(registry, address) {
        return registry.createTypeUnsafe('Address', [isU8a(address) ? u8aToHex(address) : address]);
    }
    /**
     * @name GenericExtrinsicSignatureV4
     * @description
     * A container for the [[Signature]] associated with a specific [[Extrinsic]]
     */
    class GenericExtrinsicSignatureV4 extends Struct {
        constructor(registry, value, { isSigned } = {}) {
            const signTypes = registry.getSignedExtensionTypes();
            super(registry, objectSpread(
            // eslint-disable-next-line sort-keys
            { signer: 'Address', signature: 'ExtrinsicSignature' }, signTypes), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
            this.__internal__signKeys = Object.keys(signTypes);
            objectProperties(this, this.__internal__signKeys, (k) => this.get(k));
        }
        /** @internal */
        static decodeExtrinsicSignature(value, isSigned = false) {
            if (!value) {
                return EMPTY_U8A;
            }
            else if (value instanceof GenericExtrinsicSignatureV4) {
                return value;
            }
            return isSigned
                ? value
                : EMPTY_U8A;
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            return this.isSigned
                ? super.encodedLength
                : 0;
        }
        /**
         * @description `true` if the signature is valid
         */
        get isSigned() {
            return !this.signature.isEmpty;
        }
        /**
         * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
         */
        get era() {
            return this.getT('era');
        }
        /**
         * @description The [[Index]] for the signature
         */
        get nonce() {
            return this.getT('nonce');
        }
        /**
         * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
         */
        get signature() {
            // the second case here is when we don't have an enum signature, treat as raw
            return (this.multiSignature.value || this.multiSignature);
        }
        /**
         * @description The raw [[ExtrinsicSignature]]
         */
        get multiSignature() {
            return this.getT('signature');
        }
        /**
         * @description The [[Address]] that signed
         */
        get signer() {
            return this.getT('signer');
        }
        /**
         * @description The [[Balance]] tip
         */
        get tip() {
            return this.getT('tip');
        }
        _injectSignature(signer, signature, payload) {
            // use the fields exposed to guide the getters
            for (let i = 0, count = this.__internal__signKeys.length; i < count; i++) {
                const k = this.__internal__signKeys[i];
                const v = payload.get(k);
                if (!isUndefined(v)) {
                    this.set(k, v);
                }
            }
            // additional fields (exposed in struct itself)
            this.set('signer', signer);
            this.set('signature', signature);
            return this;
        }
        /**
         * @description Adds a raw signature
         */
        addSignature(signer, signature, payload) {
            return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe('ExtrinsicSignature', [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
        }
        /**
         * @description Creates a payload from the supplied options
         */
        createPayload(method, options) {
            const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
            return new GenericExtrinsicPayloadV4(this.registry, objectSpread({}, options, {
                era: era || IMMORTAL_ERA,
                method: method.toHex(),
                specVersion,
                transactionVersion
            }));
        }
        /**
         * @description Generate a payload and applies the signature from a keypair
         */
        sign(method, account, options) {
            if (!account?.addressRaw) {
                throw new Error(`Expected a valid keypair for signing, found ${stringify(account)}`);
            }
            const payload = this.createPayload(method, options);
            return this._injectSignature(toAddress(this.registry, account.addressRaw), this.registry.createTypeUnsafe('ExtrinsicSignature', [payload.sign(account)]), payload);
        }
        /**
         * @description Generate a payload and applies a fake signature
         */
        signFake(method, address, options) {
            if (!address) {
                throw new Error(`Expected a valid address for signing, found ${stringify(address)}`);
            }
            const payload = this.createPayload(method, options);
            return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe('ExtrinsicSignature', [FAKE_SIGNATURE]), payload);
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            return this.isSigned
                ? super.toU8a(isBare)
                : EMPTY_U8A;
        }
    }

    /** @internal */
    function decodeAccountId$1(value) {
        if (isU8a(value) || Array.isArray(value)) {
            return u8aToU8a(value);
        }
        else if (!value) {
            return new Uint8Array();
        }
        else if (isHex(value)) {
            return hexToU8a(value);
        }
        else if (isString(value)) {
            return decodeAddress(value.toString());
        }
        throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
    }
    class BaseAccountId extends U8aFixed {
        constructor(registry, allowedBits = 256 | 264, value) {
            const decoded = decodeAccountId$1(value);
            const decodedBits = decoded.length * 8;
            // Part of stream containing >= 32 bytes or a all empty (defaults)
            if (decodedBits < allowedBits && decoded.some((b) => b)) {
                throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
            }
            super(registry, decoded, allowedBits);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return super.eq(decodeAccountId$1(other));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toString();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.toJSON();
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return encodeAddress(this, this.registry.chainSS58);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'AccountId';
        }
    }
    /**
     * @name GenericAccountId
     * @description
     * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
     * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
     * just a Uint8Array wrapper with a fixed length.
     */
    class GenericAccountId extends BaseAccountId {
        constructor(registry, value) {
            super(registry, 256, value);
        }
    }
    class GenericAccountId33 extends BaseAccountId {
        constructor(registry, value) {
            super(registry, 264, value);
        }
    }

    const PREFIX_1BYTE = 0xef;
    const PREFIX_2BYTE = 0xfc;
    const PREFIX_4BYTE = 0xfd;
    const PREFIX_8BYTE = 0xfe;
    const MAX_1BYTE = new BN(PREFIX_1BYTE);
    const MAX_2BYTE = new BN(1).shln(16);
    const MAX_4BYTE = new BN(1).shln(32);
    /** @internal */
    function decodeAccountIndex(value) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        if (value instanceof GenericAccountIndex) {
            // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
            // AccountIndex), which has the initial `toString()` implementation.
            return value.toBn();
        }
        else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {
            return value;
        }
        return decodeAccountIndex(decodeAddress(value));
    }
    /**
     * @name GenericAccountIndex
     * @description
     * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
     * for an Account. We extends from [[U32]] to provide the number-like properties.
     */
    class GenericAccountIndex extends u32 {
        constructor(registry, value = new BN(0)) {
            super(registry, decodeAccountIndex(value));
        }
        static calcLength(_value) {
            const value = bnToBn(_value);
            if (value.lte(MAX_1BYTE)) {
                return 1;
            }
            else if (value.lt(MAX_2BYTE)) {
                return 2;
            }
            else if (value.lt(MAX_4BYTE)) {
                return 4;
            }
            return 8;
        }
        static readLength(input) {
            const first = input[0];
            if (first === PREFIX_2BYTE) {
                return [1, 2];
            }
            else if (first === PREFIX_4BYTE) {
                return [1, 4];
            }
            else if (first === PREFIX_8BYTE) {
                return [1, 8];
            }
            return [0, 1];
        }
        static writeLength(input) {
            switch (input.length) {
                case 2: return new Uint8Array([PREFIX_2BYTE]);
                case 4: return new Uint8Array([PREFIX_4BYTE]);
                case 8: return new Uint8Array([PREFIX_8BYTE]);
                default: return new Uint8Array([]);
            }
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            // shortcut for BN or Number, don't create an object
            if (isBn(other) || isNumber(other)) {
                return super.eq(other);
            }
            // convert and compare
            return super.eq(this.registry.createTypeUnsafe('AccountIndex', [other]));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toString();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.toJSON();
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            const length = GenericAccountIndex.calcLength(this);
            return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'AccountIndex';
        }
    }

    /**
     * @name GenericBlock
     * @description
     * A block encoded with header and extrinsics
     */
    class GenericBlock extends Struct {
        constructor(registry, value) {
            super(registry, {
                header: 'Header',
                // eslint-disable-next-line sort-keys
                extrinsics: 'Vec<Extrinsic>'
            }, value);
        }
        /**
         * @description Encodes a content [[Hash]] for the block
         */
        get contentHash() {
            return this.registry.hash(this.toU8a());
        }
        /**
         * @description The [[Extrinsic]] contained in the block
         */
        get extrinsics() {
            return this.getT('extrinsics');
        }
        /**
         * @description Block/header [[Hash]]
         */
        get hash() {
            return this.header.hash;
        }
        /**
         * @description The [[Header]] of the block
         */
        get header() {
            return this.getT('header');
        }
    }

    /**
     * Get a mapping of `argument name -> argument type` for the function, from
     * its metadata.
     *
     * @param meta - The function metadata used to get the definition.
     * @internal
     */
    function getArgsDef(registry, meta) {
        return meta.fields.reduce((result, { name, type }, index) => {
            result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
            return result;
        }, {});
    }
    /** @internal */
    function decodeCallViaObject(registry, value, _meta) {
        // we only pass args/methodsIndex out
        const { args, callIndex } = value;
        // Get the correct lookupIndex
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        const lookupIndex = callIndex instanceof GenericCallIndex
            ? callIndex.toU8a()
            : callIndex;
        // Find metadata with callIndex
        const meta = _meta || registry.findMetaCall(lookupIndex).meta;
        return {
            args,
            argsDef: getArgsDef(registry, meta),
            callIndex,
            meta
        };
    }
    /** @internal */
    function decodeCallViaU8a(registry, value, _meta) {
        // We need 2 bytes for the callIndex
        const callIndex = registry.firstCallIndex.slice();
        callIndex.set(value.subarray(0, 2), 0);
        // Find metadata with callIndex
        const meta = _meta || registry.findMetaCall(callIndex).meta;
        return {
            args: value.subarray(2),
            argsDef: getArgsDef(registry, meta),
            callIndex,
            meta
        };
    }
    /**
     * Decode input to pass into constructor.
     *
     * @param value - Value to decode, one of:
     * - hex
     * - Uint8Array
     * - {@see DecodeMethodInput}
     * @param _meta - Metadata to use, so that `injectMethods` lookup is not
     * necessary.
     * @internal
     */
    function decodeCall(registry, value = new Uint8Array(), _meta) {
        if (isU8a(value) || isHex(value)) {
            return decodeCallViaU8a(registry, u8aToU8a(value), _meta);
        }
        else if (isObject$1(value) && value.callIndex && value.args) {
            return decodeCallViaObject(registry, value, _meta);
        }
        throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
    }
    /**
     * @name GenericCallIndex
     * @description
     * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
     */
    class GenericCallIndex extends U8aFixed {
        constructor(registry, value) {
            super(registry, value, 16);
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.toHex();
        }
    }
    /**
     * @name GenericCall
     * @description
     * Extrinsic function descriptor
     */
    class GenericCall extends Struct {
        constructor(registry, value, meta) {
            const decoded = decodeCall(registry, value, meta);
            try {
                super(registry, {
                    callIndex: GenericCallIndex,
                    // eslint-disable-next-line sort-keys
                    args: Struct.with(decoded.argsDef)
                }, decoded);
            }
            catch (error) {
                let method = 'unknown.unknown';
                try {
                    const c = registry.findMetaCall(decoded.callIndex);
                    method = `${c.section}.${c.method}`;
                }
                catch {
                    // ignore
                }
                throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
            }
            this._meta = decoded.meta;
        }
        /**
         * @description The arguments for the function call
         */
        get args() {
            return [...this.getT('args').values()];
        }
        /**
         * @description The argument definitions
         */
        get argsDef() {
            return getArgsDef(this.registry, this.meta);
        }
        /**
         * @description The argument entries
         */
        get argsEntries() {
            return [...this.getT('args').entries()];
        }
        /**
         * @description The encoded `[sectionIndex, methodIndex]` identifier
         */
        get callIndex() {
            return this.getT('callIndex').toU8a();
        }
        /**
         * @description The encoded data
         */
        get data() {
            return this.getT('args').toU8a();
        }
        /**
         * @description The [[FunctionMetadata]]
         */
        get meta() {
            return this._meta;
        }
        /**
         * @description Returns the name of the method
         */
        get method() {
            return this.registry.findMetaCall(this.callIndex).method;
        }
        /**
         * @description Returns the module containing the method
         */
        get section() {
            return this.registry.findMetaCall(this.callIndex).section;
        }
        /**
         * @description Checks if the source matches this in type
         */
        is(other) {
            return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExpanded) {
            let call;
            try {
                call = this.registry.findMetaCall(this.callIndex);
            }
            catch {
                // swallow
            }
            return objectSpread({
                args: this.argsEntries.reduce((args, [n, a]) => objectSpread(args, { [n]: a.toHuman(isExpanded) }), {}),
                method: call?.method,
                section: call?.section
            }, isExpanded && call
                ? { docs: call.meta.docs.map((d) => d.toString()) }
                : null);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Call';
        }
    }

    function createValue(registry, type, value, asArray = true) {
        // We detect codec here as well - when found, generally this is constructed from itself
        if (value && isFunction$1(value.unwrapOrDefault)) {
            return value;
        }
        return registry.createTypeUnsafe(type, [
            asArray
                ? isNull(value) || isUndefined(value)
                    ? null
                    : Array.isArray(value)
                        ? value
                        : [value]
                : value
        ]);
    }
    function decodeValue(registry, key, value) {
        return key === 'ss58Format'
            ? createValue(registry, 'Option<u32>', value, false)
            : key === 'tokenDecimals'
                ? createValue(registry, 'Option<Vec<u32>>', value)
                : key === 'tokenSymbol'
                    ? createValue(registry, 'Option<Vec<Text>>', value)
                    : key === 'isEthereum'
                        ? createValue(registry, 'Bool', value, false)
                        : value;
    }
    function decode(registry, value) {
        return (
        // allow decoding from a map as well (ourselves)
        value && isFunction$1(value.entries)
            ? [...value.entries()]
            : Object.entries(value || {})).reduce((all, [key, value]) => {
            all[key] = decodeValue(registry, key, value);
            return all;
        }, {
            isEthereum: registry.createTypeUnsafe('Bool', []),
            ss58Format: registry.createTypeUnsafe('Option<u32>', []),
            tokenDecimals: registry.createTypeUnsafe('Option<Vec<u32>>', []),
            tokenSymbol: registry.createTypeUnsafe('Option<Vec<Text>>', [])
        });
    }
    class GenericChainProperties extends Json {
        constructor(registry, value) {
            super(registry, decode(registry, value));
        }
        /**
         * @description The chain uses Ethereum addresses
         */
        get isEthereum() {
            return this.getT('isEthereum');
        }
        /**
         * @description The chain ss58Format
         */
        get ss58Format() {
            return this.getT('ss58Format');
        }
        /**
         * @description The decimals for each of the tokens
         */
        get tokenDecimals() {
            return this.getT('tokenDecimals');
        }
        /**
         * @description The symbols for the tokens
         */
        get tokenSymbol() {
            return this.getT('tokenSymbol');
        }
    }

    const CID_AURA = /*#__PURE__*/ stringToU8a('aura');
    const CID_BABE = /*#__PURE__*/ stringToU8a('BABE');
    const CID_GRPA = /*#__PURE__*/ stringToU8a('FRNK');
    const CID_POW = /*#__PURE__*/ stringToU8a('pow_');
    const CID_NMBS = /*#__PURE__*/ stringToU8a('nmbs');
    function getAuraAuthor(registry, bytes, sessionValidators) {
        return sessionValidators[registry.createTypeUnsafe('RawAuraPreDigest', [bytes.toU8a(true)])
            .slotNumber
            .mod(new BN(sessionValidators.length))
            .toNumber()];
    }
    function getBabeAuthor(registry, bytes, sessionValidators) {
        const digest = registry.createTypeUnsafe('RawBabePreDigestCompat', [bytes.toU8a(true)]);
        return sessionValidators[digest.value.toNumber()];
    }
    function getBytesAsAuthor(registry, bytes) {
        return registry.createTypeUnsafe('AccountId', [bytes]);
    }
    /**
     * @name GenericConsensusEngineId
     * @description
     * A 4-byte identifier identifying the engine
     */
    class GenericConsensusEngineId extends U8aFixed {
        constructor(registry, value) {
            super(registry, isNumber(value)
                ? bnToU8a(value, { isLe: false })
                : value, 32);
        }
        /**
         * @description `true` if the engine matches aura
         */
        get isAura() {
            return this.eq(CID_AURA);
        }
        /**
         * @description `true` is the engine matches babe
         */
        get isBabe() {
            return this.eq(CID_BABE);
        }
        /**
         * @description `true` is the engine matches grandpa
         */
        get isGrandpa() {
            return this.eq(CID_GRPA);
        }
        /**
         * @description `true` is the engine matches pow
         */
        get isPow() {
            return this.eq(CID_POW);
        }
        /**
         * @description `true` is the engine matches nimbus
         */
        get isNimbus() {
            return this.eq(CID_NMBS);
        }
        /**
         * @description From the input bytes, decode into an author
         */
        extractAuthor(bytes, sessionValidators) {
            if (sessionValidators?.length) {
                if (this.isAura) {
                    return getAuraAuthor(this.registry, bytes, sessionValidators);
                }
                else if (this.isBabe) {
                    return getBabeAuthor(this.registry, bytes, sessionValidators);
                }
            }
            // For pow & Nimbus, the bytes are the actual author
            if (this.isPow || this.isNimbus) {
                return getBytesAsAuthor(this.registry, bytes);
            }
            return undefined;
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toString();
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'ConsensusEngineId';
        }
        /**
         * @description Override the default toString to return a 4-byte string
         */
        toString() {
            return this.isAscii
                ? u8aToString(this)
                : u8aToHex(this);
        }
    }

    const ACCOUNT_ID_PREFIX$1 = new Uint8Array([0xff]);
    /** @internal */
    function decodeString$1(registry, value) {
        const decoded = decodeAddress(value);
        return decoded.length === 32
            ? registry.createTypeUnsafe('AccountId', [decoded])
            : registry.createTypeUnsafe('AccountIndex', [u8aToBn(decoded)]);
    }
    /** @internal */
    function decodeU8a$3(registry, value) {
        // This allows us to instantiate an address with a raw publicKey. Do this first before
        // we checking the first byte, otherwise we may split an already-existent valid address
        if (value.length === 32) {
            return registry.createTypeUnsafe('AccountId', [value]);
        }
        else if (value[0] === 0xff) {
            return registry.createTypeUnsafe('AccountId', [value.subarray(1)]);
        }
        const [offset, length] = GenericAccountIndex.readLength(value);
        return registry.createTypeUnsafe('AccountIndex', [u8aToBn(value.subarray(offset, offset + length))]);
    }
    /** @internal */
    function decodeAddressOrIndex$1(registry, value) {
        return value instanceof GenericLookupSource
            ? value.inner
            : value instanceof GenericAccountId || value instanceof GenericAccountIndex
                ? value
                : isBn(value) || isNumber(value) || isBigInt(value)
                    ? registry.createTypeUnsafe('AccountIndex', [value])
                    : Array.isArray(value) || isHex(value) || isU8a(value)
                        ? decodeU8a$3(registry, u8aToU8a(value))
                        : decodeString$1(registry, value);
    }
    /**
     * @name LookupSource
     * @description
     * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
     * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
     * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
     * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
     */
    class GenericLookupSource extends AbstractBase {
        constructor(registry, value = new Uint8Array()) {
            super(registry, decodeAddressOrIndex$1(registry, value));
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            const rawLength = this._rawLength;
            return rawLength + (
            // for 1 byte AccountIndexes, we are not adding a specific prefix
            rawLength > 1
                ? 1
                : 0);
        }
        /**
         * @description The length of the raw value, either AccountIndex or AccountId
         */
        get _rawLength() {
            return this.inner instanceof GenericAccountIndex
                ? GenericAccountIndex.calcLength(this.inner)
                : this.inner.encodedLength;
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            const value = this.inner.toU8a().subarray(0, this._rawLength);
            return {
                outer: [
                    new Uint8Array(this.inner instanceof GenericAccountIndex
                        ? GenericAccountIndex.writeLength(value)
                        : ACCOUNT_ID_PREFIX$1),
                    value
                ]
            };
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Address';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = this.inner.toU8a().subarray(0, this._rawLength);
            return isBare
                ? encoded
                : u8aConcat(this.inner instanceof GenericAccountIndex
                    ? GenericAccountIndex.writeLength(encoded)
                    : ACCOUNT_ID_PREFIX$1, encoded);
        }
    }

    function decodeU8a$2(registry, u8a) {
        if ([0, 32].includes(u8a.length)) {
            return { Id: u8a };
        }
        else if (u8a.length === 20) {
            return { Address20: u8a };
        }
        else if (u8a.length <= 8) {
            return { Index: registry.createTypeUnsafe('AccountIndex', [u8a]).toNumber() };
        }
        return u8a;
    }
    function decodeMultiAny(registry, value) {
        if (value instanceof GenericAccountId) {
            return { Id: value };
        }
        else if (isU8a(value)) {
            // NOTE This is after the AccountId check (which is U8a)
            return decodeU8a$2(registry, value);
        }
        else if (value instanceof GenericMultiAddress) {
            return value;
        }
        else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {
            return { Index: isNumber(value) ? value : value.toNumber() };
        }
        else if (isString(value)) {
            return decodeU8a$2(registry, decodeAddress(value.toString()));
        }
        return value;
    }
    class GenericMultiAddress extends Enum {
        constructor(registry, value) {
            super(registry, {
                Id: 'AccountId',
                Index: 'Compact<AccountIndex>',
                Raw: 'Bytes',
                // eslint-disable-next-line sort-keys
                Address32: 'H256',
                // eslint-disable-next-line sort-keys
                Address20: 'H160'
            }, decodeMultiAny(registry, value));
        }
        /**
         * @description Returns a breakdown of the hex encoding for this Codec
         */
        inspect() {
            const { inner, outer = [] } = this.inner.inspect();
            return {
                inner,
                outer: [new Uint8Array([this.index]), ...outer]
            };
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return this.value.toString();
        }
    }

    const AYE_BITS = 0b10000000;
    const NAY_BITS = 0b00000000;
    const CON_MASK = 0b01111111;
    const DEF_CONV = 0b00000000; // the default conviction, None
    /** @internal */
    function decodeVoteBool(value) {
        return value
            ? new Uint8Array([AYE_BITS | DEF_CONV])
            : new Uint8Array([NAY_BITS]);
    }
    /** @internal */
    function decodeVoteU8a(value) {
        return value.length
            ? value.subarray(0, 1)
            : new Uint8Array([NAY_BITS]);
    }
    /** @internal */
    function decodeVoteType(registry, value) {
        return new Uint8Array([
            (new bool(registry, value.aye).isTrue
                ? AYE_BITS
                : NAY_BITS) |
                registry.createTypeUnsafe('Conviction', [value.conviction || DEF_CONV]).index
        ]);
    }
    /** @internal */
    function decodeVote(registry, value) {
        if (isU8a(value)) {
            return decodeVoteU8a(value);
        }
        else if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {
            return decodeVoteBool(new bool(registry, value).isTrue);
        }
        else if (isNumber(value)) {
            return decodeVoteBool(value < 0);
        }
        return decodeVoteType(registry, value);
    }
    /**
     * @name GenericVote
     * @description
     * A number of lock periods, plus a vote, one way or the other.
     */
    class GenericVote extends U8aFixed {
        constructor(registry, value) {
            // decoded is just 1 byte
            // Aye: Most Significant Bit
            // Conviction: 0000 - 0101
            const decoded = decodeVote(registry, value);
            super(registry, decoded, 8);
            this.__internal__aye = (decoded[0] & AYE_BITS) === AYE_BITS;
            this.__internal__conviction = this.registry.createTypeUnsafe('Conviction', [decoded[0] & CON_MASK]);
        }
        /**
         * @description returns a V2 conviction
         */
        get conviction() {
            return this.__internal__conviction;
        }
        /**
         * @description true if the wrapped value is a positive vote
         */
        get isAye() {
            return this.__internal__aye;
        }
        /**
         * @description true if the wrapped value is a negative vote
         */
        get isNay() {
            return !this.isAye;
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman(isExpanded) {
            return {
                conviction: this.conviction.toHuman(isExpanded),
                vote: this.isAye ? 'Aye' : 'Nay'
            };
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return {
                aye: this.isAye,
                conviction: this.conviction.toPrimitive()
            };
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Vote';
        }
    }

    /** @internal */
    function decodeAccountId(value) {
        if (isU8a(value) || Array.isArray(value)) {
            return u8aToU8a(value);
        }
        else if (isHex(value) || isEthereumAddress(value.toString())) {
            return hexToU8a(value.toString());
        }
        else if (isString(value)) {
            return u8aToU8a(value);
        }
        return value;
    }
    /**
     * @name GenericEthereumAccountId
     * @description
     * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
     * underlying addresses (20 bytes in length), we extend from U8aFixed which is
     * just a Uint8Array wrapper with a fixed length.
     */
    class GenericEthereumAccountId extends U8aFixed {
        constructor(registry, value = new Uint8Array()) {
            super(registry, decodeAccountId(value), 160);
        }
        /**
         * @description Compares the value of the input to see if there is a match
         */
        eq(other) {
            return !!other && super.eq(decodeAccountId(other));
        }
        /**
         * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
         */
        toHuman() {
            return this.toJSON();
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            return this.toString();
        }
        /**
         * @description Converts the value in a best-fit primitive form
         */
        toPrimitive() {
            return this.toJSON();
        }
        /**
         * @description Returns the string representation of the value
         */
        toString() {
            return ethereumEncode(this);
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'AccountId';
        }
    }

    const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
    /** @internal */
    function decodeString(registry, value) {
        const decoded = decodeAddress(value);
        return decoded.length === 20
            ? registry.createTypeUnsafe('EthereumAccountId', [decoded])
            : registry.createTypeUnsafe('AccountIndex', [u8aToBn(decoded)]);
    }
    /** @internal */
    function decodeU8a$1(registry, value) {
        // This allows us to instantiate an address with a raw publicKey. Do this first before
        // we checking the first byte, otherwise we may split an already-existent valid address
        if (value.length === 20) {
            return registry.createTypeUnsafe('EthereumAccountId', [value]);
        }
        else if (value[0] === 0xff) {
            return registry.createTypeUnsafe('EthereumAccountId', [value.subarray(1)]);
        }
        const [offset, length] = GenericAccountIndex.readLength(value);
        return registry.createTypeUnsafe('AccountIndex', [u8aToBn(value.subarray(offset, offset + length))]);
    }
    function decodeAddressOrIndex(registry, value) {
        return value instanceof GenericEthereumLookupSource
            ? value.inner
            : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex
                ? value
                : isU8a(value) || Array.isArray(value) || isHex(value)
                    ? decodeU8a$1(registry, u8aToU8a(value))
                    : isBn(value) || isNumber(value) || isBigInt(value)
                        ? registry.createTypeUnsafe('AccountIndex', [value])
                        : decodeString(registry, value);
    }
    /**
     * @name GenericEthereumLookupSource
     * @description
     * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
     * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
     * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
     * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
     */
    class GenericEthereumLookupSource extends AbstractBase {
        constructor(registry, value = new Uint8Array()) {
            super(registry, decodeAddressOrIndex(registry, value));
        }
        /**
         * @description The length of the value when encoded as a Uint8Array
         */
        get encodedLength() {
            const rawLength = this._rawLength;
            return rawLength + (
            // for 1 byte AccountIndexes, we are not adding a specific prefix
            rawLength > 1
                ? 1
                : 0);
        }
        /**
         * @description The length of the raw value, either AccountIndex or AccountId
         */
        get _rawLength() {
            return this.inner instanceof GenericAccountIndex
                ? GenericAccountIndex.calcLength(this.inner)
                : this.inner.encodedLength;
        }
        /**
         * @description Returns a hex string representation of the value
         */
        toHex() {
            return u8aToHex(this.toU8a());
        }
        /**
         * @description Returns the base runtime type name for this instance
         */
        toRawType() {
            return 'Address';
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         * @param isBare true when the value has none of the type-specific prefixes (internal)
         */
        toU8a(isBare) {
            const encoded = this.inner.toU8a().subarray(0, this._rawLength);
            return isBare
                ? encoded
                : u8aConcat(this.inner instanceof GenericAccountIndex
                    ? GenericAccountIndex.writeLength(encoded)
                    : ACCOUNT_ID_PREFIX, encoded);
        }
    }

    /** @internal */
    function decodeDataU8a(registry, value) {
        const indicator = value[0];
        if (!indicator) {
            return [undefined, undefined];
        }
        else if (indicator >= 1 && indicator <= 33) {
            const length = indicator - 1;
            const data = value.subarray(1, length + 1);
            // in this case, we are passing a Raw back (since we have no length)
            return [registry.createTypeUnsafe('Raw', [data]), 1];
        }
        else if (indicator >= 34 && indicator <= 37) {
            return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2
        }
        throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
    }
    /** @internal */
    function decodeData(registry, value) {
        if (isU8a(value) || isString(value)) {
            return decodeDataU8a(registry, u8aToU8a(value));
        }
        else if (!value) {
            return [undefined, undefined];
        }
        // assume we have an Enum or an  object input, handle this via the normal Enum decoding
        return [value, undefined];
    }
    /**
     * @name Data
     * @description
     * A [[Data]] container with node, raw or hashed data
     */
    class Data extends Enum {
        constructor(registry, value) {
            super(registry, {
                None: 'Null',
                Raw: 'Bytes',
                // eslint-disable-next-line sort-keys
                BlakeTwo256: 'H256',
                Sha256: 'H256',
                // eslint-disable-next-line sort-keys
                Keccak256: 'H256',
                ShaThree256: 'H256' // 5
            }, ...decodeData(registry, value));
            if (this.isRaw && this.asRaw.length > 32) {
                throw new Error('Data.Raw values are limited to a maximum length of 32 bytes');
            }
        }
        get asBlakeTwo256() {
            return this.value;
        }
        get asKeccak256() {
            return this.value;
        }
        get asRaw() {
            return this.value;
        }
        get asSha256() {
            return this.value;
        }
        get asShaThree256() {
            return this.value;
        }
        get isBlakeTwo256() {
            return this.index === 2;
        }
        get isKeccak256() {
            return this.index === 4;
        }
        get isNone() {
            return this.index === 0;
        }
        get isRaw() {
            return this.index === 1;
        }
        get isSha256() {
            return this.index === 3;
        }
        get isShaThree256() {
            return this.index === 5;
        }
        /**
         * @description The encoded length
         */
        get encodedLength() {
            return this.toU8a().length;
        }
        /**
         * @description Encodes the value as a Uint8Array as per the SCALE specifications
         */
        toU8a() {
            if (this.index === 0) {
                return new Uint8Array(1);
            }
            else if (this.index === 1) {
                // don't add the length, just the data
                const data = this.value.toU8a(true);
                const length = Math.min(data.length, 32);
                const u8a = new Uint8Array(length + 1);
                u8a.set([length + 1], 0);
                u8a.set(data.subarray(0, length), 1);
                return u8a;
            }
            // otherwise we simply have a hash
            const u8a = new Uint8Array(33);
            u8a.set([this.index + 32], 0);
            u8a.set(this.value.toU8a(), 1);
            return u8a;
        }
    }

    const HASHER_MAP = {
        // opaque
        Blake2_128: [16, false],
        Blake2_128Concat: [16, true],
        Blake2_256: [32, false],
        Identity: [0, true],
        Twox128: [16, false],
        Twox256: [32, false],
        Twox64Concat: [8, true]
    };
    /** @internal */
    function decodeStorageKey(value) {
        if (isU8a(value) || !value || isString(value)) {
            // let Bytes handle these inputs
            return { key: value };
        }
        else if (value instanceof StorageKey) {
            return {
                key: value,
                method: value.method,
                section: value.section
            };
        }
        else if (isFunction$1(value)) {
            return {
                key: value(),
                method: value.method,
                section: value.section
            };
        }
        else if (Array.isArray(value)) {
            const [fn, args = []] = value;
            if (!isFunction$1(fn)) {
                throw new Error('Expected function input for key construction');
            }
            if (fn.meta && fn.meta.type.isMap) {
                const map = fn.meta.type.asMap;
                if (!Array.isArray(args) || args.length !== map.hashers.length) {
                    throw new Error(`Expected an array of ${map.hashers.length} values as params to a Map query`);
                }
            }
            return {
                key: fn(...args),
                method: fn.method,
                section: fn.section
            };
        }
        throw new Error(`Unable to convert input ${value} to StorageKey`);
    }
    /** @internal */
    function decodeHashers(registry, value, hashers) {
        // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
        let offset = 32;
        const count = hashers.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            const [hasher, type] = hashers[i];
            const [hashLen, canDecode] = HASHER_MAP[hasher.type];
            const decoded = canDecode
                ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset + hashLen)])
                : registry.createTypeUnsafe('Raw', [value.subarray(offset, offset + hashLen)]);
            offset += hashLen + (canDecode ? decoded.encodedLength : 0);
            result[i] = decoded;
        }
        return result;
    }
    /** @internal */
    function decodeArgsFromMeta(registry, value, meta) {
        if (!meta || !meta.type.isMap) {
            return [];
        }
        const { hashers, key } = meta.type.asMap;
        const keys = hashers.length === 1
            ? [key]
            : registry.lookup.getSiType(key).def.asTuple;
        return decodeHashers(registry, value, hashers.map((h, i) => [h, keys[i]]));
    }
    /** @internal */
    function getMeta(value) {
        if (value instanceof StorageKey) {
            return value.meta;
        }
        else if (isFunction$1(value)) {
            return value.meta;
        }
        else if (Array.isArray(value)) {
            const [fn] = value;
            return fn.meta;
        }
        return undefined;
    }
    /** @internal */
    function getType(registry, value) {
        if (value instanceof StorageKey) {
            return value.outputType;
        }
        else if (isFunction$1(value)) {
            return unwrapStorageType(registry, value.meta.type);
        }
        else if (Array.isArray(value)) {
            const [fn] = value;
            if (fn.meta) {
                return unwrapStorageType(registry, fn.meta.type);
            }
        }
        // If we have no type set, default to Raw
        return 'Raw';
    }
    /**
     * @name StorageKey
     * @description
     * A representation of a storage key (typically hashed) in the system. It can be
     * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
     */
    class StorageKey extends Bytes {
        constructor(registry, value, override = {}) {
            const { key, method, section } = decodeStorageKey(value);
            super(registry, key);
            this.__internal__outputType = getType(registry, value);
            // decode the args (as applicable based on the key and the hashers, after all init)
            this.setMeta(getMeta(value), override.section || section, override.method || method);
        }
        /**
         * @description Return the decoded arguments (applicable to map with decodable values)
         */
        get args() {
            return this.__internal__args;
        }
        /**
         * @description The metadata or `undefined` when not available
         */
        get meta() {
            return this.__internal__meta;
        }
        /**
         * @description The key method or `undefined` when not specified
         */
        get method() {
            return this.__internal__method;
        }
        /**
         * @description The output type
         */
        get outputType() {
            return this.__internal__outputType;
        }
        /**
         * @description The key section or `undefined` when not specified
         */
        get section() {
            return this.__internal__section;
        }
        is(key) {
            return key.section === this.section && key.method === this.method;
        }
        /**
         * @description Sets the meta for this key
         */
        setMeta(meta, section, method) {
            this.__internal__meta = meta;
            this.__internal__method = method || this.__internal__method;
            this.__internal__section = section || this.__internal__section;
            if (meta) {
                this.__internal__outputType = unwrapStorageType(this.registry, meta.type);
            }
            try {
                this.__internal__args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
            }
            catch {
                // ignore...
            }
            return this;
        }
        /**
         * @description Returns the Human representation for this type
         */
        toHuman() {
            return this.__internal__args.length
                ? this.__internal__args.map((a) => a.toHuman())
                : super.toHuman();
        }
        /**
         * @description Returns the raw type for this
         */
        toRawType() {
            return 'StorageKey';
        }
    }

    var baseTypes = /*#__PURE__*/Object.freeze({
        __proto__: null,
        GenericExtrinsic: GenericExtrinsic,
        GenericExtrinsicEra: GenericExtrinsicEra,
        GenericImmortalEra: ImmortalEra,
        GenericMortalEra: MortalEra,
        GenericExtrinsicPayload: GenericExtrinsicPayload,
        GenericExtrinsicPayloadUnknown: GenericExtrinsicPayloadUnknown,
        GenericExtrinsicUnknown: GenericExtrinsicUnknown,
        GenericSignerPayload: GenericSignerPayload,
        GenericExtrinsicV4: GenericExtrinsicV4,
        GenericExtrinsicPayloadV4: GenericExtrinsicPayloadV4,
        GenericExtrinsicSignatureV4: GenericExtrinsicSignatureV4,
        GenericAccountId: GenericAccountId,
        GenericAccountId32: GenericAccountId,
        GenericAccountId33: GenericAccountId33,
        GenericAccountIndex: GenericAccountIndex,
        GenericBlock: GenericBlock,
        GenericCall: GenericCall,
        GenericChainProperties: GenericChainProperties,
        GenericConsensusEngineId: GenericConsensusEngineId,
        GenericEvent: GenericEvent,
        GenericEventData: GenericEventData,
        GenericLookupSource: GenericLookupSource,
        GenericAddress: GenericMultiAddress,
        GenericMultiAddress: GenericMultiAddress,
        GenericVote: GenericVote,
        GenericEthereumAccountId: GenericEthereumAccountId,
        GenericEthereumLookupSource: GenericEthereumLookupSource,
        BitVec: BitVec,
        Bool: bool,
        bool: bool,
        Bytes: Bytes,
        F32: f32,
        f32: f32,
        F64: f64,
        f64: f64,
        I8: i8,
        i8: i8,
        I16: i16,
        i16: i16,
        I32: i32,
        i32: i32,
        I64: i64,
        i64: i64,
        I128: i128,
        i128: i128,
        I256: i256,
        i256: i256,
        ISize: isize,
        isize: isize,
        Null: Null,
        OptionBool: OptionBool,
        Text: Text,
        Type: Type,
        U8: u8,
        u8: u8,
        U16: u16,
        u16: u16,
        U32: u32,
        u32: u32,
        U64: u64,
        u64: u64,
        U128: u128,
        u128: u128,
        U256: u256,
        u256: u256,
        USize: usize,
        usize: usize,
        Data: Data,
        StorageKey: StorageKey
    });

    function convert(fn) {
        return ({ name }) => fn(name);
    }
    const objectNameToCamel = /*#__PURE__*/ convert(stringCamelCase);
    const objectNameToString = /*#__PURE__*/ convert((n) => n.toString());

    function isTx(tx, callIndex) {
        return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
    }
    /** @internal */
    function createUnchecked(registry, section, callIndex, callMetadata) {
        const expectedArgs = callMetadata.fields;
        const funcName = stringCamelCase(callMetadata.name);
        const extrinsicFn = (...args) => {
            if (expectedArgs.length !== args.length) {
                throw new Error(`Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
            }
            return registry.createTypeUnsafe('Call', [{ args, callIndex }, callMetadata]);
        };
        extrinsicFn.is = (tx) => isTx(tx, callIndex);
        extrinsicFn.callIndex = callIndex;
        extrinsicFn.meta = callMetadata;
        extrinsicFn.method = funcName;
        extrinsicFn.section = section;
        extrinsicFn.toJSON = () => callMetadata.toJSON();
        return extrinsicFn;
    }

    function filterCallsSome({ calls }) {
        return calls.isSome;
    }
    function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
        const { fields, index } = variant;
        const count = fields.length;
        const args = new Array(count);
        for (let i = 0; i < count; i++) {
            const { name, type, typeName } = fields[i];
            args[i] = objectSpread({
                name: stringCamelCase(name.unwrapOr(`param${i}`)),
                type: getSiName(lookup, type)
            }, typeName.isSome
                ? { typeName: typeName.unwrap() }
                : null);
        }
        return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe('FunctionMetadataLatest', [objectSpread({ args }, variant)]));
    }
    /** @internal */
    function decorateExtrinsics(registry, { lookup, pallets }, version) {
        const result = {};
        const filtered = pallets.filter(filterCallsSome);
        for (let i = 0, count = filtered.length; i < count; i++) {
            const { calls, index, name } = filtered[i];
            const sectionName = stringCamelCase(name);
            const sectionIndex = version >= 12 ? index.toNumber() : i;
            lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
        }
        return result;
    }

    /** @internal */
    function createStorageHasher(registry, hasher) {
        // Blake2_128_Concat has been added at index 2, so we increment all the
        // indexes greater than 2
        if (hasher.toNumber() >= 2) {
            return registry.createTypeUnsafe('StorageHasherV10', [hasher.toNumber() + 1]);
        }
        return registry.createTypeUnsafe('StorageHasherV10', [hasher]);
    }
    /** @internal */
    function createStorageType(registry, entryType) {
        if (entryType.isMap) {
            return [objectSpread({}, entryType.asMap, {
                    hasher: createStorageHasher(registry, entryType.asMap.hasher)
                }), 1];
        }
        if (entryType.isDoubleMap) {
            return [objectSpread({}, entryType.asDoubleMap, {
                    hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
                    key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
                }), 2];
        }
        return [entryType.asPlain, 0];
    }
    /** @internal */
    function convertModule(registry, mod) {
        const storage = mod.storage.unwrapOr(null);
        return registry.createTypeUnsafe('ModuleMetadataV10', [objectSpread({}, mod, {
                storage: storage
                    ? objectSpread({}, storage, {
                        items: storage.items.map((item) => objectSpread({}, item, {
                            type: registry.createTypeUnsafe('StorageEntryTypeV10', createStorageType(registry, item.type))
                        }))
                    })
                    : null
            })]);
    }
    /** @internal */
    function toV10(registry, { modules }) {
        return registry.createTypeUnsafe('MetadataV10', [{
                modules: modules.map((mod) => convertModule(registry, mod))
            }]);
    }

    /** @internal */
    function toV11(registry, { modules }) {
        return registry.createTypeUnsafe('MetadataV11', [{
                // This is new in V11, pass V0 here - something non-existing, telling the API to use
                // the fallback for this information (on-chain detection)
                extrinsic: {
                    signedExtensions: [],
                    version: 0
                },
                modules
            }]);
    }

    /**
     * @internal
     **/
    function toV12(registry, { extrinsic, modules }) {
        return registry.createTypeUnsafe('MetadataV12', [{
                extrinsic,
                modules: modules.map((mod) => registry.createTypeUnsafe('ModuleMetadataV12', [objectSpread({}, mod, { index: 255 })]))
            }]);
    }

    /**
     * @internal
     **/
    function toV13(registry, v12) {
        return registry.createTypeUnsafe('MetadataV13', [v12]);
    }

    const typesAlias = {
        assets: {
            Approval: 'AssetApproval',
            ApprovalKey: 'AssetApprovalKey',
            Balance: 'TAssetBalance',
            DestroyWitness: 'AssetDestroyWitness'
        },
        babe: {
            EquivocationProof: 'BabeEquivocationProof'
        },
        balances: {
            Status: 'BalanceStatus'
        },
        beefy: {
            AuthorityId: 'BeefyId'
        },
        contracts: {
            StorageKey: 'ContractStorageKey'
        },
        electionProviderMultiPhase: {
            Phase: 'ElectionPhase'
        },
        ethereum: {
            Block: 'EthBlock',
            Header: 'EthHeader',
            Receipt: 'EthReceipt',
            Transaction: 'EthTransaction',
            TransactionStatus: 'EthTransactionStatus'
        },
        evm: {
            Account: 'EvmAccount',
            Log: 'EvmLog',
            Vicinity: 'EvmVicinity'
        },
        grandpa: {
            Equivocation: 'GrandpaEquivocation',
            EquivocationProof: 'GrandpaEquivocationProof'
        },
        identity: {
            Judgement: 'IdentityJudgement'
        },
        inclusion: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        paraDisputes: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        paraInclusion: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        paraScheduler: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        paraShared: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        parachains: {
            Id: 'ParaId'
        },
        parasDisputes: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        parasInclusion: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        parasScheduler: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        parasShared: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        proposeParachain: {
            Proposal: 'ParachainProposal'
        },
        proxy: {
            Announcement: 'ProxyAnnouncement'
        },
        scheduler: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        shared: {
            ValidatorIndex: 'ParaValidatorIndex'
        },
        society: {
            Judgement: 'SocietyJudgement',
            Vote: 'SocietyVote'
        },
        staking: {
            Compact: 'CompactAssignments'
        },
        treasury: {
            Proposal: 'TreasuryProposal'
        },
        xcm: {
            AssetId: 'XcmAssetId'
        },
        xcmPallet: {
            AssetId: 'XcmAssetId'
        }
    };
    /**
     * @description Get types for specific modules (metadata override)
     */
    function getAliasTypes({ knownTypes }, section) {
        return {
            ...(typesAlias[section] ?? {}),
            ...(knownTypes.typesAlias?.[section] ?? {})
        };
    }

    const BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];
    /**
     * Creates a compatible type mapping
     * @internal
     **/
    function compatType(specs, _type) {
        const type = _type.toString();
        const index = specs.findIndex(({ def }) => def.HistoricMetaCompat === type);
        if (index !== -1) {
            return index;
        }
        return specs.push({
            def: {
                HistoricMetaCompat: type
            }
        }) - 1;
    }
    function compatTypes(specs, ...types) {
        for (let i = 0, count = types.length; i < count; i++) {
            compatType(specs, types[i]);
        }
    }
    function makeTupleType(specs, entries) {
        return specs.push({
            def: {
                Tuple: entries
            }
        }) - 1;
    }
    function makeVariantType(modName, variantType, specs, variants) {
        return specs.push({
            def: {
                Variant: { variants }
            },
            path: [`pallet_${modName.toString()}`, 'pallet', variantType]
        }) - 1;
    }
    /**
     * @internal
     * generate & register the OriginCaller type
     **/
    function registerOriginCaller(registry, modules, metaVersion) {
        registry.register({
            OriginCaller: {
                _enum: modules
                    .map((mod, index) => [
                    mod.name.toString(),
                    metaVersion >= 12
                        ? mod.index.toNumber()
                        : index
                ])
                    .sort((a, b) => a[1] - b[1])
                    .reduce((result, [name, index]) => {
                    for (let i = Object.keys(result).length; i < index; i++) {
                        result[`Empty${i}`] = 'Null';
                    }
                    result[name] = knownOrigins[name] || 'Null';
                    return result;
                }, {})
            }
        });
    }
    /**
     * Find and apply the correct type override
     * @internal
     **/
    function setTypeOverride(sectionTypes, types) {
        types.forEach((type) => {
            const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
            if (override) {
                type.setOverride(sectionTypes[override]);
            }
            else {
                // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
                const orig = type.toString();
                const alias = Object
                    .entries(sectionTypes)
                    .reduce((result, [src, dst]) => BOXES.reduce((result, [a, z]) => result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);
                if (orig !== alias) {
                    type.setOverride(alias);
                }
            }
        });
    }
    /**
     * Apply module-specific type overrides (always be done as part of toV14)
     * @internal
     **/
    function convertCalls(specs, registry, modName, calls, sectionTypes) {
        const variants = calls.map(({ args, docs, name }, index) => {
            setTypeOverride(sectionTypes, args.map(({ type }) => type));
            return registry.createTypeUnsafe('SiVariant', [{
                    docs,
                    fields: args.map(({ name, type }) => registry.createTypeUnsafe('SiField', [{ name, type: compatType(specs, type) }])),
                    index,
                    name
                }]);
        });
        return registry.createTypeUnsafe('PalletCallMetadataV14', [{
                type: makeVariantType(modName, 'Call', specs, variants)
            }]);
    }
    /**
     * Apply module-specific type overrides (always be done as part of toV14)
     * @internal
     */
    function convertConstants(specs, registry, constants, sectionTypes) {
        return constants.map(({ docs, name, type, value }) => {
            setTypeOverride(sectionTypes, [type]);
            return registry.createTypeUnsafe('PalletConstantMetadataV14', [{
                    docs,
                    name,
                    type: compatType(specs, type),
                    value
                }]);
        });
    }
    /**
     * Apply module-specific type overrides (always be done as part of toV14)
     * @internal
     */
    function convertErrors(specs, registry, modName, errors, _sectionTypes) {
        const variants = errors.map(({ docs, name }, index) => registry.createTypeUnsafe('SiVariant', [{
                docs,
                fields: [],
                index,
                name
            }]));
        return registry.createTypeUnsafe('PalletErrorMetadataV14', [{
                type: makeVariantType(modName, 'Error', specs, variants)
            }]);
    }
    /**
     * Apply module-specific type overrides (always be done as part of toV14)
     * @internal
     **/
    function convertEvents(specs, registry, modName, events, sectionTypes) {
        const variants = events.map(({ args, docs, name }, index) => {
            setTypeOverride(sectionTypes, args);
            return registry.createTypeUnsafe('SiVariant', [{
                    docs,
                    fields: args.map((t) => registry.createTypeUnsafe('SiField', [{ type: compatType(specs, t) }])),
                    index,
                    name
                }]);
        });
        return registry.createTypeUnsafe('PalletEventMetadataV14', [{
                type: makeVariantType(modName, 'Event', specs, variants)
            }]);
    }
    function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys, value }) {
        setTypeOverride(sectionTypes, [value, ...(Array.isArray(keys) ? keys : [keys])]);
        return registry.createTypeUnsafe('StorageEntryTypeV14', [{
                Map: {
                    hashers,
                    key: hashers.length === 1
                        ? compatType(specs, keys[0])
                        : makeTupleType(specs, keys.map((t) => compatType(specs, t))),
                    value: isLinked
                        // For previous-generation linked-map support, the actual storage result
                        // is a Tuple with the value and the Linkage (Option appears in teh value-part only)
                        ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys[0].toString()}>)`)
                        : compatType(specs, value)
                }
            }]);
    }
    /**
     * Apply module-specific storage type overrides (always part of toV14)
     * @internal
     **/
    function convertStorage(specs, registry, { items, prefix }, sectionTypes) {
        return registry.createTypeUnsafe('PalletStorageMetadataV14', [{
                items: items.map(({ docs, fallback, modifier, name, type }) => {
                    let entryType;
                    if (type.isPlain) {
                        const plain = type.asPlain;
                        setTypeOverride(sectionTypes, [plain]);
                        entryType = registry.createTypeUnsafe('StorageEntryTypeV14', [{
                                Plain: compatType(specs, plain)
                            }]);
                    }
                    else if (type.isMap) {
                        const map = type.asMap;
                        entryType = createMapEntry(specs, registry, sectionTypes, {
                            hashers: [map.hasher],
                            isLinked: map.linked.isTrue,
                            isOptional: modifier.isOptional,
                            keys: [map.key],
                            value: map.value
                        });
                    }
                    else if (type.isDoubleMap) {
                        const dm = type.asDoubleMap;
                        entryType = createMapEntry(specs, registry, sectionTypes, {
                            hashers: [dm.hasher, dm.key2Hasher],
                            isLinked: false,
                            isOptional: modifier.isOptional,
                            keys: [dm.key1, dm.key2],
                            value: dm.value
                        });
                    }
                    else {
                        const nm = type.asNMap;
                        entryType = createMapEntry(specs, registry, sectionTypes, {
                            hashers: nm.hashers,
                            isLinked: false,
                            isOptional: modifier.isOptional,
                            keys: nm.keyVec,
                            value: nm.value
                        });
                    }
                    return registry.createTypeUnsafe('StorageEntryMetadataV14', [{
                            docs,
                            fallback,
                            modifier,
                            name,
                            type: entryType
                        }]);
                }),
                prefix
            }]);
    }
    /** @internal */
    function convertExtrinsic(registry, { signedExtensions, version }) {
        return registry.createTypeUnsafe('ExtrinsicMetadataV14', [{
                signedExtensions: signedExtensions.map((identifier) => ({
                    identifier,
                    type: 0 // we don't map the fields at all
                })),
                type: 0,
                version
            }]);
    }
    /** @internal */
    function createPallet(specs, registry, mod, { calls, constants, errors, events, storage }) {
        const sectionTypes = getAliasTypes(registry, stringCamelCase(mod.name));
        return registry.createTypeUnsafe('PalletMetadataV14', [{
                calls: calls && convertCalls(specs, registry, mod.name, calls, sectionTypes),
                constants: convertConstants(specs, registry, constants, sectionTypes),
                errors: errors && convertErrors(specs, registry, mod.name, errors, sectionTypes),
                events: events && convertEvents(specs, registry, mod.name, events, sectionTypes),
                index: mod.index,
                name: mod.name,
                storage: storage && convertStorage(specs, registry, storage, sectionTypes)
            }]);
    }
    /**
     * Convert the Metadata to v14
     * @internal
     **/
    function toV14(registry, v13, metaVersion) {
        const specs = [];
        // position 0 always has Null, additionally add internal defaults
        compatTypes(specs, 'Null', 'u8', 'u16', 'u32', 'u64');
        registerOriginCaller(registry, v13.modules, metaVersion);
        const extrinsic = convertExtrinsic(registry, v13.extrinsic);
        const pallets = v13.modules.map((mod) => createPallet(specs, registry, mod, {
            calls: mod.calls.unwrapOr(null),
            constants: mod.constants,
            errors: mod.errors.length ? mod.errors : null,
            events: mod.events.unwrapOr(null),
            storage: mod.storage.unwrapOr(null)
        }));
        return registry.createTypeUnsafe('MetadataV14', [{
                extrinsic,
                lookup: {
                    types: specs.map((type, id) => registry.createTypeUnsafe('PortableType', [{ id, type }]))
                },
                pallets
            }]);
    }

    /**
     * Convert the Metadata to v15
     * @internal
     **/
    function toV15(registry, v14, _) {
        // V15 is mostly equivalent to v14 however it does add
        //
        // 1. The top-level apis entry - it is assumed that in usage we would
        //    just check for all-empty (like this would construct)
        // 2. A docs param on the pallet itself
        // 3. Additional extrinsic parameters
        //
        // A straight conversion with createTypeUndafe magic fills in details
        // We need the UncheckedExtrinsic to extract the types, at least for v14
        // which does have these details embedded (previous-gen won't populate)
        const unchecked = v14.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;
        return registry.createTypeUnsafe('MetadataV15', [
            objectSpread({}, v14, {
                extrinsic: registry.createTypeUnsafe('ExtrinsicMetadataV15', [
                    objectSpread({}, v14.extrinsic, {
                        addressType: unchecked?.[0].type.unwrapOr(0),
                        callType: unchecked?.[1].type.unwrapOr(0),
                        extraType: unchecked?.[3].type.unwrapOr(0),
                        signatureType: unchecked?.[2].type.unwrapOr(0)
                    })
                ]),
                outerEnums: registry.createTypeUnsafe('OuterEnums15', [{
                        // FIXME We need to extract & add the errorType in here
                        // (these doesn't seem to be an esay way to detect & extract it)
                        callType: unchecked?.[1].type.unwrapOr(0),
                        eventType: v14.lookup.paramTypes.FrameSystemEventRecord?.[0].type.unwrapOr(0)
                    }])
            })
        ]);
    }

    /**
     * Convert the Metadata (which is an alias) to latest
     * @internal
     **/
    function toLatest(_registry, v15, _metaVersion) {
        return v15;
    }

    const MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding
    class MagicNumber extends u32 {
        constructor(registry, value) {
            super(registry, value);
            if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
                throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe('u32', [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
            }
        }
    }

    const KNOWN_VERSIONS = [15, 14, 13, 12, 11, 10, 9];
    const LATEST_VERSION = KNOWN_VERSIONS[0];
    const TO_CALLS_VERSION = 14; // LATEST_VERSION;

    /**
     * @name MetadataVersioned
     * @description
     * The versioned runtime metadata as a decoded structure
     */
    class MetadataVersioned extends Struct {
        constructor(registry, value) {
            // const timeStart = performance.now()
            super(registry, {
                magicNumber: MagicNumber,
                metadata: 'MetadataAll'
            }, value);
            this.__internal__converted = new Map();
            this.__internal__assertVersion = (version) => {
                if (this.version > version) {
                    throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);
                }
                return this.version === version;
            };
            this.__internal__getVersion = (version, fromPrev) => {
                if (version !== 'latest' && this.__internal__assertVersion(version)) {
                    const asCurr = `asV${version}`;
                    return this.__internal__metadata()[asCurr];
                }
                if (!this.__internal__converted.has(version)) {
                    const asPrev = version === 'latest'
                        ? `asV${LATEST_VERSION}`
                        : `asV${(version - 1)}`;
                    this.__internal__converted.set(version, fromPrev(this.registry, this[asPrev], this.version));
                }
                return this.__internal__converted.get(version);
            };
            /**
             * @description the metadata wrapped
             */
            this.__internal__metadata = () => {
                return this.getT('metadata');
            };
            // console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)
        }
        /**
         * @description Returns the wrapped metadata as a limited calls-only (latest) version
         */
        get asCallsOnly() {
            return new MetadataVersioned(this.registry, {
                magicNumber: this.magicNumber,
                metadata: this.registry.createTypeUnsafe('MetadataAll', [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])
            });
        }
        /**
         * @description Returns the wrapped metadata as a V9 object
         */
        get asV9() {
            this.__internal__assertVersion(9);
            return this.__internal__metadata().asV9;
        }
        /**
         * @description Returns the wrapped values as a V10 object
         */
        get asV10() {
            return this.__internal__getVersion(10, toV10);
        }
        /**
         * @description Returns the wrapped values as a V11 object
         */
        get asV11() {
            return this.__internal__getVersion(11, toV11);
        }
        /**
         * @description Returns the wrapped values as a V12 object
         */
        get asV12() {
            return this.__internal__getVersion(12, toV12);
        }
        /**
         * @description Returns the wrapped values as a V13 object
         */
        get asV13() {
            return this.__internal__getVersion(13, toV13);
        }
        /**
         * @description Returns the wrapped values as a V14 object
         */
        get asV14() {
            return this.__internal__getVersion(14, toV14);
        }
        /**
         * @description Returns the wrapped values as a V14 object
         */
        get asV15() {
            return this.__internal__getVersion(15, toV15);
        }
        /**
         * @description Returns the wrapped values as a latest version object
         */
        get asLatest() {
            return this.__internal__getVersion('latest', toLatest);
        }
        /**
         * @description The magicNumber for the Metadata (known constant)
         */
        get magicNumber() {
            return this.getT('magicNumber');
        }
        /**
         * @description the metadata version this structure represents
         */
        get version() {
            return this.__internal__metadata().index;
        }
        getUniqTypes(throwError) {
            return getUniqTypes(this.registry, this.asLatest, throwError);
        }
        /**
         * @description Converts the Object to JSON, typically used for RPC transfers
         */
        toJSON() {
            // HACK(y): ensure that we apply the aliases if we have not done so already, this is
            // needed to ensure we have the correct overrides (which is only applied in toLatest)
            // eslint-disable-next-line no-unused-expressions
            this.asLatest;
            return super.toJSON();
        }
    }

    const EMPTY_METADATA = new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]);
    const VERSION_IDX = EMPTY_METADATA.length - 1;
    /** @internal */
    function decodeU8a(registry, u8a) {
        if (u8a.length === 0) {
            return EMPTY_METADATA;
        }
        else if (u8a[VERSION_IDX] === 9) {
            // This is an f-ing hack as a follow-up to another ugly hack
            // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
            // when we fail on V9, try to re-parse it as v10...
            try {
                return new MetadataVersioned(registry, u8a);
            }
            catch {
                u8a[VERSION_IDX] = 10;
            }
        }
        return u8a;
    }
    /**
     * @name Metadata
     * @description
     * The versioned runtime metadata as a decoded structure
     */
    class Metadata extends MetadataVersioned {
        constructor(registry, value) {
            // const timeStart = performance.now()
            super(registry, isU8a(value) || isString(value)
                ? decodeU8a(registry, u8aToU8a(value))
                : value);
            // console.log('Metadata', `${(performance.now() - timeStart).toFixed(2)}ms`)
        }
    }

    /** @internal */
    function decorateConstants(registry, { pallets }, _version) {
        const result = {};
        for (let i = 0, count = pallets.length; i < count; i++) {
            const { constants, name } = pallets[i];
            if (!constants.isEmpty) {
                lazyMethod(result, stringCamelCase(name), () => lazyMethods({}, constants, (constant) => {
                    const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a(constant.value.toHex())]);
                    // We are casting here since we are assigning to a read-only property
                    codec.meta = constant;
                    return codec;
                }, objectNameToCamel));
            }
        }
        return result;
    }

    function variantToMeta(lookup, variant) {
        return objectSpread({ args: variant.fields.map(({ type }) => lookup.getTypeDef(type).type) }, variant);
    }
    /** @internal */
    function decorateErrors(registry, { lookup, pallets }, version) {
        const result = {};
        for (let i = 0, count = pallets.length; i < count; i++) {
            const { errors, index, name } = pallets[i];
            if (errors.isSome) {
                const sectionIndex = version >= 12 ? index.toNumber() : i;
                lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, (variant) => ({
                    // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
                    is: (errorMod) => isCodec(errorMod) &&
                        isCodec(errorMod.index) &&
                        errorMod.index.eq(sectionIndex) && (isU8a(errorMod.error)
                        ? errorMod.error[0] === variant.index.toNumber()
                        : isCodec(errorMod.error) && errorMod.error.eq(variant.index)),
                    meta: registry.createTypeUnsafe('ErrorMetadataLatest', [variantToMeta(lookup, variant)])
                })));
            }
        }
        return result;
    }

    function filterEventsSome({ events }) {
        return events.isSome;
    }
    /** @internal */
    function decorateEvents(registry, { lookup, pallets }, version) {
        const result = {};
        const filtered = pallets.filter(filterEventsSome);
        for (let i = 0, count = filtered.length; i < count; i++) {
            const { events, index, name } = filtered[i];
            const sectionIndex = version >= 12 ? index.toNumber() : i;
            lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events.unwrap(), objectNameToString, (variant) => ({
                // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
                is: (eventRecord) => isCodec(eventRecord) &&
                    isU8a(eventRecord.index) &&
                    sectionIndex === eventRecord.index[0] &&
                    variant.index.eq(eventRecord.index[1]),
                meta: registry.createTypeUnsafe('EventMetadataLatest', [variantToMeta(lookup, variant)])
            })));
        }
        return result;
    }

    const DEFAULT_FN = (data) => xxhashAsU8a(data, 128);
    const HASHERS = {
        Blake2_128: (data) => // eslint-disable-line camelcase
         blake2AsU8a(data, 128),
        Blake2_128Concat: (data) => // eslint-disable-line camelcase
         u8aConcat(blake2AsU8a(data, 128), u8aToU8a(data)),
        Blake2_256: (data) => // eslint-disable-line camelcase
         blake2AsU8a(data, 256),
        Identity: (data) => u8aToU8a(data),
        Twox128: (data) => xxhashAsU8a(data, 128),
        Twox256: (data) => xxhashAsU8a(data, 256),
        Twox64Concat: (data) => u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data))
    };
    /** @internal */
    function getHasher(hasher) {
        return HASHERS[hasher.type] || DEFAULT_FN;
    }

    const NO_RAW_ARGS = {
        args: [],
        hashers: [],
        keys: []
    };
    /** @internal */
    function filterDefined(a) {
        return !isUndefined(a);
    }
    /** @internal */
    function assertArgs({ method, section }, { args, keys }) {
        if (!Array.isArray(args)) {
            throw new Error(`Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments`);
        }
        else if (args.filter(filterDefined).length !== keys.length) {
            throw new Error(`Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments, found [${args.join(', ')}]`);
        }
    }
    /** @internal */
    function createKeyRawParts(registry, itemFn, { args, hashers, keys }) {
        const count = keys.length;
        const extra = new Array(count);
        for (let i = 0; i < count; i++) {
            extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys[i]), [args[i]]).toU8a());
        }
        return [
            [
                xxhashAsU8a(itemFn.prefix, 128),
                xxhashAsU8a(itemFn.method, 128)
            ],
            extra
        ];
    }
    /** @internal */
    function createKeyInspect(registry, itemFn, args) {
        assertArgs(itemFn, args);
        const { meta } = itemFn;
        const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
        let types = [];
        if (meta.type.isMap) {
            const { hashers, key } = meta.type.asMap;
            types = hashers.length === 1
                ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`]
                : registry.lookup.getSiType(key).def.asTuple.map((k, i) => `${hashers[i].type}(${getSiName(registry.lookup, k)})`);
        }
        const names = ['module', 'method'].concat(...args.args.map((_, i) => types[i]));
        return {
            inner: prefix
                .concat(...extra)
                .map((v, i) => ({ name: names[i], outer: [v] }))
        };
    }
    /** @internal */
    function createKeyRaw(registry, itemFn, args) {
        const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
        return u8aConcat(...prefix, ...extra);
    }
    /** @internal */
    function createKey(registry, itemFn, args) {
        assertArgs(itemFn, args);
        // always add the length prefix (underlying it is Bytes)
        return compactAddLength(createKeyRaw(registry, itemFn, args));
    }
    /** @internal */
    function createStorageInspect(registry, itemFn, options) {
        const { meta: { type } } = itemFn;
        return (...args) => {
            if (type.isPlain) {
                return options.skipHashing
                    ? { inner: [], name: 'wellKnown', outer: [u8aToU8a(options.key)] }
                    : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
            }
            const { hashers, key } = type.asMap;
            return hashers.length === 1
                ? createKeyInspect(registry, itemFn, { args, hashers, keys: [key] })
                : createKeyInspect(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
        };
    }
    /** @internal */
    function createStorageFn(registry, itemFn, options) {
        const { meta: { type } } = itemFn;
        let cacheKey = null;
        // Can only have zero or one argument:
        //   - storage.system.account(address)
        //   - storage.timestamp.blockPeriod()
        // For higher-map queries the params are passed in as an tuple, [key1, key2]
        return (...args) => {
            if (type.isPlain) {
                if (!cacheKey) {
                    cacheKey = options.skipHashing
                        ? compactAddLength(u8aToU8a(options.key))
                        : createKey(registry, itemFn, NO_RAW_ARGS);
                }
                return cacheKey;
            }
            const { hashers, key } = type.asMap;
            return hashers.length === 1
                ? createKey(registry, itemFn, { args, hashers, keys: [key] })
                : createKey(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
        };
    }
    /** @internal */
    function createWithMeta(registry, itemFn, options) {
        const { meta, method, prefix, section } = itemFn;
        const storageFn = createStorageFn(registry, itemFn, options);
        storageFn.inspect = createStorageInspect(registry, itemFn, options);
        storageFn.meta = meta;
        storageFn.method = stringCamelCase(method);
        storageFn.prefix = prefix;
        storageFn.section = section;
        // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
        // instances (e.g. collective) will not work since it is only matched on param meta
        storageFn.toJSON = () => objectSpread({ storage: { method, prefix, section } }, meta.toJSON());
        return storageFn;
    }
    /** @internal */
    function extendHeadMeta(registry, { meta: { docs, name, type }, section }, { method }, iterFn) {
        // metadata with a fallback value using the type of the key, the normal
        // meta fallback only applies to actual entry values, create one for head
        const meta = registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
                docs,
                fallback: registry.createTypeUnsafe('Bytes', []),
                modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', [1]),
                name,
                type: registry.createTypeUnsafe('StorageEntryTypeLatest', [type.asMap.key, 0])
            }]);
        iterFn.meta = meta;
        const fn = (...args) => registry.createTypeUnsafe('StorageKey', [iterFn(...args), { method, section }]);
        fn.meta = meta;
        return fn;
    }
    /** @internal */
    function extendPrefixedMap(registry, itemFn, storageFn) {
        const { meta: { type }, method, section } = itemFn;
        storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
            if (args.length && (type.isPlain || (args.length >= type.asMap.hashers.length))) {
                throw new Error(`Iteration of ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs arguments to be at least one less than the full arguments, found [${args.join(', ')}]`);
            }
            if (args.length) {
                if (type.isMap) {
                    const { hashers, key } = type.asMap;
                    const keysVec = hashers.length === 1
                        ? [key]
                        : registry.lookup.getSiType(key).def.asTuple;
                    return new Raw(registry, createKeyRaw(registry, itemFn, { args, hashers: hashers.slice(0, args.length), keys: keysVec.slice(0, args.length) }));
                }
            }
            return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
        });
        return storageFn;
    }
    /** @internal */
    function createFunction(registry, itemFn, options) {
        const { meta: { type } } = itemFn;
        const storageFn = createWithMeta(registry, itemFn, options);
        if (type.isMap) {
            extendPrefixedMap(registry, itemFn, storageFn);
        }
        storageFn.keyPrefix = (...args) => (storageFn.iterKey && storageFn.iterKey(...args)) ||
            compactStripLength(storageFn())[1];
        return storageFn;
    }

    function findSiPrimitive(registry, _prim) {
        const prim = _prim.toLowerCase();
        return registry.lookup.types.find((t) => (t.type.def.isPrimitive &&
            t.type.def.asPrimitive.toString().toLowerCase() === prim) || (t.type.def.isHistoricMetaCompat &&
            t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim));
    }
    function findSiType(registry, orig) {
        let portable = findSiPrimitive(registry, orig);
        if (!portable && orig === 'Bytes') {
            const u8 = findSiPrimitive(registry, 'u8');
            if (u8) {
                portable = registry.lookup.types.find((t) => (t.type.def.isSequence &&
                    t.type.def.asSequence.type.eq(u8.id)) || (t.type.def.isHistoricMetaCompat &&
                    t.type.def.asHistoricMetaCompat.eq(orig)));
            }
        }
        if (!portable) {
            console.warn(`Unable to map ${orig} to a lookup index`);
        }
        return portable;
    }
    /** @internal */
    function createRuntimeFunction({ method, prefix, section }, key, { docs, type }) {
        return (registry) => createFunction(registry, {
            meta: registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
                    docs: registry.createTypeUnsafe('Vec<Text>', [[docs]]),
                    modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', ['Required']),
                    name: registry.createTypeUnsafe('Text', [method]),
                    toJSON: () => key,
                    type: registry.createTypeUnsafe('StorageEntryTypeLatest', [{ Plain: findSiType(registry, type)?.id || 0 }])
                }]),
            method,
            prefix,
            section
        }, { key, skipHashing: true });
    }

    const prefix = 'Substrate';
    const section = 'substrate';
    function createSubstrateFn(method, key, meta) {
        return createRuntimeFunction({ method, prefix, section }, key, meta);
    }
    const substrate = {
        changesTrieConfig: createSubstrateFn('changesTrieConfig', ':changes_trie', {
            docs: 'Changes trie configuration is stored under this key.',
            type: 'u32'
        }),
        childStorageKeyPrefix: createSubstrateFn('childStorageKeyPrefix', ':child_storage:', {
            docs: 'Prefix of child storage keys.',
            type: 'u32'
        }),
        code: createSubstrateFn('code', ':code', {
            docs: 'Wasm code of the runtime.',
            type: 'Bytes'
        }),
        extrinsicIndex: createSubstrateFn('extrinsicIndex', ':extrinsic_index', {
            docs: 'Current extrinsic index (u32) is stored under this key.',
            type: 'u32'
        }),
        heapPages: createSubstrateFn('heapPages', ':heappages', {
            docs: 'Number of wasm linear memory pages required for execution of the runtime.',
            type: 'u64'
        })
    };

    /** @internal */
    function getStorage(registry) {
        const storage = {};
        const entries = Object.entries(substrate);
        for (let e = 0, count = entries.length; e < count; e++) {
            storage[entries[e][0]] = entries[e][1](registry);
        }
        return { substrate: storage };
    }

    const VERSION_NAME = 'palletVersion';
    const VERSION_KEY = ':__STORAGE_VERSION__:';
    const VERSION_DOCS = { docs: 'Returns the current pallet version from storage', type: 'u16' };
    /** @internal */
    function decorateStorage(registry, { pallets }, _metaVersion) {
        const result = getStorage(registry);
        for (let i = 0, count = pallets.length; i < count; i++) {
            const { name, storage } = pallets[i];
            if (storage.isSome) {
                const section = stringCamelCase(name);
                const { items, prefix: _prefix } = storage.unwrap();
                const prefix = _prefix.toString();
                lazyMethod(result, section, () => lazyMethods({
                    palletVersion: createRuntimeFunction({ method: VERSION_NAME, prefix, section }, createKeyRaw(registry, { method: VERSION_KEY, prefix: name.toString() }, NO_RAW_ARGS), VERSION_DOCS)(registry)
                }, items, (meta) => createFunction(registry, { meta, method: meta.name.toString(), prefix, section }, {}), objectNameToCamel));
            }
        }
        return result;
    }

    /**
     * Expands the metadata by decoration into consts, query and tx sections
     */
    function expandMetadata(registry, metadata) {
        if (!(metadata instanceof Metadata)) {
            throw new Error('You need to pass a valid Metadata instance to Decorated');
        }
        const latest = metadata.asLatest;
        const version = metadata.version;
        return {
            consts: decorateConstants(registry, latest, version),
            errors: decorateErrors(registry, latest, version),
            events: decorateEvents(registry, latest, version),
            query: decorateStorage(registry, latest, version),
            registry,
            tx: decorateExtrinsics(registry, latest, version)
        };
    }

    const DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
    const l$4 = logger('registry');
    function sortDecimalStrings(a, b) {
        return parseInt(a, 10) - parseInt(b, 10);
    }
    function valueToString(v) {
        return v.toString();
    }
    function getFieldArgs(lookup, fields) {
        const count = fields.length;
        const args = new Array(count);
        for (let i = 0; i < count; i++) {
            args[i] = lookup.getTypeDef(fields[i].type).type;
        }
        return args;
    }
    function clearRecord(record) {
        const keys = Object.keys(record);
        for (let i = 0, count = keys.length; i < count; i++) {
            delete record[keys[i]];
        }
    }
    function getVariantStringIdx({ index }) {
        return index.toString();
    }
    function injectErrors(_, { lookup, pallets }, version, result) {
        clearRecord(result);
        for (let i = 0, count = pallets.length; i < count; i++) {
            const { errors, index, name } = pallets[i];
            if (errors.isSome) {
                const sectionName = stringCamelCase(name);
                lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index, name }) => ({
                    args: getFieldArgs(lookup, fields),
                    docs: docs.map(valueToString),
                    fields,
                    index: index.toNumber(),
                    method: name.toString(),
                    name: name.toString(),
                    section: sectionName
                })));
            }
        }
    }
    function injectEvents(registry, { lookup, pallets }, version, result) {
        const filtered = pallets.filter(filterEventsSome);
        clearRecord(result);
        for (let i = 0, count = filtered.length; i < count; i++) {
            const { events, index, name } = filtered[i];
            lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, events.unwrap(), getVariantStringIdx, (variant) => {
                const meta = registry.createType('EventMetadataLatest', objectSpread({}, variant, { args: getFieldArgs(lookup, variant.fields) }));
                return class extends GenericEventData {
                    constructor(registry, value) {
                        super(registry, value, meta, stringCamelCase(name), variant.name.toString());
                    }
                };
            }));
        }
    }
    function injectExtrinsics(registry, { lookup, pallets }, version, result, mapping) {
        const filtered = pallets.filter(filterCallsSome);
        clearRecord(result);
        clearRecord(mapping);
        for (let i = 0, count = filtered.length; i < count; i++) {
            const { calls, index, name } = filtered[i];
            const sectionIndex = version >= 12 ? index.toNumber() : i;
            const sectionName = stringCamelCase(name);
            const allCalls = calls.unwrap();
            lazyMethod(result, sectionIndex, () => lazyVariants(lookup, allCalls, getVariantStringIdx, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
            const { path } = registry.lookup.getSiType(allCalls.type);
            // frame_system::pallet::Call / pallet_balances::pallet::Call / polkadot_runtime_parachains::configuration::pallet::Call /
            const palletIdx = path.findIndex((v) => v.eq('pallet'));
            if (palletIdx !== -1) {
                const name = stringCamelCase(path
                    .slice(0, palletIdx)
                    .map((p, i) => i === 0
                    // frame_system || pallet_balances
                    ? p.replace(/^(frame|pallet)_/, '')
                    : p)
                    .join(' '));
                if (!mapping[name]) {
                    mapping[name] = [sectionName];
                }
                else {
                    mapping[name].push(sectionName);
                }
            }
        }
    }
    function extractProperties(registry, metadata) {
        const original = registry.getChainProperties();
        const constants = decorateConstants(registry, metadata.asLatest, metadata.version);
        const ss58Format = constants['system'] && (constants['system']['sS58Prefix'] || constants['system']['ss58Prefix']);
        if (!ss58Format) {
            return original;
        }
        const { isEthereum, tokenDecimals, tokenSymbol } = original || {};
        return registry.createTypeUnsafe('ChainProperties', [{ isEthereum, ss58Format, tokenDecimals, tokenSymbol }]);
    }
    class TypeRegistry {
        constructor(createdAtHash) {
            this.__internal__classes = new Map();
            this.__internal__definitions = new Map();
            this.__internal__firstCallIndex = null;
            this.__internal__hasher = blake2AsU8a;
            this.__internal__knownTypes = {};
            this.__internal__metadataVersion = 0;
            this.__internal__signedExtensions = fallbackExtensions;
            this.__internal__unknownTypes = new Map();
            this.__internal__metadataCalls = {};
            this.__internal__metadataErrors = {};
            this.__internal__metadataEvents = {};
            this.__internal__moduleMap = {};
            this.__internal__registerObject = (obj) => {
                const entries = Object.entries(obj);
                for (let e = 0, count = entries.length; e < count; e++) {
                    const [name, type] = entries[e];
                    if (isFunction$1(type)) {
                        // This _looks_ a bit funny, but `typeof Clazz === 'function'
                        this.__internal__classes.set(name, type);
                    }
                    else {
                        const def = isString(type)
                            ? type
                            : stringify(type);
                        if (name === def) {
                            throw new Error(`Unable to register circular ${name} === ${def}`);
                        }
                        // we already have this type, remove the classes registered for it
                        if (this.__internal__classes.has(name)) {
                            this.__internal__classes.delete(name);
                        }
                        this.__internal__definitions.set(name, def);
                    }
                }
            };
            // register alias types alongside the portable/lookup setup
            // (we don't combine this into setLookup since that would/could
            // affect stand-along lookups, such as ABIs which don't have
            // actual on-chain metadata)
            this.__internal__registerLookup = (lookup) => {
                // attach the lookup before we register any types
                this.setLookup(lookup);
                // we detect based on runtime configuration
                let Weight = null;
                if (this.hasType('SpWeightsWeightV2Weight')) {
                    // detection for WeightV2 type based on latest naming
                    const weightv2 = this.createType('SpWeightsWeightV2Weight');
                    Weight = weightv2.refTime && weightv2.proofSize
                        // with both refTime & proofSize we use as-is (WeightV2)
                        ? 'SpWeightsWeightV2Weight'
                        // fallback to WeightV1 (WeightV1.5 is a struct, single field)
                        : 'WeightV1';
                }
                else if (!isBn(this.createType('Weight'))) {
                    // where we have an already-supplied BN override, we don't clobber
                    // it with our detected value (This protects against pre-defines
                    // where Weight may be aliassed to WeightV0, e.g. in early Kusama chains)
                    Weight = 'WeightV1';
                }
                if (Weight) {
                    // we have detected a version, adjust the definition
                    this.register({ Weight });
                }
            };
            this.__internal__knownDefaults = objectSpread({ Json, Metadata, PortableRegistry, Raw }, baseTypes);
            this.__internal__knownDefaultsEntries = Object.entries(this.__internal__knownDefaults);
            this.__internal__knownDefinitions = typeDefinitions;
            const allKnown = Object.values(this.__internal__knownDefinitions);
            for (let i = 0, count = allKnown.length; i < count; i++) {
                this.register(allKnown[i].types);
            }
            if (createdAtHash) {
                this.createdAtHash = this.createType('BlockHash', createdAtHash);
            }
        }
        get chainDecimals() {
            if (this.__internal__chainProperties?.tokenDecimals.isSome) {
                const allDecimals = this.__internal__chainProperties.tokenDecimals.unwrap();
                if (allDecimals.length) {
                    return allDecimals.map((b) => b.toNumber());
                }
            }
            return [12];
        }
        get chainIsEthereum() {
            return this.__internal__chainProperties?.isEthereum.isTrue || false;
        }
        get chainSS58() {
            return this.__internal__chainProperties?.ss58Format.isSome
                ? this.__internal__chainProperties.ss58Format.unwrap().toNumber()
                : undefined;
        }
        get chainTokens() {
            if (this.__internal__chainProperties?.tokenSymbol.isSome) {
                const allTokens = this.__internal__chainProperties.tokenSymbol.unwrap();
                if (allTokens.length) {
                    return allTokens.map(valueToString);
                }
            }
            return [formatBalance.getDefaults().unit];
        }
        get firstCallIndex() {
            return this.__internal__firstCallIndex || DEFAULT_FIRST_CALL_IDX;
        }
        /**
         * @description Returns true if the type is in a Compat format
         */
        isLookupType(value) {
            return /Lookup\d+$/.test(value);
        }
        /**
         * @description Creates a lookup string from the supplied id
         */
        createLookupType(lookupId) {
            return `Lookup${typeof lookupId === 'number' ? lookupId : lookupId.toNumber()}`;
        }
        get knownTypes() {
            return this.__internal__knownTypes;
        }
        get lookup() {
            return assertReturn(this.__internal__lookup, 'PortableRegistry has not been set on this registry');
        }
        get metadata() {
            return assertReturn(this.__internal__metadata, 'Metadata has not been set on this registry');
        }
        get unknownTypes() {
            return [...this.__internal__unknownTypes.keys()];
        }
        get signedExtensions() {
            return this.__internal__signedExtensions;
        }
        clearCache() {
            this.__internal__classes = new Map();
        }
        /**
         * @describe Creates an instance of the class
         */
        createClass(type) {
            return createClassUnsafe(this, type);
        }
        /**
         * @describe Creates an instance of the class
         */
        createClassUnsafe(type) {
            return createClassUnsafe(this, type);
        }
        /**
         * @description Creates an instance of a type as registered
         */
        createType(type, ...params) {
            return createTypeUnsafe(this, type, params);
        }
        /**
         * @description Creates an instance of a type as registered
         */
        createTypeUnsafe(type, params, options) {
            return createTypeUnsafe(this, type, params, options);
        }
        // find a specific call
        findMetaCall(callIndex) {
            const [section, method] = [callIndex[0], callIndex[1]];
            return assertReturn(this.__internal__metadataCalls[`${section}`] && this.__internal__metadataCalls[`${section}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section}, ${method}]/[${callIndex.toString()}]`);
        }
        // finds an error
        findMetaError(errorIndex) {
            const [section, method] = isU8a(errorIndex)
                ? [errorIndex[0], errorIndex[1]]
                : [
                    errorIndex.index.toNumber(),
                    isU8a(errorIndex.error)
                        ? errorIndex.error[0]
                        : errorIndex.error.toNumber()
                ];
            return assertReturn(this.__internal__metadataErrors[`${section}`] && this.__internal__metadataErrors[`${section}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section}, ${method}]/[${errorIndex.toString()}]`);
        }
        findMetaEvent(eventIndex) {
            const [section, method] = [eventIndex[0], eventIndex[1]];
            return assertReturn(this.__internal__metadataEvents[`${section}`] && this.__internal__metadataEvents[`${section}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section}, ${method}]/[${eventIndex.toString()}]`);
        }
        get(name, withUnknown, knownTypeDef) {
            return this.getUnsafe(name, withUnknown, knownTypeDef);
        }
        getUnsafe(name, withUnknown, knownTypeDef) {
            let Type = this.__internal__classes.get(name) || this.__internal__knownDefaults[name];
            // we have not already created the type, attempt it
            if (!Type) {
                const definition = this.__internal__definitions.get(name);
                let BaseType;
                // we have a definition, so create the class now (lazily)
                if (definition) {
                    BaseType = createClassUnsafe(this, definition);
                }
                else if (knownTypeDef) {
                    BaseType = constructTypeClass(this, knownTypeDef);
                }
                else if (withUnknown) {
                    l$4.warn(`Unable to resolve type ${name}, it will fail on construction`);
                    this.__internal__unknownTypes.set(name, true);
                    BaseType = DoNotConstruct.with(name);
                }
                if (BaseType) {
                    // NOTE If we didn't extend here, we would have strange artifacts. An example is
                    // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
                    // Additionally, we now pass through the registry, which is a link to ourselves
                    Type = class extends BaseType {
                    };
                    this.__internal__classes.set(name, Type);
                    // In the case of lookups, we also want to store the actual class against
                    // the lookup name, instad of having to traverse again
                    if (knownTypeDef && isNumber(knownTypeDef.lookupIndex)) {
                        this.__internal__classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type);
                    }
                }
            }
            return Type;
        }
        getChainProperties() {
            return this.__internal__chainProperties;
        }
        getClassName(Type) {
            // we cannot rely on export order (anymore, since babel/core 7.15.8), so in the case of
            // items such as u32 & U32, we get the lowercase versions here... not quite as optimal
            // (previously this used to be a simple find & return)
            const names = [];
            for (const [name, Clazz] of this.__internal__knownDefaultsEntries) {
                if (Type === Clazz) {
                    names.push(name);
                }
            }
            for (const [name, Clazz] of this.__internal__classes.entries()) {
                if (Type === Clazz) {
                    names.push(name);
                }
            }
            return names.length
                // both sort and reverse are done in-place
                // ['U32', 'u32'] -> ['u32', 'U32']
                ? names.sort().reverse()[0]
                : undefined;
        }
        getDefinition(typeName) {
            return this.__internal__definitions.get(typeName);
        }
        getModuleInstances(specName, moduleName) {
            return this.__internal__knownTypes?.typesBundle?.spec?.[specName.toString()]?.instances?.[moduleName] || this.__internal__moduleMap[moduleName];
        }
        getOrThrow(name) {
            const Clazz = this.get(name);
            if (!Clazz) {
                throw new Error(`type ${name} not found`);
            }
            return Clazz;
        }
        getOrUnknown(name) {
            return this.get(name, true);
        }
        getSignedExtensionExtra() {
            return expandExtensionTypes(this.__internal__signedExtensions, 'payload', this.__internal__userExtensions);
        }
        getSignedExtensionTypes() {
            return expandExtensionTypes(this.__internal__signedExtensions, 'extrinsic', this.__internal__userExtensions);
        }
        hasClass(name) {
            return this.__internal__classes.has(name) || !!this.__internal__knownDefaults[name];
        }
        hasDef(name) {
            return this.__internal__definitions.has(name);
        }
        hasType(name) {
            return !this.__internal__unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
        }
        hash(data) {
            return this.createType('CodecHash', this.__internal__hasher(data));
        }
        // eslint-disable-next-line no-dupe-class-members
        register(arg1, arg2) {
            // NOTE Constructors appear as functions here
            if (isFunction$1(arg1)) {
                this.__internal__classes.set(arg1.name, arg1);
            }
            else if (isString(arg1)) {
                if (!isFunction$1(arg2)) {
                    throw new Error(`Expected class definition passed to '${arg1}' registration`);
                }
                else if (arg1 === arg2.toString()) {
                    throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
                }
                this.__internal__classes.set(arg1, arg2);
            }
            else {
                this.__internal__registerObject(arg1);
            }
        }
        // sets the chain properties
        setChainProperties(properties) {
            if (properties) {
                this.__internal__chainProperties = properties;
            }
        }
        setHasher(hasher) {
            this.__internal__hasher = hasher || blake2AsU8a;
        }
        setKnownTypes(knownTypes) {
            this.__internal__knownTypes = knownTypes;
        }
        setLookup(lookup) {
            this.__internal__lookup = lookup;
            // register all applicable types found
            lookup.register();
        }
        // sets the metadata
        setMetadata(metadata, signedExtensions, userExtensions, noInitWarn) {
            this.__internal__metadata = metadata.asLatest;
            this.__internal__metadataVersion = metadata.version;
            this.__internal__firstCallIndex = null;
            // attach the lookup at this point and register relevant types (before injecting)
            this.__internal__registerLookup(this.__internal__metadata.lookup);
            injectExtrinsics(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataCalls, this.__internal__moduleMap);
            injectErrors(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataErrors);
            injectEvents(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataEvents);
            // set the default call index (the lowest section, the lowest method)
            // in most chains this should be 0,0
            const [defSection] = Object
                .keys(this.__internal__metadataCalls)
                .sort(sortDecimalStrings);
            if (defSection) {
                const [defMethod] = Object
                    .keys(this.__internal__metadataCalls[defSection])
                    .sort(sortDecimalStrings);
                if (defMethod) {
                    this.__internal__firstCallIndex = new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]);
                }
            }
            // setup the available extensions
            this.setSignedExtensions(signedExtensions || (this.__internal__metadata.extrinsic.version.gt(BN_ZERO)
                // FIXME Use the extension and their injected types
                ? this.__internal__metadata.extrinsic.signedExtensions.map(({ identifier }) => identifier.toString())
                : fallbackExtensions), userExtensions, noInitWarn);
            // setup the chain properties with format overrides
            this.setChainProperties(extractProperties(this, metadata));
        }
        // sets the available signed extensions
        setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions, noInitWarn) {
            this.__internal__signedExtensions = signedExtensions;
            this.__internal__userExtensions = userExtensions;
            if (!noInitWarn) {
                const unknown = findUnknownExtensions(this.__internal__signedExtensions, this.__internal__userExtensions);
                if (unknown.length) {
                    l$4.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
                }
            }
        }
    }

    /** @internal */
    function refCountDelay(delay = 1750) {
        return (source) => {
            // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
            let [state, refCount, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
            return new Observable((ob) => {
                source.subscribe(ob);
                if (refCount++ === 0) {
                    if (state === 1) {
                        scheduler.unsubscribe();
                    }
                    else {
                        // eslint-disable-next-line deprecation/deprecation
                        connection = source.connect();
                    }
                    state = 3;
                }
                return () => {
                    if (--refCount === 0) {
                        if (state === 2) {
                            state = 0;
                            scheduler.unsubscribe();
                        }
                        else {
                            // state === 3
                            state = 1;
                            scheduler = asapScheduler.schedule(() => {
                                state = 0;
                                connection.unsubscribe();
                            }, delay);
                        }
                    }
                };
            });
        };
    }

    function CMP(a, b) {
        return stringify({ t: a }) === stringify({ t: b });
    }
    function ERR(error) {
        throw error;
    }
    function NOOP() {
        // empty
    }
    /**
     * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
     *
     * @ignore
     * @internal
     */
    function drr({ delay, skipChange = false, skipTimeout = false } = {}) {
        return (source$) => source$.pipe(catchError(ERR), skipChange
            ? tap(NOOP)
            : distinctUntilChanged(CMP), 
        // eslint-disable-next-line deprecation/deprecation
        publishReplay(1), skipTimeout
            // eslint-disable-next-line deprecation/deprecation
            ? refCount()
            : refCountDelay(delay));
    }

    /** @internal */
    function memo$1(instanceId, inner) {
        const options = { getInstanceId: () => instanceId };
        const cached = memoize((...params) => new Observable((observer) => {
            const subscription = inner(...params).subscribe(observer);
            return () => {
                cached.unmemoize(...params);
                subscription.unsubscribe();
            };
        }).pipe(drr()), options);
        return cached;
    }

    const l$3 = logger('rpc-core');
    const EMPTY_META = {
        fallback: undefined,
        modifier: { isOptional: true },
        type: {
            asMap: { linked: { isTrue: false } },
            isMap: false
        }
    };
    /** @internal */
    function logErrorMessage(method, { noErrorLog, params, type }, error) {
        if (noErrorLog) {
            return;
        }
        l$3.error(`${method}(${params.map(({ isOptional, name, type }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ')}): ${type}:: ${error.message}`);
    }
    function isTreatAsHex(key) {
        // :code is problematic - it does not have the length attached, which is
        // unlike all other storage entries where it is indeed properly encoded
        return ['0x3a636f6465'].includes(key.toHex());
    }
    /**
     * @name Rpc
     * @summary The API may use a HTTP or WebSockets provider.
     * @description It allows for querying a Polkadot Client Node.
     * WebSockets provider is recommended since HTTP provider only supports basic querying.
     *
     * ```mermaid
     * graph LR;
     *   A[Api] --> |WebSockets| B[WsProvider];
     *   B --> |endpoint| C[ws://127.0.0.1:9944]
     * ```
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Rpc from '@polkadot/rpc-core';
     * import { WsProvider } from '@polkadot/rpc-provider/ws';
     *
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const rpc = new Rpc(provider);
     * ```
     */
    class RpcCore {
        /**
         * @constructor
         * Default constructor for the core RPC handler
         * @param  {ProviderInterface} provider An API provider using any of the supported providers (HTTP, SC or WebSocket)
         */
        constructor(instanceId, registry, { isPedantic = true, provider, userRpc = {} }) {
            this.__internal__storageCache = new Map();
            this.__internal__storageCacheHits = 0;
            this.__internal__storageCacheSize = 0;
            this.mapping = new Map();
            this.sections = [];
            if (!provider || !isFunction$1(provider.send)) {
                throw new Error('Expected Provider to API create');
            }
            this.__internal__instanceId = instanceId;
            this.__internal__isPedantic = isPedantic;
            this.__internal__registryDefault = registry;
            this.provider = provider;
            const sectionNames = Object.keys(rpcDefinitions);
            // these are the base keys (i.e. part of jsonrpc)
            this.sections.push(...sectionNames);
            // decorate all interfaces, defined and user on this instance
            this.addUserInterfaces(userRpc);
        }
        /**
         * @description Returns the connected status of a provider
         */
        get isConnected() {
            return this.provider.isConnected;
        }
        /**
         * @description Manually connect from the attached provider
         */
        connect() {
            return this.provider.connect();
        }
        /**
         * @description Manually disconnect from the attached provider
         */
        disconnect() {
            return this.provider.disconnect();
        }
        /**
         * @description Returns the underlying core stats, including those from teh provider
         */
        get stats() {
            const stats = this.provider.stats;
            return stats
                ? {
                    ...stats,
                    core: {
                        cacheHits: this.__internal__storageCacheHits,
                        cacheSize: this.__internal__storageCacheSize
                    }
                }
                : undefined;
        }
        /**
         * @description Sets a registry swap (typically from Api)
         */
        setRegistrySwap(registrySwap) {
            this.__internal__getBlockRegistry = memoize(registrySwap, {
                getInstanceId: () => this.__internal__instanceId
            });
        }
        /**
         * @description Sets a function to resolve block hash from block number
         */
        setResolveBlockHash(resolveBlockHash) {
            this.__internal__getBlockHash = memoize(resolveBlockHash, {
                getInstanceId: () => this.__internal__instanceId
            });
        }
        addUserInterfaces(userRpc) {
            // add any extra user-defined sections
            this.sections.push(...Object.keys(userRpc).filter((k) => !this.sections.includes(k)));
            for (let s = 0, scount = this.sections.length; s < scount; s++) {
                const section = this.sections[s];
                const defs = objectSpread({}, rpcDefinitions[section], userRpc[section]);
                const methods = Object.keys(defs);
                for (let m = 0, mcount = methods.length; m < mcount; m++) {
                    const method = methods[m];
                    const def = defs[method];
                    const jsonrpc = def.endpoint || `${section}_${method}`;
                    if (!this.mapping.has(jsonrpc)) {
                        const isSubscription = !!def.pubsub;
                        if (!this[section]) {
                            this[section] = {};
                        }
                        this.mapping.set(jsonrpc, objectSpread({}, def, { isSubscription, jsonrpc, method, section }));
                        lazyMethod(this[section], method, () => isSubscription
                            ? this._createMethodSubscribe(section, method, def)
                            : this._createMethodSend(section, method, def));
                    }
                }
            }
        }
        _memomize(creator, def) {
            const memoOpts = { getInstanceId: () => this.__internal__instanceId };
            const memoized = memoize(creator(true), memoOpts);
            memoized.raw = memoize(creator(false), memoOpts);
            memoized.meta = def;
            return memoized;
        }
        _formatResult(isScale, registry, blockHash, method, def, params, result) {
            return isScale
                ? this._formatOutput(registry, blockHash, method, def, params, result)
                : result;
        }
        _createMethodSend(section, method, def) {
            const rpcName = def.endpoint || `${section}_${method}`;
            const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
            let memoized = null;
            // execute the RPC call, doing a registry swap for historic as applicable
            const callWithRegistry = async (isScale, values) => {
                const blockId = hashIndex === -1
                    ? null
                    : values[hashIndex];
                const blockHash = blockId && def.params[hashIndex].type === 'BlockNumber'
                    ? await this.__internal__getBlockHash?.(blockId)
                    : blockId;
                const { registry } = isScale && blockHash && this.__internal__getBlockRegistry
                    ? await this.__internal__getBlockRegistry(u8aToU8a(blockHash))
                    : { registry: this.__internal__registryDefault };
                const params = this._formatParams(registry, null, def, values);
                // only cache .at(<blockHash>) queries, e.g. where valid blockHash was supplied
                const result = await this.provider.send(rpcName, params.map((p) => p.toJSON()), !!blockHash);
                return this._formatResult(isScale, registry, blockHash, method, def, params, result);
            };
            const creator = (isScale) => (...values) => {
                const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
                return new Observable((observer) => {
                    callWithRegistry(isScale, values)
                        .then((value) => {
                        observer.next(value);
                        observer.complete();
                    })
                        .catch((error) => {
                        logErrorMessage(method, def, error);
                        observer.error(error);
                        observer.complete();
                    });
                    return () => {
                        // delete old results from cache
                        if (isScale) {
                            memoized?.unmemoize(...values);
                        }
                        else {
                            memoized?.raw.unmemoize(...values);
                        }
                    };
                }).pipe(
                // eslint-disable-next-line deprecation/deprecation
                publishReplay(1), // create a Replay(1)
                isDelayed
                    ? refCountDelay() // Unsubscribe after delay
                    // eslint-disable-next-line deprecation/deprecation
                    : refCount());
            };
            memoized = this._memomize(creator, def);
            return memoized;
        }
        // create a subscriptor, it subscribes once and resolves with the id as subscribe
        _createSubscriber({ paramsJson, subName, subType, update }, errorHandler) {
            return new Promise((resolve, reject) => {
                this.provider
                    .subscribe(subType, subName, paramsJson, update)
                    .then(resolve)
                    .catch((error) => {
                    errorHandler(error);
                    reject(error);
                });
            });
        }
        _createMethodSubscribe(section, method, def) {
            const [updateType, subMethod, unsubMethod] = def.pubsub;
            const subName = `${section}_${subMethod}`;
            const unsubName = `${section}_${unsubMethod}`;
            const subType = `${section}_${updateType}`;
            let memoized = null;
            const creator = (isScale) => (...values) => {
                return new Observable((observer) => {
                    // Have at least an empty promise, as used in the unsubscribe
                    let subscriptionPromise = Promise.resolve(null);
                    const registry = this.__internal__registryDefault;
                    const errorHandler = (error) => {
                        logErrorMessage(method, def, error);
                        observer.error(error);
                    };
                    try {
                        const params = this._formatParams(registry, null, def, values);
                        const update = (error, result) => {
                            if (error) {
                                logErrorMessage(method, def, error);
                                return;
                            }
                            try {
                                observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
                            }
                            catch (error) {
                                observer.error(error);
                            }
                        };
                        subscriptionPromise = this._createSubscriber({ paramsJson: params.map((p) => p.toJSON()), subName, subType, update }, errorHandler);
                    }
                    catch (error) {
                        errorHandler(error);
                    }
                    // Teardown logic
                    return () => {
                        // Delete from cache, so old results don't hang around
                        if (isScale) {
                            memoized?.unmemoize(...values);
                        }
                        else {
                            memoized?.raw.unmemoize(...values);
                        }
                        // Unsubscribe from provider
                        subscriptionPromise
                            .then((subscriptionId) => isNull(subscriptionId)
                            ? Promise.resolve(false)
                            : this.provider.unsubscribe(subType, unsubName, subscriptionId))
                            .catch((error) => logErrorMessage(method, def, error));
                    };
                }).pipe(drr());
            };
            memoized = this._memomize(creator, def);
            return memoized;
        }
        _formatParams(registry, blockHash, def, inputs) {
            const count = inputs.length;
            const reqCount = def.params.filter(({ isOptional }) => !isOptional).length;
            if (count < reqCount || count > def.params.length) {
                throw new Error(`Expected ${def.params.length} parameters${reqCount === def.params.length ? '' : ` (${def.params.length - reqCount} optional)`}, ${count} found instead`);
            }
            const params = new Array(count);
            for (let i = 0; i < count; i++) {
                params[i] = registry.createTypeUnsafe(def.params[i].type, [inputs[i]], { blockHash });
            }
            return params;
        }
        _formatOutput(registry, blockHash, method, rpc, params, result) {
            if (rpc.type === 'StorageData') {
                const key = params[0];
                return this._formatStorageData(registry, blockHash, key, result);
            }
            else if (rpc.type === 'StorageChangeSet') {
                const keys = params[0];
                return keys
                    ? this._formatStorageSet(registry, result.block, keys, result.changes)
                    : registry.createType('StorageChangeSet', result);
            }
            else if (rpc.type === 'Vec<StorageChangeSet>') {
                const jsonSet = result;
                const count = jsonSet.length;
                const mapped = new Array(count);
                for (let i = 0; i < count; i++) {
                    const { block, changes } = jsonSet[i];
                    mapped[i] = [
                        registry.createType('BlockHash', block),
                        this._formatStorageSet(registry, block, params[0], changes)
                    ];
                }
                // we only query at a specific block, not a range - flatten
                return method === 'queryStorageAt'
                    ? mapped[0][1]
                    : mapped;
            }
            return registry.createTypeUnsafe(rpc.type, [result], { blockHash });
        }
        _formatStorageData(registry, blockHash, key, value) {
            const isEmpty = isNull(value);
            // we convert to Uint8Array since it maps to the raw encoding, all
            // data will be correctly encoded (incl. numbers, excl. :code)
            const input = isEmpty
                ? null
                : isTreatAsHex(key)
                    ? value
                    : u8aToU8a(value);
            return this._newType(registry, blockHash, key, input, isEmpty);
        }
        _formatStorageSet(registry, blockHash, keys, changes) {
            // For StorageChangeSet, the changes has the [key, value] mappings
            const count = keys.length;
            const withCache = count !== 1;
            const values = new Array(count);
            // multiple return values (via state.storage subscription), decode the
            // values one at a time, all based on the supplied query types
            for (let i = 0; i < count; i++) {
                values[i] = this._formatStorageSetEntry(registry, blockHash, keys[i], changes, withCache, i);
            }
            return values;
        }
        _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
            const hexKey = key.toHex();
            const found = changes.find(([key]) => key === hexKey);
            const isNotFound = isUndefined(found);
            // if we don't find the value, this is our fallback
            //   - in the case of an array of values, fill the hole from the cache
            //   - if a single result value, don't fill - it is not an update hole
            //   - fallback to an empty option in all cases
            if (isNotFound && withCache) {
                const cached = this.__internal__storageCache.get(hexKey);
                if (cached) {
                    this.__internal__storageCacheHits++;
                    return cached;
                }
            }
            const value = isNotFound
                ? null
                : found[1];
            const isEmpty = isNull(value);
            const input = isEmpty || isTreatAsHex(key)
                ? value
                : u8aToU8a(value);
            const codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
            // store the retrieved result - the only issue with this cache is that there is no
            // clearing of it, so very long running processes (not just a couple of hours, longer)
            // will increase memory beyond what is allowed.
            this.__internal__storageCache.set(hexKey, codec);
            this.__internal__storageCacheSize++;
            return codec;
        }
        _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
            // single return value (via state.getStorage), decode the value based on the
            // outputType that we have specified. Fallback to Raw on nothing
            const type = key.outputType || 'Raw';
            const meta = key.meta || EMPTY_META;
            const entryNum = entryIndex === -1
                ? ''
                : ` entry ${entryIndex}:`;
            try {
                return registry.createTypeUnsafe(type, [
                    isEmpty
                        ? meta.fallback
                            // For old-style Linkage, we add an empty linkage at the end
                            ? type.includes('Linkage<')
                                ? u8aConcat(hexToU8a(meta.fallback.toHex()), new Uint8Array(2))
                                : hexToU8a(meta.fallback.toHex())
                            : undefined
                        : meta.modifier.isOptional
                            ? registry.createTypeUnsafe(type, [input], { blockHash, isPedantic: this.__internal__isPedantic })
                            : input
                ], { blockHash, isFallback: isEmpty && !!meta.fallback, isOptional: meta.modifier.isOptional, isPedantic: this.__internal__isPedantic && !meta.modifier.isOptional });
            }
            catch (error) {
                throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);
            }
        }
    }

    function unwrapBlockNumber(hdr) {
        return isCompact(hdr.number)
            ? hdr.number.unwrap()
            : hdr.number;
    }

    const deriveNoopCache = {
        del: () => undefined,
        forEach: () => undefined,
        get: () => undefined,
        set: (_, value) => value
    };

    const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
    let deriveCache;
    function wrapCache(keyStart, cache) {
        return {
            del: (partial) => cache.del(`${keyStart}${partial}`),
            forEach: cache.forEach,
            get: (partial) => {
                const key = `${keyStart}${partial}`;
                const cached = cache.get(key);
                if (cached) {
                    cached.x = Date.now();
                    cache.set(key, cached);
                    return cached.v;
                }
                return undefined;
            },
            set: (partial, v) => {
                cache.set(`${keyStart}${partial}`, { v, x: Date.now() });
            }
        };
    }
    function clearCache(cache) {
        // clear all expired values
        const now = Date.now();
        const all = [];
        cache.forEach((key, { x }) => {
            ((now - x) > CHACHE_EXPIRY) && all.push(key);
        });
        // don't do delete inside loop, just in-case
        all.forEach((key) => cache.del(key));
    }
    function setDeriveCache(prefix = '', cache) {
        deriveCache = cache
            ? wrapCache(`derive:${prefix}:`, cache)
            : deriveNoopCache;
        if (cache) {
            clearCache(cache);
        }
    }
    setDeriveCache();

    function firstObservable(obs) {
        return obs.pipe(map(([a]) => a));
    }
    function firstMemo(fn) {
        return (instanceId, api) => memo$1(instanceId, (...args) => firstObservable(fn(api, ...args)));
    }

    function lazyDeriveSection(result, section, getKeys, creator) {
        lazyMethod(result, section, () => lazyMethods({}, getKeys(section), (method) => creator(section, method)));
    }

    /**
     * @name accountId
     * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
     * @description  An [[AccountId]]
     */
    function accountId(instanceId, api) {
        return memo$1(instanceId, (address) => {
            const decoded = isU8a(address)
                ? address
                : decodeAddress((address || '').toString());
            if (decoded.length > 8) {
                return of(api.registry.createType('AccountId', decoded));
            }
            const accountIndex = api.registry.createType('AccountIndex', decoded);
            return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map((a) => assertReturn(a, 'Unable to retrieve accountId')));
        });
    }

    function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
        const addrStr = address?.toString();
        const isIncluded = (id) => id.toString() === addrStr;
        return {
            isCouncil: (electionsMembers?.map((r) => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),
            isSociety: (societyMembers || []).some(isIncluded),
            isSudo: sudoKey?.toString() === addrStr,
            isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
        };
    }
    function _flags(instanceId, api) {
        return memo$1(instanceId, () => {
            const results = [undefined, [], [], [], undefined];
            const calls = [
                (api.query.elections || api.query['phragmenElection'] || api.query['electionsPhragmen'])?.members,
                api.query.council?.members,
                api.query.technicalCommittee?.members,
                api.query.society?.members,
                api.query.sudo?.key
            ];
            const filtered = calls.filter((c) => c);
            if (!filtered.length) {
                return of(results);
            }
            return api.queryMulti(filtered).pipe(map((values) => {
                let resultIndex = -1;
                for (let i = 0, count = calls.length; i < count; i++) {
                    if (isFunction$1(calls[i])) {
                        results[i] = values[++resultIndex];
                    }
                }
                return results;
            }));
        });
    }
    /**
     * @name info
     * @description Returns account membership flags
     */
    function flags(instanceId, api) {
        return memo$1(instanceId, (address) => api.derive.accounts._flags().pipe(map((r) => parseFlags(address, r))));
    }

    /**
     * @name idAndIndex
     * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
     * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
     *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
     * });
     * ```
     */
    function idAndIndex(instanceId, api) {
        return memo$1(instanceId, (address) => {
            try {
                // yes, this can fail, don't care too much, catch will catch it
                const decoded = isU8a(address)
                    ? address
                    : decodeAddress((address || '').toString());
                if (decoded.length > 8) {
                    const accountId = api.registry.createType('AccountId', decoded);
                    return api.derive.accounts.idToIndex(accountId).pipe(map((accountIndex) => [accountId, accountIndex]));
                }
                const accountIndex = api.registry.createType('AccountIndex', decoded);
                return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map((accountId) => [accountId, accountIndex]));
            }
            catch {
                return of([undefined, undefined]);
            }
        });
    }

    const UNDEF_HEX = { toHex: () => undefined };
    function dataAsString(data) {
        return data.isRaw
            ? u8aToString(data.asRaw.toU8a(true))
            : data.isNone
                ? undefined
                : data.toHex();
    }
    function extractOther(additional) {
        return additional.reduce((other, [_key, _value]) => {
            const key = dataAsString(_key);
            const value = dataAsString(_value);
            if (key && value) {
                other[key] = value;
            }
            return other;
        }, {});
    }
    function extractIdentity(identityOfOpt, superOf) {
        if (!identityOfOpt?.isSome) {
            return { judgements: [] };
        }
        const { info, judgements } = identityOfOpt.unwrap();
        const topDisplay = dataAsString(info.display);
        return {
            display: (superOf && dataAsString(superOf[1])) || topDisplay,
            displayParent: superOf && topDisplay,
            email: dataAsString(info.email),
            image: dataAsString(info.image),
            judgements,
            legal: dataAsString(info.legal),
            other: extractOther(info.additional),
            parent: superOf?.[0],
            pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
            riot: dataAsString(info.riot),
            twitter: dataAsString(info.twitter),
            web: dataAsString(info.web)
        };
    }
    function getParent(api, identityOfOpt, superOfOpt) {
        if (identityOfOpt?.isSome) {
            // this identity has something set
            return of([identityOfOpt, undefined]);
        }
        else if (superOfOpt?.isSome) {
            const superOf = superOfOpt.unwrap();
            return combineLatest([
                api.derive.accounts._identity(superOf[0]).pipe(map(([info]) => info)),
                of(superOf)
            ]);
        }
        // nothing of value returned
        return of([undefined, undefined]);
    }
    function _identity(instanceId, api) {
        return memo$1(instanceId, (accountId) => accountId && api.query.identity?.identityOf
            ? combineLatest([
                api.query.identity.identityOf(accountId),
                api.query.identity.superOf(accountId)
            ])
            : of([undefined, undefined]));
    }
    /**
     * @name identity
     * @description Returns identity info for an account
     */
    function identity(instanceId, api) {
        return memo$1(instanceId, (accountId) => api.derive.accounts._identity(accountId).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
    }
    const hasIdentity = /*#__PURE__*/ firstMemo((api, accountId) => api.derive.accounts.hasIdentityMulti([accountId]));
    function hasIdentityMulti(instanceId, api) {
        return memo$1(instanceId, (accountIds) => api.query.identity?.identityOf
            ? combineLatest([
                api.query.identity.identityOf.multi(accountIds),
                api.query.identity.superOf.multi(accountIds)
            ]).pipe(map(([identities, supers]) => identities.map((identityOfOpt, index) => {
                const superOfOpt = supers[index];
                const parentId = superOfOpt && superOfOpt.isSome
                    ? superOfOpt.unwrap()[0].toString()
                    : undefined;
                let display;
                if (identityOfOpt && identityOfOpt.isSome) {
                    const value = dataAsString(identityOfOpt.unwrap().info.display);
                    if (value && !isHex(value)) {
                        display = value;
                    }
                }
                return { display, hasIdentity: !!(display || parentId), parentId };
            })))
            : of(accountIds.map(() => ({ hasIdentity: false }))));
    }

    /**
     * @name idToIndex
     * @param {( AccountId | string )} accountId - An accounts Id in different formats.
     * @returns Returns the corresponding AccountIndex.
     * @example
     * <BR>
     *
     * ```javascript
     * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
     * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
     *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
     * });
     * ```
     */
    function idToIndex(instanceId, api) {
        return memo$1(instanceId, (accountId) => api.derive.accounts.indexes().pipe(map((indexes) => indexes[accountId.toString()])));
    }

    let indicesCache = null;
    function queryAccounts(api) {
        return api.query.indices.accounts.entries().pipe(map((entries) => entries.reduce((indexes, [key, idOpt]) => {
            if (idOpt.isSome) {
                indexes[idOpt.unwrap()[0].toString()] = api.registry.createType('AccountIndex', key.args[0]);
            }
            return indexes;
        }, {})));
    }
    /**
     * @name indexes
     * @returns Returns all the indexes on the system.
     * @description This is an unwieldly query since it loops through
     * all of the enumsets and returns all of the values found. This could be up to 32k depending
     * on the number of active accounts in the system
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.accounts.indexes((indexes) => {
     *   console.log('All existing AccountIndexes', indexes);
     * });
     * ```
     */
    function indexes$1(instanceId, api) {
        return memo$1(instanceId, () => indicesCache
            ? of(indicesCache)
            : (api.query.indices
                ? queryAccounts(api).pipe(startWith({}))
                : of({})).pipe(map((indices) => {
                indicesCache = indices;
                return indices;
            })));
    }

    /**
     * @name indexToId
     * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
     * @returns Returns the corresponding AccountId.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.accounts.indexToId('F7Hs', (accountId) => {
     *   console.log(`The AccountId of F7Hs is ${accountId}`);
     * });
     * ```
     */
    function indexToId(instanceId, api) {
        return memo$1(instanceId, (accountIndex) => api.query.indices
            ? api.query.indices.accounts(accountIndex).pipe(map((optResult) => optResult.unwrapOr([])[0]))
            : of(undefined));
    }

    function retrieveNick(api, accountId) {
        return (accountId && api.query['nicks']?.['nameOf']
            ? api.query['nicks']['nameOf'](accountId)
            : of(undefined)).pipe(map((nameOf) => nameOf?.isSome
            ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts['nicks']['maxLength'].toNumber())
            : undefined));
    }
    /**
     * @name info
     * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
     */
    function info$4(instanceId, api) {
        return memo$1(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId, accountIndex]) => combineLatest([
            of({ accountId, accountIndex }),
            api.derive.accounts.identity(accountId),
            retrieveNick(api, accountId)
        ])), map(([{ accountId, accountIndex }, identity, nickname]) => ({
            accountId, accountIndex, identity, nickname
        }))));
    }

    var accounts$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        accountId: accountId,
        _flags: _flags,
        flags: flags,
        idAndIndex: idAndIndex,
        _identity: _identity,
        identity: identity,
        hasIdentity: hasIdentity,
        hasIdentityMulti: hasIdentityMulti,
        idToIndex: idToIndex,
        indexes: indexes$1,
        indexToId: indexToId,
        info: info$4
    });

    function getInstance(api, section) {
        const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section);
        const name = instances?.length
            ? instances[0]
            : section;
        return api.query[name];
    }
    function withSection(section, fn) {
        return (instanceId, api) => memo$1(instanceId, fn(getInstance(api, section), api, instanceId));
    }
    function callMethod(method, empty) {
        return (section) => withSection(section, (query) => () => isFunction$1(query?.[method])
            ? query[method]()
            : of(empty));
    }

    const members$5 = /*#__PURE__*/ callMethod('members', []);

    function prime$4(section) {
        return withSection(section, (query) => () => isFunction$1(query?.prime)
            ? query.prime().pipe(map((o) => o.unwrapOr(null)))
            : of(null));
    }

    function parse$4(api, [hashes, proposals, votes]) {
        return proposals.map((o, index) => ({
            hash: api.registry.createType('Hash', hashes[index]),
            proposal: o && o.isSome
                ? o.unwrap()
                : null,
            votes: votes[index].unwrapOr(null)
        }));
    }
    function _proposalsFrom(api, query, hashes) {
        return (isFunction$1(query?.proposals) && hashes.length
            ? combineLatest([
                of(hashes),
                // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
                // however we have had cases on Edgeware where the indices have moved around after an
                // upgrade, which results in invalid on-chain data
                query.proposalOf.multi(hashes).pipe(catchError(() => of(hashes.map(() => null)))),
                query.voting.multi(hashes)
            ])
            : of([[], [], []])).pipe(map((r) => parse$4(api, r)));
    }
    function hasProposals$4(section) {
        return withSection(section, (query) => () => of(isFunction$1(query?.proposals)));
    }
    function proposals$6(section) {
        return withSection(section, (query, api) => () => api.derive[section].proposalHashes().pipe(switchMap((all) => _proposalsFrom(api, query, all))));
    }
    function proposal$4(section) {
        return withSection(section, (query, api) => (hash) => isFunction$1(query?.proposals)
            ? firstObservable(_proposalsFrom(api, query, [hash]))
            : of(null));
    }
    const proposalCount$4 = /*#__PURE__*/ callMethod('proposalCount', null);
    const proposalHashes$4 = /*#__PURE__*/ callMethod('proposals', []);

    const members$4 = /*#__PURE__*/ members$5('allianceMotion');
    const hasProposals$3 = /*#__PURE__*/ hasProposals$4('allianceMotion');
    const proposal$3 = /*#__PURE__*/ proposal$4('allianceMotion');
    const proposalCount$3 = /*#__PURE__*/ proposalCount$4('allianceMotion');
    const proposalHashes$3 = /*#__PURE__*/ proposalHashes$4('allianceMotion');
    const proposals$5 = /*#__PURE__*/ proposals$6('allianceMotion');
    const prime$3 = /*#__PURE__*/ prime$4('allianceMotion');

    var alliance = /*#__PURE__*/Object.freeze({
        __proto__: null,
        members: members$4,
        hasProposals: hasProposals$3,
        proposal: proposal$3,
        proposalCount: proposalCount$3,
        proposalHashes: proposalHashes$3,
        proposals: proposals$5,
        prime: prime$3
    });

    function getQueryInterface(api) {
        return (
        // latest substrate & polkadot
        api.query.voterList ||
            // previous substrate
            api.query['voterBagsList'] ||
            api.query['bagsList']);
    }

    function orderBags(ids, bags) {
        const sorted = ids
            .map((id, index) => ({
            bag: bags[index].unwrapOr(null),
            id,
            key: id.toString()
        }))
            .sort((a, b) => b.id.cmp(a.id));
        const max = sorted.length - 1;
        return sorted.map((entry, index) => objectSpread(entry, {
            bagLower: index === max
                ? BN_ZERO
                : sorted[index + 1].id,
            bagUpper: entry.id,
            index
        }));
    }
    function _getIds(instanceId, api) {
        const query = getQueryInterface(api);
        return memo$1(instanceId, (_ids) => {
            const ids = _ids.map((id) => bnToBn(id));
            return ids.length
                ? query.listBags.multi(ids).pipe(map((bags) => orderBags(ids, bags)))
                : of([]);
        });
    }
    function all$1(instanceId, api) {
        const query = getQueryInterface(api);
        return memo$1(instanceId, () => query.listBags.keys().pipe(switchMap((keys) => api.derive.bagsList._getIds(keys.map(({ args: [id] }) => id))), map((list) => list.filter(({ bag }) => bag))));
    }
    function get(instanceId, api) {
        return memo$1(instanceId, (id) => api.derive.bagsList._getIds([bnToBn(id)]).pipe(map((bags) => bags[0])));
    }

    function expand(instanceId, api) {
        return memo$1(instanceId, (bag) => api.derive.bagsList.listNodes(bag.bag).pipe(map((nodes) => objectSpread({ nodes }, bag))));
    }
    function getExpanded(instanceId, api) {
        return memo$1(instanceId, (id) => api.derive.bagsList.get(id).pipe(switchMap((bag) => api.derive.bagsList.expand(bag))));
    }

    function traverseLinks(api, head) {
        const subject = new BehaviorSubject(head);
        const query = getQueryInterface(api);
        return subject.pipe(switchMap((account) => query.listNodes(account)), tap((node) => {
            nextTick(() => {
                node.isSome && node.value.next.isSome
                    ? subject.next(node.unwrap().next.unwrap())
                    : subject.complete();
            });
        }), toArray(), // toArray since we want to startSubject to be completed
        map((all) => all.map((o) => o.unwrap())));
    }
    function listNodes(instanceId, api) {
        return memo$1(instanceId, (bag) => bag && bag.head.isSome
            ? traverseLinks(api, bag.head.unwrap())
            : of([]));
    }

    var bagsList = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _getIds: _getIds,
        all: all$1,
        get: get,
        expand: expand,
        getExpanded: getExpanded,
        listNodes: listNodes
    });

    const VESTING_ID = '0x76657374696e6720';
    function calcLocked(api, bestNumber, locks) {
        let lockedBalance = api.registry.createType('Balance');
        let lockedBreakdown = [];
        let vestingLocked = api.registry.createType('Balance');
        let allLocked = false;
        if (Array.isArray(locks)) {
            // only get the locks that are valid until passed the current block
            lockedBreakdown = locks.filter(({ until }) => !until || (bestNumber && until.gt(bestNumber)));
            allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());
            vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new BN(0)));
            // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699
            const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());
            if (notAll.length) {
                lockedBalance = api.registry.createType('Balance', bnMax(...notAll.map(({ amount }) => amount)));
            }
        }
        return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
    }
    function calcShared(api, bestNumber, data, locks) {
        const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber, locks);
        return objectSpread({}, data, {
            availableBalance: api.registry.createType('Balance', allLocked ? 0 : bnMax(new BN(0), data?.freeBalance ? data.freeBalance.sub(lockedBalance) : new BN(0))),
            lockedBalance,
            lockedBreakdown,
            vestingLocked
        });
    }
    function calcVesting(bestNumber, shared, _vesting) {
        // Calculate the vesting balances,
        //  - offset = balance locked at startingBlock
        //  - perBlock is the unlock amount
        const vesting = _vesting || [];
        const isVesting = !shared.vestingLocked.isZero();
        const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber.gt(startingBlock)
            ? bnMin(locked, perBlock.mul(bestNumber.sub(startingBlock)))
            : BN_ZERO);
        const vestedBalance = vestedBalances.reduce((all, value) => all.iadd(value), new BN(0));
        const vestingTotal = vesting.reduce((all, { locked }) => all.iadd(locked), new BN(0));
        return {
            isVesting,
            vestedBalance,
            vestedClaimable: isVesting
                ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance))
                : BN_ZERO,
            vesting: vesting
                .map(({ locked, perBlock, startingBlock }, index) => ({
                endBlock: locked.div(perBlock).iadd(startingBlock),
                locked,
                perBlock,
                startingBlock,
                vested: vestedBalances[index]
            }))
                .filter(({ locked }) => !locked.isZero()),
            vestingTotal
        };
    }
    function calcBalances$1(api, result) {
        const [data, [vesting, allLocks, namedReserves], bestNumber] = result;
        const shared = calcShared(api, bestNumber, data, allLocks[0]);
        return objectSpread(shared, calcVesting(bestNumber, shared, vesting), {
            accountId: data.accountId,
            accountNonce: data.accountNonce,
            additional: allLocks
                .slice(1)
                .map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),
            namedReserves
        });
    }
    function queryOld(api, accountId) {
        return combineLatest([
            api.query.balances.locks(accountId),
            api.query.balances['vesting'](accountId)
        ]).pipe(map(([locks, optVesting]) => {
            let vestingNew = null;
            if (optVesting.isSome) {
                const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
                vestingNew = api.registry.createType('VestingInfo', { locked, perBlock, startingBlock });
            }
            return [
                vestingNew
                    ? [vestingNew]
                    : null,
                [locks],
                []
            ];
        }));
    }
    const isNonNullable = (nullable) => !!nullable;
    function createCalls(calls) {
        return [
            calls.map((c) => !c),
            calls.filter(isNonNullable)
        ];
    }
    function queryCurrent(api, accountId, balanceInstances = ['balances']) {
        const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m) => api.derive[m]?.customLocks || api.query[m]?.locks));
        const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m) => api.query[m]?.reserves));
        return combineLatest([
            api.query.vesting?.vesting
                ? api.query.vesting.vesting(accountId)
                : of(api.registry.createType('Option<VestingInfo>')),
            lockQueries.length
                ? combineLatest(lockQueries.map((c) => c(accountId)))
                : of([]),
            reserveQueries.length
                ? combineLatest(reserveQueries.map((c) => c(accountId)))
                : of([])
        ]).pipe(map(([opt, locks, reserves]) => {
            let offsetLock = -1;
            let offsetReserve = -1;
            const vesting = opt.unwrapOr(null);
            return [
                vesting
                    ? Array.isArray(vesting)
                        ? vesting
                        : [vesting]
                    : null,
                lockEmpty.map((e) => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offsetLock]),
                reserveEmpty.map((e) => e ? api.registry.createType('Vec<PalletBalancesReserveData>') : reserves[++offsetReserve])
            ];
        }));
    }
    /**
     * @name all
     * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
     * @returns An object containing the results of various balance queries
     * @example
     * <BR>
     *
     * ```javascript
     * const ALICE = 'F7Hs';
     *
     * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
     *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
     * });
     * ```
     */
    function all(instanceId, api) {
        const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');
        return memo$1(instanceId, (address) => combineLatest([
            api.derive.balances.account(address),
            isFunction$1(api.query.system?.account) || isFunction$1(api.query.balances?.account)
                ? queryCurrent(api, address, balanceInstances)
                : queryOld(api, address)
        ]).pipe(switchMap(([account, locks]) => combineLatest([
            of(account),
            of(locks),
            api.derive.chain.bestNumber()
        ])), map((result) => calcBalances$1(api, result))));
    }

    function zeroBalance(api) {
        return api.registry.createType('Balance');
    }
    function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
        const votingBalance = api.registry.createType('Balance', freeBalance.toBn());
        return {
            freeBalance,
            frozenFee,
            frozenMisc,
            reservedBalance,
            votingBalance
        };
    }
    function calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {
        return objectSpread({
            accountId,
            accountNonce,
            additional: additional.map((b) => getBalance(api, b))
        }, getBalance(api, primary));
    }
    function queryBalancesFree(api, accountId) {
        return combineLatest([
            api.query.balances['freeBalance'](accountId),
            api.query.balances['reservedBalance'](accountId),
            api.query.system['accountNonce'](accountId)
        ]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [
            accountNonce,
            [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]
        ]));
    }
    function queryNonceOnly(api, accountId) {
        const fill = (nonce) => [
            nonce,
            [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
        ];
        return isFunction$1(api.query.system.account)
            ? api.query.system.account(accountId).pipe(map(({ nonce }) => fill(nonce)))
            : isFunction$1(api.query.system['accountNonce'])
                ? api.query.system['accountNonce'](accountId).pipe(map((nonce) => fill(nonce)))
                : of(fill(api.registry.createType('Index')));
    }
    function queryBalancesAccount(api, accountId, modules = ['balances']) {
        const balances = modules
            .map((m) => api.derive[m]?.customAccount || api.query[m]?.account)
            .filter((q) => isFunction$1(q));
        const extract = (nonce, data) => [
            nonce,
            data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])
        ];
        // NOTE this is for the first case where we do have instances specified
        return balances.length
            ? isFunction$1(api.query.system.account)
                ? combineLatest([
                    api.query.system.account(accountId),
                    ...balances.map((c) => c(accountId))
                ]).pipe(map(([{ nonce }, ...balances]) => extract(nonce, balances)))
                : combineLatest([
                    api.query.system['accountNonce'](accountId),
                    ...balances.map((c) => c(accountId))
                ]).pipe(map(([nonce, ...balances]) => extract(nonce, balances)))
            : queryNonceOnly(api, accountId);
    }
    function querySystemAccount(api, accountId) {
        // AccountInfo is current, support old, eg. Edgeware
        return api.query.system.account(accountId).pipe(map((infoOrTuple) => {
            const data = infoOrTuple.nonce
                ? infoOrTuple.data
                : infoOrTuple[1];
            const nonce = infoOrTuple.nonce || infoOrTuple[0];
            if (!data || data.isEmpty) {
                return [
                    nonce,
                    [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
                ];
            }
            const { feeFrozen, free, miscFrozen, reserved } = data;
            return [
                nonce,
                [[free, reserved, feeFrozen, miscFrozen]]
            ];
        }));
    }
    /**
     * @name account
     * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
     * @returns An object containing the results of various balance queries
     * @example
     * <BR>
     *
     * ```javascript
     * const ALICE = 'F7Hs';
     *
     * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
     *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
     * });
     * ```
     */
    function account$1(instanceId, api) {
        const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');
        const nonDefaultBalances = balanceInstances && balanceInstances[0] !== 'balances';
        return memo$1(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId) => (accountId
            ? combineLatest([
                of(accountId),
                nonDefaultBalances
                    ? queryBalancesAccount(api, accountId, balanceInstances)
                    : isFunction$1(api.query.system?.account)
                        ? querySystemAccount(api, accountId)
                        : isFunction$1(api.query.balances?.account)
                            ? queryBalancesAccount(api, accountId)
                            : isFunction$1(api.query.balances?.['freeBalance'])
                                ? queryBalancesFree(api, accountId)
                                : queryNonceOnly(api, accountId)
            ])
            : of([api.registry.createType('AccountId'), [
                    api.registry.createType('Index'),
                    [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]
                ]]))), map((result) => calcBalances(api, result))));
    }

    function votingBalances(instanceId, api) {
        return memo$1(instanceId, (addresses) => !addresses?.length
            ? of([])
            : combineLatest(addresses.map((accountId) => api.derive.balances.account(accountId))));
    }

    const votingBalance = all;

    var balances = /*#__PURE__*/Object.freeze({
        __proto__: null,
        all: all,
        votingBalance: votingBalance,
        account: account$1,
        votingBalances: votingBalances
    });

    function filterBountiesProposals(api, allProposals) {
        const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
        const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
        return allProposals.filter((proposal) => bountyProposalCalls.find((bountyCall) => proposal.proposal && bountyCall.is(proposal.proposal)));
    }

    function parseResult$2([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
        const bounties = [];
        maybeBounties.forEach((bounty, index) => {
            if (bounty.isSome) {
                bounties.push({
                    bounty: bounty.unwrap(),
                    description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
                    index: ids[index],
                    proposals: bountyProposals.filter((bountyProposal) => bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
                });
            }
        });
        return bounties;
    }
    function bounties$1(instanceId, api) {
        const bountyBase = api.query.bounties || api.query.treasury;
        return memo$1(instanceId, () => bountyBase.bounties
            ? combineLatest([
                bountyBase.bountyCount(),
                api.query.council
                    ? api.query.council.proposalCount()
                    : of(0)
            ]).pipe(switchMap(() => combineLatest([
                bountyBase.bounties.keys(),
                api.derive.council
                    ? api.derive.council.proposals()
                    : of([])
            ])), switchMap(([keys, proposals]) => {
                const ids = keys.map(({ args: [id] }) => id);
                return combineLatest([
                    bountyBase.bounties.multi(ids),
                    bountyBase.bountyDescriptions.multi(ids),
                    of(ids),
                    of(filterBountiesProposals(api, proposals))
                ]);
            }), map(parseResult$2))
            : of(parseResult$2([[], [], [], []])));
    }

    var bounties = /*#__PURE__*/Object.freeze({
        __proto__: null,
        bounties: bounties$1
    });

    function createBlockNumberDerive(fn) {
        return (instanceId, api) => memo$1(instanceId, () => fn(api).pipe(map(unwrapBlockNumber)));
    }
    /** @internal */
    function getAuthorDetailsWithAt(header, queryAt) {
        const validators = queryAt.session?.validators
            ? queryAt.session.validators()
            : of(null);
        // nimbus consensus stores the session key of the block author in header logs
        const { logs: [log] } = header.digest;
        const loggedAuthor = (log && ((log.isConsensus && log.asConsensus[0].isNimbus && log.asConsensus[1]) ||
            (log.isPreRuntime && log.asPreRuntime[0].isNimbus && log.asPreRuntime[1])));
        if (loggedAuthor) {
            // use the author mapping pallet, if available (ie: moonbeam, moonriver), to map session (nimbus) key to author (collator/validator) key
            if (queryAt['authorMapping']?.['mappingWithDeposit']) {
                return combineLatest([
                    of(header),
                    validators,
                    queryAt['authorMapping']['mappingWithDeposit'](loggedAuthor).pipe(map((o) => o.unwrapOr({ account: null }).account))
                ]);
            }
            // fall back to session and parachain staking pallets, if available (ie: manta, calamari), to map session (nimbus) key to author (collator) key
            if (queryAt['parachainStaking']?.['selectedCandidates'] && queryAt.session?.nextKeys) {
                const loggedHex = loggedAuthor.toHex();
                return combineLatest([
                    of(header),
                    validators,
                    queryAt['parachainStaking']['selectedCandidates']().pipe(mergeMap((selectedCandidates) => combineLatest([
                        of(selectedCandidates),
                        queryAt.session.nextKeys.multi(selectedCandidates).pipe(map((nextKeys) => nextKeys.findIndex((o) => o.unwrapOrDefault().nimbus.toHex() === loggedHex)))
                    ])), map(([selectedCandidates, index]) => index === -1
                        ? null
                        : selectedCandidates[index]))
                ]);
            }
        }
        // normal operation, non-mapping
        return combineLatest([
            of(header),
            validators,
            of(null)
        ]);
    }
    function getAuthorDetails(api, header, blockHash) {
        // For on-chain state, we need to retrieve it as per the start
        // of the block being constructed, i.e. session validators would
        // be at the point of the block construction, not when all operations
        // has been supplied.
        //
        // However for the first block (no parentHash available), we would
        // just use the as-is
        return api.queryAt(header.parentHash.isEmpty
            ? blockHash || header.hash
            : header.parentHash).pipe(switchMap((queryAt) => getAuthorDetailsWithAt(header, queryAt)));
    }

    /**
     * @name bestNumber
     * @returns The latest block number.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumber((blockNumber) => {
     *   console.log(`the current best block is #${blockNumber}`);
     * });
     * ```
     */
    const bestNumber = /*#__PURE__*/ createBlockNumberDerive((api) => api.rpc.chain.subscribeNewHeads());

    /**
     * @name bestNumberFinalized
     * @returns A BlockNumber
     * @description Get the latest finalized block number.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumberFinalized((blockNumber) => {
     *   console.log(`the current finalized block is #${blockNumber}`);
     * });
     * ```
     */
    const bestNumberFinalized = /*#__PURE__*/ createBlockNumberDerive((api) => api.rpc.chain.subscribeFinalizedHeads());

    /**
     * @name bestNumberLag
     * @returns A number of blocks
     * @description Calculates the lag between finalized head and best head
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumberLag((lag) => {
     *   console.log(`finalized is ${lag} blocks behind head`);
     * });
     * ```
     */
    function bestNumberLag(instanceId, api) {
        return memo$1(instanceId, () => combineLatest([
            api.derive.chain.bestNumber(),
            api.derive.chain.bestNumberFinalized()
        ]).pipe(map(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
    }

    function extractAuthor(digest, sessionValidators) {
        const [citem] = digest.logs.filter((e) => e.isConsensus);
        const [pitem] = digest.logs.filter((e) => e.isPreRuntime);
        const [sitem] = digest.logs.filter((e) => e.isSeal);
        let accountId;
        try {
            // This is critical to be first for BABE (before Consensus)
            // If not first, we end up dropping the author at session-end
            if (pitem) {
                const [engine, data] = pitem.asPreRuntime;
                accountId = engine.extractAuthor(data, sessionValidators);
            }
            if (!accountId && citem) {
                const [engine, data] = citem.asConsensus;
                accountId = engine.extractAuthor(data, sessionValidators);
            }
            // SEAL, still used in e.g. Kulupu for pow
            if (!accountId && sitem) {
                const [engine, data] = sitem.asSeal;
                accountId = engine.extractAuthor(data, sessionValidators);
            }
        }
        catch {
            // ignore
        }
        return accountId;
    }

    function createHeaderExtended(registry, header, validators, author) {
        // an instance of the base extrinsic for us to extend
        const HeaderBase = registry.createClass('Header');
        class Implementation extends HeaderBase {
            constructor(registry, header, validators, author) {
                super(registry, header);
                this.__internal__author = author || extractAuthor(this.digest, validators || []);
                this.createdAtHash = header?.createdAtHash;
            }
            /**
             * @description Convenience method, returns the author for the block
             */
            get author() {
                return this.__internal__author;
            }
        }
        return new Implementation(registry, header, validators, author);
    }

    function mapExtrinsics(extrinsics, records) {
        return extrinsics.map((extrinsic, index) => {
            let dispatchError;
            let dispatchInfo;
            const events = records
                .filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index))
                .map(({ event }) => {
                if (event.section === 'system') {
                    if (event.method === 'ExtrinsicSuccess') {
                        dispatchInfo = event.data[0];
                    }
                    else if (event.method === 'ExtrinsicFailed') {
                        dispatchError = event.data[0];
                        dispatchInfo = event.data[1];
                    }
                }
                return event;
            });
            return { dispatchError, dispatchInfo, events, extrinsic };
        });
    }
    function createSignedBlockExtended(registry, block, events, validators, author) {
        // an instance of the base extrinsic for us to extend
        const SignedBlockBase = registry.createClass('SignedBlock');
        class Implementation extends SignedBlockBase {
            constructor(registry, block, events, validators, author) {
                super(registry, block);
                this.__internal__author = author || extractAuthor(this.block.header.digest, validators || []);
                this.__internal__events = events || [];
                this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);
                this.createdAtHash = block?.createdAtHash;
            }
            /**
             * @description Convenience method, returns the author for the block
             */
            get author() {
                return this.__internal__author;
            }
            /**
             * @description Convenience method, returns the events associated with the block
             */
            get events() {
                return this.__internal__events;
            }
            /**
             * @description Returns the extrinsics and their events, mapped
             */
            get extrinsics() {
                return this.__internal__extrinsics;
            }
        }
        return new Implementation(registry, block, events, validators, author);
    }

    /**
     * @name getBlock
     * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
     * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
     * @example
     * <BR>
     *
     * ```javascript
     * const { author, block } = await api.derive.chain.getBlock('0x123...456');
     *
     * console.log(`block #${block.header.number} was authored by ${author}`);
     * ```
     */
    function getBlock(instanceId, api) {
        return memo$1(instanceId, (blockHash) => combineLatest([
            api.rpc.chain.getBlock(blockHash),
            api.queryAt(blockHash)
        ]).pipe(switchMap(([signedBlock, queryAt]) => combineLatest([
            of(signedBlock),
            queryAt.system.events(),
            getAuthorDetails(api, signedBlock.block.header, blockHash)
        ])), map(([signedBlock, events, [, validators, author]]) => createSignedBlockExtended(events.registry, signedBlock, events, validators, author))));
    }

    function getBlockByNumber(instanceId, api) {
        return memo$1(instanceId, (blockNumber) => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap((h) => api.derive.chain.getBlock(h))));
    }

    /**
     * @name getHeader
     * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
     * @returns An array containing the block header and the block author
     * @description Get a specific block header and extend it with the author
     * @example
     * <BR>
     *
     * ```javascript
     * const { author, number } = await api.derive.chain.getHeader('0x123...456');
     *
     * console.log(`block #${number} was authored by ${author}`);
     * ```
     */
    function getHeader(instanceId, api) {
        return memo$1(instanceId, (blockHash) => api.rpc.chain.getHeader(blockHash).pipe(switchMap((header) => getAuthorDetails(api, header, blockHash)), map(([header, validators, author]) => createHeaderExtended((validators || header).registry, header, validators, author))));
    }

    /**
     * @name subscribeFinalizedBlocks
     * @returns The finalized block & events for that block
     */
    function subscribeFinalizedBlocks(instanceId, api) {
        return memo$1(instanceId, () => api.derive.chain.subscribeFinalizedHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
    }

    /**
     * Returns a header range from startHash to to (not including) endHash, i.e. lastBlock.parentHash === endHash
     */
    function _getHeaderRange(instanceId, api) {
        return memo$1(instanceId, (startHash, endHash, prev = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap((header) => header.parentHash.eq(endHash)
            ? of([header, ...prev])
            : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev]))));
    }
    /**
     * @name subscribeFinalizedHeads
     * @description An observable of the finalized block headers. Unlike the base
     * chain.subscribeFinalizedHeads this does not skip any headers. Since finalization
     * may skip specific blocks (finalization happens in terms of chains), this version
     * of the derive tracks missing headers (since last  retrieved) and provides them
     * to the caller
     */
    function subscribeFinalizedHeads(instanceId, api) {
        return memo$1(instanceId, () => {
            let prevHash = null;
            return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap((header) => {
                const endHash = prevHash;
                const startHash = header.parentHash;
                prevHash = header.createdAtHash = header.hash;
                return endHash === null || startHash.eq(endHash)
                    ? of(header)
                    : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap((headers) => from(headers)));
            }));
        });
    }

    /**
     * @name subscribeNewBlocks
     * @returns The latest block & events for that block
     */
    function subscribeNewBlocks(instanceId, api) {
        return memo$1(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
    }

    /**
     * @name subscribeNewHeads
     * @returns A header with the current header (including extracted author)
     * @description An observable of the current block header and it's author
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.subscribeNewHeads((header) => {
     *   console.log(`block #${header.number} was authored by ${header.author}`);
     * });
     * ```
     */
    function subscribeNewHeads(instanceId, api) {
        return memo$1(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe(switchMap((header) => getAuthorDetails(api, header)), map(([header, validators, author]) => {
            header.createdAtHash = header.hash;
            return createHeaderExtended(header.registry, header, validators, author);
        })));
    }

    var chain = /*#__PURE__*/Object.freeze({
        __proto__: null,
        bestNumber: bestNumber,
        bestNumberFinalized: bestNumberFinalized,
        bestNumberLag: bestNumberLag,
        getBlock: getBlock,
        getBlockByNumber: getBlockByNumber,
        getHeader: getHeader,
        subscribeFinalizedBlocks: subscribeFinalizedBlocks,
        _getHeaderRange: _getHeaderRange,
        subscribeFinalizedHeads: subscribeFinalizedHeads,
        subscribeNewBlocks: subscribeNewBlocks,
        subscribeNewHeads: subscribeNewHeads
    });

    function queryConstants(api) {
        return of([
            // deprecated
            api.consts.contracts['callBaseFee'] || api.registry.createType('Balance'),
            api.consts.contracts['contractFee'] || api.registry.createType('Balance'),
            api.consts.contracts['creationFee'] || api.registry.createType('Balance'),
            api.consts.contracts['transactionBaseFee'] || api.registry.createType('Balance'),
            api.consts.contracts['transactionByteFee'] || api.registry.createType('Balance'),
            api.consts.contracts['transferFee'] || api.registry.createType('Balance'),
            // current
            api.consts.contracts['rentByteFee'] || api.registry.createType('Balance'),
            api.consts.contracts['rentDepositOffset'] || api.registry.createType('Balance'),
            api.consts.contracts['surchargeReward'] || api.registry.createType('Balance'),
            api.consts.contracts['tombstoneDeposit'] || api.registry.createType('Balance')
        ]);
    }
    /**
     * @name fees
     * @returns An object containing the combined results of the queries for
     * all relevant contract fees as declared in the substrate chain spec.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.contracts.fees(([creationFee, transferFee]) => {
     *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
     * });
     * ```
     */
    function fees(instanceId, api) {
        return memo$1(instanceId, () => {
            return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
                callBaseFee,
                contractFee,
                creationFee,
                rentByteFee,
                rentDepositOffset,
                surchargeReward,
                tombstoneDeposit,
                transactionBaseFee,
                transactionByteFee,
                transferFee
            })));
        });
    }

    var contracts = /*#__PURE__*/Object.freeze({
        __proto__: null,
        fees: fees
    });

    function isVoter(value) {
        return !Array.isArray(value);
    }
    function retrieveStakeOf(elections) {
        return elections['stakeOf'].entries().pipe(map((entries) => entries.map(([{ args: [accountId] }, stake]) => [accountId, stake])));
    }
    function retrieveVoteOf(elections) {
        return elections['votesOf'].entries().pipe(map((entries) => entries.map(([{ args: [accountId] }, votes]) => [accountId, votes])));
    }
    function retrievePrev(api, elections) {
        return combineLatest([
            retrieveStakeOf(elections),
            retrieveVoteOf(elections)
        ]).pipe(map(([stakes, votes]) => {
            const result = [];
            votes.forEach(([voter, votes]) => {
                result.push([voter, { stake: api.registry.createType('Balance'), votes }]);
            });
            stakes.forEach(([staker, stake]) => {
                const entry = result.find(([voter]) => voter.eq(staker));
                if (entry) {
                    entry[1].stake = stake;
                }
                else {
                    result.push([staker, { stake, votes: [] }]);
                }
            });
            return result;
        }));
    }
    function retrieveCurrent(elections) {
        return elections.voting.entries().pipe(map((entries) => entries.map(([{ args: [accountId] }, value]) => [
            accountId,
            isVoter(value)
                ? { stake: value.stake, votes: value.votes }
                : { stake: value[0], votes: value[1] }
        ])));
    }
    function votes(instanceId, api) {
        const elections = api.query.elections || api.query['phragmenElection'] || api.query['electionsPhragmen'];
        return memo$1(instanceId, () => elections
            ? elections['stakeOf']
                ? retrievePrev(api, elections)
                : retrieveCurrent(elections)
            : of([]));
    }

    function votesOf(instanceId, api) {
        return memo$1(instanceId, (accountId) => api.derive.council.votes().pipe(map((votes) => (votes.find(([from]) => from.eq(accountId)) ||
            [null, { stake: api.registry.createType('Balance'), votes: [] }])[1])));
    }

    const members$3 = /*#__PURE__*/ members$5('council');
    const hasProposals$2 = /*#__PURE__*/ hasProposals$4('council');
    const proposal$2 = /*#__PURE__*/ proposal$4('council');
    const proposalCount$2 = /*#__PURE__*/ proposalCount$4('council');
    const proposalHashes$2 = /*#__PURE__*/ proposalHashes$4('council');
    const proposals$4 = /*#__PURE__*/ proposals$6('council');
    const prime$2 = /*#__PURE__*/ prime$4('council');

    var council = /*#__PURE__*/Object.freeze({
        __proto__: null,
        members: members$3,
        hasProposals: hasProposals$2,
        proposal: proposal$2,
        proposalCount: proposalCount$2,
        proposalHashes: proposalHashes$2,
        proposals: proposals$4,
        prime: prime$2,
        votes: votes,
        votesOf: votesOf
    });

    function createChildKey(info) {
        return u8aToHex(u8aConcat(':child_storage:default:', blake2AsU8a(u8aConcat('crowdloan', (info.fundIndex || info.trieIndex).toU8a()))));
    }
    function childKey(instanceId, api) {
        return memo$1(instanceId, (paraId) => api.query['crowdloan']['funds'](paraId).pipe(map((optInfo) => optInfo.isSome
            ? createChildKey(optInfo.unwrap())
            : null)));
    }

    function extractContributed(paraId, events) {
        const added = [];
        const removed = [];
        return events
            .filter(({ event: { data: [, eventParaId], method, section } }) => section === 'crowdloan' &&
            ['Contributed', 'Withdrew'].includes(method) &&
            eventParaId.eq(paraId))
            .reduce((result, { event: { data: [accountId], method } }) => {
            if (method === 'Contributed') {
                result.added.push(accountId.toHex());
            }
            else {
                result.removed.push(accountId.toHex());
            }
            return result;
        }, { added, blockHash: events.createdAtHash?.toHex() || '-', removed });
    }

    const PAGE_SIZE_K$1 = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)
    function _getUpdates(api, paraId) {
        let added = [];
        let removed = [];
        return api.query.system.events().pipe(switchMap((events) => {
            const changes = extractContributed(paraId, events);
            if (changes.added.length || changes.removed.length) {
                added = added.concat(...changes.added);
                removed = removed.concat(...changes.removed);
                return of({ added, addedDelta: changes.added, blockHash: events.createdAtHash?.toHex() || '-', removed, removedDelta: changes.removed });
            }
            return EMPTY;
        }), startWith({ added, addedDelta: [], blockHash: '-', removed, removedDelta: [] }));
    }
    function _eventTriggerAll(api, paraId) {
        return api.query.system.events().pipe(switchMap((events) => {
            const items = events.filter(({ event: { data: [eventParaId], method, section } }) => section === 'crowdloan' &&
                ['AllRefunded', 'Dissolved', 'PartiallyRefunded'].includes(method) &&
                eventParaId.eq(paraId));
            return items.length
                ? of(events.createdAtHash?.toHex() || '-')
                : EMPTY;
        }), startWith('-'));
    }
    function _getKeysPaged(api, childKey) {
        const subject = new BehaviorSubject(undefined);
        return subject.pipe(switchMap((startKey) => api.rpc.childstate.getKeysPaged(childKey, '0x', PAGE_SIZE_K$1, startKey)), tap((keys) => {
            nextTick(() => {
                keys.length === PAGE_SIZE_K$1
                    ? subject.next(keys[PAGE_SIZE_K$1 - 1].toHex())
                    : subject.complete();
            });
        }), toArray(), // toArray since we want to startSubject to be completed
        map((keyArr) => arrayFlatten(keyArr)));
    }
    function _getAll(api, paraId, childKey) {
        return _eventTriggerAll(api, paraId).pipe(switchMap(() => isFunction$1(api.rpc.childstate.getKeysPaged)
            ? _getKeysPaged(api, childKey)
            : api.rpc.childstate.getKeys(childKey, '0x')), map((keys) => keys.map((k) => k.toHex())));
    }
    function _contributions$1(api, paraId, childKey) {
        return combineLatest([
            _getAll(api, paraId, childKey),
            _getUpdates(api, paraId)
        ]).pipe(map(([keys, { added, blockHash, removed }]) => {
            const contributorsMap = {};
            keys.forEach((k) => {
                contributorsMap[k] = true;
            });
            added.forEach((k) => {
                contributorsMap[k] = true;
            });
            removed.forEach((k) => {
                delete contributorsMap[k];
            });
            return {
                blockHash,
                contributorsHex: Object.keys(contributorsMap)
            };
        }));
    }
    function contributions(instanceId, api) {
        return memo$1(instanceId, (paraId) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey) => childKey
            ? _contributions$1(api, paraId, childKey)
            : of({ blockHash: '-', contributorsHex: [] }))));
    }

    function _getValues(api, childKey, keys) {
        // We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
        return combineLatest(keys.map((k) => api.rpc.childstate.getStorage(childKey, k))).pipe(map((values) => values
            .map((v) => api.registry.createType('Option<StorageData>', v))
            .map((o) => o.isSome
            ? api.registry.createType('Balance', o.unwrap())
            : api.registry.createType('Balance'))
            .reduce((all, b, index) => objectSpread(all, { [keys[index]]: b }), {})));
    }
    function _watchOwnChanges(api, paraId, childkey, keys) {
        return api.query.system.events().pipe(switchMap((events) => {
            const changes = extractContributed(paraId, events);
            const filtered = keys.filter((k) => changes.added.includes(k) ||
                changes.removed.includes(k));
            return filtered.length
                ? _getValues(api, childkey, filtered)
                : EMPTY;
        }), startWith({}));
    }
    function _contributions(api, paraId, childKey, keys) {
        return combineLatest([
            _getValues(api, childKey, keys),
            _watchOwnChanges(api, paraId, childKey, keys)
        ]).pipe(map(([all, latest]) => objectSpread({}, all, latest)));
    }
    function ownContributions(instanceId, api) {
        return memo$1(instanceId, (paraId, keys) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey) => childKey && keys.length
            ? _contributions(api, paraId, childKey, keys)
            : of({}))));
    }

    var crowdloan = /*#__PURE__*/Object.freeze({
        __proto__: null,
        childKey: childKey,
        contributions: contributions,
        ownContributions: ownContributions
    });

    function isOldInfo(info) {
        return !!info.proposalHash;
    }
    function isCurrentStatus(status) {
        return !!status.tally;
    }
    function compareRationals(n1, d1, n2, d2) {
        while (true) {
            const q1 = n1.div(d1);
            const q2 = n2.div(d2);
            if (q1.lt(q2)) {
                return true;
            }
            else if (q2.lt(q1)) {
                return false;
            }
            const r1 = n1.mod(d1);
            const r2 = n2.mod(d2);
            if (r2.isZero()) {
                return false;
            }
            else if (r1.isZero()) {
                return true;
            }
            n1 = d2;
            n2 = d1;
            d1 = r2;
            d2 = r1;
        }
    }
    function calcPassingOther(threshold, sqrtElectorate, { votedAye, votedNay, votedTotal }) {
        const sqrtVoters = bnSqrt(votedTotal);
        return sqrtVoters.isZero()
            ? false
            : threshold.isSuperMajorityApprove
                ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate)
                : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
    }
    function calcPassing(threshold, sqrtElectorate, state) {
        return threshold.isSimpleMajority
            ? state.votedAye.gt(state.votedNay)
            : calcPassingOther(threshold, sqrtElectorate, state);
    }
    function calcVotesPrev(votesFor) {
        return votesFor.reduce((state, derived) => {
            const { balance, vote } = derived;
            const isDefault = vote.conviction.index === 0;
            const counted = balance
                .muln(isDefault ? 1 : vote.conviction.index)
                .divn(isDefault ? 10 : 1);
            if (vote.isAye) {
                state.allAye.push(derived);
                state.voteCountAye++;
                state.votedAye.iadd(counted);
            }
            else {
                state.allNay.push(derived);
                state.voteCountNay++;
                state.votedNay.iadd(counted);
            }
            state.voteCount++;
            state.votedTotal.iadd(counted);
            return state;
        }, { allAye: [], allNay: [], voteCount: 0, voteCountAye: 0, voteCountNay: 0, votedAye: new BN(0), votedNay: new BN(0), votedTotal: new BN(0) });
    }
    function calcVotesCurrent(tally, votes) {
        const allAye = [];
        const allNay = [];
        votes.forEach((derived) => {
            if (derived.vote.isAye) {
                allAye.push(derived);
            }
            else {
                allNay.push(derived);
            }
        });
        return {
            allAye,
            allNay,
            voteCount: allAye.length + allNay.length,
            voteCountAye: allAye.length,
            voteCountNay: allNay.length,
            votedAye: tally.ayes,
            votedNay: tally.nays,
            votedTotal: tally.turnout
        };
    }
    function calcVotes(sqrtElectorate, referendum, votes) {
        const state = isCurrentStatus(referendum.status)
            ? calcVotesCurrent(referendum.status.tally, votes)
            : calcVotesPrev(votes);
        return objectSpread({}, state, {
            isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
            votes
        });
    }
    function getStatus(info) {
        if (info.isNone) {
            return null;
        }
        const unwrapped = info.unwrap();
        return isOldInfo(unwrapped)
            ? unwrapped
            : unwrapped.isOngoing
                ? unwrapped.asOngoing
                // done, we don't include it here... only currently active
                : null;
    }
    function getImageHashBounded(hash) {
        return hash.isLegacy
            ? hash.asLegacy.hash_.toHex()
            : hash.isLookup
                ? hash.asLookup.hash_.toHex()
                // for inline, use the actual Bytes hash
                : hash.isInline
                    ? hash.asInline.hash.toHex()
                    : isString(hash)
                        ? isHex(hash)
                            ? hash
                            : stringToHex(hash)
                        : isU8a(hash)
                            ? u8aToHex(hash)
                            : hash.toHex();
    }
    function getImageHash(status) {
        return getImageHashBounded(status.proposal ||
            status.proposalHash);
    }

    const DEMOCRACY_ID = stringToHex('democrac');
    function isMaybeHashedOrBounded(call) {
        // check for enum
        return call instanceof Enum;
    }
    function isBounded(call) {
        // check for type
        return call.isInline || call.isLegacy || call.isLookup;
    }
    function queryQueue(api) {
        return api.query.democracy['dispatchQueue']().pipe(switchMap((dispatches) => combineLatest([
            of(dispatches),
            api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))
        ])), map(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
            at,
            image: images[dispatchIndex],
            imageHash: getImageHashBounded(imageHash),
            index
        }))));
    }
    function schedulerEntries(api) {
        // We don't get entries, but rather we get the keys (triggered via finished referendums) and
        // the subscribe to those keys - this means we pickup when the schedulers actually executes
        // at a block, the entry for that block will become empty
        return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap((keys) => {
            const blockNumbers = keys.map(({ args: [blockNumber] }) => blockNumber);
            return blockNumbers.length
                ? combineLatest([
                    of(blockNumbers),
                    // this should simply be api.query.scheduler.agenda.multi,
                    // however we have had cases on Darwinia where the indices have moved around after an
                    // upgrade, which results in invalid on-chain data
                    api.query.scheduler.agenda.multi(blockNumbers).pipe(catchError(() => of(blockNumbers.map(() => []))))
                ])
                : of([[], []]);
        }));
    }
    function queryScheduler(api) {
        return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
            const result = [];
            blockNumbers.forEach((at, index) => {
                (agendas[index] || []).filter((o) => o.isSome).forEach((o) => {
                    const scheduled = o.unwrap();
                    if (scheduled.maybeId.isSome) {
                        const id = scheduled.maybeId.unwrap().toHex();
                        if (id.startsWith(DEMOCRACY_ID)) {
                            const imageHash = isMaybeHashedOrBounded(scheduled.call)
                                ? isBounded(scheduled.call)
                                    ? getImageHashBounded(scheduled.call)
                                    : scheduled.call.isHash
                                        ? scheduled.call.asHash.toHex()
                                        : scheduled.call.asValue.args[0].toHex()
                                : scheduled.call.args[0].toHex();
                            result.push({ at, imageHash, index: api.registry.createType('(u64, ReferendumIndex)', id)[1] });
                        }
                    }
                });
            });
            return combineLatest([
                of(result),
                result.length
                    ? api.derive.democracy.preimages(result.map(({ imageHash }) => imageHash))
                    : of([])
            ]);
        }), map(([infos, images]) => infos.map((info, index) => objectSpread({ image: images[index] }, info))));
    }
    function dispatchQueue(instanceId, api) {
        return memo$1(instanceId, () => isFunction$1(api.query.scheduler?.agenda)
            ? queryScheduler(api)
            : api.query.democracy['dispatchQueue']
                ? queryQueue(api)
                : of([]));
    }

    const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
    function parseEnd(api, vote, { approved, end }) {
        return [
            end,
            (approved.isTrue && vote.isAye) || (approved.isFalse && vote.isNay)
                ? end.add((api.consts.democracy.voteLockingPeriod ||
                    api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index]))
                : BN_ZERO
        ];
    }
    function parseLock(api, [referendumId, accountVote], referendum) {
        const { balance, vote } = accountVote.asStandard;
        const [referendumEnd, unlockAt] = referendum.isFinished
            ? parseEnd(api, vote, referendum.asFinished)
            : [BN_ZERO, BN_ZERO];
        return { balance, isDelegated: false, isFinished: referendum.isFinished, referendumEnd, referendumId, unlockAt, vote };
    }
    function delegateLocks(api, { balance, conviction, target }) {
        return api.derive.democracy.locks(target).pipe(map((available) => available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote }) => ({
            balance,
            isDelegated: true,
            isFinished,
            referendumEnd,
            referendumId,
            unlockAt: unlockAt.isZero()
                ? unlockAt
                : referendumEnd.add((api.consts.democracy.voteLockingPeriod ||
                    api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
            vote: api.registry.createType('Vote', { aye: vote.isAye, conviction })
        }))));
    }
    function directLocks(api, { votes }) {
        if (!votes.length) {
            return of([]);
        }
        return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe(map((referendums) => votes
            .map((vote, index) => [vote, referendums[index].unwrapOr(null)])
            .filter((item) => !!item[1] && isUndefined(item[1].end) && item[0][1].isStandard)
            .map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
    }
    function locks(instanceId, api) {
        return memo$1(instanceId, (accountId) => api.query.democracy.votingOf
            ? api.query.democracy.votingOf(accountId).pipe(switchMap((voting) => voting.isDirect
                ? directLocks(api, voting.asDirect)
                : voting.isDelegating
                    ? delegateLocks(api, voting.asDelegating)
                    : of([])))
            : of([]));
    }

    function withImage(api, nextOpt) {
        if (nextOpt.isNone) {
            return of(null);
        }
        const [hash, threshold] = nextOpt.unwrap();
        return api.derive.democracy.preimage(hash).pipe(map((image) => ({
            image,
            imageHash: getImageHashBounded(hash),
            threshold
        })));
    }
    function nextExternal(instanceId, api) {
        return memo$1(instanceId, () => api.query.democracy?.nextExternal
            ? api.query.democracy.nextExternal().pipe(switchMap((nextOpt) => withImage(api, nextOpt)))
            : of(null));
    }

    function isDemocracyPreimage(api, imageOpt) {
        return !!imageOpt && !api.query.democracy['dispatchQueue'];
    }
    function constructProposal(api, [bytes, proposer, balance, at]) {
        let proposal;
        try {
            proposal = api.registry.createType('Call', bytes.toU8a(true));
        }
        catch (error) {
            console.error(error);
        }
        return { at, balance, proposal, proposer };
    }
    function parseDemocracy(api, imageOpt) {
        if (imageOpt.isNone) {
            return;
        }
        if (isDemocracyPreimage(api, imageOpt)) {
            const status = imageOpt.unwrap();
            if (status.isMissing) {
                return;
            }
            const { data, deposit, provider, since } = status.asAvailable;
            return constructProposal(api, [data, provider, deposit, since]);
        }
        return constructProposal(api, imageOpt.unwrap());
    }
    function parseImage(api, [proposalHash, status, bytes]) {
        if (!status) {
            return undefined;
        }
        const [proposer, balance] = status.isUnrequested
            ? status.asUnrequested.deposit
            : status.asRequested.deposit.unwrapOrDefault();
        let proposal;
        if (bytes) {
            try {
                proposal = api.registry.createType('Call', bytes.toU8a(true));
            }
            catch (error) {
                console.error(error);
            }
        }
        return { at: BN_ZERO, balance, proposal, proposalHash, proposer };
    }
    function getDemocracyImages(api, bounded) {
        const hashes = bounded.map((b) => getImageHashBounded(b));
        return api.query.democracy['preimages'].multi(hashes).pipe(map((images) => images.map((imageOpt) => parseDemocracy(api, imageOpt))));
    }
    function getImages(api, bounded) {
        const hashes = bounded.map((b) => getImageHashBounded(b));
        const bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
        return api.query.preimage.statusFor.multi(hashes).pipe(switchMap((optStatus) => {
            const statuses = optStatus.map((o) => o.unwrapOr(null));
            const keys = statuses
                .map((s, i) => s
                ? bytesType === 'H256'
                    // first generation
                    ? hashes[i]
                    // current generation (H256,u32)
                    : s.isRequested
                        ? [hashes[i], s.asRequested.len.unwrapOr(0)]
                        : [hashes[i], s.asUnrequested.len]
                : null)
                .filter((p) => !!p);
            return api.query.preimage.preimageFor.multi(keys).pipe(map((optBytes) => {
                let ptr = -1;
                return statuses
                    .map((s, i) => s
                    ? [hashes[i], s, optBytes[++ptr].unwrapOr(null)]
                    : [hashes[i], null, null])
                    .map((v) => parseImage(api, v));
            }));
        }));
    }
    function preimages(instanceId, api) {
        return memo$1(instanceId, (hashes) => hashes.length
            ? isFunction$1(api.query.democracy['preimages'])
                ? getDemocracyImages(api, hashes)
                : isFunction$1(api.query.preimage.preimageFor)
                    ? getImages(api, hashes)
                    : of([])
            : of([]));
    }
    const preimage = /*#__PURE__*/ firstMemo((api, hash) => api.derive.democracy.preimages([hash]));

    function isNewDepositors(depositors) {
        // Detect balance...
        return isFunction$1(depositors[1].mul);
    }
    function parse$3([proposals, images, optDepositors]) {
        return proposals
            .filter(([, , proposer], index) => !!(optDepositors[index]?.isSome) && !proposer.isEmpty)
            .map(([index, hash, proposer], proposalIndex) => {
            const depositors = optDepositors[proposalIndex].unwrap();
            return objectSpread({
                image: images[proposalIndex],
                imageHash: getImageHashBounded(hash),
                index,
                proposer
            }, isNewDepositors(depositors)
                ? { balance: depositors[1], seconds: depositors[0] }
                : { balance: depositors[0], seconds: depositors[1] });
        });
    }
    function proposals$3(instanceId, api) {
        return memo$1(instanceId, () => isFunction$1(api.query.democracy?.publicProps)
            ? api.query.democracy.publicProps().pipe(switchMap((proposals) => proposals.length
                ? combineLatest([
                    of(proposals),
                    api.derive.democracy.preimages(proposals.map(([, hash]) => hash)),
                    api.query.democracy.depositOf.multi(proposals.map(([index]) => index))
                ])
                : of([[], [], []])), map(parse$3))
            : of([]));
    }

    function referendumIds(instanceId, api) {
        return memo$1(instanceId, () => api.query.democracy?.lowestUnbaked
            ? api.queryMulti([
                api.query.democracy.lowestUnbaked,
                api.query.democracy.referendumCount
            ]).pipe(map(([first, total]) => total.gt(first)
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i))
                : []))
            : of([]));
    }

    function referendums(instanceId, api) {
        return memo$1(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap((referendums) => referendums.length
            ? combineLatest([
                of(referendums),
                api.derive.democracy._referendumsVotes(referendums)
            ])
            : of([[], []])), map(([referendums, votes]) => referendums.map((referendum, index) => objectSpread({}, referendum, votes[index])))));
    }

    function referendumsActive(instanceId, api) {
        return memo$1(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => ids.length
            ? api.derive.democracy.referendumsInfo(ids)
            : of([]))));
    }

    function referendumsFinished(instanceId, api) {
        return memo$1(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => api.query.democracy.referendumInfoOf.multi(ids)), map((infos) => infos
            .map((o) => o.unwrapOr(null))
            .filter((info) => !!info && info.isFinished)
            .map((info) => info.asFinished))));
    }

    function votesPrev(api, referendumId) {
        return api.query.democracy['votersFor'](referendumId).pipe(switchMap((votersFor) => combineLatest([
            of(votersFor),
            votersFor.length
                ? api.query.democracy['voteOf'].multi(votersFor.map((accountId) => [referendumId, accountId]))
                : of([]),
            api.derive.balances.votingBalances(votersFor)
        ])), map(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
            accountId,
            balance: balances[index].votingBalance || api.registry.createType('Balance'),
            isDelegating: false,
            vote: votes[index] || api.registry.createType('Vote')
        }))));
    }
    function extractVotes(mapped, referendumId) {
        return mapped
            .filter(([, voting]) => voting.isDirect)
            .map(([accountId, voting]) => [
            accountId,
            voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))
        ])
            .filter(([, directVotes]) => !!directVotes.length)
            .reduce((result, [accountId, votes]) => 
        // FIXME We are ignoring split votes
        votes.reduce((result, [, vote]) => {
            if (vote.isStandard) {
                result.push(objectSpread({
                    accountId,
                    isDelegating: false
                }, vote.asStandard));
            }
            return result;
        }, result), []);
    }
    function votesCurr(api, referendumId) {
        return api.query.democracy.votingOf.entries().pipe(map((allVoting) => {
            const mapped = allVoting.map(([{ args: [accountId] }, voting]) => [accountId, voting]);
            const votes = extractVotes(mapped, referendumId);
            const delegations = mapped
                .filter(([, voting]) => voting.isDelegating)
                .map(([accountId, voting]) => [accountId, voting.asDelegating]);
            // add delegations
            delegations.forEach(([accountId, { balance, conviction, target }]) => {
                // Are we delegating to a delegator
                const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
                const to = votes.find(({ accountId }) => accountId.eq(toDelegator ? toDelegator[0] : target));
                // this delegation has a target
                if (to) {
                    votes.push({
                        accountId,
                        balance,
                        isDelegating: true,
                        vote: api.registry.createType('Vote', { aye: to.vote.isAye, conviction })
                    });
                }
            });
            return votes;
        }));
    }
    function _referendumVotes(instanceId, api) {
        return memo$1(instanceId, (referendum) => combineLatest([
            api.derive.democracy.sqrtElectorate(),
            isFunction$1(api.query.democracy.votingOf)
                ? votesCurr(api, referendum.index)
                : votesPrev(api, referendum.index)
        ]).pipe(map(([sqrtElectorate, votes]) => calcVotes(sqrtElectorate, referendum, votes))));
    }
    function _referendumsVotes(instanceId, api) {
        return memo$1(instanceId, (referendums) => referendums.length
            ? combineLatest(referendums.map((referendum) => api.derive.democracy._referendumVotes(referendum)))
            : of([]));
    }
    function _referendumInfo(instanceId, api) {
        return memo$1(instanceId, (index, info) => {
            const status = getStatus(info);
            return status
                ? api.derive.democracy.preimage(status.proposal ||
                    status.proposalHash).pipe(map((image) => ({
                    image,
                    imageHash: getImageHash(status),
                    index: api.registry.createType('ReferendumIndex', index),
                    status
                })))
                : of(null);
        });
    }
    function referendumsInfo(instanceId, api) {
        return memo$1(instanceId, (ids) => ids.length
            ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap((infos) => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map((infos) => infos.filter((r) => !!r)))
            : of([]));
    }

    function sqrtElectorate(instanceId, api) {
        return memo$1(instanceId, () => api.query.balances.totalIssuance().pipe(map(bnSqrt)));
    }

    var democracy = /*#__PURE__*/Object.freeze({
        __proto__: null,
        dispatchQueue: dispatchQueue,
        locks: locks,
        nextExternal: nextExternal,
        preimages: preimages,
        preimage: preimage,
        proposals: proposals$3,
        referendumIds: referendumIds,
        referendums: referendums,
        referendumsActive: referendumsActive,
        referendumsFinished: referendumsFinished,
        _referendumVotes: _referendumVotes,
        _referendumsVotes: _referendumsVotes,
        _referendumInfo: _referendumInfo,
        referendumsInfo: referendumsInfo,
        sqrtElectorate: sqrtElectorate
    });

    function isSeatHolder(value) {
        return !Array.isArray(value);
    }
    function isCandidateTuple(value) {
        return Array.isArray(value);
    }
    function getAccountTuple(value) {
        return isSeatHolder(value)
            ? [value.who, value.stake]
            : value;
    }
    function getCandidate(value) {
        return isCandidateTuple(value)
            ? value[0]
            : value;
    }
    function sortAccounts([, balanceA], [, balanceB]) {
        return balanceB.cmp(balanceA);
    }
    function getConstants(api, elections) {
        return elections
            ? {
                candidacyBond: api.consts[elections].candidacyBond,
                desiredRunnersUp: api.consts[elections].desiredRunnersUp,
                desiredSeats: api.consts[elections].desiredMembers,
                termDuration: api.consts[elections].termDuration,
                votingBond: api.consts[elections]['votingBond'],
                votingBondBase: api.consts[elections].votingBondBase,
                votingBondFactor: api.consts[elections].votingBondFactor
            }
            : {};
    }
    function getModules(api) {
        const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName, 'council') || ['council'];
        const elections = api.query['phragmenElection']
            ? 'phragmenElection'
            : api.query['electionsPhragmen']
                ? 'electionsPhragmen'
                : api.query.elections
                    ? 'elections'
                    : null;
        return [council, elections];
    }
    function queryAll(api, council, elections) {
        return api.queryMulti([
            api.query[council].members,
            api.query[elections].candidates,
            api.query[elections].members,
            api.query[elections].runnersUp
        ]);
    }
    function queryCouncil(api, council) {
        return combineLatest([
            api.query[council].members(),
            of([]),
            of([]),
            of([])
        ]);
    }
    /**
     * @name info
     * @returns An object containing the combined results of the storage queries for
     * all relevant election module properties.
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.elections.info(({ members, candidates }) => {
     *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
     * });
     * ```
     */
    function info$3(instanceId, api) {
        return memo$1(instanceId, () => {
            const [council, elections] = getModules(api);
            return (elections
                ? queryAll(api, council, elections)
                : queryCouncil(api, council)).pipe(map(([councilMembers, candidates, members, runnersUp]) => objectSpread({}, getConstants(api, elections), {
                candidateCount: api.registry.createType('u32', candidates.length),
                candidates: candidates.map(getCandidate),
                members: members.length
                    ? members.map(getAccountTuple).sort(sortAccounts)
                    : councilMembers.map((a) => [a, api.registry.createType('Balance')]),
                runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
            })));
        });
    }

    var elections = /*#__PURE__*/Object.freeze({
        __proto__: null,
        info: info$3
    });

    function mapResult([result, validators, heartbeats, numBlocks]) {
        validators.forEach((validator, index) => {
            const validatorId = validator.toString();
            const blockCount = numBlocks[index];
            const hasMessage = !heartbeats[index].isEmpty;
            const prev = result[validatorId];
            if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
                result[validatorId] = {
                    blockCount,
                    hasMessage,
                    isOnline: hasMessage || blockCount.gt(BN_ZERO)
                };
            }
        });
        return result;
    }
    /**
     * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
     */
    function receivedHeartbeats(instanceId, api) {
        return memo$1(instanceId, () => api.query.imOnline?.receivedHeartbeats
            ? api.derive.staking.overview().pipe(switchMap(({ currentIndex, validators }) => combineLatest([
                of({}),
                of(validators),
                api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])),
                api.query.imOnline.authoredBlocks.multi(validators.map((address) => [currentIndex, address]))
            ])), map(mapResult))
            : of({}));
    }

    var imOnline = /*#__PURE__*/Object.freeze({
        __proto__: null,
        receivedHeartbeats: receivedHeartbeats
    });

    const members$2 = /*#__PURE__*/ members$5('membership');
    const hasProposals$1 = /*#__PURE__*/ hasProposals$4('membership');
    const proposal$1 = /*#__PURE__*/ proposal$4('membership');
    const proposalCount$1 = /*#__PURE__*/ proposalCount$4('membership');
    const proposalHashes$1 = /*#__PURE__*/ proposalHashes$4('membership');
    const proposals$2 = /*#__PURE__*/ proposals$6('membership');
    const prime$1 = /*#__PURE__*/ prime$4('membership');

    var membership = /*#__PURE__*/Object.freeze({
        __proto__: null,
        members: members$2,
        hasProposals: hasProposals$1,
        proposal: proposal$1,
        proposalCount: proposalCount$1,
        proposalHashes: proposalHashes$1,
        proposals: proposals$2,
        prime: prime$1
    });

    function didUpdateToBool(didUpdate, id) {
        return didUpdate.isSome
            ? didUpdate.unwrap().some((paraId) => paraId.eq(id))
            : false;
    }

    function parseActive(id, active) {
        const found = active.find(([paraId]) => paraId === id);
        if (found && found[1].isSome) {
            const [collatorId, retriable] = found[1].unwrap();
            return objectSpread({ collatorId }, retriable.isWithRetries
                ? {
                    isRetriable: true,
                    retries: retriable.asWithRetries.toNumber()
                }
                : {
                    isRetriable: false,
                    retries: 0
                });
        }
        return null;
    }
    function parseCollators(id, collatorQueue) {
        return collatorQueue.map((queue) => {
            const found = queue.find(([paraId]) => paraId === id);
            return found ? found[1] : null;
        });
    }
    function parse$2(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
        if (info.isNone) {
            return null;
        }
        return {
            active: parseActive(id, active),
            didUpdate: didUpdateToBool(didUpdate, id),
            heads,
            id,
            info: objectSpread({ id }, info.unwrap()),
            pendingSwapId: pendingSwap.unwrapOr(null),
            relayDispatchQueue,
            retryCollators: parseCollators(id, retryQueue),
            selectedCollators: parseCollators(id, selectedThreads)
        };
    }
    function info$2(instanceId, api) {
        return memo$1(instanceId, (id) => api.query['registrar'] && api.query['parachains']
            ? api.queryMulti([
                api.query['registrar']['active'],
                api.query['registrar']['retryQueue'],
                api.query['registrar']['selectedThreads'],
                api.query['parachains']['didUpdate'],
                [api.query['registrar']['paras'], id],
                [api.query['registrar']['pendingSwap'], id],
                [api.query['parachains']['heads'], id],
                [api.query['parachains']['relayDispatchQueue'], id]
            ])
                .pipe(map((result) => parse$2(api.registry.createType('ParaId', id), result)))
            : of(null));
    }

    function parse$1([ids, didUpdate, relayDispatchQueueSizes, infos, pendingSwaps]) {
        return ids.map((id, index) => ({
            didUpdate: didUpdateToBool(didUpdate, id),
            id,
            info: objectSpread({ id }, infos[index].unwrapOr(null)),
            pendingSwapId: pendingSwaps[index].unwrapOr(null),
            relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
        }));
    }
    function overview$1(instanceId, api) {
        return memo$1(instanceId, () => api.query['registrar']?.['parachains'] && api.query['parachains']
            ? api.query['registrar']['parachains']().pipe(switchMap((paraIds) => combineLatest([
                of(paraIds),
                api.query['parachains']['didUpdate'](),
                api.query['parachains']['relayDispatchQueueSize'].multi(paraIds),
                api.query['registrar']['paras'].multi(paraIds),
                api.query['registrar']['pendingSwap'].multi(paraIds)
            ])), map(parse$1))
            : of([]));
    }

    var parachains = /*#__PURE__*/Object.freeze({
        __proto__: null,
        info: info$2,
        overview: overview$1
    });

    function parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
        return {
            activeEra,
            activeEraStart,
            currentEra,
            currentIndex,
            validatorCount
        };
    }
    function queryStaking(api) {
        return api.queryMulti([
            api.query.session.currentIndex,
            api.query.staking.activeEra,
            api.query.staking.currentEra,
            api.query.staking.validatorCount
        ]).pipe(map(([currentIndex, activeOpt, currentEra, validatorCount]) => {
            const { index, start } = activeOpt.unwrapOrDefault();
            return parse([
                currentIndex,
                index,
                start,
                currentEra.unwrapOrDefault(),
                validatorCount
            ]);
        }));
    }
    function querySession(api) {
        return api.query.session.currentIndex().pipe(map((currentIndex) => parse([
            currentIndex,
            api.registry.createType('EraIndex'),
            api.registry.createType('Option<Moment>'),
            api.registry.createType('EraIndex'),
            api.registry.createType('u32')
        ])));
    }
    function empty(api) {
        return of(parse([
            api.registry.createType('SessionIndex', 1),
            api.registry.createType('EraIndex'),
            api.registry.createType('Option<Moment>'),
            api.registry.createType('EraIndex'),
            api.registry.createType('u32')
        ]));
    }
    function indexes(instanceId, api) {
        return memo$1(instanceId, () => api.query.session
            ? api.query.staking
                ? queryStaking(api)
                : querySession(api)
            : empty(api));
    }

    /**
     * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
     */
    function info$1(instanceId, api) {
        return memo$1(instanceId, () => api.derive.session.indexes().pipe(map((indexes) => {
            const sessionLength = api.consts?.babe?.epochDuration || api.registry.createType('u64', 1);
            const sessionsPerEra = api.consts?.staking?.sessionsPerEra || api.registry.createType('SessionIndex', 1);
            return objectSpread({
                eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(sessionLength)),
                isEpoch: !!api.query.babe,
                sessionLength,
                sessionsPerEra
            }, indexes);
        })));
    }

    function withProgressField(field) {
        return (instanceId, api) => memo$1(instanceId, () => api.derive.session.progress().pipe(map((info) => info[field])));
    }
    function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
        const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
        const sessionProgress = currentSlot.sub(epochStartSlot);
        const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
        return objectSpread({
            eraProgress: api.registry.createType('BlockNumber', eraProgress),
            sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
        }, info);
    }
    function queryAura(api) {
        return api.derive.session.info().pipe(map((info) => objectSpread({
            eraProgress: api.registry.createType('BlockNumber'),
            sessionProgress: api.registry.createType('BlockNumber')
        }, info)));
    }
    function queryBabe(api) {
        return api.derive.session.info().pipe(switchMap((info) => combineLatest([
            of(info),
            // we may have no staking, but have babe (permissioned)
            api.query.staking?.erasStartSessionIndex
                ? api.queryMulti([
                    api.query.babe.currentSlot,
                    api.query.babe.epochIndex,
                    api.query.babe.genesisSlot,
                    [api.query.staking.erasStartSessionIndex, info.activeEra]
                ])
                : api.queryMulti([
                    api.query.babe.currentSlot,
                    api.query.babe.epochIndex,
                    api.query.babe.genesisSlot
                ])
        ])), map(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [
            info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]
        ]));
    }
    /**
     * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
     */
    function progress(instanceId, api) {
        return memo$1(instanceId, () => api.query.babe
            ? queryBabe(api).pipe(map(([info, slots]) => createDerive(api, info, slots)))
            : queryAura(api));
    }
    const eraLength = /*#__PURE__*/ withProgressField('eraLength');
    const eraProgress = /*#__PURE__*/ withProgressField('eraProgress');
    const sessionProgress = /*#__PURE__*/ withProgressField('sessionProgress');

    var session = /*#__PURE__*/Object.freeze({
        __proto__: null,
        indexes: indexes,
        info: info$1,
        progress: progress,
        eraLength: eraLength,
        eraProgress: eraProgress,
        sessionProgress: sessionProgress
    });

    function getPrev(api) {
        return api.query.society.candidates().pipe(switchMap((candidates) => combineLatest([
            of(candidates),
            api.query.society['suspendedCandidates'].multi(candidates.map(({ who }) => who))
        ])), map(([candidates, suspended]) => candidates.map(({ kind, value, who }, index) => ({
            accountId: who,
            isSuspended: suspended[index].isSome,
            kind,
            value
        }))));
    }
    function getCurr(api) {
        return api.query.society.candidates.entries().pipe(map((entries) => entries
            .filter(([, opt]) => opt.isSome)
            .map(([{ args: [accountId] }, opt]) => [accountId, opt.unwrap()])
            // FIXME We are missing the new fields from the candidate record
            .map(([accountId, { bid, kind }]) => ({
            accountId,
            isSuspended: false,
            kind,
            value: bid
        }))));
    }
    /**
     * @description Get the candidate info for a society
     */
    function candidates(instanceId, api) {
        return memo$1(instanceId, () => api.query.society['suspendedCandidates'] && api.query.society.candidates.creator.meta.type.isPlain
            ? getPrev(api)
            : getCurr(api));
    }

    /**
     * @description Get the overall info for a society
     */
    function info(instanceId, api) {
        return memo$1(instanceId, () => combineLatest([
            api.query.society.bids(),
            api.query.society['defender']
                ? api.query.society['defender']()
                : of(undefined),
            api.query.society.founder(),
            api.query.society.head(),
            api.query.society['maxMembers']
                ? api.query.society['maxMembers']()
                : of(undefined),
            api.query.society.pot()
        ]).pipe(map(([bids, defender, founder, head, maxMembers, pot]) => ({
            bids,
            defender: defender?.unwrapOr(undefined),
            founder: founder.unwrapOr(undefined),
            hasDefender: (defender?.isSome && head.isSome && !head.eq(defender)) || false,
            head: head.unwrapOr(undefined),
            maxMembers,
            pot
        }))));
    }

    /**
     * @description Get the member info for a society
     */
    function member(instanceId, api) {
        return memo$1(instanceId, (accountId) => api.derive.society._members([accountId]).pipe(map(([result]) => result)));
    }

    function _membersPrev(api, accountIds) {
        return combineLatest([
            of(accountIds),
            api.query.society.payouts.multi(accountIds),
            api.query.society['strikes'].multi(accountIds),
            api.query.society.defenderVotes.multi(accountIds),
            api.query.society.suspendedMembers.multi(accountIds),
            api.query.society['vouching'].multi(accountIds)
        ]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({
            accountId,
            isDefenderVoter: defenderVotes[index].isSome,
            isSuspended: suspended[index].isTrue,
            payouts: payouts[index],
            strikes: strikes[index],
            vote: defenderVotes[index].unwrapOr(undefined),
            vouching: vouching[index].unwrapOr(undefined)
        }))));
    }
    function _membersCurr(api, accountIds) {
        return combineLatest([
            of(accountIds),
            api.query.society.members.multi(accountIds),
            api.query.society.payouts.multi(accountIds),
            api.query.society.defenderVotes.multi(accountIds),
            api.query.society.suspendedMembers.multi(accountIds)
        ]).pipe(map(([accountIds, members, payouts, defenderVotes, suspendedMembers]) => accountIds
            .map((accountId, index) => members[index].isSome
            ? {
                accountId,
                isDefenderVoter: defenderVotes[index].isSome
                    ? defenderVotes[index].unwrap().approve.isTrue
                    : false,
                isSuspended: suspendedMembers[index].isSome,
                member: members[index].unwrap(),
                payouts: payouts[index].payouts
            }
            : null)
            .filter((m) => !!m)
            .map(({ accountId, isDefenderVoter, isSuspended, member, payouts }) => ({
            accountId,
            isDefenderVoter,
            isSuspended,
            payouts,
            strikes: member.strikes,
            vouching: member.vouching.unwrapOr(undefined)
        }))));
    }
    function _members(instanceId, api) {
        return memo$1(instanceId, (accountIds) => api.query.society.members.creator.meta.type.isMap
            ? _membersCurr(api, accountIds)
            : _membersPrev(api, accountIds));
    }
    /**
     * @description Get the member info for a society
     */
    function members$1(instanceId, api) {
        return memo$1(instanceId, () => api.query.society.members.creator.meta.type.isMap
            ? api.query.society.members.keys().pipe(switchMap((keys) => api.derive.society._members(keys.map(({ args: [accountId] }) => accountId))))
            : api.query.society.members().pipe(switchMap((members) => api.derive.society._members(members))));
    }

    var society = /*#__PURE__*/Object.freeze({
        __proto__: null,
        candidates: candidates,
        info: info,
        member: member,
        _members: _members,
        members: members$1
    });

    const QUERY_OPTS = {
        withDestination: true,
        withLedger: true,
        withNominations: true,
        withPrefs: true
    };
    function groupByEra(list) {
        return list.reduce((map, { era, value }) => {
            const key = era.toString();
            map[key] = (map[key] || BN_ZERO).add(value.unwrap());
            return map;
        }, {});
    }
    function calculateUnlocking(api, stakingLedger, sessionInfo) {
        const results = Object
            .entries(groupByEra((stakingLedger?.unlocking || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra))))
            .map(([eraString, value]) => ({
            remainingEras: new BN(eraString).isub(sessionInfo.activeEra),
            value: api.registry.createType('Balance', value)
        }));
        return results.length
            ? results
            : undefined;
    }
    function redeemableSum(api, stakingLedger, sessionInfo) {
        return api.registry.createType('Balance', (stakingLedger?.unlocking || []).reduce((total, { era, value }) => {
            // aligns with https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/pallet/mod.rs#L973-L975
            // (ensure currentEra >= era passed, as per https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/lib.rs#L477-L494)
            // NOTE: Previously we used activeEra >= era, which is incorrect for the last session
            return era.unwrap().gt(sessionInfo.currentEra)
                ? total
                : total.iadd(value.unwrap());
        }, new BN(0)));
    }
    function parseResult$1(api, sessionInfo, keys, query) {
        return objectSpread({}, keys, query, {
            redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
            unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
        });
    }
    /**
     * @description From a list of stashes, fill in all the relevant staking details
     */
    function accounts(instanceId, api) {
        return memo$1(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap((sessionInfo) => combineLatest([
            api.derive.staking.keysMulti(accountIds),
            api.derive.staking.queryMulti(accountIds, opts)
        ]).pipe(map(([keys, queries]) => queries.map((q, index) => parseResult$1(api, sessionInfo, keys[index], q)))))));
    }
    /**
     * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
     */
    const account = /*#__PURE__*/ firstMemo((api, accountId, opts) => api.derive.staking.accounts([accountId], opts));

    /**
     * @description Retrieve the staking overview, including elected and points earned
     */
    function currentPoints(instanceId, api) {
        return memo$1(instanceId, () => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => api.query.staking.erasRewardPoints(activeEra))));
    }

    const DEFAULT_FLAGS$1 = { withController: true, withExposure: true, withPrefs: true };
    function combineAccounts(nextElected, validators) {
        return arrayFlatten([nextElected, validators.filter((v) => !nextElected.find((n) => n.eq(v)))]);
    }
    function electedInfo(instanceId, api) {
        return memo$1(instanceId, (flags = DEFAULT_FLAGS$1) => api.derive.staking.validators().pipe(switchMap(({ nextElected, validators }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe(map((info) => ({
            info,
            nextElected,
            validators
        }))))));
    }

    function getEraCache(CACHE_KEY, era, withActive) {
        const cacheKey = `${CACHE_KEY}-${era.toString()}`;
        return [
            cacheKey,
            withActive
                ? undefined
                : deriveCache.get(cacheKey)
        ];
    }
    function getEraMultiCache(CACHE_KEY, eras, withActive) {
        const cached = withActive
            ? []
            : eras
                .map((e) => deriveCache.get(`${CACHE_KEY}-${e.toString()}`))
                .filter((v) => !!v);
        return cached;
    }
    function setEraCache(cacheKey, withActive, value) {
        !withActive && deriveCache.set(cacheKey, value);
        return value;
    }
    function setEraMultiCache(CACHE_KEY, withActive, values) {
        !withActive && values.forEach((v) => deriveCache.set(`${CACHE_KEY}-${v.era.toString()}`, v));
        return values;
    }
    function filterCachedEras(eras, cached, query) {
        return eras
            .map((e) => cached.find(({ era }) => e.eq(era)) ||
            query.find(({ era }) => e.eq(era)))
            .filter((e) => !!e);
    }

    const ERA_CHUNK_SIZE = 14;
    function chunkEras(eras, fn) {
        const chunked = arrayChunk(eras, ERA_CHUNK_SIZE);
        let index = 0;
        const subject = new BehaviorSubject(chunked[index]);
        return subject.pipe(switchMap(fn), tap(() => {
            nextTick(() => {
                index++;
                index === chunked.length
                    ? subject.complete()
                    : subject.next(chunked[index]);
            });
        }), toArray(), map(arrayFlatten));
    }
    function filterEras(eras, list) {
        return eras.filter((e) => !list.some(({ era }) => e.eq(era)));
    }
    function erasHistoricApply(fn) {
        return (instanceId, api) => 
        // Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        memo$1(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](e, withActive))));
    }
    function erasHistoricApplyAccount(fn) {
        return (instanceId, api) => 
        // Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        memo$1(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](accountId, e, withActive))));
    }
    function singleEra(fn) {
        return (instanceId, api) => 
        // Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        memo$1(instanceId, (era) => api.derive.staking[fn](era, true));
    }
    function combineEras(fn) {
        return (instanceId, api) => 
        // Cannot quite get the typing right, but it is right in the code
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        memo$1(instanceId, (eras, withActive) => !eras.length
            ? of([])
            : chunkEras(eras, (eras) => combineLatest(eras.map((e) => api.derive.staking[fn](e, withActive)))));
    }

    const CACHE_KEY$4 = 'eraExposure';
    function mapStakers(era, stakers) {
        const nominators = {};
        const validators = {};
        stakers.forEach(([key, exposure]) => {
            const validatorId = key.args[1].toString();
            validators[validatorId] = exposure;
            exposure.others.forEach(({ who }, validatorIndex) => {
                const nominatorId = who.toString();
                nominators[nominatorId] = nominators[nominatorId] || [];
                nominators[nominatorId].push({ validatorId, validatorIndex });
            });
        });
        return { era, nominators, validators };
    }
    function _eraExposure(instanceId, api) {
        return memo$1(instanceId, (era, withActive = false) => {
            const [cacheKey, cached] = getEraCache(CACHE_KEY$4, era, withActive);
            return cached
                ? of(cached)
                : api.query.staking.erasStakersClipped.entries(era).pipe(map((r) => setEraCache(cacheKey, withActive, mapStakers(era, r))));
        });
    }
    const eraExposure = /*#__PURE__*/ singleEra('_eraExposure');
    const _erasExposure = /*#__PURE__*/ combineEras('_eraExposure');
    const erasExposure = /*#__PURE__*/ erasHistoricApply('_erasExposure');

    function erasHistoric(instanceId, api) {
        return memo$1(instanceId, (withActive) => combineLatest([
            api.query.staking.activeEra(),
            api.consts.staking.historyDepth
                ? of(api.consts.staking.historyDepth)
                : api.query.staking['historyDepth']()
        ]).pipe(map(([activeEraOpt, historyDepth]) => {
            const result = [];
            const max = historyDepth.toNumber();
            const activeEra = activeEraOpt.unwrapOrDefault().index;
            let lastEra = activeEra;
            while (lastEra.gte(BN_ZERO) && (result.length < max)) {
                if ((lastEra !== activeEra) || (withActive === true)) {
                    result.push(api.registry.createType('EraIndex', lastEra));
                }
                lastEra = lastEra.sub(BN_ONE);
            }
            // go from oldest to newest
            return result.reverse();
        })));
    }

    const CACHE_KEY$3 = 'eraPoints';
    function mapValidators({ individual }) {
        return [...individual.entries()]
            .filter(([, points]) => points.gt(BN_ZERO))
            .reduce((result, [validatorId, points]) => {
            result[validatorId.toString()] = points;
            return result;
        }, {});
    }
    function mapPoints(eras, points) {
        return eras.map((era, index) => ({
            era,
            eraPoints: points[index].total,
            validators: mapValidators(points[index])
        }));
    }
    function _erasPoints(instanceId, api) {
        return memo$1(instanceId, (eras, withActive) => {
            if (!eras.length) {
                return of([]);
            }
            const cached = getEraMultiCache(CACHE_KEY$3, eras, withActive);
            const remaining = filterEras(eras, cached);
            return !remaining.length
                ? of(cached)
                : api.query.staking.erasRewardPoints.multi(remaining).pipe(map((p) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$3, withActive, mapPoints(remaining, p)))));
        });
    }
    const erasPoints = /*#__PURE__*/ erasHistoricApply('_erasPoints');

    const CACHE_KEY$2 = 'eraPrefs';
    function mapPrefs(era, all) {
        const validators = {};
        all.forEach(([key, prefs]) => {
            validators[key.args[1].toString()] = prefs;
        });
        return { era, validators };
    }
    function _eraPrefs(instanceId, api) {
        return memo$1(instanceId, (era, withActive) => {
            const [cacheKey, cached] = getEraCache(CACHE_KEY$2, era, withActive);
            return cached
                ? of(cached)
                : api.query.staking.erasValidatorPrefs.entries(era).pipe(map((r) => setEraCache(cacheKey, withActive, mapPrefs(era, r))));
        });
    }
    const eraPrefs = /*#__PURE__*/ singleEra('_eraPrefs');
    const _erasPrefs = /*#__PURE__*/ combineEras('_eraPrefs');
    const erasPrefs = /*#__PURE__*/ erasHistoricApply('_erasPrefs');

    const CACHE_KEY$1 = 'eraRewards';
    function mapRewards(eras, optRewards) {
        return eras.map((era, index) => ({
            era,
            eraReward: optRewards[index].unwrapOrDefault()
        }));
    }
    function _erasRewards(instanceId, api) {
        return memo$1(instanceId, (eras, withActive) => {
            if (!eras.length) {
                return of([]);
            }
            const cached = getEraMultiCache(CACHE_KEY$1, eras, withActive);
            const remaining = filterEras(eras, cached);
            if (!remaining.length) {
                return of(cached);
            }
            return api.query.staking.erasValidatorReward.multi(remaining).pipe(map((r) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$1, withActive, mapRewards(remaining, r)))));
        });
    }
    const erasRewards = /*#__PURE__*/ erasHistoricApply('_erasRewards');

    const CACHE_KEY = 'eraSlashes';
    function mapSlashes(era, noms, vals) {
        const nominators = {};
        const validators = {};
        noms.forEach(([key, optBalance]) => {
            nominators[key.args[1].toString()] = optBalance.unwrap();
        });
        vals.forEach(([key, optRes]) => {
            validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
        });
        return { era, nominators, validators };
    }
    function _eraSlashes(instanceId, api) {
        return memo$1(instanceId, (era, withActive) => {
            const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
            return cached
                ? of(cached)
                : combineLatest([
                    api.query.staking.nominatorSlashInEra.entries(era),
                    api.query.staking.validatorSlashInEra.entries(era)
                ]).pipe(map(([n, v]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v))));
        });
    }
    const eraSlashes = /*#__PURE__*/ singleEra('_eraSlashes');
    const _erasSlashes = /*#__PURE__*/ combineEras('_eraSlashes');
    const erasSlashes = /*#__PURE__*/ erasHistoricApply('_erasSlashes');

    function extractsIds(stashId, queuedKeys, nextKeys) {
        const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
        const nextSessionIds = nextKeys.unwrapOr([]);
        return {
            nextSessionIds: Array.isArray(nextSessionIds)
                ? nextSessionIds
                : [...nextSessionIds.values()],
            sessionIds: Array.isArray(sessionIds)
                ? sessionIds
                : [...sessionIds.values()]
        };
    }
    const keys = /*#__PURE__*/ firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
    function keysMulti(instanceId, api) {
        return memo$1(instanceId, (stashIds) => stashIds.length
            ? api.query.session.queuedKeys().pipe(switchMap((queuedKeys) => combineLatest([
                of(queuedKeys),
                api.consts['session']?.['dedupKeyPrefix']
                    ? api.query.session.nextKeys.multi(stashIds.map((s) => [api.consts['session']['dedupKeyPrefix'], s]))
                    : combineLatest(stashIds.map((s) => api.query.session.nextKeys(s)))
            ])), map(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index]))))
            : of([]));
    }

    /**
     * @description Retrieve the staking overview, including elected and points earned
     */
    function overview(instanceId, api) {
        return memo$1(instanceId, () => combineLatest([
            api.derive.session.indexes(),
            api.derive.staking.validators()
        ]).pipe(map(([indexes, { nextElected, validators }]) => objectSpread({}, indexes, {
            nextElected,
            validators
        }))));
    }

    function _ownExposures(instanceId, api) {
        return memo$1(instanceId, (accountId, eras, _withActive) => eras.length
            ? combineLatest([
                combineLatest(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId))),
                combineLatest(eras.map((e) => api.query.staking.erasStakers(e, accountId)))
            ]).pipe(map(([clp, exp]) => eras.map((era, index) => ({ clipped: clp[index], era, exposure: exp[index] }))))
            : of([]));
    }
    const ownExposure = /*#__PURE__*/ firstMemo((api, accountId, era) => api.derive.staking._ownExposures(accountId, [era], true));
    const ownExposures = /*#__PURE__*/ erasHistoricApplyAccount('_ownExposures');

    function _ownSlashes(instanceId, api) {
        return memo$1(instanceId, (accountId, eras, _withActive) => eras.length
            ? combineLatest([
                combineLatest(eras.map((e) => api.query.staking.validatorSlashInEra(e, accountId))),
                combineLatest(eras.map((e) => api.query.staking.nominatorSlashInEra(e, accountId)))
            ]).pipe(map(([vals, noms]) => eras.map((era, index) => ({
                era,
                total: vals[index].isSome
                    ? vals[index].unwrap()[1]
                    : noms[index].unwrapOrDefault()
            }))))
            : of([]));
    }
    const ownSlash = /*#__PURE__*/ firstMemo((api, accountId, era) => api.derive.staking._ownSlashes(accountId, [era], true));
    const ownSlashes = /*#__PURE__*/ erasHistoricApplyAccount('_ownSlashes');

    function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
        return {
            accountId: stashId,
            controllerId: controllerIdOpt?.unwrapOr(null) || null,
            exposure,
            nominators: nominatorsOpt.isSome
                ? nominatorsOpt.unwrap().targets
                : [],
            rewardDestination,
            stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
            stashId,
            validatorPrefs
        };
    }
    function getLedgers(api, optIds, { withLedger = false }) {
        const ids = optIds
            .filter((o) => withLedger && !!o && o.isSome)
            .map((o) => o.unwrap());
        const emptyLed = api.registry.createType('Option<StakingLedger>');
        return (ids.length
            ? combineLatest(ids.map((s) => api.query.staking.ledger(s)))
            : of([])).pipe(map((optLedgers) => {
            let offset = -1;
            return optIds.map((o) => o && o.isSome
                ? optLedgers[++offset] || emptyLed
                : emptyLed);
        }));
    }
    function getStashInfo(api, stashIds, activeEra, { withController, withDestination, withExposure, withLedger, withNominations, withPrefs }) {
        const emptyNoms = api.registry.createType('Option<Nominations>');
        const emptyRewa = api.registry.createType('RewardDestination');
        const emptyExpo = api.registry.createType('Exposure');
        const emptyPrefs = api.registry.createType('ValidatorPrefs');
        return combineLatest([
            withController || withLedger
                ? combineLatest(stashIds.map((s) => api.query.staking.bonded(s)))
                : of(stashIds.map(() => null)),
            withNominations
                ? combineLatest(stashIds.map((s) => api.query.staking.nominators(s)))
                : of(stashIds.map(() => emptyNoms)),
            withDestination
                ? combineLatest(stashIds.map((s) => api.query.staking.payee(s)))
                : of(stashIds.map(() => emptyRewa)),
            withPrefs
                ? combineLatest(stashIds.map((s) => api.query.staking.validators(s)))
                : of(stashIds.map(() => emptyPrefs)),
            withExposure
                ? combineLatest(stashIds.map((s) => api.query.staking.erasStakers(activeEra, s)))
                : of(stashIds.map(() => emptyExpo))
        ]);
    }
    function getBatch(api, activeEra, stashIds, flags) {
        return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(map((stakingLedgerOpts) => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
    }
    /**
     * @description From a stash, retrieve the controllerId and all relevant details
     */
    const query = /*#__PURE__*/ firstMemo((api, accountId, flags) => api.derive.staking.queryMulti([accountId], flags));
    function queryMulti(instanceId, api) {
        return memo$1(instanceId, (accountIds, flags) => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => {
            const stashIds = accountIds.map((a) => api.registry.createType('AccountId', a));
            return stashIds.length
                ? getBatch(api, activeEra, stashIds, flags)
                : of([]);
        })));
    }

    function _stakerExposures(instanceId, api) {
        return memo$1(instanceId, (accountIds, eras, withActive = false) => {
            const stakerIds = accountIds.map((a) => api.registry.createType('AccountId', a).toString());
            return api.derive.staking._erasExposure(eras, withActive).pipe(map((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {
                const isValidator = !!allValidators[stakerId];
                const validators = {};
                const nominating = allNominators[stakerId] || [];
                if (isValidator) {
                    validators[stakerId] = allValidators[stakerId];
                }
                else if (nominating) {
                    nominating.forEach(({ validatorId }) => {
                        validators[validatorId] = allValidators[validatorId];
                    });
                }
                return { era, isEmpty: !Object.keys(validators).length, isValidator, nominating, validators };
            }))));
        });
    }
    function stakerExposures(instanceId, api) {
        return memo$1(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
    }
    const stakerExposure = /*#__PURE__*/ firstMemo((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));

    function _stakerPoints(instanceId, api) {
        return memo$1(instanceId, (accountId, eras, withActive) => {
            const stakerId = api.registry.createType('AccountId', accountId).toString();
            return api.derive.staking._erasPoints(eras, withActive).pipe(map((points) => points.map(({ era, eraPoints, validators }) => ({
                era,
                eraPoints,
                points: validators[stakerId] || api.registry.createType('RewardPoint')
            }))));
        });
    }
    const stakerPoints = /*#__PURE__*/ erasHistoricApplyAccount('_stakerPoints');

    function _stakerPrefs(instanceId, api) {
        return memo$1(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map((e) => [e, accountId])).pipe(map((all) => all.map((validatorPrefs, index) => ({
            era: eras[index],
            validatorPrefs
        })))));
    }
    const stakerPrefs = /*#__PURE__*/ erasHistoricApplyAccount('_stakerPrefs');

    function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
        return exposures.map(({ era, isEmpty, isValidator, nominating, validators: eraValidators }) => {
            const { eraPoints, validators: allValPoints } = erasPoints.find((p) => p.era.eq(era)) || { eraPoints: BN_ZERO, validators: {} };
            const { eraReward } = erasRewards.find((r) => r.era.eq(era)) || { eraReward: api.registry.createType('Balance') };
            const { validators: allValPrefs } = erasPrefs.find((p) => p.era.eq(era)) || { validators: {} };
            const validators = {};
            const stakerId = stashId.toString();
            Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
                const valPoints = allValPoints[validatorId] || BN_ZERO;
                const valComm = allValPrefs[validatorId]?.commission.unwrap() || BN_ZERO;
                const expTotal = exposure.total?.unwrap() || BN_ZERO;
                let avail = BN_ZERO;
                let value;
                if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
                    avail = eraReward.mul(valPoints).div(eraPoints);
                    const valCut = valComm.mul(avail).div(BN_BILLION);
                    let staked;
                    if (validatorId === stakerId) {
                        staked = exposure.own.unwrap();
                    }
                    else {
                        const stakerExp = exposure.others.find(({ who }) => who.eq(stakerId));
                        staked = stakerExp
                            ? stakerExp.value.unwrap()
                            : BN_ZERO;
                    }
                    value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);
                }
                validators[validatorId] = {
                    total: api.registry.createType('Balance', avail),
                    value: api.registry.createType('Balance', value)
                };
            });
            return {
                era,
                eraReward,
                isEmpty,
                isValidator,
                nominating,
                validators
            };
        });
    }
    function allUniqValidators(rewards) {
        return rewards.reduce(([all, perStash], rewards) => {
            const uniq = [];
            perStash.push(uniq);
            rewards.forEach(({ validators }) => Object.keys(validators).forEach((validatorId) => {
                if (!uniq.includes(validatorId)) {
                    uniq.push(validatorId);
                    if (!all.includes(validatorId)) {
                        all.push(validatorId);
                    }
                }
            }));
            return [all, perStash];
        }, [[], []]);
    }
    function removeClaimed(validators, queryValidators, reward) {
        const rm = [];
        Object.keys(reward.validators).forEach((validatorId) => {
            const index = validators.indexOf(validatorId);
            if (index !== -1) {
                const valLedger = queryValidators[index].stakingLedger;
                if (valLedger?.claimedRewards.some((e) => reward.era.eq(e))) {
                    rm.push(validatorId);
                }
            }
        });
        rm.forEach((validatorId) => {
            delete reward.validators[validatorId];
        });
    }
    function filterRewards(eras, valInfo, { rewards, stakingLedger }) {
        const filter = eras.filter((e) => !stakingLedger.claimedRewards.some((s) => s.eq(e)));
        const validators = valInfo.map(([v]) => v);
        const queryValidators = valInfo.map(([, q]) => q);
        return rewards
            .filter(({ isEmpty }) => !isEmpty)
            .filter((reward) => {
            if (!filter.some((e) => reward.era.eq(e))) {
                return false;
            }
            removeClaimed(validators, queryValidators, reward);
            return true;
        })
            .filter(({ validators }) => Object.keys(validators).length !== 0)
            .map((reward) => objectSpread({}, reward, {
            nominators: reward.nominating.filter((n) => reward.validators[n.validatorId])
        }));
    }
    function _stakerRewardsEras(instanceId, api) {
        return memo$1(instanceId, (eras, withActive = false) => combineLatest([
            api.derive.staking._erasPoints(eras, withActive),
            api.derive.staking._erasPrefs(eras, withActive),
            api.derive.staking._erasRewards(eras, withActive)
        ]));
    }
    function _stakerRewards(instanceId, api) {
        return memo$1(instanceId, (accountIds, eras, withActive = false) => combineLatest([
            api.derive.staking.queryMulti(accountIds, { withLedger: true }),
            api.derive.staking._stakerExposures(accountIds, eras, withActive),
            api.derive.staking._stakerRewardsEras(eras, withActive)
        ]).pipe(switchMap(([queries, exposures, erasResult]) => {
            const allRewards = queries.map(({ stakingLedger, stashId }, index) => (!stashId || !stakingLedger)
                ? []
                : parseRewards(api, stashId, erasResult, exposures[index]));
            if (withActive) {
                return of(allRewards);
            }
            const [allValidators, stashValidators] = allUniqValidators(allRewards);
            return api.derive.staking.queryMulti(allValidators, { withLedger: true }).pipe(map((queriedVals) => queries.map(({ stakingLedger }, index) => filterRewards(eras, stashValidators[index]
                .map((validatorId) => [
                validatorId,
                queriedVals.find((q) => q.accountId.eq(validatorId))
            ])
                .filter((v) => !!v[1]), {
                rewards: allRewards[index],
                stakingLedger
            }))));
        })));
    }
    const stakerRewards = /*#__PURE__*/ firstMemo((api, accountId, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerRewards([accountId], eras, withActive))));
    function stakerRewardsMultiEras(instanceId, api) {
        return memo$1(instanceId, (accountIds, eras) => accountIds.length && eras.length
            ? api.derive.staking._stakerRewards(accountIds, eras, false)
            : of([]));
    }
    function stakerRewardsMulti(instanceId, api) {
        return memo$1(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
    }

    function _stakerSlashes(instanceId, api) {
        return memo$1(instanceId, (accountId, eras, withActive) => {
            const stakerId = api.registry.createType('AccountId', accountId).toString();
            return api.derive.staking._erasSlashes(eras, withActive).pipe(map((slashes) => slashes.map(({ era, nominators, validators }) => ({
                era,
                total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
            }))));
        });
    }
    const stakerSlashes = /*#__PURE__*/ erasHistoricApplyAccount('_stakerSlashes');

    function onBondedEvent(api) {
        let current = Date.now();
        return api.query.system.events().pipe(map((events) => {
            current = events.filter(({ event, phase }) => {
                try {
                    return phase.isApplyExtrinsic &&
                        event.section === 'staking' &&
                        event.method === 'Bonded';
                }
                catch {
                    return false;
                }
            })
                ? Date.now()
                : current;
            return current;
        }), startWith(current), drr({ skipTimeout: true }));
    }
    /**
     * @description Retrieve the list of all validator stashes
     */
    function stashes(instanceId, api) {
        return memo$1(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map((keys) => keys.map(({ args: [v] }) => v).filter((a) => a))));
    }

    function nextElected(instanceId, api) {
        return memo$1(instanceId, () => api.query.staking.erasStakers
            ? api.derive.session.indexes().pipe(
            // only populate for next era in the last session, so track both here - entries are not
            // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
            switchMap(({ currentEra }) => api.query.staking.erasStakers.keys(currentEra)), map((keys) => keys.map(({ args: [, accountId] }) => accountId)))
            : api.query.staking['currentElected']());
    }
    /**
     * @description Retrieve latest list of validators
     */
    function validators(instanceId, api) {
        return memo$1(instanceId, () => 
        // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
        // in all actual real-world deployed chains, it does create some confusion for limited template chains
        combineLatest([
            api.query.session
                ? api.query.session.validators()
                : of([]),
            api.query.staking
                ? api.derive.staking.nextElected()
                : of([])
        ]).pipe(map(([validators, nextElected]) => ({
            nextElected: nextElected.length
                ? nextElected
                : validators,
            validators
        }))));
    }

    const DEFAULT_FLAGS = { withController: true, withPrefs: true };
    function waitingInfo(instanceId, api) {
        return memo$1(instanceId, (flags = DEFAULT_FLAGS) => combineLatest([
            api.derive.staking.validators(),
            api.derive.staking.stashes()
        ]).pipe(switchMap(([{ nextElected }, stashes]) => {
            const elected = nextElected.map((a) => a.toString());
            const waiting = stashes.filter((v) => !elected.includes(v.toString()));
            return api.derive.staking.queryMulti(waiting, flags).pipe(map((info) => ({
                info,
                waiting
            })));
        })));
    }

    var staking = /*#__PURE__*/Object.freeze({
        __proto__: null,
        accounts: accounts,
        account: account,
        currentPoints: currentPoints,
        electedInfo: electedInfo,
        _eraExposure: _eraExposure,
        eraExposure: eraExposure,
        _erasExposure: _erasExposure,
        erasExposure: erasExposure,
        erasHistoric: erasHistoric,
        _erasPoints: _erasPoints,
        erasPoints: erasPoints,
        _eraPrefs: _eraPrefs,
        eraPrefs: eraPrefs,
        _erasPrefs: _erasPrefs,
        erasPrefs: erasPrefs,
        _erasRewards: _erasRewards,
        erasRewards: erasRewards,
        _eraSlashes: _eraSlashes,
        eraSlashes: eraSlashes,
        _erasSlashes: _erasSlashes,
        erasSlashes: erasSlashes,
        keys: keys,
        keysMulti: keysMulti,
        overview: overview,
        _ownExposures: _ownExposures,
        ownExposure: ownExposure,
        ownExposures: ownExposures,
        _ownSlashes: _ownSlashes,
        ownSlash: ownSlash,
        ownSlashes: ownSlashes,
        query: query,
        queryMulti: queryMulti,
        _stakerExposures: _stakerExposures,
        stakerExposures: stakerExposures,
        stakerExposure: stakerExposure,
        _stakerPoints: _stakerPoints,
        stakerPoints: stakerPoints,
        _stakerPrefs: _stakerPrefs,
        stakerPrefs: stakerPrefs,
        _stakerRewardsEras: _stakerRewardsEras,
        _stakerRewards: _stakerRewards,
        stakerRewards: stakerRewards,
        stakerRewardsMultiEras: stakerRewardsMultiEras,
        stakerRewardsMulti: stakerRewardsMulti,
        _stakerSlashes: _stakerSlashes,
        stakerSlashes: stakerSlashes,
        stashes: stashes,
        nextElected: nextElected,
        validators: validators,
        waitingInfo: waitingInfo
    });

    const members = /*#__PURE__*/ members$5('technicalCommittee');
    const hasProposals = /*#__PURE__*/ hasProposals$4('technicalCommittee');
    const proposal = /*#__PURE__*/ proposal$4('technicalCommittee');
    const proposalCount = /*#__PURE__*/ proposalCount$4('technicalCommittee');
    const proposalHashes = /*#__PURE__*/ proposalHashes$4('technicalCommittee');
    const proposals$1 = /*#__PURE__*/ proposals$6('technicalCommittee');
    const prime = /*#__PURE__*/ prime$4('technicalCommittee');

    var technicalCommittee = /*#__PURE__*/Object.freeze({
        __proto__: null,
        members: members,
        hasProposals: hasProposals,
        proposal: proposal,
        proposalCount: proposalCount,
        proposalHashes: proposalHashes,
        proposals: proposals$1,
        prime: prime
    });

    function parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount }) {
        const approvals = [];
        const proposals = [];
        const councilTreasury = councilProposals.filter(({ proposal }) => proposal && (api.tx.treasury.approveProposal.is(proposal) ||
            api.tx.treasury.rejectProposal.is(proposal)));
        allIds.forEach((id, index) => {
            if (allProposals[index].isSome) {
                const council = councilTreasury
                    .filter(({ proposal }) => proposal && id.eq(proposal.args[0]))
                    .sort((a, b) => a.proposal && b.proposal
                    ? a.proposal.method.localeCompare(b.proposal.method)
                    : a.proposal
                        ? -1
                        : 1);
                const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));
                const derived = { council, id, proposal: allProposals[index].unwrap() };
                if (isApproval) {
                    approvals.push(derived);
                }
                else {
                    proposals.push(derived);
                }
            }
        });
        return { approvals, proposalCount, proposals };
    }
    function retrieveProposals(api, proposalCount, approvalIds) {
        const proposalIds = [];
        const count = proposalCount.toNumber();
        for (let index = 0; index < count; index++) {
            if (!approvalIds.some((id) => id.eqn(index))) {
                proposalIds.push(api.registry.createType('ProposalIndex', index));
            }
        }
        const allIds = [...proposalIds, ...approvalIds];
        return combineLatest([
            api.query.treasury.proposals.multi(allIds),
            api.derive.council
                ? api.derive.council.proposals()
                : of([])
        ]).pipe(map(([allProposals, councilProposals]) => parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount })));
    }
    /**
     * @description Retrieve all active and approved treasury proposals, along with their info
     */
    function proposals(instanceId, api) {
        return memo$1(instanceId, () => api.query.treasury
            ? combineLatest([
                api.query.treasury.proposalCount(),
                api.query.treasury.approvals()
            ]).pipe(switchMap(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds)))
            : of({
                approvals: [],
                proposalCount: api.registry.createType('ProposalIndex'),
                proposals: []
            }));
    }

    var treasury = /*#__PURE__*/Object.freeze({
        __proto__: null,
        proposals: proposals
    });

    function events(instanceId, api) {
        return memo$1(instanceId, (blockHash) => combineLatest([
            api.rpc.chain.getBlock(blockHash),
            api.queryAt(blockHash).pipe(switchMap((queryAt) => queryAt.system.events()))
        ]).pipe(map(([block, events]) => ({ block, events }))));
    }

    const FALLBACK_MAX_HASH_COUNT = 250;
    const FALLBACK_PERIOD = new BN(6 * 1000);
    const MAX_FINALITY_LAG = new BN(5);
    const MORTAL_PERIOD = new BN(5 * 60 * 1000);

    function latestNonce(api, address) {
        return api.derive.balances.account(address).pipe(map(({ accountNonce }) => accountNonce));
    }
    function nextNonce(api, address) {
        return api.rpc.system?.accountNextIndex
            ? api.rpc.system.accountNextIndex(address)
            : latestNonce(api, address);
    }
    function signingHeader(api) {
        return combineLatest([
            api.rpc.chain.getHeader().pipe(switchMap((header) => 
            // check for chains at genesis (until block 1 is produced, e.g. 6s), since
            // we do need to allow transactions at chain start (also dev/seal chains)
            header.parentHash.isEmpty
                ? of(header)
                // in the case of the current block, we use the parent to minimize the
                // impact of forks on the system, but not completely remove it
                : api.rpc.chain.getHeader(header.parentHash).pipe(catchError(() => of(header))))),
            api.rpc.chain.getFinalizedHead().pipe(switchMap((hash) => api.rpc.chain.getHeader(hash).pipe(catchError(() => of(null)))))
        ]).pipe(map(([current, finalized]) => 
        // determine the hash to use, current when lag > max, else finalized
        !finalized || unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG)
            ? current
            : finalized));
    }
    function signingInfo(_instanceId, api) {
        // no memo, we want to do this fresh on each run
        return (address, nonce, era) => combineLatest([
            // retrieve nonce if none was specified
            isUndefined(nonce)
                ? latestNonce(api, address)
                : nonce === -1
                    ? nextNonce(api, address)
                    : of(api.registry.createType('Index', nonce)),
            // if no era (create) or era > 0 (mortal), do block retrieval
            (isUndefined(era) || (isNumber(era) && era > 0))
                ? signingHeader(api)
                : of(null)
        ]).pipe(map(([nonce, header]) => ({
            header,
            mortalLength: Math.min(api.consts.system?.blockHashCount?.toNumber() || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD
                .div(api.consts.babe?.expectedBlockTime ||
                api.consts.timestamp?.minimumPeriod.muln(2) ||
                FALLBACK_PERIOD)
                .iadd(MAX_FINALITY_LAG)
                .toNumber()),
            nonce
        })));
    }

    var tx = /*#__PURE__*/Object.freeze({
        __proto__: null,
        events: events,
        signingInfo: signingInfo
    });

    const derive = { accounts: accounts$1, alliance, bagsList, balances, bounties, chain, contracts, council, crowdloan, democracy, elections, imOnline, membership, parachains, session, society, staking, technicalCommittee, treasury, tx };

    const checks = {
        allianceMotion: {
            instances: ['allianceMotion'],
            methods: []
        },
        bagsList: {
            instances: ['voterBagsList', 'voterList', 'bagsList'],
            methods: [],
            withDetect: true
        },
        contracts: {
            instances: ['contracts'],
            methods: []
        },
        council: {
            instances: ['council'],
            methods: [],
            withDetect: true
        },
        crowdloan: {
            instances: ['crowdloan'],
            methods: []
        },
        democracy: {
            instances: ['democracy'],
            methods: []
        },
        elections: {
            instances: ['phragmenElection', 'electionsPhragmen', 'elections', 'council'],
            methods: [],
            withDetect: true
        },
        imOnline: {
            instances: ['imOnline'],
            methods: []
        },
        membership: {
            instances: ['membership'],
            methods: []
        },
        parachains: {
            instances: ['parachains', 'registrar'],
            methods: []
        },
        session: {
            instances: ['session'],
            methods: []
        },
        society: {
            instances: ['society'],
            methods: []
        },
        staking: {
            instances: ['staking'],
            methods: ['erasRewardPoints']
        },
        technicalCommittee: {
            instances: ['technicalCommittee'],
            methods: [],
            withDetect: true
        },
        treasury: {
            instances: ['treasury'],
            methods: []
        }
    };
    function getModuleInstances(api, specName, moduleName) {
        return api.registry.getModuleInstances(specName, moduleName) || [];
    }
    /**
     * Returns an object that will inject `api` into all the functions inside
     * `allSections`, and keep the object architecture of `allSections`.
     */
    /** @internal */
    function injectFunctions(instanceId, api, derives) {
        const result = {};
        const names = Object.keys(derives);
        const keys = Object.keys(api.query);
        const specName = api.runtimeVersion.specName;
        const filterKeys = (q) => keys.includes(q);
        const filterInstances = (q) => getModuleInstances(api, specName, q).some(filterKeys);
        const filterMethods = (all) => (m) => all.some((q) => keys.includes(q) && api.query[q][m]);
        const getKeys = (s) => Object.keys(derives[s]);
        const creator = (s, m) => derives[s][m](instanceId, api);
        const isIncluded = (c) => (!checks[c] || ((checks[c].instances.some(filterKeys) && (!checks[c].methods.length ||
            checks[c].methods.every(filterMethods(checks[c].instances)))) ||
            (checks[c].withDetect &&
                checks[c].instances.some(filterInstances))));
        for (let i = 0, count = names.length; i < count; i++) {
            const name = names[i];
            isIncluded(name) &&
                lazyDeriveSection(result, name, getKeys, creator);
        }
        return result;
    }
    /** @internal */
    function getAvailableDerives(instanceId, api, custom = {}) {
        return {
            ...injectFunctions(instanceId, api, derive),
            ...injectFunctions(instanceId, api, custom)
        };
    }

    /**
     * This is a section decorator which keeps all type information.
     */
    function decorateDeriveSections(decorateMethod, derives) {
        const getKeys = (s) => Object.keys(derives[s]);
        const creator = (s, m) => decorateMethod(derives[s][m]);
        const result = {};
        const names = Object.keys(derives);
        for (let i = 0, count = names.length; i < count; i++) {
            lazyDeriveSection(result, names[i], getKeys, creator);
        }
        return result;
    }

    const recordIdentity = (record) => record;
    function filterAndApply(events, section, methods, onFound) {
        return events
            .filter(({ event }) => section === event.section &&
            methods.includes(event.method))
            .map((record) => onFound(record));
    }
    function getDispatchError({ event: { data: [dispatchError] } }) {
        return dispatchError;
    }
    function getDispatchInfo({ event: { data, method } }) {
        return method === 'ExtrinsicSuccess'
            ? data[0]
            : data[1];
    }
    function extractError(events = []) {
        return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];
    }
    function extractInfo(events = []) {
        return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];
    }
    class SubmittableResult {
        constructor({ blockNumber, dispatchError, dispatchInfo, events, internalError, status, txHash, txIndex }) {
            this.dispatchError = dispatchError || extractError(events);
            this.dispatchInfo = dispatchInfo || extractInfo(events);
            this.events = events || [];
            this.internalError = internalError;
            this.status = status;
            this.txHash = txHash;
            this.txIndex = txIndex;
            this.blockNumber = blockNumber;
        }
        get isCompleted() {
            return this.isError || this.status.isInBlock || this.status.isFinalized;
        }
        get isError() {
            return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
        }
        get isFinalized() {
            return this.status.isFinalized;
        }
        get isInBlock() {
            return this.status.isInBlock;
        }
        get isWarning() {
            return this.status.isRetracted;
        }
        /**
         * @description Filters EventRecords for the specified method & section (there could be multiple)
         */
        filterRecords(section, method) {
            return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);
        }
        /**
         * @description Finds an EventRecord for the specified method & section
         */
        findRecord(section, method) {
            return this.filterRecords(section, method)[0];
        }
        /**
         * @description Creates a human representation of the output
         */
        toHuman(isExtended) {
            return {
                dispatchError: this.dispatchError?.toHuman(),
                dispatchInfo: this.dispatchInfo?.toHuman(),
                events: this.events.map((e) => e.toHuman(isExtended)),
                internalError: this.internalError?.message.toString(),
                status: this.status.toHuman(isExtended)
            };
        }
    }

    function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
        if (!header) {
            if (partialOptions.era && !partialOptions.blockHash) {
                throw new Error('Expected blockHash to be passed alongside non-immortal era options');
            }
            if (isNumber(partialOptions.era)) {
                // since we have no header, it is immortal, remove any option overrides
                // so we only supply the genesisHash and no era to the construction
                delete partialOptions.era;
                delete partialOptions.blockHash;
            }
            return makeSignOptions(api, partialOptions, { nonce });
        }
        return makeSignOptions(api, partialOptions, {
            blockHash: header.hash,
            era: registry.createTypeUnsafe('ExtrinsicEra', [{
                    current: header.number,
                    period: partialOptions.era || mortalLength
                }]),
            nonce
        });
    }
    function makeSignAndSendOptions(partialOptions, statusCb) {
        let options = {};
        if (isFunction$1(partialOptions)) {
            statusCb = partialOptions;
        }
        else {
            options = objectSpread({}, partialOptions);
        }
        return [options, statusCb];
    }
    function makeSignOptions(api, partialOptions, extras) {
        return objectSpread({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });
    }
    function optionsOrNonce(partialOptions = {}) {
        return isBn(partialOptions) || isNumber(partialOptions)
            ? { nonce: partialOptions }
            : partialOptions;
    }
    function createClass({ api, apiType, blockHash, decorateMethod }) {
        // an instance of the base extrinsic for us to extend
        const ExtrinsicBase = api.registry.createClass('Extrinsic');
        class Submittable extends ExtrinsicBase {
            constructor(registry, extrinsic) {
                super(registry, extrinsic, { version: api.extrinsicType });
                this.__internal__transformResult = (identity$2);
                this.__internal__observeSign = (account, partialOptions) => {
                    const address = isKeyringPair(account) ? account.address : account.toString();
                    const options = optionsOrNonce(partialOptions);
                    return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async (signingInfo) => {
                        const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);
                        let updateId = -1;
                        if (isKeyringPair(account)) {
                            this.sign(account, eraOptions);
                        }
                        else {
                            updateId = await this.__internal__signViaSigner(address, eraOptions, signingInfo.header);
                        }
                        return { options: eraOptions, updateId };
                    }));
                };
                this.__internal__observeStatus = (txHash, status) => {
                    if (!status.isFinalized && !status.isInBlock) {
                        return of(this.__internal__transformResult(new SubmittableResult({
                            status,
                            txHash
                        })));
                    }
                    const blockHash = status.isInBlock
                        ? status.asInBlock
                        : status.asFinalized;
                    return api.derive.tx.events(blockHash).pipe(map(({ block, events }) => this.__internal__transformResult(new SubmittableResult({
                        ...filterEvents(txHash, block, events, status),
                        status,
                        txHash
                    }))), catchError((internalError) => of(this.__internal__transformResult(new SubmittableResult({
                        internalError,
                        status,
                        txHash
                    })))));
                };
                this.__internal__observeSend = (info) => {
                    return api.rpc.author.submitExtrinsic(this).pipe(tap((hash) => {
                        this.__internal__updateSigner(hash, info);
                    }));
                };
                this.__internal__observeSubscribe = (info) => {
                    const txHash = this.hash;
                    return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap((status) => this.__internal__observeStatus(txHash, status)), tap((status) => {
                        this.__internal__updateSigner(status, info);
                    }));
                };
                this.__internal__signViaSigner = async (address, options, header) => {
                    const signer = options.signer || api.signer;
                    if (!signer) {
                        throw new Error('No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
                    }
                    const payload = this.registry.createTypeUnsafe('SignerPayload', [objectSpread({}, options, {
                            address,
                            blockNumber: header ? header.number : 0,
                            method: this.method
                        })]);
                    let result;
                    if (isFunction$1(signer.signPayload)) {
                        result = await signer.signPayload(payload.toPayload());
                    }
                    else if (isFunction$1(signer.signRaw)) {
                        result = await signer.signRaw(payload.toRaw());
                    }
                    else {
                        throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
                    }
                    // Here we explicitly call `toPayload()` again instead of working with an object
                    // (reference) as passed to the signer. This means that we are sure that the
                    // payload data is not modified from our inputs, but the signer
                    super.addSignature(address, result.signature, payload.toPayload());
                    return result.id;
                };
                this.__internal__updateSigner = (status, info) => {
                    if (info && (info.updateId !== -1)) {
                        const { options, updateId } = info;
                        const signer = options.signer || api.signer;
                        if (signer && isFunction$1(signer.update)) {
                            signer.update(updateId, status);
                        }
                    }
                };
                this.__internal__ignoreStatusCb = apiType === 'rxjs';
            }
            get hasDryRun() {
                return isFunction$1(api.rpc.system?.dryRun);
            }
            get hasPaymentInfo() {
                return isFunction$1(api.call.transactionPaymentApi?.queryInfo);
            }
            // dry run an extrinsic
            dryRun(account, optionsOrHash) {
                if (!this.hasDryRun) {
                    throw new Error('The system.dryRun RPC call is not available in your environment');
                }
                if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                    return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
                }
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(() => this.__internal__observeSign(account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
            }
            // calculate the payment info for this transaction (if signed and submitted)
            paymentInfo(account, optionsOrHash) {
                if (!this.hasPaymentInfo) {
                    throw new Error('The transactionPaymentApi.queryInfo runtime call is not available in your environment');
                }
                if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                    return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap((callAt) => {
                        const u8a = this.toU8a();
                        return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);
                    })));
                }
                const [allOptions] = makeSignAndSendOptions(optionsOrHash);
                const address = isKeyringPair(account) ? account.address : account.toString();
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap((signingInfo) => {
                    // setup our options (same way as in signAndSend)
                    const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);
                    const signOptions = makeSignOptions(api, eraOptions, {});
                    // 1. Don't use the internal objects inside the new tx (hence toU8a)
                    // 2. Don't override the data from existing signed extrinsics
                    // 3. Ensure that this object stays intact, with no new sign after operation
                    const u8a = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();
                    return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);
                })))();
            }
            // send implementation for both immediate Hash and statusCb variants
            send(statusCb) {
                const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(isSubscription
                    ? this.__internal__observeSubscribe
                    : this.__internal__observeSend)(statusCb);
            }
            /**
             * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
             */
            signAsync(account, partialOptions) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(() => this.__internal__observeSign(account, partialOptions).pipe(map(() => this)))();
            }
            // signAndSend implementation for all 3 cases above
            signAndSend(account, partialOptions, optionalStatusCb) {
                const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
                const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
                return decorateMethod(() => this.__internal__observeSign(account, options).pipe(switchMap((info) => isSubscription
                    ? this.__internal__observeSubscribe(info)
                    : this.__internal__observeSend(info))) // FIXME This is wrong, SubmittableResult is _not_ a codec
                )(statusCb);
            }
            // adds a transform to the result, applied before result is returned
            withResultTransform(transform) {
                this.__internal__transformResult = transform;
                return this;
            }
        }
        return Submittable;
    }

    function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
        const Submittable = createClass({ api, apiType, blockHash, decorateMethod });
        return (extrinsic) => new Submittable(registry || api.registry, extrinsic);
    }

    function findCall(registry, callIndex) {
        return registry.findMetaCall(u8aToU8a(callIndex));
    }
    function findError(registry, errorIndex) {
        return registry.findMetaError(u8aToU8a(errorIndex));
    }

    const typesChain = {};

    const sharedTypes$5 = {
        // Anchor
        AnchorData: {
            anchoredBlock: 'u64',
            docRoot: 'H256',
            id: 'H256'
        },
        DispatchErrorModule: 'DispatchErrorModuleU8',
        PreCommitData: {
            expirationBlock: 'u64',
            identity: 'H256',
            signingRoot: 'H256'
        },
        // Fees
        Fee: {
            key: 'Hash',
            price: 'Balance'
        },
        // MultiAccount
        MultiAccountData: {
            deposit: 'Balance',
            depositor: 'AccountId',
            signatories: 'Vec<AccountId>',
            threshold: 'u16'
        },
        // Bridge
        ChainId: 'u8',
        DepositNonce: 'u64',
        ResourceId: '[u8; 32]',
        'chainbridge::ChainId': 'u8',
        // NFT
        RegistryId: 'H160',
        TokenId: 'U256',
        AssetId: {
            registryId: 'RegistryId',
            tokenId: 'TokenId'
        },
        AssetInfo: {
            metadata: 'Bytes'
        },
        MintInfo: {
            anchorId: 'Hash',
            proofs: 'Vec<ProofMint>',
            staticHashes: '[Hash; 3]'
        },
        Proof: {
            leafHash: 'H256',
            sortedHashes: 'H256'
        },
        ProofMint: {
            hashes: 'Vec<Hash>',
            property: 'Bytes',
            salt: '[u8; 32]',
            value: 'Bytes'
        },
        RegistryInfo: {
            fields: 'Vec<Bytes>',
            ownerCanBurn: 'bool'
        },
        ProxyType: {
            _enum: [
                'Any',
                'NonTransfer',
                'Governance',
                'Staking',
                'NonProxy'
            ]
        }
    };
    const standaloneTypes = {
        ...sharedTypes$5,
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'LookupSource',
        LookupSource: 'IndicesLookupSource',
        Multiplier: 'Fixed64',
        RefCount: 'RefCountTo259'
    };
    const versioned$8 = [
        {
            minmax: [240, 243],
            types: {
                ...standaloneTypes,
                ProxyType: {
                    _enum: [
                        'Any',
                        'NonTransfer',
                        'Governance',
                        'Staking',
                        'Vesting'
                    ]
                }
            }
        },
        {
            minmax: [244, 999],
            types: { ...standaloneTypes }
        },
        {
            minmax: [1000, undefined],
            types: { ...sharedTypes$5 }
        }
    ];

    const sharedTypes$4 = {
        CompactAssignments: 'CompactAssignmentsWith24',
        DispatchErrorModule: 'DispatchErrorModuleU8',
        RawSolution: 'RawSolutionWith24',
        Keys: 'SessionKeys6',
        ProxyType: {
            _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement', 'CancelProxy', 'Auction']
        },
        Weight: 'WeightV1'
    };
    const addrIndicesTypes = {
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'LookupSource',
        CompactAssignments: 'CompactAssignmentsWith16',
        DispatchErrorModule: 'DispatchErrorModuleU8',
        RawSolution: 'RawSolutionWith16',
        Keys: 'SessionKeys5',
        LookupSource: 'IndicesLookupSource',
        ValidatorPrefs: 'ValidatorPrefsWithCommission'
    };
    const addrAccountIdTypes$2 = {
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'AccountId',
        CompactAssignments: 'CompactAssignmentsWith16',
        DispatchErrorModule: 'DispatchErrorModuleU8',
        RawSolution: 'RawSolutionWith16',
        Keys: 'SessionKeys5',
        LookupSource: 'AccountId',
        ValidatorPrefs: 'ValidatorPrefsWithCommission'
    };
    const versioned$7 = [
        {
            // 1020 is first CC3
            minmax: [1019, 1031],
            types: {
                ...addrIndicesTypes,
                BalanceLock: 'BalanceLockTo212',
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchError: 'DispatchErrorTo198',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                IdentityInfo: 'IdentityInfoTo198',
                Keys: 'SessionKeys5',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                ReferendumInfo: 'ReferendumInfoTo239',
                Scheduled: 'ScheduledTo254',
                SlashingSpans: 'SlashingSpansTo204',
                StakingLedger: 'StakingLedgerTo223',
                Votes: 'VotesTo230',
                Weight: 'u32'
            }
        },
        {
            minmax: [1032, 1042],
            types: {
                ...addrIndicesTypes,
                BalanceLock: 'BalanceLockTo212',
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                Keys: 'SessionKeys5',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                ReferendumInfo: 'ReferendumInfoTo239',
                Scheduled: 'ScheduledTo254',
                SlashingSpans: 'SlashingSpansTo204',
                StakingLedger: 'StakingLedgerTo223',
                Votes: 'VotesTo230',
                Weight: 'u32'
            }
        },
        {
            // actual at 1045 (1043-1044 is dev)
            minmax: [1043, 1045],
            types: {
                ...addrIndicesTypes,
                BalanceLock: 'BalanceLockTo212',
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                Keys: 'SessionKeys5',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                ReferendumInfo: 'ReferendumInfoTo239',
                Scheduled: 'ScheduledTo254',
                StakingLedger: 'StakingLedgerTo223',
                Votes: 'VotesTo230',
                Weight: 'u32'
            }
        },
        {
            minmax: [1046, 1049],
            types: {
                ...sharedTypes$4,
                ...addrAccountIdTypes$2,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                ReferendumInfo: 'ReferendumInfoTo239',
                Scheduled: 'ScheduledTo254',
                StakingLedger: 'StakingLedgerTo223',
                Weight: 'u32'
            }
        },
        {
            minmax: [1050, 1054],
            types: {
                ...sharedTypes$4,
                ...addrAccountIdTypes$2,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                ReferendumInfo: 'ReferendumInfoTo239',
                Scheduled: 'ScheduledTo254',
                StakingLedger: 'StakingLedgerTo240',
                Weight: 'u32'
            }
        },
        {
            minmax: [1055, 1056],
            types: {
                ...sharedTypes$4,
                ...addrAccountIdTypes$2,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                Scheduled: 'ScheduledTo254',
                StakingLedger: 'StakingLedgerTo240',
                Weight: 'u32'
            }
        },
        {
            minmax: [1057, 1061],
            types: {
                ...sharedTypes$4,
                ...addrAccountIdTypes$2,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                // Last 100% known problematic runtime range - this quite possibly need to
                // apply to more runtime ranges that follow, we just don't know how far this
                // should be applied to
                //
                // TL;DR whack-a-mole since this was not histrically checked
                //
                // See https://github.com/polkadot-js/api/issues/5618#issuecomment-1530970316
                Scheduled: 'ScheduledTo254'
            }
        },
        {
            minmax: [1062, 2012],
            types: {
                ...sharedTypes$4,
                ...addrAccountIdTypes$2,
                CompactAssignments: 'CompactAssignmentsTo257',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [2013, 2022],
            types: {
                ...sharedTypes$4,
                ...addrAccountIdTypes$2,
                CompactAssignments: 'CompactAssignmentsTo257',
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [2023, 2024],
            types: {
                ...sharedTypes$4,
                ...addrAccountIdTypes$2,
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [2025, 2027],
            types: {
                ...sharedTypes$4,
                ...addrAccountIdTypes$2
            }
        },
        {
            minmax: [2028, 2029],
            types: {
                ...sharedTypes$4,
                AccountInfo: 'AccountInfoWithDualRefCount',
                CompactAssignments: 'CompactAssignmentsWith16',
                RawSolution: 'RawSolutionWith16'
            }
        },
        {
            minmax: [2030, 9000],
            types: {
                ...sharedTypes$4,
                CompactAssignments: 'CompactAssignmentsWith16',
                RawSolution: 'RawSolutionWith16'
            }
        },
        {
            minmax: [9010, 9099],
            types: {
                ...sharedTypes$4,
                ...mapXcmTypes('V0')
            }
        },
        {
            // jump from 9100 to 9110, however align with Rococo
            minmax: [9100, 9105],
            types: {
                ...sharedTypes$4,
                ...mapXcmTypes('V1')
            }
        },
        {
            // metadata v14
            minmax: [9106, undefined],
            types: {
                Weight: 'WeightV1'
            }
        }
        // ,
        // {
        //   // weight v2 introduction
        //   minmax: [9300, undefined],
        //   types: {
        //     Weight: 'WeightV2'
        //   }
        // }
    ];

    const versioned$6 = [
        {
            minmax: [0, undefined],
            types: {
                // nothing, API tracks master
                // (v2 weights are not yet the default)
                Weight: 'WeightV2'
            }
        }
    ];

    const versioned$5 = [
        {
            minmax: [0, undefined],
            types: {
                // nothing, API tracks master
                // (v2 weights are not yet the default)
                Weight: 'WeightV2'
            }
        }
    ];

    const sharedTypes$3 = {
        CompactAssignments: 'CompactAssignmentsWith16',
        DispatchErrorModule: 'DispatchErrorModuleU8',
        RawSolution: 'RawSolutionWith16',
        Keys: 'SessionKeys6',
        ProxyType: {
            _enum: {
                Any: 0,
                NonTransfer: 1,
                Governance: 2,
                Staking: 3,
                UnusedSudoBalances: 4,
                IdentityJudgement: 5,
                CancelProxy: 6,
                Auction: 7
            }
        },
        Weight: 'WeightV1'
    };
    const addrAccountIdTypes$1 = {
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'AccountId',
        DispatchErrorModule: 'DispatchErrorModuleU8',
        Keys: 'SessionKeys5',
        LookupSource: 'AccountId',
        ValidatorPrefs: 'ValidatorPrefsWithCommission'
    };
    const versioned$4 = [
        {
            minmax: [0, 12],
            types: {
                ...sharedTypes$3,
                ...addrAccountIdTypes$1,
                CompactAssignments: 'CompactAssignmentsTo257',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [13, 22],
            types: {
                ...sharedTypes$3,
                ...addrAccountIdTypes$1,
                CompactAssignments: 'CompactAssignmentsTo257',
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [23, 24],
            types: {
                ...sharedTypes$3,
                ...addrAccountIdTypes$1,
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [25, 27],
            types: {
                ...sharedTypes$3,
                ...addrAccountIdTypes$1
            }
        },
        {
            minmax: [28, 29],
            types: {
                ...sharedTypes$3,
                AccountInfo: 'AccountInfoWithDualRefCount'
            }
        },
        {
            minmax: [30, 9109],
            types: {
                ...sharedTypes$3
            }
        },
        {
            // metadata v14
            minmax: [9110, undefined],
            types: {
                Weight: 'WeightV1'
            }
        }
        // ,
        // {
        //   // weight v2 introduction
        //   minmax: [9300, undefined],
        //   types: {
        //     Weight: 'WeightV2'
        //   }
        // }
    ];

    /* eslint-disable sort-keys */
    const sharedTypes$2 = {
        DispatchErrorModule: 'DispatchErrorModuleU8',
        FullIdentification: '()',
        Keys: 'SessionKeys7B',
        Weight: 'WeightV1'
    };
    const versioned$3 = [
        {
            minmax: [0, 200],
            types: {
                ...sharedTypes$2,
                AccountInfo: 'AccountInfoWithDualRefCount',
                Address: 'AccountId',
                LookupSource: 'AccountId'
            }
        },
        {
            minmax: [201, 214],
            types: {
                ...sharedTypes$2,
                AccountInfo: 'AccountInfoWithDualRefCount'
            }
        },
        {
            minmax: [215, 228],
            types: {
                ...sharedTypes$2,
                Keys: 'SessionKeys6'
            }
        },
        {
            minmax: [229, 9099],
            types: {
                ...sharedTypes$2,
                ...mapXcmTypes('V0')
            }
        },
        {
            minmax: [9100, 9105],
            types: {
                ...sharedTypes$2,
                ...mapXcmTypes('V1')
            }
        },
        {
            // metadata v14
            minmax: [9106, undefined],
            types: {
                Weight: 'WeightV1'
            }
        }
        // ,
        // {
        //   // weight v2 introduction
        //   minmax: [9300, undefined],
        //   types: {
        //     Weight: 'WeightV2'
        //   }
        // }
    ];

    const versioned$2 = [
        {
            minmax: [0, undefined],
            types: {
            // nothing, limited runtime
            }
        }
    ];

    const sharedTypes$1 = {
        DispatchErrorModule: 'DispatchErrorModuleU8',
        TAssetBalance: 'u128',
        ProxyType: {
            _enum: [
                'Any',
                'NonTransfer',
                'CancelProxy',
                'Assets',
                'AssetOwner',
                'AssetManager',
                'Staking'
            ]
        },
        Weight: 'WeightV1'
    };
    const versioned$1 = [
        {
            minmax: [0, 3],
            types: {
                // Enum was modified mid-flight -
                // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
                DispatchError: 'DispatchErrorPre6First',
                ...sharedTypes$1,
                ...mapXcmTypes('V0')
            }
        },
        {
            minmax: [4, 5],
            types: {
                // As above, see https://github.com/polkadot-js/api/issues/5301
                DispatchError: 'DispatchErrorPre6First',
                ...sharedTypes$1,
                ...mapXcmTypes('V1')
            }
        },
        {
            // metadata V14
            minmax: [500, undefined],
            types: {
                Weight: 'WeightV1'
            }
        }
        // ,
        // {
        //   // weight v2 introduction
        //   minmax: [9300, undefined],
        //   types: {
        //     Weight: 'WeightV2'
        //   }
        // }
    ];

    const sharedTypes = {
        // 16 validators
        CompactAssignments: 'CompactAssignmentsWith16',
        DispatchErrorModule: 'DispatchErrorModuleU8',
        RawSolution: 'RawSolutionWith16',
        // general
        Keys: 'SessionKeys6',
        ProxyType: {
            _enum: ['Any', 'NonTransfer', 'Staking', 'SudoBalances', 'IdentityJudgement', 'CancelProxy']
        },
        Weight: 'WeightV1'
    };
    const addrAccountIdTypes = {
        AccountInfo: 'AccountInfoWithRefCount',
        Address: 'AccountId',
        CompactAssignments: 'CompactAssignmentsWith16',
        DispatchErrorModule: 'DispatchErrorModuleU8',
        LookupSource: 'AccountId',
        Keys: 'SessionKeys5',
        RawSolution: 'RawSolutionWith16',
        ValidatorPrefs: 'ValidatorPrefsWithCommission'
    };
    const versioned = [
        {
            minmax: [1, 2],
            types: {
                ...sharedTypes,
                ...addrAccountIdTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                Multiplier: 'Fixed64',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259',
                Weight: 'u32'
            }
        },
        {
            minmax: [3, 22],
            types: {
                ...sharedTypes,
                ...addrAccountIdTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                OpenTip: 'OpenTipTo225',
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [23, 42],
            types: {
                ...sharedTypes,
                ...addrAccountIdTypes,
                CompactAssignments: 'CompactAssignmentsTo257',
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [43, 44],
            types: {
                ...sharedTypes,
                ...addrAccountIdTypes,
                DispatchInfo: 'DispatchInfoTo244',
                Heartbeat: 'HeartbeatTo244',
                RefCount: 'RefCountTo259'
            }
        },
        {
            minmax: [45, 47],
            types: {
                ...sharedTypes,
                ...addrAccountIdTypes
            }
        },
        {
            minmax: [48, 49],
            types: {
                ...sharedTypes,
                AccountInfo: 'AccountInfoWithDualRefCount'
            }
        },
        {
            minmax: [50, 9099],
            types: {
                ...sharedTypes,
                ...mapXcmTypes('V0')
            }
        },
        {
            minmax: [9100, 9105],
            types: {
                ...sharedTypes,
                ...mapXcmTypes('V1')
            }
        },
        {
            // metadata v14
            minmax: [9106, undefined],
            types: {
                Weight: 'WeightV1'
            }
        }
        // ,
        // {
        //   // weight v2 introduction
        //   minmax: [9300, undefined],
        //   types: {
        //     Weight: 'WeightV2'
        //   }
        // }
    ];

    const typesSpec = {
        'centrifuge-chain': versioned$8,
        kusama: versioned$7,
        node: versioned$6,
        'node-template': versioned$5,
        polkadot: versioned$4,
        rococo: versioned$3,
        shell: versioned$2,
        statemine: versioned$1,
        statemint: versioned$1,
        westend: versioned,
        westmint: versioned$1
    };

    const upgrades$3 = [
        [
            0,
            1020,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            26669,
            1021,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            38245,
            1022,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            54248,
            1023,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            59659,
            1024,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            67651,
            1025,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            82191,
            1027,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            83238,
            1028,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            101503,
            1029,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            203466,
            1030,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            295787,
            1031,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            461692,
            1032,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            504329,
            1033,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            569327,
            1038,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    1
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            587687,
            1039,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            653183,
            1040,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            693488,
            1042,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            901442,
            1045,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1375086,
            1050,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1445458,
            1051,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1472960,
            1052,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1475648,
            1053,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1491596,
            1054,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1574408,
            1055,
            [
                [
                    "0xdf6acb689907609b",
                    2
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    1
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2064961,
            1058,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2201991,
            1062,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2671528,
            2005,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2704202,
            2007,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2728002,
            2008,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2832534,
            2011,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2962294,
            2012,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            3240000,
            2013,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            3274408,
            2015,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            3323565,
            2019,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            3534175,
            2022,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            3860281,
            2023,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            4143129,
            2024,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            4401242,
            2025,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            4841367,
            2026,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5961600,
            2027,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            6137912,
            2028,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            6561855,
            2029,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7100891,
            2030,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7468792,
            9010,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7668600,
            9030,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7812476,
            9040,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            8010981,
            9050,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            8073833,
            9070,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            8555825,
            9080,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            8945245,
            9090,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            9611377,
            9100,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            9625129,
            9111,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            9866422,
            9122,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10403784,
            9130,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10960765,
            9150,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11006614,
            9151,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11404482,
            9160,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11601803,
            9170,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            12008022,
            9180,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            12405451,
            9190,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            12665416,
            9200,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            12909508,
            9220,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            13109752,
            9230,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            13555777,
            9250,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            13727747,
            9260,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            14248044,
            9271,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            14433840,
            9280,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            14645900,
            9291,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            15048375,
            9300,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            15426015,
            9320,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    2
                ],
                [
                    "0xf3ff14d5ab527059",
                    2
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            15680713,
            9340,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    2
                ],
                [
                    "0xf3ff14d5ab527059",
                    2
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            15756296,
            9350,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    2
                ],
                [
                    "0xf3ff14d5ab527059",
                    2
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ]
    ];

    const upgrades$2 = [
        [
            0,
            0,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            29231,
            1,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            188836,
            5,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            199405,
            6,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            214264,
            7,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            244358,
            8,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            303079,
            9,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            314201,
            10,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            342400,
            11,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            443963,
            12,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            528470,
            13,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            687751,
            14,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            746085,
            15,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            787923,
            16,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            799302,
            17,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1205128,
            18,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1603423,
            23,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1733218,
            24,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2005673,
            25,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2436698,
            26,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            3613564,
            27,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            3899547,
            28,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            4345767,
            29,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            4876134,
            30,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5661442,
            9050,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            6321619,
            9080,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            6713249,
            9090,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7217907,
            9100,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7229126,
            9110,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7560558,
            9122,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            8115869,
            9140,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            8638103,
            9151,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            9280179,
            9170,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            9738717,
            9180,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10156856,
            9190,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10458576,
            9200,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10655116,
            9220,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10879371,
            9230,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11328884,
            9250,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11532856,
            9260,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11933818,
            9270,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            12217535,
            9280,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ]
            ]
        ],
        [
            12245277,
            9281,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ]
            ]
        ],
        [
            12532644,
            9291,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ]
            ]
        ],
        [
            12876189,
            9300,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ]
            ]
        ]
    ];

    const upgrades$1 = [
        [
            214356,
            4,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    1
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            392764,
            7,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            409740,
            8,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            809976,
            20,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            877581,
            24,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            879238,
            25,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            889472,
            26,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            902937,
            27,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            932751,
            28,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            991142,
            29,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1030162,
            31,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1119657,
            32,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1199282,
            33,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1342534,
            34,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1392263,
            35,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1431703,
            36,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1433369,
            37,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            1490972,
            41,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2087397,
            43,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2316688,
            44,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            2549864,
            45,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            3925782,
            46,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            3925843,
            47,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            4207800,
            48,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            4627944,
            49,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5124076,
            50,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5478664,
            900,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5482450,
            9000,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    4
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5584305,
            9010,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5784566,
            9030,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5879822,
            9031,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5896856,
            9032,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            5897316,
            9033,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            6117927,
            9050,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            6210274,
            9070,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    2
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            6379314,
            9080,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    2
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            6979141,
            9090,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7568453,
            9100,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7766394,
            9111,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7911691,
            9120,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7968866,
            9121,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            7982889,
            9122,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            8514322,
            9130,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            9091726,
            9140,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            9091774,
            9150,
            [
                [
                    "0xdf6acb689907609b",
                    3
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    1
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            9406726,
            9160,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            9921066,
            9170,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10007115,
            9180,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    5
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10480973,
            9190,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10578091,
            9200,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10678509,
            9210,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            10811001,
            9220,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11096116,
            9230,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11409279,
            9250,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11584820,
            9251,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11716837,
            9260,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11876919,
            9261,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ]
            ]
        ],
        [
            11987927,
            9270,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            12077324,
            9271,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            12301871,
            9280,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            12604343,
            9290,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    2
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            12841034,
            9300,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            13128237,
            9310,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    1
                ],
                [
                    "0xf3ff14d5ab527059",
                    1
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            13272363,
            9320,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    2
                ],
                [
                    "0xf3ff14d5ab527059",
                    2
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            13483497,
            9330,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    2
                ],
                [
                    "0xf3ff14d5ab527059",
                    2
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            13649433,
            9340,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    2
                ],
                [
                    "0xf3ff14d5ab527059",
                    2
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ],
        [
            13761100,
            9350,
            [
                [
                    "0xdf6acb689907609b",
                    4
                ],
                [
                    "0x37e397fc7c91f5e4",
                    1
                ],
                [
                    "0x40fe3ad401f8959a",
                    6
                ],
                [
                    "0xd2bc9897eed08f15",
                    3
                ],
                [
                    "0xf78b278be53f454c",
                    2
                ],
                [
                    "0xaf2c0297a23e6d3d",
                    3
                ],
                [
                    "0x49eaaf1b548a0cb0",
                    1
                ],
                [
                    "0x91d5df18b0d2cf58",
                    1
                ],
                [
                    "0xed99c5acb25eedf5",
                    3
                ],
                [
                    "0xcbca25e39f142387",
                    2
                ],
                [
                    "0x687ad44ad37f03c2",
                    1
                ],
                [
                    "0xab3c0572291feb8b",
                    1
                ],
                [
                    "0xbc9d89904f5b923f",
                    1
                ],
                [
                    "0x37c8bb1350a9a2a8",
                    2
                ],
                [
                    "0xf3ff14d5ab527059",
                    2
                ],
                [
                    "0x17a6bc0d0062aeb3",
                    1
                ]
            ]
        ]
    ];

    var allKnown = /*#__PURE__*/Object.freeze({
        __proto__: null,
        kusama: upgrades$3,
        polkadot: upgrades$2,
        westend: upgrades$1
    });

    const NET_EXTRA = {
        westend: {
            genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']
        }
    };
    /** @internal */
    function mapRaw([network, versions]) {
        const chain = selectableNetworks.find((n) => n.network === network) || NET_EXTRA[network];
        if (!chain) {
            throw new Error(`Unable to find info for chain ${network}`);
        }
        return {
            genesisHash: hexToU8a(chain.genesisHash[0]),
            network,
            versions: versions.map(([blockNumber, specVersion, apis]) => ({
                apis,
                blockNumber: new BN(blockNumber),
                specVersion: new BN(specVersion)
            }))
        };
    }
    const upgrades = Object.entries(allKnown).map(mapRaw);

    /**
     * @description Perform the callback function using the stringified spec/chain
     * @internal
     * */
    function withNames(chainName, specName, fn) {
        return fn(chainName.toString(), specName.toString());
    }
    /**
     * @descriptionFflatten a VersionedType[] into a Record<string, string>
     * @internal
     * */
    function filterVersions(versions = [], specVersion) {
        return versions
            .filter(({ minmax: [min, max] }) => (min === undefined || min === null || specVersion >= min) &&
            (max === undefined || max === null || specVersion <= max))
            .reduce((result, { types }) => ({ ...result, ...types }), {});
    }
    /**
     * @description Based on the chain and runtimeVersion, get the applicable signed extensions (ready for registration)
     */
    function getSpecExtensions({ knownTypes }, chainName, specName) {
        return withNames(chainName, specName, (c, s) => ({
            ...(knownTypes.typesBundle?.spec?.[s]?.signedExtensions ?? {}),
            ...(knownTypes.typesBundle?.chain?.[c]?.signedExtensions ?? {})
        }));
    }
    /**
     * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
     */
    function getSpecTypes({ knownTypes }, chainName, specName, specVersion) {
        const _specVersion = bnToBn(specVersion).toNumber();
        return withNames(chainName, specName, (c, s) => ({
            // The order here is always, based on -
            //   - spec then chain
            //   - typesBundle takes higher precedence
            //   - types is the final catch-all override
            ...filterVersions(typesSpec[s], _specVersion),
            ...filterVersions(typesChain[c], _specVersion),
            ...filterVersions(knownTypes.typesBundle?.spec?.[s]?.types, _specVersion),
            ...filterVersions(knownTypes.typesBundle?.chain?.[c]?.types, _specVersion),
            ...(knownTypes.typesSpec?.[s] ?? {}),
            ...(knownTypes.typesChain?.[c] ?? {}),
            ...(knownTypes.types ?? {})
        }));
    }
    /**
     * @description Based on the chain or spec, return the hasher used
     */
    function getSpecHasher({ knownTypes }, chainName, specName) {
        return withNames(chainName, specName, (c, s) => knownTypes.hasher ||
            knownTypes.typesBundle?.chain?.[c]?.hasher ||
            knownTypes.typesBundle?.spec?.[s]?.hasher ||
            null);
    }
    /**
     * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
     */
    function getSpecRpc({ knownTypes }, chainName, specName) {
        return withNames(chainName, specName, (c, s) => ({
            ...(knownTypes.typesBundle?.spec?.[s]?.rpc ?? {}),
            ...(knownTypes.typesBundle?.chain?.[c]?.rpc ?? {})
        }));
    }
    /**
     * @description Based on the chain and runtimeVersion, get the applicable runtime definitions (ready for registration)
     */
    function getSpecRuntime({ knownTypes }, chainName, specName) {
        return withNames(chainName, specName, (c, s) => ({
            ...(knownTypes.typesBundle?.spec?.[s]?.runtime ?? {}),
            ...(knownTypes.typesBundle?.chain?.[c]?.runtime ?? {})
        }));
    }
    /**
     * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
     */
    function getSpecAlias({ knownTypes }, chainName, specName) {
        return withNames(chainName, specName, (c, s) => ({
            // as per versions, first spec, then chain then finally non-versioned
            ...(knownTypes.typesBundle?.spec?.[s]?.alias ?? {}),
            ...(knownTypes.typesBundle?.chain?.[c]?.alias ?? {}),
            ...(knownTypes.typesAlias ?? {})
        }));
    }
    /**
     * @description Returns a version record for known chains where upgrades are being tracked
     */
    function getUpgradeVersion(genesisHash, blockNumber) {
        const known = upgrades.find((u) => genesisHash.eq(u.genesisHash));
        return known
            ? [
                known.versions.reduce((last, version) => {
                    return blockNumber.gt(version.blockNumber)
                        ? version
                        : last;
                }, undefined),
                known.versions.find((version) => blockNumber.lte(version.blockNumber))
            ]
            : [undefined, undefined];
    }

    const l$2 = logger('api/augment');
    function logLength(type, values, and = []) {
        return values.length
            ? ` ${values.length} ${type}${and.length ? ' and' : ''}`
            : '';
    }
    function logValues(type, values) {
        return values.length
            ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}`
            : '';
    }
    function warn(prefix, type, [added, removed]) {
        if (added.length || removed.length) {
            l$2.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
        }
    }
    function findSectionExcludes(a, b) {
        return a.filter((s) => !b.includes(s));
    }
    function findSectionIncludes(a, b) {
        return a.filter((s) => b.includes(s));
    }
    function extractSections(src, dst) {
        const srcSections = Object.keys(src);
        const dstSections = Object.keys(dst);
        return [
            findSectionExcludes(srcSections, dstSections),
            findSectionExcludes(dstSections, srcSections)
        ];
    }
    function findMethodExcludes(src, dst) {
        const srcSections = Object.keys(src);
        const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
        const excludes = [];
        for (let s = 0, scount = dstSections.length; s < scount; s++) {
            const section = dstSections[s];
            const srcMethods = Object.keys(src[section]);
            const dstMethods = Object.keys(dst[section]);
            for (let d = 0, mcount = dstMethods.length; d < mcount; d++) {
                const method = dstMethods[d];
                if (!srcMethods.includes(method)) {
                    excludes.push(`${section}.${method}`);
                }
            }
        }
        return excludes;
    }
    function extractMethods(src, dst) {
        return [
            findMethodExcludes(dst, src),
            findMethodExcludes(src, dst)
        ];
    }
    /**
     * @description Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
     * already available, but rather just adds new missing items into the result object.
     * @internal
     */
    function augmentObject(prefix, src, dst, fromEmpty = false) {
        fromEmpty && objectClear(dst);
        // NOTE: This part is slightly problematic since it will get the
        // values for at least all the sections and the names of the methods
        // (Since methods won't be decorated before lazy, this _may_ be ok)
        if (prefix && Object.keys(dst).length) {
            warn(prefix, 'modules', extractSections(src, dst));
            warn(prefix, 'calls', extractMethods(src, dst));
        }
        const sections = Object.keys(src);
        for (let i = 0, count = sections.length; i < count; i++) {
            const section = sections[i];
            const methods = src[section];
            // We don't set here with a lazy interface, we decorate based
            // on the top-level structure (this bypasses adding lazy onto lazy)
            if (!dst[section]) {
                dst[section] = {};
            }
            lazyMethods(dst[section], Object.keys(methods), (m) => methods[m]);
        }
        return dst;
    }

    function sig({ lookup }, { method, section }, args) {
        return `${section}.${method}(${args.map((a) => lookup.getTypeDef(a).type).join(', ')})`;
    }
    function extractStorageArgs(registry, creator, _args) {
        const args = _args.filter((a) => !isUndefined(a));
        if (creator.meta.type.isPlain) {
            if (args.length !== 0) {
                throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
            }
        }
        else {
            const { hashers, key } = creator.meta.type.asMap;
            const keys = hashers.length === 1
                ? [key]
                : registry.lookup.getSiType(key).def.asTuple.map((t) => t);
            if (args.length !== keys.length) {
                throw new Error(`${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);
            }
        }
        // pass as tuple
        return [creator, args];
    }

    var eventemitter3 = {exports: {}};

    (function (module) {

    var has = Object.prototype.hasOwnProperty
      , prefix = '~';

    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */
    function Events() {}

    //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //
    if (Object.create) {
      Events.prototype = Object.create(null);

      //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //
      if (!new Events().__proto__) prefix = false;
    }

    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }

    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once)
        , evt = prefix ? prefix + event : event;

      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];

      return emitter;
    }

    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }

    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }

    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = []
        , events
        , name;

      if (this._eventsCount === 0) return names;

      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };

    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event
        , handlers = this._events[evt];

      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };

    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event
        , listeners = this._events[evt];

      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };

    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return false;

      var listeners = this._events[evt]
        , len = arguments.length
        , args
        , i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1: return listeners.fn.call(listeners.context), true;
          case 2: return listeners.fn.call(listeners.context, a1), true;
          case 3: return listeners.fn.call(listeners.context, a1, a2), true;
          case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len -1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length
          , j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1: listeners[i].fn.call(listeners[i].context); break;
            case 2: listeners[i].fn.call(listeners[i].context, a1); break;
            case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
            case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
            default:
              if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
                args[j - 1] = arguments[j];
              }

              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };

    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };

    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };

    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (
          listeners.fn === fn &&
          (!once || listeners.once) &&
          (!context || listeners.context === context)
        ) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (
            listeners[i].fn !== fn ||
            (once && !listeners[i].once) ||
            (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }

        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }

      return this;
    };

    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    };

    //
    // Alias methods names because people roll like that.
    //
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    //
    // Expose the prefix.
    //
    EventEmitter.prefixed = prefix;

    //
    // Allow `EventEmitter` to be imported as module namespace.
    //
    EventEmitter.EventEmitter = EventEmitter;

    //
    // Expose the module.
    //
    {
      module.exports = EventEmitter;
    }
    }(eventemitter3));

    var EventEmitter = eventemitter3.exports;

    class Events {
        constructor() {
            this.__internal__eventemitter = new EventEmitter();
        }
        emit(type, ...args) {
            return this.__internal__eventemitter.emit(type, ...args);
        }
        /**
         * @description Attach an eventemitter handler to listen to a specific event
         *
         * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
         * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.on('connected', (): void => {
         *   console.log('API has been connected to the endpoint');
         * });
         *
         * api.on('disconnected', (): void => {
         *   console.log('API has been disconnected from the endpoint');
         * });
         * ```
         */
        on(type, handler) {
            this.__internal__eventemitter.on(type, handler);
            return this;
        }
        /**
         * @description Remove the given eventemitter handler
         *
         * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
         * @param handler The callback to unregister.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * const handler = (): void => {
         *  console.log('Connected !);
         * };
         *
         * // Start listening
         * api.on('connected', handler);
         *
         * // Stop listening
         * api.off('connected', handler);
         * ```
         */
        off(type, handler) {
            this.__internal__eventemitter.removeListener(type, handler);
            return this;
        }
        /**
         * @description Attach an one-time eventemitter handler to listen to a specific event
         *
         * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
         * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.once('connected', (): void => {
         *   console.log('API has been connected to the endpoint');
         * });
         *
         * api.once('disconnected', (): void => {
         *   console.log('API has been disconnected from the endpoint');
         * });
         * ```
         */
        once(type, handler) {
            this.__internal__eventemitter.once(type, handler);
            return this;
        }
    }

    const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)
    const PAGE_SIZE_V = 250; // limited since the data may be > 16MB (e.g. misfiring elections)
    const PAGE_SIZE_Q = 50; // queue of pending storage queries (mapped together, next tick)
    const l$1 = logger('api/init');
    let instanceCounter = 0;
    function getAtQueryFn(api, { method, section }) {
        return assertReturn(api.rx.query[section] && api.rx.query[section][method], () => `query.${section}.${method} is not available in this version of the metadata`);
    }
    class Decorate extends Events {
        /**
         * @description Create an instance of the class
         *
         * @param options Options object to create API instance or a Provider instance
         *
         * @example
         * <BR>
         *
         * ```javascript
         * import Api from '@polkadot/api/promise';
         *
         * const api = new Api().isReady();
         *
         * api.rpc.subscribeNewHeads((header) => {
         *   console.log(`new block #${header.number.toNumber()}`);
         * });
         * ```
         */
        constructor(options, type, decorateMethod) {
            super();
            this.__internal__runtimeLog = {};
            this.__internal__storageGetQ = [];
            this.__internal__storageSubQ = [];
            // HACK Use BN import so decorateDerive works... yes, wtf.
            this.__phantom = new BN(0);
            this._call = {};
            this._consts = {};
            this._errors = {};
            this._events = {};
            this._extrinsicType = GenericExtrinsic.LATEST_EXTRINSIC_VERSION;
            this._isReady = false;
            this._query = {};
            this._runtimeMap = {};
            this._rx = { call: {}, consts: {}, query: {}, tx: {} };
            /**
             * Put the `this.onCall` function of ApiRx here, because it is needed by
             * `api._rx`.
             */
            this._rxDecorateMethod = (method) => {
                return method;
            };
            this.__internal__instanceId = `${++instanceCounter}`;
            this.__internal__registry = options.source?.registry || options.registry || new TypeRegistry();
            this._rx.callAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map((a) => a.rx.call));
            this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map((a) => a.rx.query));
            this._rx.registry = this.__internal__registry;
            this._decorateMethod = decorateMethod;
            this._options = options;
            this._type = type;
            const provider = options.source
                ? options.source._rpcCore.provider.isClonable
                    ? options.source._rpcCore.provider.clone()
                    : options.source._rpcCore.provider
                : (options.provider || new WsProvider());
            // The RPC interface decorates the known interfaces on init
            this._rpcCore = new RpcCore(this.__internal__instanceId, this.__internal__registry, {
                isPedantic: this._options.isPedantic,
                provider,
                userRpc: this._options.rpc
            });
            this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
            this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
        }
        /**
         * @description Return the current used registry
         */
        get registry() {
            return this.__internal__registry;
        }
        /**
         * @description Creates an instance of a type as registered
         */
        createType(type, ...params) {
            return this.__internal__registry.createType(type, ...params);
        }
        /**
         * @description Register additional user-defined of chain-specific types in the type registry
         */
        registerTypes(types) {
            types && this.__internal__registry.register(types);
        }
        /**
         * @returns `true` if the API operates with subscriptions
         */
        get hasSubscriptions() {
            return this._rpcCore.provider.hasSubscriptions;
        }
        /**
         * @returns `true` if the API decorate multi-key queries
         */
        get supportMulti() {
            return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
        }
        _emptyDecorated(registry, blockHash) {
            return {
                call: {},
                consts: {},
                errors: {},
                events: {},
                query: {},
                registry,
                rx: {
                    call: {},
                    query: {}
                },
                tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
            };
        }
        _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
            if (!decoratedApi) {
                decoratedApi = this._emptyDecorated(registry.registry, blockHash);
            }
            if (fromEmpty || !registry.decoratedMeta) {
                registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
            }
            const runtime = this._decorateCalls(registry, this._decorateMethod, blockHash);
            const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
            const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
            const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
            augmentObject('consts', registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
            augmentObject('errors', registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
            augmentObject('events', registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
            augmentObject('query', storage, decoratedApi.query, fromEmpty);
            augmentObject('query', storageRx, decoratedApi.rx.query, fromEmpty);
            augmentObject('call', runtime, decoratedApi.call, fromEmpty);
            augmentObject('call', runtimeRx, decoratedApi.rx.call, fromEmpty);
            decoratedApi.findCall = (callIndex) => findCall(registry.registry, callIndex);
            decoratedApi.findError = (errorIndex) => findError(registry.registry, errorIndex);
            decoratedApi.queryMulti = blockHash
                ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash)
                : this._decorateMulti(this._decorateMethod);
            decoratedApi.runtimeVersion = registry.runtimeVersion;
            return {
                createdAt: blockHash,
                decoratedApi,
                decoratedMeta: registry.decoratedMeta
            };
        }
        _injectMetadata(registry, fromEmpty = false) {
            // clear the decoration, we are redoing it here
            if (fromEmpty || !registry.decoratedApi) {
                registry.decoratedApi = this._emptyDecorated(registry.registry);
            }
            const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
            this._call = decoratedApi.call;
            this._consts = decoratedApi.consts;
            this._errors = decoratedApi.errors;
            this._events = decoratedApi.events;
            this._query = decoratedApi.query;
            this._rx.call = decoratedApi.rx.call;
            this._rx.query = decoratedApi.rx.query;
            const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
            const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
            if (fromEmpty || !this._extrinsics) {
                this._extrinsics = tx;
                this._rx.tx = rxtx;
            }
            else {
                augmentObject('tx', tx, this._extrinsics, false);
                augmentObject(null, rxtx, this._rx.tx, false);
            }
            augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
            this.emit('decorated');
        }
        /**
         * @deprecated
         * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
         */
        injectMetadata(metadata, fromEmpty, registry) {
            this._injectMetadata({ counter: 0, metadata, registry: registry || this.__internal__registry, runtimeVersion: this.__internal__registry.createType('RuntimeVersionPartial') }, fromEmpty);
        }
        _decorateFunctionMeta(input, output) {
            output.meta = input.meta;
            output.method = input.method;
            output.section = input.section;
            output.toJSON = input.toJSON;
            if (input.callIndex) {
                output.callIndex = input.callIndex;
            }
            return output;
        }
        // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
        // manner to cater for both old and new:
        //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
        //   - when non-zero, remove anything that is not in the array (we don't do this)
        _filterRpc(methods, additional) {
            // add any specific user-base RPCs
            if (Object.keys(additional).length !== 0) {
                this._rpcCore.addUserInterfaces(additional);
                // re-decorate, only adding any new additional interfaces
                this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
                this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
            }
            // extract the actual sections from the methods (this is useful when
            // we try and create mappings to runtime names via a hash mapping)
            const sectionMap = {};
            for (let i = 0, count = methods.length; i < count; i++) {
                const [section] = methods[i].split('_');
                sectionMap[section] = true;
            }
            // convert the actual section names into an easy name lookup
            const sections = Object.keys(sectionMap);
            for (let i = 0, count = sections.length; i < count; i++) {
                const nameA = stringUpperFirst(sections[i]);
                const nameB = `${nameA}Api`;
                this._runtimeMap[blake2AsHex(nameA, 64)] = nameA;
                this._runtimeMap[blake2AsHex(nameB, 64)] = nameB;
            }
            // finally we filter the actual methods to expose
            this._filterRpcMethods(methods);
        }
        _filterRpcMethods(exposed) {
            const hasResults = exposed.length !== 0;
            const allKnown = [...this._rpcCore.mapping.entries()];
            const allKeys = [];
            const count = allKnown.length;
            for (let i = 0; i < count; i++) {
                const [, { alias, endpoint, method, pubsub, section }] = allKnown[i];
                allKeys.push(`${section}_${method}`);
                if (pubsub) {
                    allKeys.push(`${section}_${pubsub[1]}`);
                    allKeys.push(`${section}_${pubsub[2]}`);
                }
                if (alias) {
                    allKeys.push(...alias);
                }
                if (endpoint) {
                    allKeys.push(endpoint);
                }
            }
            const unknown = exposed.filter((k) => !allKeys.includes(k) &&
                !k.includes('_unstable_'));
            if (unknown.length && !this._options.noInitWarn) {
                l$1.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
            }
            // loop through all entries we have (populated in decorate) and filter as required
            // only remove when we have results and method missing, or with no results if optional
            for (let i = 0; i < count; i++) {
                const [k, { method, section }] = allKnown[i];
                if (hasResults && !exposed.includes(k) && k !== 'rpc_methods') {
                    if (this._rpc[section]) {
                        delete this._rpc[section][method];
                        delete this._rx.rpc[section][method];
                    }
                }
            }
        }
        _rpcSubmitter(decorateMethod) {
            const method = (method, ...params) => {
                return from(this._rpcCore.provider.send(method, params));
            };
            return decorateMethod(method);
        }
        _decorateRpc(rpc, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
            const out = input;
            const decorateFn = (section, method) => {
                const source = rpc[section][method];
                const fn = decorateMethod(source, { methodName: method });
                fn.meta = source.meta;
                fn.raw = decorateMethod(source.raw, { methodName: method });
                return fn;
            };
            for (let s = 0, scount = rpc.sections.length; s < scount; s++) {
                const section = rpc.sections[s];
                if (!Object.prototype.hasOwnProperty.call(out, section)) {
                    const methods = Object.keys(rpc[section]);
                    const decorateInternal = (method) => decorateFn(section, method);
                    for (let m = 0, mcount = methods.length; m < mcount; m++) {
                        const method = methods[m];
                        //  skip subscriptions where we have a non-subscribe interface
                        if (this.hasSubscriptions || !(method.startsWith('subscribe') || method.startsWith('unsubscribe'))) {
                            if (!Object.prototype.hasOwnProperty.call(out, section)) {
                                out[section] = {};
                            }
                            lazyMethod(out[section], method, decorateInternal);
                        }
                    }
                }
            }
            return out;
        }
        // add all definition entries
        _addRuntimeDef(result, additional) {
            if (!additional) {
                return;
            }
            const entries = Object.entries(additional);
            for (let j = 0, ecount = entries.length; j < ecount; j++) {
                const [key, defs] = entries[j];
                if (result[key]) {
                    // we have this one already, step through for new versions or
                    // new methods and add those as applicable
                    for (let k = 0, dcount = defs.length; k < dcount; k++) {
                        const def = defs[k];
                        const prev = result[key].find(({ version }) => def.version === version);
                        if (prev) {
                            // interleave the new methods with the old - last definition wins
                            objectSpread(prev.methods, def.methods);
                        }
                        else {
                            // we don't have this specific version, add it
                            result[key].push(def);
                        }
                    }
                }
                else {
                    // we don't have this runtime definition, add it as-is
                    result[key] = defs;
                }
            }
        }
        // extract all runtime definitions
        _getRuntimeDefs(registry, specName, chain = '') {
            const result = {};
            const defValues = Object.values(typeDefinitions);
            // options > chain/spec > built-in, apply in reverse order with
            // methods overriding previous definitions (or interleave missing)
            for (let i = 0, count = defValues.length; i < count; i++) {
                this._addRuntimeDef(result, defValues[i].runtime);
            }
            this._addRuntimeDef(result, getSpecRuntime(registry, chain, specName));
            this._addRuntimeDef(result, this._options.runtime);
            return Object.entries(result);
        }
        // pre-metadata decoration
        _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
            const result = {};
            const named = {};
            const hashes = {};
            const sections = this._getRuntimeDefs(registry, specName, this._runtimeChain);
            const older = [];
            const implName = `${specName.toString()}/${specVersion.toString()}`;
            const hasLogged = this.__internal__runtimeLog[implName] || false;
            this.__internal__runtimeLog[implName] = true;
            for (let i = 0, scount = sections.length; i < scount; i++) {
                const [_section, secs] = sections[i];
                const sectionHash = blake2AsHex(_section, 64);
                const rtApi = apis.find(([a]) => a.eq(sectionHash));
                hashes[sectionHash] = true;
                if (rtApi) {
                    const all = secs.map(({ version }) => version).sort();
                    const sec = secs.find(({ version }) => rtApi[1].eq(version));
                    if (sec) {
                        const section = stringCamelCase(_section);
                        const methods = Object.entries(sec.methods);
                        if (methods.length) {
                            if (!named[section]) {
                                named[section] = {};
                            }
                            for (let m = 0, mcount = methods.length; m < mcount; m++) {
                                const [_method, def] = methods[m];
                                const method = stringCamelCase(_method);
                                named[section][method] = objectSpread({ method, name: `${_section}_${_method}`, section, sectionHash }, def);
                            }
                        }
                    }
                    else {
                        older.push(`${_section}/${rtApi[1].toString()} (${all.join('/')} known)`);
                    }
                }
            }
            // find the runtimes that we don't have hashes for
            const notFound = apis
                .map(([a, v]) => [a.toHex(), v.toString()])
                .filter(([a]) => !hashes[a])
                .map(([a, v]) => `${this._runtimeMap[a] || a}/${v}`);
            if (!this._options.noInitWarn && !hasLogged) {
                if (older.length) {
                    l$1.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(', ')}`);
                }
                if (notFound.length) {
                    l$1.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(', ')}`);
                }
            }
            const stateCall = blockHash
                ? (name, bytes) => this._rpcCore.state.call(name, bytes, blockHash)
                : (name, bytes) => this._rpcCore.state.call(name, bytes);
            const lazySection = (section) => lazyMethods({}, Object.keys(named[section]), (method) => this._decorateCall(registry, named[section][method], stateCall, decorateMethod));
            const modules = Object.keys(named);
            for (let i = 0, count = modules.length; i < count; i++) {
                lazyMethod(result, modules[i], lazySection);
            }
            return result;
        }
        _decorateCall(registry, def, stateCall, decorateMethod) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const decorated = decorateMethod((...args) => {
                if (args.length !== def.params.length) {
                    throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
                }
                const bytes = registry.createType('Raw', u8aConcatStrict(args.map((a, i) => registry.createTypeUnsafe(def.params[i].type, [a]).toU8a())));
                return stateCall(def.name, bytes).pipe(map((r) => registry.createTypeUnsafe(def.type, [r])));
            });
            decorated.meta = def;
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return decorated;
        }
        // only be called if supportMulti is true
        _decorateMulti(decorateMethod) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return decorateMethod((keys) => keys.length
                ? (this.hasSubscriptions
                    ? this._rpcCore.state.subscribeStorage
                    : this._rpcCore.state.queryStorageAt)(keys.map((args) => Array.isArray(args)
                    ? args[0].creator.meta.type.isPlain
                        ? [args[0].creator]
                        : args[0].creator.meta.type.asMap.hashers.length === 1
                            ? [args[0].creator, args.slice(1)]
                            : [args[0].creator, ...args.slice(1)]
                    : [args.creator]))
                : of([]));
        }
        _decorateMultiAt(atApi, decorateMethod, blockHash) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return decorateMethod((calls) => calls.length
                ? this._rpcCore.state.queryStorageAt(calls.map((args) => {
                    if (Array.isArray(args)) {
                        const { creator } = getAtQueryFn(atApi, args[0].creator);
                        return creator.meta.type.isPlain
                            ? [creator]
                            : creator.meta.type.asMap.hashers.length === 1
                                ? [creator, args.slice(1)]
                                : [creator, ...args.slice(1)];
                    }
                    return [getAtQueryFn(atApi, args.creator).creator];
                }), blockHash)
                : of([]));
        }
        _decorateExtrinsics({ tx }, decorateMethod) {
            const result = createSubmittable(this._type, this._rx, decorateMethod);
            const lazySection = (section) => lazyMethods({}, Object.keys(tx[section]), (method) => method.startsWith('$')
                ? tx[section][method]
                : this._decorateExtrinsicEntry(tx[section][method], result));
            const sections = Object.keys(tx);
            for (let i = 0, count = sections.length; i < count; i++) {
                lazyMethod(result, sections[i], lazySection);
            }
            return result;
        }
        _decorateExtrinsicEntry(method, creator) {
            const decorated = (...params) => creator(method(...params));
            // pass through the `.is`
            decorated.is = (other) => method.is(other);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return this._decorateFunctionMeta(method, decorated);
        }
        _decorateStorage({ query, registry }, decorateMethod, blockHash) {
            const result = {};
            const lazySection = (section) => lazyMethods({}, Object.keys(query[section]), (method) => blockHash
                ? this._decorateStorageEntryAt(registry, query[section][method], decorateMethod, blockHash)
                : this._decorateStorageEntry(query[section][method], decorateMethod));
            const sections = Object.keys(query);
            for (let i = 0, count = sections.length; i < count; i++) {
                lazyMethod(result, sections[i], lazySection);
            }
            return result;
        }
        _decorateStorageEntry(creator, decorateMethod) {
            const getArgs = (args, registry) => extractStorageArgs(registry || this.__internal__registry, creator, args);
            const getQueryAt = (blockHash) => from(this.at(blockHash)).pipe(map((api) => getAtQueryFn(api, creator)));
            // Disable this where it occurs for each field we are decorating
            /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
            const decorated = this._decorateStorageCall(creator, decorateMethod);
            decorated.creator = creator;
            // eslint-disable-next-line deprecation/deprecation
            decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => q(...args))));
            decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
            decorated.is = (key) => key.section === creator.section &&
                key.method === creator.method;
            decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
            decorated.keyPrefix = (...args) => u8aToHex(creator.keyPrefix(...args));
            decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
            // eslint-disable-next-line deprecation/deprecation
            decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
            // .keys() & .entries() only available on map types
            if (creator.iterKey && creator.meta.type.isMap) {
                decorated.entries = decorateMethod(memo$1(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
                // eslint-disable-next-line deprecation/deprecation
                decorated.entriesAt = decorateMethod(memo$1(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapEntries(q.creator, blockHash, args)))));
                decorated.entriesPaged = decorateMethod(memo$1(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, undefined, opts)));
                decorated.keys = decorateMethod(memo$1(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
                // eslint-disable-next-line deprecation/deprecation
                decorated.keysAt = decorateMethod(memo$1(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapKeys(q.creator, blockHash, args)))));
                decorated.keysPaged = decorateMethod(memo$1(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, undefined, opts)));
            }
            if (this.supportMulti && creator.meta.type.isMap) {
                // When using double map storage function, user need to pass double map key as an array
                decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1
                    ? this._retrieveMulti(args.map((a) => [creator, [a]]))
                    : this._retrieveMulti(args.map((a) => [creator, a])));
            }
            /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
            return this._decorateFunctionMeta(creator, decorated);
        }
        _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
            const getArgs = (args) => extractStorageArgs(registry, creator, args);
            // Disable this where it occurs for each field we are decorating
            /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
            const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
            decorated.creator = creator;
            decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
            decorated.is = (key) => key.section === creator.section &&
                key.method === creator.method;
            decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
            decorated.keyPrefix = (...keys) => u8aToHex(creator.keyPrefix(...keys));
            decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
            // .keys() & .entries() only available on map types
            if (creator.iterKey && creator.meta.type.isMap) {
                decorated.entries = decorateMethod(memo$1(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
                decorated.entriesPaged = decorateMethod(memo$1(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
                decorated.keys = decorateMethod(memo$1(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
                decorated.keysPaged = decorateMethod(memo$1(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, blockHash, opts)));
            }
            if (this.supportMulti && creator.meta.type.isMap) {
                // When using double map storage function, user need to pass double map key as an array
                decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1
                    ? this._retrieveMulti(args.map((a) => [creator, [a]]), blockHash)
                    : this._retrieveMulti(args.map((a) => [creator, a]), blockHash));
            }
            /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
            return this._decorateFunctionMeta(creator, decorated);
        }
        _queueStorage(call, queue) {
            const query = queue === this.__internal__storageSubQ
                ? this._rpcCore.state.subscribeStorage
                : this._rpcCore.state.queryStorageAt;
            let queueIdx = queue.length - 1;
            let valueIdx = 0;
            let valueObs;
            // if we don't have queue entries yet,
            // or the current queue has fired (see from below),
            // or the current queue has the max entries,
            // then we create a new queue
            if (queueIdx === -1 || !queue[queueIdx] || queue[queueIdx][1].length === PAGE_SIZE_Q) {
                queueIdx++;
                valueObs = from(
                // we delay the execution until the next tick, this allows
                // any queries made in this timeframe to be added to the same
                // queue for a single query
                new Promise((resolve) => {
                    nextTick(() => {
                        // get all the calls in this instance, resolve with it
                        // and then clear the queue so we don't add more
                        // (anything after this will be added to a new queue)
                        const calls = queue[queueIdx][1];
                        delete queue[queueIdx];
                        resolve(calls);
                    });
                })).pipe(switchMap((calls) => query(calls)));
                queue.push([valueObs, [call]]);
            }
            else {
                valueObs = queue[queueIdx][0];
                valueIdx = queue[queueIdx][1].length;
                queue[queueIdx][1].push(call);
            }
            return valueObs.pipe(
            // return the single value at this index
            map((values) => values[valueIdx]));
        }
        // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
        // we make a subscription, alternatively we push this through a single-shot query
        _decorateStorageCall(creator, decorateMethod) {
            const memoed = memo$1(this.__internal__instanceId, (...args) => {
                const call = extractStorageArgs(this.__internal__registry, creator, args);
                if (!this.hasSubscriptions) {
                    return this._rpcCore.state.getStorage(call);
                }
                return this._queueStorage(call, this.__internal__storageSubQ);
            });
            return decorateMethod(memoed, {
                methodName: creator.method,
                overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(this.__internal__registry, creator, args), this.__internal__storageGetQ)
            });
        }
        // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
        _retrieveMulti(keys, blockHash) {
            if (!keys.length) {
                return of([]);
            }
            const query = this.hasSubscriptions && !blockHash
                ? this._rpcCore.state.subscribeStorage
                : this._rpcCore.state.queryStorageAt;
            if (keys.length <= PAGE_SIZE_V) {
                return blockHash
                    ? query(keys, blockHash)
                    : query(keys);
            }
            return combineLatest(arrayChunk(keys, PAGE_SIZE_V).map((k) => blockHash
                ? query(k, blockHash)
                : query(k))).pipe(map(arrayFlatten));
        }
        _retrieveMapKeys({ iterKey, meta, method, section }, at, args) {
            if (!iterKey || !meta.type.isMap) {
                throw new Error('keys can only be retrieved on maps');
            }
            const headKey = iterKey(...args).toHex();
            const startSubject = new BehaviorSubject(headKey);
            const query = at
                ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at)
                : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);
            const setMeta = (key) => key.setMeta(meta, section, method);
            return startSubject.pipe(switchMap(query), map((keys) => keys.map(setMeta)), tap((keys) => nextTick(() => {
                keys.length === PAGE_SIZE_K
                    ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex())
                    : startSubject.complete();
            })), toArray(), // toArray since we want to startSubject to be completed
            map(arrayFlatten));
        }
        _retrieveMapKeysPaged({ iterKey, meta, method, section }, at, opts) {
            if (!iterKey || !meta.type.isMap) {
                throw new Error('keys can only be retrieved on maps');
            }
            const setMeta = (key) => key.setMeta(meta, section, method);
            const query = at
                ? (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at)
                : (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
            return query(iterKey(...opts.args).toHex()).pipe(map((keys) => keys.map(setMeta)));
        }
        _retrieveMapEntries(entry, at, args) {
            const query = at
                ? (keys) => this._rpcCore.state.queryStorageAt(keys, at)
                : (keys) => this._rpcCore.state.queryStorageAt(keys);
            return this._retrieveMapKeys(entry, at, args).pipe(switchMap((keys) => keys.length
                ? combineLatest(arrayChunk(keys, PAGE_SIZE_V).map(query)).pipe(map((valsArr) => arrayFlatten(valsArr).map((value, index) => [keys[index], value])))
                : of([])));
        }
        _retrieveMapEntriesPaged(entry, at, opts) {
            const query = at
                ? (keys) => this._rpcCore.state.queryStorageAt(keys, at)
                : (keys) => this._rpcCore.state.queryStorageAt(keys);
            return this._retrieveMapKeysPaged(entry, at, opts).pipe(switchMap((keys) => keys.length
                ? query(keys).pipe(map((valsArr) => valsArr.map((value, index) => [keys[index], value])))
                : of([])));
        }
        _decorateDeriveRx(decorateMethod) {
            const specName = this._runtimeVersion?.specName.toString();
            // Pull in derive from api-derive
            const available = getAvailableDerives(this.__internal__instanceId, this._rx, objectSpread({}, this._options.derives, this._options.typesBundle?.spec?.[specName || '']?.derives));
            return decorateDeriveSections(decorateMethod, available);
        }
        _decorateDerive(decorateMethod) {
            return decorateDeriveSections(decorateMethod, this._rx.derive);
        }
    }

    const KEEPALIVE_INTERVAL = 10000;
    const l = logger('api/init');
    function textToString(t) {
        return t.toString();
    }
    class Init extends Decorate {
        constructor(options, type, decorateMethod) {
            super(options, type, decorateMethod);
            this.__internal__atLast = null;
            this.__internal__healthTimer = null;
            this.__internal__registries = [];
            this.__internal__updateSub = null;
            this.__internal__waitingRegistries = {};
            // all injected types added to the registry for overrides
            this.registry.setKnownTypes(options);
            // We only register the types (global) if this is not a cloned instance.
            // Do right up-front, so we get in the user types before we are actually
            // doing anything on-chain, this ensures we have the overrides in-place
            if (!options.source) {
                this.registerTypes(options.types);
            }
            else {
                this.__internal__registries = options.source.__internal__registries;
            }
            this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
            this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
            if (this.supportMulti) {
                this._queryMulti = this._decorateMulti(this._decorateMethod);
                this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
            }
            this._rx.signer = options.signer;
            this._rpcCore.setRegistrySwap((blockHash) => this.getBlockRegistry(blockHash));
            this._rpcCore.setResolveBlockHash((blockNumber) => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));
            if (this.hasSubscriptions) {
                this._rpcCore.provider.on('disconnected', () => this.__internal__onProviderDisconnect());
                this._rpcCore.provider.on('error', (e) => this.__internal__onProviderError(e));
                this._rpcCore.provider.on('connected', () => this.__internal__onProviderConnect());
            }
            else if (!this._options.noInitWarn) {
                l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
            }
            // If the provider was instantiated earlier, and has already emitted a
            // 'connected' event, then the `on('connected')` won't fire anymore. To
            // cater for this case, we call manually `this._onProviderConnect`.
            if (this._rpcCore.provider.isConnected) {
                this.__internal__onProviderConnect().catch(noop$1);
            }
        }
        /**
         * @description Decorates a registry based on the runtime version
         */
        _initRegistry(registry, chain, version, metadata, chainProps) {
            registry.clearCache();
            registry.setChainProperties(chainProps || this.registry.getChainProperties());
            registry.setKnownTypes(this._options);
            registry.register(getSpecTypes(registry, chain, version.specName, version.specVersion));
            registry.setHasher(getSpecHasher(registry, chain, version.specName));
            // for bundled types, pull through the aliases defined
            if (registry.knownTypes.typesBundle) {
                registry.knownTypes.typesAlias = getSpecAlias(registry, chain, version.specName);
            }
            registry.setMetadata(metadata, undefined, objectSpread({}, getSpecExtensions(registry, chain, version.specName), this._options.signedExtensions), this._options.noInitWarn);
        }
        /**
         * @description Returns the default versioned registry
         */
        _getDefaultRegistry() {
            return assertReturn(this.__internal__registries.find(({ isDefault }) => isDefault), 'Initialization error, cannot find the default registry');
        }
        /**
         * @description Returns a decorated API instance at a specific point in time
         */
        async at(blockHash, knownVersion) {
            const u8aHash = u8aToU8a(blockHash);
            const u8aHex = u8aToHex(u8aHash);
            const registry = await this.getBlockRegistry(u8aHash, knownVersion);
            if (!this.__internal__atLast || this.__internal__atLast[0] !== u8aHex) {
                // always create a new decoration - since we are pointing to a specific hash, this
                // means that all queries needs to use that hash (not a previous one already existing)
                this.__internal__atLast = [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi];
            }
            return this.__internal__atLast[1];
        }
        async _createBlockRegistry(blockHash, header, version) {
            const registry = new TypeRegistry(blockHash);
            const metadata = new Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));
            const runtimeChain = this._runtimeChain;
            if (!runtimeChain) {
                throw new Error('Invalid initializion order, runtimeChain is not available');
            }
            this._initRegistry(registry, runtimeChain, version, metadata);
            // add our new registry
            const result = { counter: 0, lastBlockHash: blockHash, metadata, registry, runtimeVersion: version };
            this.__internal__registries.push(result);
            return result;
        }
        _cacheBlockRegistryProgress(key, creator) {
            // look for waiting resolves
            let waiting = this.__internal__waitingRegistries[key];
            if (isUndefined(waiting)) {
                // nothing waiting, construct new
                waiting = this.__internal__waitingRegistries[key] = new Promise((resolve, reject) => {
                    creator()
                        .then((registry) => {
                        delete this.__internal__waitingRegistries[key];
                        resolve(registry);
                    })
                        .catch((error) => {
                        delete this.__internal__waitingRegistries[key];
                        reject(error);
                    });
                });
            }
            return waiting;
        }
        _getBlockRegistryViaVersion(blockHash, version) {
            if (version) {
                // check for pre-existing registries. We also check specName, e.g. it
                // could be changed like in Westmint with upgrade from shell -> westmint
                const existingViaVersion = this.__internal__registries.find(({ runtimeVersion: { specName, specVersion } }) => specName.eq(version.specName) &&
                    specVersion.eq(version.specVersion));
                if (existingViaVersion) {
                    existingViaVersion.counter++;
                    existingViaVersion.lastBlockHash = blockHash;
                    return existingViaVersion;
                }
            }
            return null;
        }
        async _getBlockRegistryViaHash(blockHash) {
            // ensure we have everything required
            if (!this._genesisHash || !this._runtimeVersion) {
                throw new Error('Cannot retrieve data on an uninitialized chain');
            }
            // We have to assume that on the RPC layer the calls used here does not call back into
            // the registry swap, so getHeader & getRuntimeVersion should not be historic
            const header = this.registry.createType('HeaderPartial', this._genesisHash.eq(blockHash)
                ? { number: BN_ZERO, parentHash: this._genesisHash }
                : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
            if (header.parentHash.isEmpty) {
                throw new Error('Unable to retrieve header and parent from supplied hash');
            }
            // get the runtime version, either on-chain or via an known upgrade history
            getUpgradeVersion(this._genesisHash, header.number);
            const version = this.registry.createType('RuntimeVersionPartial', await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
            return (
            // try to find via version
            this._getBlockRegistryViaVersion(blockHash, version) ||
                // return new or in-flight result
                await this._cacheBlockRegistryProgress(version.toHex(), () => this._createBlockRegistry(blockHash, header, version)));
        }
        /**
         * @description Sets up a registry based on the block hash defined
         */
        async getBlockRegistry(blockHash, knownVersion) {
            return (
            // try to find via blockHash
            this.__internal__registries.find(({ lastBlockHash }) => lastBlockHash && u8aEq(lastBlockHash, blockHash)) ||
                // try to find via version
                this._getBlockRegistryViaVersion(blockHash, knownVersion) ||
                // return new or in-flight result
                await this._cacheBlockRegistryProgress(u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash)));
        }
        async _loadMeta() {
            // on re-connection to the same chain, we don't want to re-do everything from chain again
            if (this._isReady) {
                return true;
            }
            this._unsubscribeUpdates();
            // only load from on-chain if we are not a clone (default path), alternatively
            // just use the values from the source instance provided
            [this._genesisHash, this._runtimeMetadata] = this._options.source?._isReady
                ? await this._metaFromSource(this._options.source)
                : await this._metaFromChain(this._options.metadata);
            return this._initFromMeta(this._runtimeMetadata);
        }
        // eslint-disable-next-line @typescript-eslint/require-await
        async _metaFromSource(source) {
            this._extrinsicType = source.extrinsicVersion;
            this._runtimeChain = source.runtimeChain;
            this._runtimeVersion = source.runtimeVersion;
            // manually build a list of all available methods in this RPC, we are
            // going to filter on it to align the cloned RPC without making a call
            const sections = Object.keys(source.rpc);
            const rpcs = [];
            for (let s = 0, scount = sections.length; s < scount; s++) {
                const section = sections[s];
                const methods = Object.keys(source.rpc[section]);
                for (let m = 0, mcount = methods.length; m < mcount; m++) {
                    rpcs.push(`${section}_${methods[m]}`);
                }
            }
            this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));
            return [source.genesisHash, source.runtimeMetadata];
        }
        // subscribe to metadata updates, inject the types on changes
        _subscribeUpdates() {
            if (this.__internal__updateSub || !this.hasSubscriptions) {
                return;
            }
            this.__internal__updateSub = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap((version) => 
            // only retrieve the metadata when the on-chain version has been changed
            this._runtimeVersion?.specVersion.eq(version.specVersion)
                ? of(false)
                : this._rpcCore.state.getMetadata().pipe(map((metadata) => {
                    l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
                    this._runtimeMetadata = metadata;
                    this._runtimeVersion = version;
                    this._rx.runtimeVersion = version;
                    // update the default registry version
                    const thisRegistry = this._getDefaultRegistry();
                    const runtimeChain = this._runtimeChain;
                    if (!runtimeChain) {
                        throw new Error('Invalid initializion order, runtimeChain is not available');
                    }
                    // setup the data as per the current versions
                    thisRegistry.metadata = metadata;
                    thisRegistry.runtimeVersion = version;
                    this._initRegistry(this.registry, runtimeChain, version, metadata);
                    this._injectMetadata(thisRegistry, true);
                    return true;
                })))).subscribe();
        }
        async _metaFromChain(optMetadata) {
            const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([
                firstValueFrom(this._rpcCore.chain.getBlockHash(0)),
                firstValueFrom(this._rpcCore.state.getRuntimeVersion()),
                firstValueFrom(this._rpcCore.system.chain()),
                firstValueFrom(this._rpcCore.system.properties()),
                firstValueFrom(this._rpcCore.rpc.methods()),
                optMetadata
                    ? Promise.resolve(null)
                    : firstValueFrom(this._rpcCore.state.getMetadata())
            ]);
            // set our chain version & genesisHash as returned
            this._runtimeChain = chain;
            this._runtimeVersion = runtimeVersion;
            this._rx.runtimeVersion = runtimeVersion;
            // retrieve metadata, either from chain  or as pass-in via options
            const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
            const metadata = chainMetadata || (optMetadata?.[metadataKey]
                ? new Metadata(this.registry, optMetadata[metadataKey])
                : await firstValueFrom(this._rpcCore.state.getMetadata()));
            // initializes the registry & RPC
            this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);
            this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain, runtimeVersion.specName));
            this._subscribeUpdates();
            // setup the initial registry, when we have none
            if (!this.__internal__registries.length) {
                this.__internal__registries.push({ counter: 0, isDefault: true, metadata, registry: this.registry, runtimeVersion });
            }
            // get unique types & validate
            metadata.getUniqTypes(this._options.throwOnUnknown || false);
            return [genesisHash, metadata];
        }
        _initFromMeta(metadata) {
            const runtimeVersion = this._runtimeVersion;
            if (!runtimeVersion) {
                throw new Error('Invalid initializion order, runtimeVersion is not available');
            }
            this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
            this._rx.extrinsicType = this._extrinsicType;
            this._rx.genesisHash = this._genesisHash;
            this._rx.runtimeVersion = runtimeVersion;
            // inject metadata and adjust the types as detected
            this._injectMetadata(this._getDefaultRegistry(), true);
            // derive is last, since it uses the decorated rx
            this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
            this._derive = this._decorateDerive(this._decorateMethod);
            return true;
        }
        _subscribeHealth() {
            this._unsubscribeHealth();
            // Only enable the health keepalive on WS, not needed on HTTP
            this.__internal__healthTimer = this.hasSubscriptions
                ? setInterval(() => {
                    firstValueFrom(this._rpcCore.system.health.raw()).catch(noop$1);
                }, KEEPALIVE_INTERVAL)
                : null;
        }
        _unsubscribeHealth() {
            if (this.__internal__healthTimer) {
                clearInterval(this.__internal__healthTimer);
                this.__internal__healthTimer = null;
            }
        }
        _unsubscribeUpdates() {
            if (this.__internal__updateSub) {
                this.__internal__updateSub.unsubscribe();
                this.__internal__updateSub = null;
            }
        }
        _unsubscribe() {
            this._unsubscribeHealth();
            this._unsubscribeUpdates();
        }
        async __internal__onProviderConnect() {
            this._isConnected.next(true);
            this.emit('connected');
            try {
                const cryptoReady = this._options.initWasm === false
                    ? true
                    : await cryptoWaitReady();
                const hasMeta = await this._loadMeta();
                this._subscribeHealth();
                if (hasMeta && !this._isReady && cryptoReady) {
                    this._isReady = true;
                    this.emit('ready', this);
                }
            }
            catch (_error) {
                const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
                l.error(error);
                this.emit('error', error);
            }
        }
        __internal__onProviderDisconnect() {
            this._isConnected.next(false);
            this._unsubscribe();
            this.emit('disconnected');
        }
        __internal__onProviderError(error) {
            this.emit('error', error);
        }
    }

    function assertResult(value) {
        if (value === undefined) {
            throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
        }
        return value;
    }
    class Getters extends Init {
        /**
         * @description Runtime call interfaces (currently untyped, only decorated via API options)
         */
        get call() {
            return assertResult(this._call);
        }
        /**
         * @description Contains the parameter types (constants) of all modules.
         *
         * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
         *
         * @example
         * <BR>
         *
         * ```javascript
         * console.log(api.consts.democracy.enactmentPeriod.toString())
         * ```
         */
        get consts() {
            return assertResult(this._consts);
        }
        /**
         * @description Derived results that are injected into the API, allowing for combinations of various query results.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.derive.chain.bestNumber((number) => {
         *   console.log('best number', number);
         * });
         * ```
         */
        get derive() {
            return assertResult(this._derive);
        }
        /**
         * @description Errors from metadata
         */
        get errors() {
            return assertResult(this._errors);
        }
        /**
         * @description Events from metadata
         */
        get events() {
            return assertResult(this._events);
        }
        /**
         * @description  Returns the version of extrinsics in-use on this chain
         */
        get extrinsicVersion() {
            return this._extrinsicType;
        }
        /**
         * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
         */
        get genesisHash() {
            return assertResult(this._genesisHash);
        }
        /**
         * @description true is the underlying provider is connected
         */
        get isConnected() {
            return this._isConnected.getValue();
        }
        /**
         * @description The library information name & version (from package.json)
         */
        get libraryInfo() {
            return `${packageInfo.name} v${packageInfo.version}`;
        }
        /**
         * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
         *
         * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.query.system.account(<accountId>, ([nonce, balance]) => {
         *   console.log('new free balance', balance.free, 'new nonce', nonce);
         * });
         * ```
         */
        get query() {
            return assertResult(this._query);
        }
        /**
         * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * const unsub = await api.queryMulti(
         *   [
         *     // you can include the storage without any parameters
         *     api.query.balances.totalIssuance,
         *     // or you can pass parameters to the storage query
         *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
         *   ],
         *   ([existential, [, { free }]]) => {
         *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
         *
         *     unsub();
         *   }
         * );
         * ```
         */
        get queryMulti() {
            return assertResult(this._queryMulti);
        }
        /**
         * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
         *
         * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.rpc.chain.subscribeNewHeads((header) => {
         *   console.log('new header', header);
         * });
         * ```
         */
        get rpc() {
            return assertResult(this._rpc);
        }
        /**
         * @description Contains the chain information for the current node.
         */
        get runtimeChain() {
            return assertResult(this._runtimeChain);
        }
        /**
         * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
         */
        get runtimeMetadata() {
            return assertResult(this._runtimeMetadata);
        }
        /**
         * @description Contains the version information for the current runtime.
         */
        get runtimeVersion() {
            return assertResult(this._runtimeVersion);
        }
        /**
         * @description The underlying Rx API interface
         */
        get rx() {
            return assertResult(this._rx);
        }
        /**
         * @description Returns the underlying provider stats
         */
        get stats() {
            return this._rpcCore.stats;
        }
        /**
         * @description The type of this API instance, either 'rxjs' or 'promise'
         */
        get type() {
            return this._type;
        }
        /**
         * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
         *
         * @example
         * <BR>
         *
         * ```javascript
         * api.tx.balances
         *   .transfer(<recipientId>, <balance>)
         *   .signAndSend(<keyPair>, ({status}) => {
         *     console.log('tx status', status.asFinalized.toHex());
         *   });
         * ```
         */
        get tx() {
            return assertResult(this._extrinsics);
        }
        /**
         * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
         */
        findCall(callIndex) {
            return findCall(this.registry, callIndex);
        }
        /**
         * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
         */
        findError(errorIndex) {
            return findError(this.registry, errorIndex);
        }
    }

    class ApiBase extends Getters {
        /**
         * @description Create an instance of the class
         *
         * @param options Options object to create API instance or a Provider instance
         *
         * @example
         * <BR>
         *
         * ```javascript
         * import Api from '@polkadot/api/promise';
         *
         * const api = new Api().isReady();
         *
         * api.rpc.subscribeNewHeads((header) => {
         *   console.log(`new block #${header.number.toNumber()}`);
         * });
         * ```
         */
        constructor(options = {}, type, decorateMethod) {
            super(options, type, decorateMethod);
        }
        /**
         * @description Connect from the underlying provider, halting all network traffic
         */
        connect() {
            return this._rpcCore.connect();
        }
        /**
         * @description Disconnect from the underlying provider, halting all network traffic
         */
        disconnect() {
            this._unsubscribe();
            return this._rpcCore.disconnect();
        }
        /**
         * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
         */
        setSigner(signer) {
            this._rx.signer = signer;
        }
        /**
         * @description Signs a raw signer payload, string or Uint8Array
         */
        async sign(address, data, { signer } = {}) {
            if (isString(address)) {
                const _signer = signer || this._rx.signer;
                if (!_signer?.signRaw) {
                    throw new Error('No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
                }
                return (await _signer.signRaw(objectSpread({ type: 'bytes' }, data, { address }))).signature;
            }
            return u8aToHex(address.sign(u8aToU8a(data.data)));
        }
    }

    class Combinator {
        constructor(fns, callback) {
            this.__internal__allHasFired = false;
            this.__internal__fired = [];
            this.__internal__fns = [];
            this.__internal__isActive = true;
            this.__internal__results = [];
            this.__internal__subscriptions = [];
            this.__internal__callback = callback;
            // eslint-disable-next-line @typescript-eslint/require-await
            this.__internal__subscriptions = fns.map(async (input, index) => {
                const [fn, ...args] = Array.isArray(input)
                    ? input
                    : [input];
                this.__internal__fired.push(false);
                this.__internal__fns.push(fn);
                // Not quite 100% how to have a variable number at the front here
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types
                return fn(...args, this._createCallback(index));
            });
        }
        _allHasFired() {
            this.__internal__allHasFired ||= this.__internal__fired.filter((hasFired) => !hasFired).length === 0;
            return this.__internal__allHasFired;
        }
        _createCallback(index) {
            return (value) => {
                this.__internal__fired[index] = true;
                this.__internal__results[index] = value;
                this._triggerUpdate();
            };
        }
        _triggerUpdate() {
            if (!this.__internal__isActive || !isFunction$1(this.__internal__callback) || !this._allHasFired()) {
                return;
            }
            try {
                Promise
                    .resolve(this.__internal__callback(this.__internal__results))
                    .catch(noop$1);
            }
            catch {
                // swallow, we don't want the handler to trip us up
            }
        }
        unsubscribe() {
            if (!this.__internal__isActive) {
                return;
            }
            this.__internal__isActive = false;
            this.__internal__subscriptions.map(async (subscription) => {
                try {
                    const unsubscribe = await subscription;
                    if (isFunction$1(unsubscribe)) {
                        unsubscribe();
                    }
                }
                catch {
                    // ignore
                }
            });
        }
    }

    function promiseTracker(resolve, reject) {
        let isCompleted = false;
        return {
            reject: (error) => {
                if (!isCompleted) {
                    isCompleted = true;
                    reject(error);
                }
                return EMPTY;
            },
            resolve: (value) => {
                if (!isCompleted) {
                    isCompleted = true;
                    resolve(value);
                }
            }
        };
    }
    function extractArgs(args, needsCallback) {
        const actualArgs = args.slice();
        // If the last arg is a function, we pop it, put it into callback.
        // actualArgs will then hold the actual arguments to be passed to `method`
        const callback = (args.length && isFunction$1(args[args.length - 1]))
            ? actualArgs.pop()
            : undefined;
        // When we need a subscription, ensure that a valid callback is actually passed
        if (needsCallback && !isFunction$1(callback)) {
            throw new Error('Expected a callback to be passed with subscriptions');
        }
        return [actualArgs, callback];
    }
    function decorateCall(method, args) {
        return new Promise((resolve, reject) => {
            // single result tracker - either reject with Error or resolve with Codec result
            const tracker = promiseTracker(resolve, reject);
            // encoding errors reject immediately, any result unsubscribes and resolves
            const subscription = method(...args)
                .pipe(catchError((error) => tracker.reject(error)))
                .subscribe((result) => {
                tracker.resolve(result);
                nextTick(() => subscription.unsubscribe());
            });
        });
    }
    function decorateSubscribe(method, args, resultCb) {
        return new Promise((resolve, reject) => {
            // either reject with error or resolve with unsubscribe callback
            const tracker = promiseTracker(resolve, reject);
            // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback
            const subscription = method(...args)
                .pipe(catchError((error) => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe())))
                .subscribe((result) => {
                // queue result (back of queue to clear current)
                nextTick(() => resultCb(result));
            });
        });
    }
    /**
     * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
     */
    function toPromiseMethod(method, options) {
        const needsCallback = !!(options?.methodName && options.methodName.includes('subscribe'));
        return function (...args) {
            const [actualArgs, resultCb] = extractArgs(args, needsCallback);
            return resultCb
                ? decorateSubscribe(method, actualArgs, resultCb)
                : decorateCall(options?.overrideNoSub || method, actualArgs);
        };
    }

    /**
     * # @polkadot/api/promise
     *
     * ## Overview
     *
     * @name ApiPromise
     * @description
     * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
     *
     * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
     *
     * @see [[ApiRx]]
     *
     * ## Usage
     *
     * Making rpc calls -
     * <BR>
     *
     * ```javascript
     * import ApiPromise from '@polkadot/api/promise';
     *
     * // initialise via static create
     * const api = await ApiPromise.create();
     *
     * // make a subscription to the network head
     * api.rpc.chain.subscribeNewHeads((header) => {
     *   console.log(`Chain is at #${header.number}`);
     * });
     * ```
     * <BR>
     *
     * Subscribing to chain state -
     * <BR>
     *
     * ```javascript
     * import { ApiPromise, WsProvider } from '@polkadot/api';
     *
     * // initialise a provider with a specific endpoint
     * const provider = new WsProvider('wss://example.com:9944')
     *
     * // initialise via isReady & new with specific provider
     * const api = await new ApiPromise({ provider }).isReady;
     *
     * // retrieve the block target time
     * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
     * let last = 0;
     *
     * // subscribe to the current block timestamp, updates automatically (callback provided)
     * api.query.timestamp.now((timestamp) => {
     *   const elapsed = last
     *     ? `, ${timestamp.toNumber() - last}s since last`
     *     : '';
     *
     *   last = timestamp.toNumber();
     *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
     * });
     * ```
     * <BR>
     *
     * Submitting a transaction -
     * <BR>
     *
     * ```javascript
     * import ApiPromise from '@polkadot/api/promise';
     *
     * ApiPromise.create().then((api) => {
     *   const [nonce] = await api.query.system.account(keyring.alice.address);
     *
     *   api.tx.balances
     *     // create transfer
     *     transfer(keyring.bob.address, 12345)
     *     // sign the transcation
     *     .sign(keyring.alice, { nonce })
     *     // send the transaction (optional status callback)
     *     .send((status) => {
     *       console.log(`current status ${status.type}`);
     *     })
     *     // retrieve the submitted extrinsic hash
     *     .then((hash) => {
     *       console.log(`submitted with hash ${hash}`);
     *     });
     * });
     * ```
     */
    class ApiPromise extends ApiBase {
        /**
         * @description Creates an instance of the ApiPromise class
         * @param options Options to create an instance. This can be either [[ApiOptions]] or
         * an [[WsProvider]].
         * @example
         * <BR>
         *
         * ```javascript
         * import Api from '@polkadot/api/promise';
         *
         * new Api().isReady.then((api) => {
         *   api.rpc.subscribeNewHeads((header) => {
         *     console.log(`new block #${header.number.toNumber()}`);
         *   });
         * });
         * ```
         */
        constructor(options) {
            super(options, 'promise', toPromiseMethod);
            this.__internal__isReadyPromise = new Promise((resolve) => {
                super.once('ready', () => resolve(this));
            });
            this.__internal__isReadyOrErrorPromise = new Promise((resolve, reject) => {
                const tracker = promiseTracker(resolve, reject);
                super.once('ready', () => tracker.resolve(this));
                super.once('error', (error) => tracker.reject(error));
            });
        }
        /**
         * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
         * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
         * provider (see the constructor arguments)
         * @example
         * <BR>
         *
         * ```javascript
         * import Api from '@polkadot/api/promise';
         *
         * Api.create().then(async (api) => {
         *   const timestamp = await api.query.timestamp.now();
         *
         *   console.log(`lastest block timestamp ${timestamp}`);
         * });
         * ```
         */
        static create(options) {
            const instance = new ApiPromise(options);
            if (options && options.throwOnConnect) {
                return instance.isReadyOrError;
            }
            // Swallow any rejections on isReadyOrError
            // (in Node 15.x this creates issues, when not being looked at)
            instance.isReadyOrError.catch(noop$1);
            return instance.isReady;
        }
        /**
         * @description Promise that resolves the first time we are connected and loaded
         */
        get isReady() {
            return this.__internal__isReadyPromise;
        }
        /**
         * @description Promise that resolves if we can connect, or reject if there is an error
         */
        get isReadyOrError() {
            return this.__internal__isReadyOrErrorPromise;
        }
        /**
         * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
         */
        clone() {
            return new ApiPromise(objectSpread({}, this._options, { source: this }));
        }
        /**
         * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
         * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
         * @param callback A callback that will return an Array of all the values this combinator has been applied to
         * @example
         * <BR>
         *
         * ```javascript
         * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
         *
         * // combines values from balance & nonce as it updates
         * api.combineLatest([
         *   api.rpc.chain.subscribeNewHeads,
         *   (cb) => api.query.system.account(address, cb)
         * ], ([head, [balance, nonce]]) => {
         *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
         * });
         * ```
         */
        // eslint-disable-next-line @typescript-eslint/require-await
        async combineLatest(fns, callback) {
            const combinator = new Combinator(fns, callback);
            return () => {
                combinator.unsubscribe();
            };
        }
    }

    // import {BaseDotsamaWallet, getWalletBySource} from "@talisman-connect/wallets";
    class SeekCtrl {
        constructor(stream, root) {
            this.stream = stream;
            this.root = root;
            this.awaitClose = async () => {
                await this.stream.closePromise;
                if (this.root.page == "seek")
                    page_js("/");
            };
            this.onUnmount = () => this.stream.close();
            this.awaitClose();
        }
    }
    SeekCtrl.make = async (config, root) => {
        //[Call-SMC]: send token matching game
        // const wallet = getWalletBySource("subwallet-js") as BaseDotsamaWallet;
        if (window.injectedWeb3["subwallet-js"]) {
            const provider = new WsProvider("wss://ws.test.azero.dev");
            await ApiPromise.create({ provider: provider });
            // const contract = new ContractPromise(
            //   api as any,
            //   {
            //     source: {
            //       hash: "0xd2c42dfd2f4317d05460c2fdb49d5e23bec5f0890158aea307f262e3997be73c",
            //       language: "ink! 4.3.0",
            //       compiler: "rustc 1.73.0",
            //       build_info: {
            //         build_mode: "Debug",
            //         cargo_contract_version: "3.2.0",
            //         rust_toolchain: "stable-aarch64-apple-darwin",
            //         wasm_opt_settings: {
            //           keep_debug_symbols: false,
            //           optimization_passes: "Z",
            //         },
            //       },
            //     },
            //     contract: {
            //       name: "movechesscontract",
            //       version: "0.1.0",
            //       authors: ["[your_name] <[your_email]>"],
            //     },
            //     spec: {
            //       constructors: [
            //         {
            //           args: [
            //             {
            //               label: "counter",
            //               type: {
            //                 displayName: ["u32"],
            //                 type: 0,
            //               },
            //             },
            //           ],
            //           default: false,
            //           docs: [
            //             "Constructor that initializes the `bool` value to the given `init_value`.",
            //           ],
            //           label: "new",
            //           payable: false,
            //           returnType: {
            //             displayName: ["ink_primitives", "ConstructorResult"],
            //             type: 6,
            //           },
            //           selector: "0x9bae9d5e",
            //         },
            //       ],
            //       docs: [],
            //       environment: {
            //         accountId: {
            //           displayName: ["AccountId"],
            //           type: 1,
            //         },
            //         balance: {
            //           displayName: ["Balance"],
            //           type: 4,
            //         },
            //         blockNumber: {
            //           displayName: ["BlockNumber"],
            //           type: 0,
            //         },
            //         chainExtension: {
            //           displayName: ["ChainExtension"],
            //           type: 20,
            //         },
            //         hash: {
            //           displayName: ["Hash"],
            //           type: 18,
            //         },
            //         maxEventTopics: 4,
            //         timestamp: {
            //           displayName: ["Timestamp"],
            //           type: 19,
            //         },
            //       },
            //       events: [],
            //       lang_error: {
            //         displayName: ["ink", "LangError"],
            //         type: 8,
            //       },
            //       messages: [
            //         {
            //           args: [
            //             {
            //               label: "_index",
            //               type: {
            //                 displayName: ["u32"],
            //                 type: 0,
            //               },
            //             },
            //           ],
            //           default: false,
            //           docs: [],
            //           label: "match_game",
            //           mutates: true,
            //           payable: true,
            //           returnType: {
            //             displayName: ["ink", "MessageResult"],
            //             type: 9,
            //           },
            //           selector: "0x424d6933",
            //         },
            //         {
            //           args: [],
            //           default: false,
            //           docs: [],
            //           label: "get_counter",
            //           mutates: false,
            //           payable: false,
            //           returnType: {
            //             displayName: ["ink", "MessageResult"],
            //             type: 12,
            //           },
            //           selector: "0x8100e7b8",
            //         },
            //         {
            //           args: [
            //             {
            //               label: "_index",
            //               type: {
            //                 displayName: ["u32"],
            //                 type: 0,
            //               },
            //             },
            //           ],
            //           default: false,
            //           docs: [],
            //           label: "get_game_info",
            //           mutates: false,
            //           payable: false,
            //           returnType: {
            //             displayName: ["ink", "MessageResult"],
            //             type: 13,
            //           },
            //           selector: "0x3c624e71",
            //         },
            //         {
            //           args: [
            //             {
            //               label: "_index",
            //               type: {
            //                 displayName: ["u32"],
            //                 type: 0,
            //               },
            //             },
            //             {
            //               label: "winner_index",
            //               type: {
            //                 displayName: ["u32"],
            //                 type: 0,
            //               },
            //             },
            //           ],
            //           default: false,
            //           docs: [],
            //           label: "update_winner",
            //           mutates: true,
            //           payable: false,
            //           returnType: {
            //             displayName: ["ink", "MessageResult"],
            //             type: 15,
            //           },
            //           selector: "0x4aa4ec41",
            //         },
            //         {
            //           args: [
            //             {
            //               label: "s",
            //               type: {
            //                 displayName: ["ink", "prelude", "string", "String"],
            //                 type: 16,
            //               },
            //             },
            //           ],
            //           default: false,
            //           docs: [],
            //           label: "convert",
            //           mutates: true,
            //           payable: false,
            //           returnType: {
            //             displayName: ["ink", "MessageResult"],
            //             type: 17,
            //           },
            //           selector: "0x0bb50467",
            //         },
            //       ],
            //     },
            //     storage: {
            //       root: {
            //         layout: {
            //           struct: {
            //             fields: [
            //               {
            //                 layout: {
            //                   leaf: {
            //                     key: "0x00000000",
            //                     ty: 0,
            //                   },
            //                 },
            //                 name: "counter",
            //               },
            //               {
            //                 layout: {
            //                   root: {
            //                     layout: {
            //                       struct: {
            //                         fields: [
            //                           {
            //                             layout: {
            //                               leaf: {
            //                                 key: "0x0aade889",
            //                                 ty: 1,
            //                               },
            //                             },
            //                             name: "user_a",
            //                           },
            //                           {
            //                             layout: {
            //                               leaf: {
            //                                 key: "0x0aade889",
            //                                 ty: 1,
            //                               },
            //                             },
            //                             name: "user_b",
            //                           },
            //                           {
            //                             layout: {
            //                               leaf: {
            //                                 key: "0x0aade889",
            //                                 ty: 1,
            //                               },
            //                             },
            //                             name: "winner",
            //                           },
            //                           {
            //                             layout: {
            //                               leaf: {
            //                                 key: "0x0aade889",
            //                                 ty: 4,
            //                               },
            //                             },
            //                             name: "value",
            //                           },
            //                           {
            //                             layout: {
            //                               leaf: {
            //                                 key: "0x0aade889",
            //                                 ty: 5,
            //                               },
            //                             },
            //                             name: "user_a_payable",
            //                           },
            //                           {
            //                             layout: {
            //                               leaf: {
            //                                 key: "0x0aade889",
            //                                 ty: 5,
            //                               },
            //                             },
            //                             name: "user_b_payable",
            //                           },
            //                         ],
            //                         name: "Game",
            //                       },
            //                     },
            //                     root_key: "0x0aade889",
            //                   },
            //                 },
            //                 name: "games",
            //               },
            //             ],
            //             name: "Movechesscontract",
            //           },
            //         },
            //         root_key: "0x00000000",
            //       },
            //     },
            //     types: [
            //       {
            //         id: 0,
            //         type: {
            //           def: {
            //             primitive: "u32",
            //           },
            //         },
            //       },
            //       {
            //         id: 1,
            //         type: {
            //           def: {
            //             composite: {
            //               fields: [
            //                 {
            //                   type: 2,
            //                   typeName: "[u8; 32]",
            //                 },
            //               ],
            //             },
            //           },
            //           path: ["ink_primitives", "types", "AccountId"],
            //         },
            //       },
            //       {
            //         id: 2,
            //         type: {
            //           def: {
            //             array: {
            //               len: 32,
            //               type: 3,
            //             },
            //           },
            //         },
            //       },
            //       {
            //         id: 3,
            //         type: {
            //           def: {
            //             primitive: "u8",
            //           },
            //         },
            //       },
            //       {
            //         id: 4,
            //         type: {
            //           def: {
            //             primitive: "u128",
            //           },
            //         },
            //       },
            //       {
            //         id: 5,
            //         type: {
            //           def: {
            //             primitive: "bool",
            //           },
            //         },
            //       },
            //       {
            //         id: 6,
            //         type: {
            //           def: {
            //             variant: {
            //               variants: [
            //                 {
            //                   fields: [
            //                     {
            //                       type: 7,
            //                     },
            //                   ],
            //                   index: 0,
            //                   name: "Ok",
            //                 },
            //                 {
            //                   fields: [
            //                     {
            //                       type: 8,
            //                     },
            //                   ],
            //                   index: 1,
            //                   name: "Err",
            //                 },
            //               ],
            //             },
            //           },
            //           params: [
            //             {
            //               name: "T",
            //               type: 7,
            //             },
            //             {
            //               name: "E",
            //               type: 8,
            //             },
            //           ],
            //           path: ["Result"],
            //         },
            //       },
            //       {
            //         id: 7,
            //         type: {
            //           def: {
            //             tuple: [],
            //           },
            //         },
            //       },
            //       {
            //         id: 8,
            //         type: {
            //           def: {
            //             variant: {
            //               variants: [
            //                 {
            //                   index: 1,
            //                   name: "CouldNotReadInput",
            //                 },
            //               ],
            //             },
            //           },
            //           path: ["ink_primitives", "LangError"],
            //         },
            //       },
            //       {
            //         id: 9,
            //         type: {
            //           def: {
            //             variant: {
            //               variants: [
            //                 {
            //                   fields: [
            //                     {
            //                       type: 10,
            //                     },
            //                   ],
            //                   index: 0,
            //                   name: "Ok",
            //                 },
            //                 {
            //                   fields: [
            //                     {
            //                       type: 8,
            //                     },
            //                   ],
            //                   index: 1,
            //                   name: "Err",
            //                 },
            //               ],
            //             },
            //           },
            //           params: [
            //             {
            //               name: "T",
            //               type: 10,
            //             },
            //             {
            //               name: "E",
            //               type: 8,
            //             },
            //           ],
            //           path: ["Result"],
            //         },
            //       },
            //       {
            //         id: 10,
            //         type: {
            //           def: {
            //             variant: {
            //               variants: [
            //                 {
            //                   fields: [
            //                     {
            //                       type: 11,
            //                     },
            //                   ],
            //                   index: 0,
            //                   name: "Ok",
            //                 },
            //                 {
            //                   fields: [
            //                     {
            //                       type: 7,
            //                     },
            //                   ],
            //                   index: 1,
            //                   name: "Err",
            //                 },
            //               ],
            //             },
            //           },
            //           params: [
            //             {
            //               name: "T",
            //               type: 11,
            //             },
            //             {
            //               name: "E",
            //               type: 7,
            //             },
            //           ],
            //           path: ["Result"],
            //         },
            //       },
            //       {
            //         id: 11,
            //         type: {
            //           def: {
            //             composite: {
            //               fields: [
            //                 {
            //                   name: "user_a",
            //                   type: 1,
            //                   typeName: "AccountId",
            //                 },
            //                 {
            //                   name: "user_b",
            //                   type: 1,
            //                   typeName: "AccountId",
            //                 },
            //                 {
            //                   name: "winner",
            //                   type: 1,
            //                   typeName: "AccountId",
            //                 },
            //                 {
            //                   name: "value",
            //                   type: 4,
            //                   typeName: "Balance",
            //                 },
            //                 {
            //                   name: "user_a_payable",
            //                   type: 5,
            //                   typeName: "bool",
            //                 },
            //                 {
            //                   name: "user_b_payable",
            //                   type: 5,
            //                   typeName: "bool",
            //                 },
            //               ],
            //             },
            //           },
            //           path: ["movechesscontract", "movechesscontract", "Game"],
            //         },
            //       },
            //       {
            //         id: 12,
            //         type: {
            //           def: {
            //             variant: {
            //               variants: [
            //                 {
            //                   fields: [
            //                     {
            //                       type: 0,
            //                     },
            //                   ],
            //                   index: 0,
            //                   name: "Ok",
            //                 },
            //                 {
            //                   fields: [
            //                     {
            //                       type: 8,
            //                     },
            //                   ],
            //                   index: 1,
            //                   name: "Err",
            //                 },
            //               ],
            //             },
            //           },
            //           params: [
            //             {
            //               name: "T",
            //               type: 0,
            //             },
            //             {
            //               name: "E",
            //               type: 8,
            //             },
            //           ],
            //           path: ["Result"],
            //         },
            //       },
            //       {
            //         id: 13,
            //         type: {
            //           def: {
            //             variant: {
            //               variants: [
            //                 {
            //                   fields: [
            //                     {
            //                       type: 14,
            //                     },
            //                   ],
            //                   index: 0,
            //                   name: "Ok",
            //                 },
            //                 {
            //                   fields: [
            //                     {
            //                       type: 8,
            //                     },
            //                   ],
            //                   index: 1,
            //                   name: "Err",
            //                 },
            //               ],
            //             },
            //           },
            //           params: [
            //             {
            //               name: "T",
            //               type: 14,
            //             },
            //             {
            //               name: "E",
            //               type: 8,
            //             },
            //           ],
            //           path: ["Result"],
            //         },
            //       },
            //       {
            //         id: 14,
            //         type: {
            //           def: {
            //             variant: {
            //               variants: [
            //                 {
            //                   index: 0,
            //                   name: "None",
            //                 },
            //                 {
            //                   fields: [
            //                     {
            //                       type: 11,
            //                     },
            //                   ],
            //                   index: 1,
            //                   name: "Some",
            //                 },
            //               ],
            //             },
            //           },
            //           params: [
            //             {
            //               name: "T",
            //               type: 11,
            //             },
            //           ],
            //           path: ["Option"],
            //         },
            //       },
            //       {
            //         id: 15,
            //         type: {
            //           def: {
            //             variant: {
            //               variants: [
            //                 {
            //                   fields: [
            //                     {
            //                       type: 5,
            //                     },
            //                   ],
            //                   index: 0,
            //                   name: "Ok",
            //                 },
            //                 {
            //                   fields: [
            //                     {
            //                       type: 8,
            //                     },
            //                   ],
            //                   index: 1,
            //                   name: "Err",
            //                 },
            //               ],
            //             },
            //           },
            //           params: [
            //             {
            //               name: "T",
            //               type: 5,
            //             },
            //             {
            //               name: "E",
            //               type: 8,
            //             },
            //           ],
            //           path: ["Result"],
            //         },
            //       },
            //       {
            //         id: 16,
            //         type: {
            //           def: {
            //             primitive: "str",
            //           },
            //         },
            //       },
            //       {
            //         id: 17,
            //         type: {
            //           def: {
            //             variant: {
            //               variants: [
            //                 {
            //                   fields: [
            //                     {
            //                       type: 1,
            //                     },
            //                   ],
            //                   index: 0,
            //                   name: "Ok",
            //                 },
            //                 {
            //                   fields: [
            //                     {
            //                       type: 8,
            //                     },
            //                   ],
            //                   index: 1,
            //                   name: "Err",
            //                 },
            //               ],
            //             },
            //           },
            //           params: [
            //             {
            //               name: "T",
            //               type: 1,
            //             },
            //             {
            //               name: "E",
            //               type: 8,
            //             },
            //           ],
            //           path: ["Result"],
            //         },
            //       },
            //       {
            //         id: 18,
            //         type: {
            //           def: {
            //             composite: {
            //               fields: [
            //                 {
            //                   type: 2,
            //                   typeName: "[u8; 32]",
            //                 },
            //               ],
            //             },
            //           },
            //           path: ["ink_primitives", "types", "Hash"],
            //         },
            //       },
            //       {
            //         id: 19,
            //         type: {
            //           def: {
            //             primitive: "u64",
            //           },
            //         },
            //       },
            //       {
            //         id: 20,
            //         type: {
            //           def: {
            //             variant: {},
            //           },
            //           path: ["ink_env", "types", "NoChainExtension"],
            //         },
            //       },
            //     ],
            //     version: "4",
            //   },
            //   "5FZuewwFgS6jwi5RsCPPxqRTSf2NcvwRrXbu3xRrUqxCRHt6"
            // );
            // const SubWalletExtension = (window as any).injectedWeb3["subwallet-js"];
            // const extension = await SubWalletExtension.enable();
            // const signer = extension.signer;
            // const gasLimit = 3000 * 1000000;
            // const storageDepositLimit = null;
            // const gameIndex = 1;
            // console.log("7s200:s", signer);
            // console.log("7s200:sr", signer.signRaw);
            // console.log("7s200:sp", signer.signPayload);
            // if (signer && signer.signRaw && signer.signPayload) {
            //   await contract.tx
            //     .matchGame({storageDepositLimit, gasLimit}, gameIndex)
            //     .signAndSend(signer, (result: any) => {
            //       console.log("7s200:make:result", result);
            //     });
            // }
        }
        const stream = await root.auth.openStream("/api/board/seek", {
            method: "post",
            body: formData(config),
        }, (_) => { });
        return new SeekCtrl(stream, root);
    };

    class ChallengeCtrl {
        constructor(stream, root) {
            this.stream = stream;
            this.root = root;
            this.awaitClose = async () => {
                await this.stream.closePromise;
                if (this.root.page == 'challenge')
                    page_js('/');
            };
            this.onUnmount = () => this.stream.close();
            this.awaitClose();
        }
    }
    ChallengeCtrl.make = async (config, root) => {
        const stream = await root.auth.openStream(`/api/challenge/${config.username}`, {
            method: 'post',
            body: formData(Object.assign(Object.assign({}, config), { keepAliveStream: true })),
        }, _ => { });
        return new ChallengeCtrl(stream, root);
    };

    class TvCtrl {
        constructor(stream, game, root) {
            this.stream = stream;
            this.game = game;
            this.root = root;
            this.chess = Chess.default();
            this.lastUpdateAt = Date.now();
            this.awaitClose = async () => {
                await this.stream.closePromise;
            };
            this.onUnmount = () => {
                this.stream.close();
                clearInterval(this.redrawInterval);
            };
            this.player = (color) => this.game.players[this.game.players[0].color == color ? 0 : 1];
            this.chessgroundConfig = () => {
                const chess = Chess.fromSetup(parseFen(this.game.fen).unwrap()).unwrap();
                const lm = this.game.lastMove;
                const lastMove = (lm ? (lm[1] === '@' ? [lm.slice(2)] : [lm[0] + lm[1], lm[2] + lm[3]]) : []);
                return {
                    orientation: this.game.orientation,
                    fen: this.game.fen,
                    lastMove,
                    turnColor: chess.turn,
                    check: !!chess.isCheck(),
                    viewOnly: true,
                    movable: { free: false },
                    drawable: { visible: false },
                    coordinates: false,
                };
            };
            this.setGround = (cg) => (this.ground = cg);
            this.onUpdate = () => {
                this.chess = Chess.fromSetup(parseFen(this.game.fen).unwrap()).unwrap();
                this.lastUpdateAt = Date.now();
            };
            this.handle = (msg) => {
                var _b;
                switch (msg.t) {
                    case 'featured':
                        this.game = msg.d;
                        this.onUpdate();
                        this.root.redraw();
                        break;
                    case 'fen':
                        this.game.fen = msg.d.fen;
                        this.game.lastMove = msg.d.lm;
                        this.player('white').seconds = msg.d.wc;
                        this.player('black').seconds = msg.d.bc;
                        this.onUpdate();
                        (_b = this.ground) === null || _b === void 0 ? void 0 : _b.set(this.chessgroundConfig());
                        break;
                }
            };
            this.onUpdate();
            this.redrawInterval = setInterval(root.redraw, 100);
            this.awaitClose();
        }
    }
    TvCtrl.open = (root) => new Promise(async (resolve) => {
        let ctrl;
        let stream;
        const handler = (msg) => {
            if (ctrl)
                ctrl.handle(msg);
            else {
                // Gets the first game object from the first message of the stream,
                // make a TvCtrl from it, then forward the next messages to the ctrl
                ctrl = new TvCtrl(stream, msg.d, root);
                resolve(ctrl);
            }
        };
        stream = await root.auth.openStream('/api/tv/feed', {}, handler);
    });

    class Ctrl {
        constructor(redraw) {
            this.redraw = redraw;
            this.auth = new Auth();
            this.page = "home";
            this.games = new OngoingGames();
            this.openHome = async () => {
                var _a;
                this.page = "home";
                if (this.auth.me) {
                    await ((_a = this.stream) === null || _a === void 0 ? void 0 : _a.close());
                    this.games.empty();
                    this.stream = await this.auth.openStream("/api/stream/event", {}, (msg) => {
                        console.log("7s200:message", msg);
                        switch (msg.type) {
                            case "gameStart":
                                this.games.onStart(msg.game);
                                break;
                            case "gameFinish":
                                this.games.onFinish(msg.game);
                                break;
                            default:
                                console.warn(`Unprocessed message of type ${msg.type}`, msg);
                        }
                        this.redraw();
                    });
                }
                this.redraw();
            };
            this.openGame = async (id) => {
                this.page = "game";
                this.game = undefined;
                this.redraw();
                this.game = await GameCtrl.open(this, id);
                this.redraw();
            };
            this.playAi = async () => {
                this.game = undefined;
                this.page = "game";
                this.redraw();
                await this.auth.fetchBody("/api/challenge/ai", {
                    method: "post",
                    body: formData({
                        level: 1,
                        "clock.limit": 60 * 3,
                        "clock.increment": 2,
                    }),
                });
            };
            this.playPool = async (minutes, increment) => {
                this.seek = await SeekCtrl.make({
                    rated: true,
                    time: minutes,
                    increment,
                }, this);
                this.page = "seek";
                this.redraw();
            };
            this.playMaia = async (minutes, increment) => {
                this.challenge = await ChallengeCtrl.make({
                    username: "maia1",
                    rated: false,
                    "clock.limit": minutes * 60,
                    "clock.increment": increment,
                }, this);
                this.page = "challenge";
                this.redraw();
            };
            this.watchTv = async () => {
                this.page = "tv";
                this.redraw();
                this.tv = await TvCtrl.open(this);
                this.redraw();
            };
        }
    }

    async function layout (ctrl, body) {
        return h("body", [await renderNavBar(ctrl), h("div.container", body)]);
    }
    const renderNavBar = async (ctrl) => h("header.navbar.navbar-expand-md.navbar-dark.bg-dark", [
        h("div.container", [
            h("a.navbar-brand", {
                attrs: href("/"),
            }, "Lichess API Demo"),
            h("button.navbar-toggler", {
                attrs: {
                    type: "button",
                    "data-bs-toggle": "collapse",
                    "data-bs-target": "#navbarSupportedContent",
                    "aria-controls": "navbarSupportedContent",
                    "aria-expanded": false,
                    "aria-label": "Toggle navigation",
                },
            }, h("span.navbar-toggler-icon")),
            h("div#navbarSupportedContent.collapse.navbar-collapse", [
                h("ul.navbar-nav", [
                    ctrl.auth.me && (await connectButton(ctrl.auth.me)),
                    ctrl.auth.me ? userNav(ctrl.auth.me) : anonNav(),
                ]),
            ]),
        ]),
    ]);
    const userNav = (me) => h("li.nav-item.dropdown", [
        h("a#navbarDropdown.nav-link.dropdown-toggle", {
            attrs: {
                href: "#",
                role: "button",
                "data-bs-toggle": "dropdown",
                "aria-expanded": false,
            },
        }, me.username),
        h("ul.dropdown-menu", {
            attrs: {
                "aria-labelledby": "navbarDropdown",
            },
        }, [
            h("li", h("a.dropdown-item", {
                attrs: href("/logout"),
            }, "Log out")),
        ]),
    ]);
    const anonNav = () => h("li.nav-item", h("a.btn.btn-primary.text-nowrap", {
        attrs: href("/login"),
    }, "Login with Lichess"));
    const connectButton = async (me) => {
        const SubWalletExtension = window.injectedWeb3["subwallet-js"];
        let content = "Connect Wallet";
        const onConnect = async () => {
            await SubWalletExtension.enable();
            await onLog();
        };
        async function onLog() {
            const ext = await SubWalletExtension.enable();
            const a = await ext.accounts.get();
            if ((me === null || me === void 0 ? void 0 : me.username) && ext.signer) {
                await fetch("http://localhost:3333/v1", {
                    method: "POST",
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        username: me.username,
                        address: Object.values(a)[0].address,
                    }),
                });
                content = "Disconnect";
            }
            return h("li.nav-item", h("a.btn.btn-primary.text-nowrap", { on: { click: onConnect } }, `${content}`));
        }
        await onLog();
        return h("li.nav-item", h("a.btn.btn-primary.text-nowrap", { on: { click: onConnect } }, `${content}`));
    };

    const renderChallenge = ctrl => _ => [
        h('div.challenge-page', {
            hook: {
                destroy: ctrl.onUnmount,
            },
        }, [
            h('div.challenge-page__awaiting', [spinner(), h('span.ms-3', 'Awaiting the opponent...')]),
            h('a.btn.btn-secondary', {
                attrs: { href: url('/') },
            }, 'Cancel'),
        ]),
    ];

    const colors = ['white', 'black'];
    const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
    const ranks = ['1', '2', '3', '4', '5', '6', '7', '8'];

    const invRanks = [...ranks].reverse();
    const allKeys = Array.prototype.concat(...files.map(c => ranks.map(r => c + r)));
    const pos2key = (pos) => allKeys[8 * pos[0] + pos[1]];
    const key2pos = (k) => [k.charCodeAt(0) - 97, k.charCodeAt(1) - 49];
    const allPos = allKeys.map(key2pos);
    function memo(f) {
        let v;
        const ret = () => {
            if (v === undefined)
                v = f();
            return v;
        };
        ret.clear = () => {
            v = undefined;
        };
        return ret;
    }
    const timer = () => {
        let startAt;
        return {
            start() {
                startAt = performance.now();
            },
            cancel() {
                startAt = undefined;
            },
            stop() {
                if (!startAt)
                    return 0;
                const time = performance.now() - startAt;
                startAt = undefined;
                return time;
            },
        };
    };
    const opposite = (c) => (c === 'white' ? 'black' : 'white');
    const distanceSq = (pos1, pos2) => {
        const dx = pos1[0] - pos2[0], dy = pos1[1] - pos2[1];
        return dx * dx + dy * dy;
    };
    const samePiece = (p1, p2) => p1.role === p2.role && p1.color === p2.color;
    const posToTranslate = (bounds) => (pos, asWhite) => [((asWhite ? pos[0] : 7 - pos[0]) * bounds.width) / 8, ((asWhite ? 7 - pos[1] : pos[1]) * bounds.height) / 8];
    const translate = (el, pos) => {
        el.style.transform = `translate(${pos[0]}px,${pos[1]}px)`;
    };
    const translateAndScale = (el, pos, scale = 1) => {
        el.style.transform = `translate(${pos[0]}px,${pos[1]}px) scale(${scale})`;
    };
    const setVisible = (el, v) => {
        el.style.visibility = v ? 'visible' : 'hidden';
    };
    const eventPosition = (e) => {
        var _a;
        if (e.clientX || e.clientX === 0)
            return [e.clientX, e.clientY];
        if ((_a = e.targetTouches) === null || _a === void 0 ? void 0 : _a[0])
            return [e.targetTouches[0].clientX, e.targetTouches[0].clientY];
        return; // touchend has no position!
    };
    const isRightButton = (e) => e.buttons === 2 || e.button === 2;
    const createEl = (tagName, className) => {
        const el = document.createElement(tagName);
        if (className)
            el.className = className;
        return el;
    };
    function computeSquareCenter(key, asWhite, bounds) {
        const pos = key2pos(key);
        if (!asWhite) {
            pos[0] = 7 - pos[0];
            pos[1] = 7 - pos[1];
        }
        return [
            bounds.left + (bounds.width * pos[0]) / 8 + bounds.width / 16,
            bounds.top + (bounds.height * (7 - pos[1])) / 8 + bounds.height / 16,
        ];
    }

    function clockContent(time, decay) {
        if (!time && time !== 0)
            return h('span', '-');
        if (time == 2147483647)
            return h('span');
        const millis = time + (decay || 0);
        return millis > 1000 * 60 * 60 * 24 ? correspondence(millis) : realTime(millis);
    }
    const realTime = (millis) => {
        const date = new Date(millis);
        return h('span.clock--realtime.font-monospace', [
            pad2(date.getUTCMinutes()) + ':' + pad2(date.getUTCSeconds()),
            h('tenths', '.' + Math.floor(date.getUTCMilliseconds() / 100).toString()),
        ]);
    };
    const correspondence = (ms) => {
        const date = new Date(ms), minutes = prefixInteger(date.getUTCMinutes(), 2), seconds = prefixInteger(date.getSeconds(), 2);
        let hours, str = '';
        if (ms >= 86400 * 1000) {
            // days : hours
            const days = date.getUTCDate() - 1;
            hours = date.getUTCHours();
            str += (days === 1 ? 'One day' : `${days} days`) + ' ';
            if (hours !== 0)
                str += `${hours} hours`;
        }
        else if (ms >= 3600 * 1000) {
            // hours : minutes
            hours = date.getUTCHours();
            str += bold(prefixInteger(hours, 2)) + ':' + bold(minutes);
        }
        else {
            // minutes : seconds
            str += bold(minutes) + ':' + bold(seconds);
        }
        return h('span.clock--correspondence', str);
    };
    const pad2 = (num) => (num < 10 ? '0' : '') + num;
    const prefixInteger = (num, length) => (num / Math.pow(10, length)).toFixed(length).slice(2);
    const bold = (x) => `<b>${x}</b>`;

    function diff(a, b) {
        return Math.abs(a - b);
    }
    function pawn(color) {
        return (x1, y1, x2, y2) => diff(x1, x2) < 2 &&
            (color === 'white'
                ? // allow 2 squares from first two ranks, for horde
                    y2 === y1 + 1 || (y1 <= 1 && y2 === y1 + 2 && x1 === x2)
                : y2 === y1 - 1 || (y1 >= 6 && y2 === y1 - 2 && x1 === x2));
    }
    const knight = (x1, y1, x2, y2) => {
        const xd = diff(x1, x2);
        const yd = diff(y1, y2);
        return (xd === 1 && yd === 2) || (xd === 2 && yd === 1);
    };
    const bishop = (x1, y1, x2, y2) => {
        return diff(x1, x2) === diff(y1, y2);
    };
    const rook = (x1, y1, x2, y2) => {
        return x1 === x2 || y1 === y2;
    };
    const queen = (x1, y1, x2, y2) => {
        return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2);
    };
    function king(color, rookFiles, canCastle) {
        return (x1, y1, x2, y2) => (diff(x1, x2) < 2 && diff(y1, y2) < 2) ||
            (canCastle &&
                y1 === y2 &&
                y1 === (color === 'white' ? 0 : 7) &&
                ((x1 === 4 && ((x2 === 2 && rookFiles.includes(0)) || (x2 === 6 && rookFiles.includes(7)))) ||
                    rookFiles.includes(x2)));
    }
    function rookFilesOf(pieces, color) {
        const backrank = color === 'white' ? '1' : '8';
        const files = [];
        for (const [key, piece] of pieces) {
            if (key[1] === backrank && piece.color === color && piece.role === 'rook') {
                files.push(key2pos(key)[0]);
            }
        }
        return files;
    }
    function premove(pieces, key, canCastle) {
        const piece = pieces.get(key);
        if (!piece)
            return [];
        const pos = key2pos(key), r = piece.role, mobility = r === 'pawn'
            ? pawn(piece.color)
            : r === 'knight'
                ? knight
                : r === 'bishop'
                    ? bishop
                    : r === 'rook'
                        ? rook
                        : r === 'queen'
                            ? queen
                            : king(piece.color, rookFilesOf(pieces, piece.color), canCastle);
        return allPos
            .filter(pos2 => (pos[0] !== pos2[0] || pos[1] !== pos2[1]) && mobility(pos[0], pos[1], pos2[0], pos2[1]))
            .map(pos2key);
    }

    function callUserFunction(f, ...args) {
        if (f)
            setTimeout(() => f(...args), 1);
    }
    function toggleOrientation(state) {
        state.orientation = opposite(state.orientation);
        state.animation.current = state.draggable.current = state.selected = undefined;
    }
    function setPieces(state, pieces) {
        for (const [key, piece] of pieces) {
            if (piece)
                state.pieces.set(key, piece);
            else
                state.pieces.delete(key);
        }
    }
    function setCheck(state, color) {
        state.check = undefined;
        if (color === true)
            color = state.turnColor;
        if (color)
            for (const [k, p] of state.pieces) {
                if (p.role === 'king' && p.color === color) {
                    state.check = k;
                }
            }
    }
    function setPremove(state, orig, dest, meta) {
        unsetPredrop(state);
        state.premovable.current = [orig, dest];
        callUserFunction(state.premovable.events.set, orig, dest, meta);
    }
    function unsetPremove(state) {
        if (state.premovable.current) {
            state.premovable.current = undefined;
            callUserFunction(state.premovable.events.unset);
        }
    }
    function setPredrop(state, role, key) {
        unsetPremove(state);
        state.predroppable.current = { role, key };
        callUserFunction(state.predroppable.events.set, role, key);
    }
    function unsetPredrop(state) {
        const pd = state.predroppable;
        if (pd.current) {
            pd.current = undefined;
            callUserFunction(pd.events.unset);
        }
    }
    function tryAutoCastle(state, orig, dest) {
        if (!state.autoCastle)
            return false;
        const king = state.pieces.get(orig);
        if (!king || king.role !== 'king')
            return false;
        const origPos = key2pos(orig);
        const destPos = key2pos(dest);
        if ((origPos[1] !== 0 && origPos[1] !== 7) || origPos[1] !== destPos[1])
            return false;
        if (origPos[0] === 4 && !state.pieces.has(dest)) {
            if (destPos[0] === 6)
                dest = pos2key([7, destPos[1]]);
            else if (destPos[0] === 2)
                dest = pos2key([0, destPos[1]]);
        }
        const rook = state.pieces.get(dest);
        if (!rook || rook.color !== king.color || rook.role !== 'rook')
            return false;
        state.pieces.delete(orig);
        state.pieces.delete(dest);
        if (origPos[0] < destPos[0]) {
            state.pieces.set(pos2key([6, destPos[1]]), king);
            state.pieces.set(pos2key([5, destPos[1]]), rook);
        }
        else {
            state.pieces.set(pos2key([2, destPos[1]]), king);
            state.pieces.set(pos2key([3, destPos[1]]), rook);
        }
        return true;
    }
    function baseMove(state, orig, dest) {
        const origPiece = state.pieces.get(orig), destPiece = state.pieces.get(dest);
        if (orig === dest || !origPiece)
            return false;
        const captured = destPiece && destPiece.color !== origPiece.color ? destPiece : undefined;
        if (dest === state.selected)
            unselect(state);
        callUserFunction(state.events.move, orig, dest, captured);
        if (!tryAutoCastle(state, orig, dest)) {
            state.pieces.set(dest, origPiece);
            state.pieces.delete(orig);
        }
        state.lastMove = [orig, dest];
        state.check = undefined;
        callUserFunction(state.events.change);
        return captured || true;
    }
    function baseNewPiece(state, piece, key, force) {
        if (state.pieces.has(key)) {
            if (force)
                state.pieces.delete(key);
            else
                return false;
        }
        callUserFunction(state.events.dropNewPiece, piece, key);
        state.pieces.set(key, piece);
        state.lastMove = [key];
        state.check = undefined;
        callUserFunction(state.events.change);
        state.movable.dests = undefined;
        state.turnColor = opposite(state.turnColor);
        return true;
    }
    function baseUserMove(state, orig, dest) {
        const result = baseMove(state, orig, dest);
        if (result) {
            state.movable.dests = undefined;
            state.turnColor = opposite(state.turnColor);
            state.animation.current = undefined;
        }
        return result;
    }
    function userMove(state, orig, dest) {
        if (canMove(state, orig, dest)) {
            const result = baseUserMove(state, orig, dest);
            if (result) {
                const holdTime = state.hold.stop();
                unselect(state);
                const metadata = {
                    premove: false,
                    ctrlKey: state.stats.ctrlKey,
                    holdTime,
                };
                if (result !== true)
                    metadata.captured = result;
                callUserFunction(state.movable.events.after, orig, dest, metadata);
                return true;
            }
        }
        else if (canPremove(state, orig, dest)) {
            setPremove(state, orig, dest, {
                ctrlKey: state.stats.ctrlKey,
            });
            unselect(state);
            return true;
        }
        unselect(state);
        return false;
    }
    function dropNewPiece(state, orig, dest, force) {
        const piece = state.pieces.get(orig);
        if (piece && (canDrop(state, orig, dest) || force)) {
            state.pieces.delete(orig);
            baseNewPiece(state, piece, dest, force);
            callUserFunction(state.movable.events.afterNewPiece, piece.role, dest, {
                premove: false,
                predrop: false,
            });
        }
        else if (piece && canPredrop(state, orig, dest)) {
            setPredrop(state, piece.role, dest);
        }
        else {
            unsetPremove(state);
            unsetPredrop(state);
        }
        state.pieces.delete(orig);
        unselect(state);
    }
    function selectSquare(state, key, force) {
        callUserFunction(state.events.select, key);
        if (state.selected) {
            if (state.selected === key && !state.draggable.enabled) {
                unselect(state);
                state.hold.cancel();
                return;
            }
            else if ((state.selectable.enabled || force) && state.selected !== key) {
                if (userMove(state, state.selected, key)) {
                    state.stats.dragged = false;
                    return;
                }
            }
        }
        if (isMovable(state, key) || isPremovable(state, key)) {
            setSelected(state, key);
            state.hold.start();
        }
    }
    function setSelected(state, key) {
        state.selected = key;
        if (isPremovable(state, key)) {
            state.premovable.dests = premove(state.pieces, key, state.premovable.castle);
        }
        else
            state.premovable.dests = undefined;
    }
    function unselect(state) {
        state.selected = undefined;
        state.premovable.dests = undefined;
        state.hold.cancel();
    }
    function isMovable(state, orig) {
        const piece = state.pieces.get(orig);
        return (!!piece &&
            (state.movable.color === 'both' || (state.movable.color === piece.color && state.turnColor === piece.color)));
    }
    function canMove(state, orig, dest) {
        var _a, _b;
        return (orig !== dest && isMovable(state, orig) && (state.movable.free || !!((_b = (_a = state.movable.dests) === null || _a === void 0 ? void 0 : _a.get(orig)) === null || _b === void 0 ? void 0 : _b.includes(dest))));
    }
    function canDrop(state, orig, dest) {
        const piece = state.pieces.get(orig);
        return (!!piece &&
            (orig === dest || !state.pieces.has(dest)) &&
            (state.movable.color === 'both' || (state.movable.color === piece.color && state.turnColor === piece.color)));
    }
    function isPremovable(state, orig) {
        const piece = state.pieces.get(orig);
        return !!piece && state.premovable.enabled && state.movable.color === piece.color && state.turnColor !== piece.color;
    }
    function canPremove(state, orig, dest) {
        return (orig !== dest && isPremovable(state, orig) && premove(state.pieces, orig, state.premovable.castle).includes(dest));
    }
    function canPredrop(state, orig, dest) {
        const piece = state.pieces.get(orig);
        const destPiece = state.pieces.get(dest);
        return (!!piece &&
            (!destPiece || destPiece.color !== state.movable.color) &&
            state.predroppable.enabled &&
            (piece.role !== 'pawn' || (dest[1] !== '1' && dest[1] !== '8')) &&
            state.movable.color === piece.color &&
            state.turnColor !== piece.color);
    }
    function isDraggable(state, orig) {
        const piece = state.pieces.get(orig);
        return (!!piece &&
            state.draggable.enabled &&
            (state.movable.color === 'both' ||
                (state.movable.color === piece.color && (state.turnColor === piece.color || state.premovable.enabled))));
    }
    function playPremove(state) {
        const move = state.premovable.current;
        if (!move)
            return false;
        const orig = move[0], dest = move[1];
        let success = false;
        if (canMove(state, orig, dest)) {
            const result = baseUserMove(state, orig, dest);
            if (result) {
                const metadata = { premove: true };
                if (result !== true)
                    metadata.captured = result;
                callUserFunction(state.movable.events.after, orig, dest, metadata);
                success = true;
            }
        }
        unsetPremove(state);
        return success;
    }
    function playPredrop(state, validate) {
        const drop = state.predroppable.current;
        let success = false;
        if (!drop)
            return false;
        if (validate(drop)) {
            const piece = {
                role: drop.role,
                color: state.movable.color,
            };
            if (baseNewPiece(state, piece, drop.key)) {
                callUserFunction(state.movable.events.afterNewPiece, drop.role, drop.key, {
                    premove: false,
                    predrop: true,
                });
                success = true;
            }
        }
        unsetPredrop(state);
        return success;
    }
    function cancelMove(state) {
        unsetPremove(state);
        unsetPredrop(state);
        unselect(state);
    }
    function stop(state) {
        state.movable.color = state.movable.dests = state.animation.current = undefined;
        cancelMove(state);
    }
    function getKeyAtDomPos(pos, asWhite, bounds) {
        let file = Math.floor((8 * (pos[0] - bounds.left)) / bounds.width);
        if (!asWhite)
            file = 7 - file;
        let rank = 7 - Math.floor((8 * (pos[1] - bounds.top)) / bounds.height);
        if (!asWhite)
            rank = 7 - rank;
        return file >= 0 && file < 8 && rank >= 0 && rank < 8 ? pos2key([file, rank]) : undefined;
    }
    function getSnappedKeyAtDomPos(orig, pos, asWhite, bounds) {
        const origPos = key2pos(orig);
        const validSnapPos = allPos.filter(pos2 => {
            return queen(origPos[0], origPos[1], pos2[0], pos2[1]) || knight(origPos[0], origPos[1], pos2[0], pos2[1]);
        });
        const validSnapCenters = validSnapPos.map(pos2 => computeSquareCenter(pos2key(pos2), asWhite, bounds));
        const validSnapDistances = validSnapCenters.map(pos2 => distanceSq(pos, pos2));
        const [, closestSnapIndex] = validSnapDistances.reduce((a, b, index) => (a[0] < b ? a : [b, index]), [validSnapDistances[0], 0]);
        return pos2key(validSnapPos[closestSnapIndex]);
    }
    function whitePov(s) {
        return s.orientation === 'white';
    }

    const initial = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';
    const roles = {
        p: 'pawn',
        r: 'rook',
        n: 'knight',
        b: 'bishop',
        q: 'queen',
        k: 'king',
    };
    const letters = {
        pawn: 'p',
        rook: 'r',
        knight: 'n',
        bishop: 'b',
        queen: 'q',
        king: 'k',
    };
    function read$1(fen) {
        if (fen === 'start')
            fen = initial;
        const pieces = new Map();
        let row = 7, col = 0;
        for (const c of fen) {
            switch (c) {
                case ' ':
                case '[':
                    return pieces;
                case '/':
                    --row;
                    if (row < 0)
                        return pieces;
                    col = 0;
                    break;
                case '~': {
                    const piece = pieces.get(pos2key([col - 1, row]));
                    if (piece)
                        piece.promoted = true;
                    break;
                }
                default: {
                    const nb = c.charCodeAt(0);
                    if (nb < 57)
                        col += nb - 48;
                    else {
                        const role = c.toLowerCase();
                        pieces.set(pos2key([col, row]), {
                            role: roles[role],
                            color: c === role ? 'black' : 'white',
                        });
                        ++col;
                    }
                }
            }
        }
        return pieces;
    }
    function write$1(pieces) {
        return invRanks
            .map(y => files
            .map(x => {
            const piece = pieces.get((x + y));
            if (piece) {
                let p = letters[piece.role];
                if (piece.color === 'white')
                    p = p.toUpperCase();
                if (piece.promoted)
                    p += '~';
                return p;
            }
            else
                return '1';
        })
            .join(''))
            .join('/')
            .replace(/1{2,}/g, s => s.length.toString());
    }

    function applyAnimation(state, config) {
        if (config.animation) {
            deepMerge(state.animation, config.animation);
            // no need for such short animations
            if ((state.animation.duration || 0) < 70)
                state.animation.enabled = false;
        }
    }
    function configure(state, config) {
        var _a, _b;
        // don't merge destinations and autoShapes. Just override.
        if ((_a = config.movable) === null || _a === void 0 ? void 0 : _a.dests)
            state.movable.dests = undefined;
        if ((_b = config.drawable) === null || _b === void 0 ? void 0 : _b.autoShapes)
            state.drawable.autoShapes = [];
        deepMerge(state, config);
        // if a fen was provided, replace the pieces
        if (config.fen) {
            state.pieces = read$1(config.fen);
            state.drawable.shapes = [];
        }
        // apply config values that could be undefined yet meaningful
        if ('check' in config)
            setCheck(state, config.check || false);
        if ('lastMove' in config && !config.lastMove)
            state.lastMove = undefined;
        // in case of ZH drop last move, there's a single square.
        // if the previous last move had two squares,
        // the merge algorithm will incorrectly keep the second square.
        else if (config.lastMove)
            state.lastMove = config.lastMove;
        // fix move/premove dests
        if (state.selected)
            setSelected(state, state.selected);
        applyAnimation(state, config);
        if (!state.movable.rookCastle && state.movable.dests) {
            const rank = state.movable.color === 'white' ? '1' : '8', kingStartPos = ('e' + rank), dests = state.movable.dests.get(kingStartPos), king = state.pieces.get(kingStartPos);
            if (!dests || !king || king.role !== 'king')
                return;
            state.movable.dests.set(kingStartPos, dests.filter(d => !(d === 'a' + rank && dests.includes(('c' + rank))) &&
                !(d === 'h' + rank && dests.includes(('g' + rank)))));
        }
    }
    function deepMerge(base, extend) {
        for (const key in extend) {
            if (isObject(base[key]) && isObject(extend[key]))
                deepMerge(base[key], extend[key]);
            else
                base[key] = extend[key];
        }
    }
    function isObject(o) {
        return typeof o === 'object';
    }

    function anim(mutation, state) {
        return state.animation.enabled ? animate(mutation, state) : render$2(mutation, state);
    }
    function render$2(mutation, state) {
        const result = mutation(state);
        state.dom.redraw();
        return result;
    }
    function makePiece(key, piece) {
        return {
            key: key,
            pos: key2pos(key),
            piece: piece,
        };
    }
    function closer(piece, pieces) {
        return pieces.sort((p1, p2) => {
            return distanceSq(piece.pos, p1.pos) - distanceSq(piece.pos, p2.pos);
        })[0];
    }
    function computePlan(prevPieces, current) {
        const anims = new Map(), animedOrigs = [], fadings = new Map(), missings = [], news = [], prePieces = new Map();
        let curP, preP, vector;
        for (const [k, p] of prevPieces) {
            prePieces.set(k, makePiece(k, p));
        }
        for (const key of allKeys) {
            curP = current.pieces.get(key);
            preP = prePieces.get(key);
            if (curP) {
                if (preP) {
                    if (!samePiece(curP, preP.piece)) {
                        missings.push(preP);
                        news.push(makePiece(key, curP));
                    }
                }
                else
                    news.push(makePiece(key, curP));
            }
            else if (preP)
                missings.push(preP);
        }
        for (const newP of news) {
            preP = closer(newP, missings.filter(p => samePiece(newP.piece, p.piece)));
            if (preP) {
                vector = [preP.pos[0] - newP.pos[0], preP.pos[1] - newP.pos[1]];
                anims.set(newP.key, vector.concat(vector));
                animedOrigs.push(preP.key);
            }
        }
        for (const p of missings) {
            if (!animedOrigs.includes(p.key))
                fadings.set(p.key, p.piece);
        }
        return {
            anims: anims,
            fadings: fadings,
        };
    }
    function step(state, now) {
        const cur = state.animation.current;
        if (cur === undefined) {
            // animation was canceled :(
            if (!state.dom.destroyed)
                state.dom.redrawNow();
            return;
        }
        const rest = 1 - (now - cur.start) * cur.frequency;
        if (rest <= 0) {
            state.animation.current = undefined;
            state.dom.redrawNow();
        }
        else {
            const ease = easing(rest);
            for (const cfg of cur.plan.anims.values()) {
                cfg[2] = cfg[0] * ease;
                cfg[3] = cfg[1] * ease;
            }
            state.dom.redrawNow(true); // optimisation: don't render SVG changes during animations
            requestAnimationFrame((now = performance.now()) => step(state, now));
        }
    }
    function animate(mutation, state) {
        // clone state before mutating it
        const prevPieces = new Map(state.pieces);
        const result = mutation(state);
        const plan = computePlan(prevPieces, state);
        if (plan.anims.size || plan.fadings.size) {
            const alreadyRunning = state.animation.current && state.animation.current.start;
            state.animation.current = {
                start: performance.now(),
                frequency: 1 / state.animation.duration,
                plan: plan,
            };
            if (!alreadyRunning)
                step(state, performance.now());
        }
        else {
            // don't animate, just render right away
            state.dom.redraw();
        }
        return result;
    }
    // https://gist.github.com/gre/1650294
    function easing(t) {
        return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    }

    const brushes = ['green', 'red', 'blue', 'yellow'];
    function start$3(state, e) {
        // support one finger touch only
        if (e.touches && e.touches.length > 1)
            return;
        e.stopPropagation();
        e.preventDefault();
        e.ctrlKey ? unselect(state) : cancelMove(state);
        const pos = eventPosition(e), orig = getKeyAtDomPos(pos, whitePov(state), state.dom.bounds());
        if (!orig)
            return;
        state.drawable.current = {
            orig,
            pos,
            brush: eventBrush(e),
            snapToValidMove: state.drawable.defaultSnapToValidMove,
        };
        processDraw(state);
    }
    function processDraw(state) {
        requestAnimationFrame(() => {
            const cur = state.drawable.current;
            if (cur) {
                const keyAtDomPos = getKeyAtDomPos(cur.pos, whitePov(state), state.dom.bounds());
                if (!keyAtDomPos) {
                    cur.snapToValidMove = false;
                }
                const mouseSq = cur.snapToValidMove
                    ? getSnappedKeyAtDomPos(cur.orig, cur.pos, whitePov(state), state.dom.bounds())
                    : keyAtDomPos;
                if (mouseSq !== cur.mouseSq) {
                    cur.mouseSq = mouseSq;
                    cur.dest = mouseSq !== cur.orig ? mouseSq : undefined;
                    state.dom.redrawNow();
                }
                processDraw(state);
            }
        });
    }
    function move$1(state, e) {
        if (state.drawable.current)
            state.drawable.current.pos = eventPosition(e);
    }
    function end$2(state) {
        const cur = state.drawable.current;
        if (cur) {
            if (cur.mouseSq)
                addShape(state.drawable, cur);
            cancel$1(state);
        }
    }
    function cancel$1(state) {
        if (state.drawable.current) {
            state.drawable.current = undefined;
            state.dom.redraw();
        }
    }
    function clear(state) {
        if (state.drawable.shapes.length) {
            state.drawable.shapes = [];
            state.dom.redraw();
            onChange(state.drawable);
        }
    }
    function eventBrush(e) {
        var _a;
        const modA = (e.shiftKey || e.ctrlKey) && isRightButton(e);
        const modB = e.altKey || e.metaKey || ((_a = e.getModifierState) === null || _a === void 0 ? void 0 : _a.call(e, 'AltGraph'));
        return brushes[(modA ? 1 : 0) + (modB ? 2 : 0)];
    }
    function addShape(drawable, cur) {
        const sameShape = (s) => s.orig === cur.orig && s.dest === cur.dest;
        const similar = drawable.shapes.find(sameShape);
        if (similar)
            drawable.shapes = drawable.shapes.filter(s => !sameShape(s));
        if (!similar || similar.brush !== cur.brush)
            drawable.shapes.push(cur);
        onChange(drawable);
    }
    function onChange(drawable) {
        if (drawable.onChange)
            drawable.onChange(drawable.shapes);
    }

    function start$2(s, e) {
        if (!e.isTrusted || (e.button !== undefined && e.button !== 0))
            return; // only touch or left click
        if (e.touches && e.touches.length > 1)
            return; // support one finger touch only
        const bounds = s.dom.bounds(), position = eventPosition(e), orig = getKeyAtDomPos(position, whitePov(s), bounds);
        if (!orig)
            return;
        const piece = s.pieces.get(orig);
        const previouslySelected = s.selected;
        if (!previouslySelected && s.drawable.enabled && (s.drawable.eraseOnClick || !piece || piece.color !== s.turnColor))
            clear(s);
        // Prevent touch scroll and create no corresponding mouse event, if there
        // is an intent to interact with the board.
        if (e.cancelable !== false &&
            (!e.touches || s.blockTouchScroll || piece || previouslySelected || pieceCloseTo(s, position)))
            e.preventDefault();
        const hadPremove = !!s.premovable.current;
        const hadPredrop = !!s.predroppable.current;
        s.stats.ctrlKey = e.ctrlKey;
        if (s.selected && canMove(s, s.selected, orig)) {
            anim(state => selectSquare(state, orig), s);
        }
        else {
            selectSquare(s, orig);
        }
        const stillSelected = s.selected === orig;
        const element = pieceElementByKey(s, orig);
        if (piece && element && stillSelected && isDraggable(s, orig)) {
            s.draggable.current = {
                orig,
                piece,
                origPos: position,
                pos: position,
                started: s.draggable.autoDistance && s.stats.dragged,
                element,
                previouslySelected,
                originTarget: e.target,
                keyHasChanged: false,
            };
            element.cgDragging = true;
            element.classList.add('dragging');
            // place ghost
            const ghost = s.dom.elements.ghost;
            if (ghost) {
                ghost.className = `ghost ${piece.color} ${piece.role}`;
                translate(ghost, posToTranslate(bounds)(key2pos(orig), whitePov(s)));
                setVisible(ghost, true);
            }
            processDrag(s);
        }
        else {
            if (hadPremove)
                unsetPremove(s);
            if (hadPredrop)
                unsetPredrop(s);
        }
        s.dom.redraw();
    }
    function pieceCloseTo(s, pos) {
        const asWhite = whitePov(s), bounds = s.dom.bounds(), radiusSq = Math.pow(bounds.width / 8, 2);
        for (const key of s.pieces.keys()) {
            const center = computeSquareCenter(key, asWhite, bounds);
            if (distanceSq(center, pos) <= radiusSq)
                return true;
        }
        return false;
    }
    function dragNewPiece(s, piece, e, force) {
        const key = 'a0';
        s.pieces.set(key, piece);
        s.dom.redraw();
        const position = eventPosition(e);
        s.draggable.current = {
            orig: key,
            piece,
            origPos: position,
            pos: position,
            started: true,
            element: () => pieceElementByKey(s, key),
            originTarget: e.target,
            newPiece: true,
            force: !!force,
            keyHasChanged: false,
        };
        processDrag(s);
    }
    function processDrag(s) {
        requestAnimationFrame(() => {
            var _a;
            const cur = s.draggable.current;
            if (!cur)
                return;
            // cancel animations while dragging
            if ((_a = s.animation.current) === null || _a === void 0 ? void 0 : _a.plan.anims.has(cur.orig))
                s.animation.current = undefined;
            // if moving piece is gone, cancel
            const origPiece = s.pieces.get(cur.orig);
            if (!origPiece || !samePiece(origPiece, cur.piece))
                cancel(s);
            else {
                if (!cur.started && distanceSq(cur.pos, cur.origPos) >= Math.pow(s.draggable.distance, 2))
                    cur.started = true;
                if (cur.started) {
                    // support lazy elements
                    if (typeof cur.element === 'function') {
                        const found = cur.element();
                        if (!found)
                            return;
                        found.cgDragging = true;
                        found.classList.add('dragging');
                        cur.element = found;
                    }
                    const bounds = s.dom.bounds();
                    translate(cur.element, [
                        cur.pos[0] - bounds.left - bounds.width / 16,
                        cur.pos[1] - bounds.top - bounds.height / 16,
                    ]);
                    cur.keyHasChanged || (cur.keyHasChanged = cur.orig !== getKeyAtDomPos(cur.pos, whitePov(s), bounds));
                }
            }
            processDrag(s);
        });
    }
    function move(s, e) {
        // support one finger touch only
        if (s.draggable.current && (!e.touches || e.touches.length < 2)) {
            s.draggable.current.pos = eventPosition(e);
        }
    }
    function end$1(s, e) {
        const cur = s.draggable.current;
        if (!cur)
            return;
        // create no corresponding mouse event
        if (e.type === 'touchend' && e.cancelable !== false)
            e.preventDefault();
        // comparing with the origin target is an easy way to test that the end event
        // has the same touch origin
        if (e.type === 'touchend' && cur.originTarget !== e.target && !cur.newPiece) {
            s.draggable.current = undefined;
            return;
        }
        unsetPremove(s);
        unsetPredrop(s);
        // touchend has no position; so use the last touchmove position instead
        const eventPos = eventPosition(e) || cur.pos;
        const dest = getKeyAtDomPos(eventPos, whitePov(s), s.dom.bounds());
        if (dest && cur.started && cur.orig !== dest) {
            if (cur.newPiece)
                dropNewPiece(s, cur.orig, dest, cur.force);
            else {
                s.stats.ctrlKey = e.ctrlKey;
                if (userMove(s, cur.orig, dest))
                    s.stats.dragged = true;
            }
        }
        else if (cur.newPiece) {
            s.pieces.delete(cur.orig);
        }
        else if (s.draggable.deleteOnDropOff && !dest) {
            s.pieces.delete(cur.orig);
            callUserFunction(s.events.change);
        }
        if ((cur.orig === cur.previouslySelected || cur.keyHasChanged) && (cur.orig === dest || !dest))
            unselect(s);
        else if (!s.selectable.enabled)
            unselect(s);
        removeDragElements(s);
        s.draggable.current = undefined;
        s.dom.redraw();
    }
    function cancel(s) {
        const cur = s.draggable.current;
        if (cur) {
            if (cur.newPiece)
                s.pieces.delete(cur.orig);
            s.draggable.current = undefined;
            unselect(s);
            removeDragElements(s);
            s.dom.redraw();
        }
    }
    function removeDragElements(s) {
        const e = s.dom.elements;
        if (e.ghost)
            setVisible(e.ghost, false);
    }
    function pieceElementByKey(s, key) {
        let el = s.dom.elements.board.firstChild;
        while (el) {
            if (el.cgKey === key && el.tagName === 'PIECE')
                return el;
            el = el.nextSibling;
        }
        return;
    }

    function explosion(state, keys) {
        state.exploding = { stage: 1, keys };
        state.dom.redraw();
        setTimeout(() => {
            setStage(state, 2);
            setTimeout(() => setStage(state, undefined), 120);
        }, 120);
    }
    function setStage(state, stage) {
        if (state.exploding) {
            if (stage)
                state.exploding.stage = stage;
            else
                state.exploding = undefined;
            state.dom.redraw();
        }
    }

    // see API types and documentations in dts/api.d.ts
    function start$1(state, redrawAll) {
        function toggleOrientation$1() {
            toggleOrientation(state);
            redrawAll();
        }
        return {
            set(config) {
                if (config.orientation && config.orientation !== state.orientation)
                    toggleOrientation$1();
                applyAnimation(state, config);
                (config.fen ? anim : render$2)(state => configure(state, config), state);
            },
            state,
            getFen: () => write$1(state.pieces),
            toggleOrientation: toggleOrientation$1,
            setPieces(pieces) {
                anim(state => setPieces(state, pieces), state);
            },
            selectSquare(key, force) {
                if (key)
                    anim(state => selectSquare(state, key, force), state);
                else if (state.selected) {
                    unselect(state);
                    state.dom.redraw();
                }
            },
            move(orig, dest) {
                anim(state => baseMove(state, orig, dest), state);
            },
            newPiece(piece, key) {
                anim(state => baseNewPiece(state, piece, key), state);
            },
            playPremove() {
                if (state.premovable.current) {
                    if (anim(playPremove, state))
                        return true;
                    // if the premove couldn't be played, redraw to clear it up
                    state.dom.redraw();
                }
                return false;
            },
            playPredrop(validate) {
                if (state.predroppable.current) {
                    const result = playPredrop(state, validate);
                    state.dom.redraw();
                    return result;
                }
                return false;
            },
            cancelPremove() {
                render$2(unsetPremove, state);
            },
            cancelPredrop() {
                render$2(unsetPredrop, state);
            },
            cancelMove() {
                render$2(state => {
                    cancelMove(state);
                    cancel(state);
                }, state);
            },
            stop() {
                render$2(state => {
                    stop(state);
                    cancel(state);
                }, state);
            },
            explode(keys) {
                explosion(state, keys);
            },
            setAutoShapes(shapes) {
                render$2(state => (state.drawable.autoShapes = shapes), state);
            },
            setShapes(shapes) {
                render$2(state => (state.drawable.shapes = shapes), state);
            },
            getKeyAtDomPos(pos) {
                return getKeyAtDomPos(pos, whitePov(state), state.dom.bounds());
            },
            redrawAll,
            dragNewPiece(piece, event, force) {
                dragNewPiece(state, piece, event, force);
            },
            destroy() {
                stop(state);
                state.dom.unbind && state.dom.unbind();
                state.dom.destroyed = true;
            },
        };
    }

    function defaults() {
        return {
            pieces: read$1(initial),
            orientation: 'white',
            turnColor: 'white',
            coordinates: true,
            ranksPosition: 'right',
            autoCastle: true,
            viewOnly: false,
            disableContextMenu: false,
            addPieceZIndex: false,
            addDimensionsCssVars: false,
            blockTouchScroll: false,
            pieceKey: false,
            highlight: {
                lastMove: true,
                check: true,
            },
            animation: {
                enabled: true,
                duration: 200,
            },
            movable: {
                free: true,
                color: 'both',
                showDests: true,
                events: {},
                rookCastle: true,
            },
            premovable: {
                enabled: true,
                showDests: true,
                castle: true,
                events: {},
            },
            predroppable: {
                enabled: false,
                events: {},
            },
            draggable: {
                enabled: true,
                distance: 3,
                autoDistance: true,
                showGhost: true,
                deleteOnDropOff: false,
            },
            dropmode: {
                active: false,
            },
            selectable: {
                enabled: true,
            },
            stats: {
                // on touchscreen, default to "tap-tap" moves
                // instead of drag
                dragged: !('ontouchstart' in window),
            },
            events: {},
            drawable: {
                enabled: true,
                visible: true,
                defaultSnapToValidMove: true,
                eraseOnClick: true,
                shapes: [],
                autoShapes: [],
                brushes: {
                    green: { key: 'g', color: '#15781B', opacity: 1, lineWidth: 10 },
                    red: { key: 'r', color: '#882020', opacity: 1, lineWidth: 10 },
                    blue: { key: 'b', color: '#003088', opacity: 1, lineWidth: 10 },
                    yellow: { key: 'y', color: '#e68f00', opacity: 1, lineWidth: 10 },
                    paleBlue: { key: 'pb', color: '#003088', opacity: 0.4, lineWidth: 15 },
                    paleGreen: { key: 'pg', color: '#15781B', opacity: 0.4, lineWidth: 15 },
                    paleRed: { key: 'pr', color: '#882020', opacity: 0.4, lineWidth: 15 },
                    paleGrey: {
                        key: 'pgr',
                        color: '#4a4a4a',
                        opacity: 0.35,
                        lineWidth: 15,
                    },
                },
                prevSvgHash: '',
            },
            hold: timer(),
        };
    }

    // append and remove only. No updates.
    function syncShapes(shapes, root, renderShape) {
        const hashesInDom = new Map(), // by hash
        toRemove = [];
        for (const sc of shapes)
            hashesInDom.set(sc.hash, false);
        let el = root.firstChild, elHash;
        while (el) {
            elHash = el.getAttribute('cgHash');
            // found a shape element that's here to stay
            if (hashesInDom.has(elHash))
                hashesInDom.set(elHash, true);
            // or remove it
            else
                toRemove.push(el);
            el = el.nextSibling;
        }
        // remove old shapes
        for (const el of toRemove)
            root.removeChild(el);
        // insert shapes that are not yet in dom
        for (const sc of shapes) {
            if (!hashesInDom.get(sc.hash))
                root.appendChild(renderShape(sc));
        }
    }

    function createElement(tagName) {
        return document.createElementNS('http://www.w3.org/2000/svg', tagName);
    }
    function renderSvg(state, svg, customSvg) {
        const d = state.drawable, curD = d.current, cur = curD && curD.mouseSq ? curD : undefined, arrowDests = new Map(), bounds = state.dom.bounds(), nonPieceAutoShapes = d.autoShapes.filter(autoShape => !autoShape.piece);
        for (const s of d.shapes.concat(nonPieceAutoShapes).concat(cur ? [cur] : [])) {
            if (s.dest)
                arrowDests.set(s.dest, (arrowDests.get(s.dest) || 0) + 1);
        }
        const shapes = d.shapes.concat(nonPieceAutoShapes).map((s) => {
            return {
                shape: s,
                current: false,
                hash: shapeHash(s, arrowDests, false, bounds),
            };
        });
        if (cur)
            shapes.push({
                shape: cur,
                current: true,
                hash: shapeHash(cur, arrowDests, true, bounds),
            });
        const fullHash = shapes.map(sc => sc.hash).join(';');
        if (fullHash === state.drawable.prevSvgHash)
            return;
        state.drawable.prevSvgHash = fullHash;
        /*
          -- DOM hierarchy --
          <svg class="cg-shapes">      (<= svg)
            <defs>
              ...(for brushes)...
            </defs>
            <g>
              ...(for arrows and circles)...
            </g>
          </svg>
          <svg class="cg-custom-svgs"> (<= customSvg)
            <g>
              ...(for custom svgs)...
            </g>
          </svg>
        */
        const defsEl = svg.querySelector('defs');
        const shapesEl = svg.querySelector('g');
        const customSvgsEl = customSvg.querySelector('g');
        syncDefs(d, shapes, defsEl);
        syncShapes(shapes.filter(s => !s.shape.customSvg), shapesEl, shape => renderShape$1(state, shape, d.brushes, arrowDests, bounds));
        syncShapes(shapes.filter(s => s.shape.customSvg), customSvgsEl, shape => renderShape$1(state, shape, d.brushes, arrowDests, bounds));
    }
    // append only. Don't try to update/remove.
    function syncDefs(d, shapes, defsEl) {
        const brushes = new Map();
        let brush;
        for (const s of shapes) {
            if (s.shape.dest) {
                brush = d.brushes[s.shape.brush];
                if (s.shape.modifiers)
                    brush = makeCustomBrush(brush, s.shape.modifiers);
                brushes.set(brush.key, brush);
            }
        }
        const keysInDom = new Set();
        let el = defsEl.firstChild;
        while (el) {
            keysInDom.add(el.getAttribute('cgKey'));
            el = el.nextSibling;
        }
        for (const [key, brush] of brushes.entries()) {
            if (!keysInDom.has(key))
                defsEl.appendChild(renderMarker(brush));
        }
    }
    function shapeHash({ orig, dest, brush, piece, modifiers, customSvg }, arrowDests, current, bounds) {
        return [
            bounds.width,
            bounds.height,
            current,
            orig,
            dest,
            brush,
            dest && (arrowDests.get(dest) || 0) > 1,
            piece && pieceHash(piece),
            modifiers && modifiersHash(modifiers),
            customSvg && customSvgHash(customSvg),
        ]
            .filter(x => x)
            .join(',');
    }
    function pieceHash(piece) {
        return [piece.color, piece.role, piece.scale].filter(x => x).join(',');
    }
    function modifiersHash(m) {
        return '' + (m.lineWidth || '');
    }
    function customSvgHash(s) {
        // Rolling hash with base 31 (cf. https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript)
        let h = 0;
        for (let i = 0; i < s.length; i++) {
            h = ((h << 5) - h + s.charCodeAt(i)) >>> 0;
        }
        return 'custom-' + h.toString();
    }
    function renderShape$1(state, { shape, current, hash }, brushes, arrowDests, bounds) {
        let el;
        const orig = orient(key2pos(shape.orig), state.orientation);
        if (shape.customSvg) {
            el = renderCustomSvg(shape.customSvg, orig, bounds);
        }
        else {
            if (shape.dest) {
                let brush = brushes[shape.brush];
                if (shape.modifiers)
                    brush = makeCustomBrush(brush, shape.modifiers);
                el = renderArrow(brush, orig, orient(key2pos(shape.dest), state.orientation), current, (arrowDests.get(shape.dest) || 0) > 1, bounds);
            }
            else
                el = renderCircle(brushes[shape.brush], orig, current, bounds);
        }
        el.setAttribute('cgHash', hash);
        return el;
    }
    function renderCustomSvg(customSvg, pos, bounds) {
        const [x, y] = pos2user(pos, bounds);
        // Translate to top-left of `orig` square
        const g = setAttributes(createElement('g'), { transform: `translate(${x},${y})` });
        // Give 100x100 coordinate system to the user for `orig` square
        const svg = setAttributes(createElement('svg'), { width: 1, height: 1, viewBox: '0 0 100 100' });
        g.appendChild(svg);
        svg.innerHTML = customSvg;
        return g;
    }
    function renderCircle(brush, pos, current, bounds) {
        const o = pos2user(pos, bounds), widths = circleWidth(), radius = (bounds.width + bounds.height) / (4 * Math.max(bounds.width, bounds.height));
        return setAttributes(createElement('circle'), {
            stroke: brush.color,
            'stroke-width': widths[current ? 0 : 1],
            fill: 'none',
            opacity: opacity(brush, current),
            cx: o[0],
            cy: o[1],
            r: radius - widths[1] / 2,
        });
    }
    function renderArrow(brush, orig, dest, current, shorten, bounds) {
        const m = arrowMargin(shorten && !current), a = pos2user(orig, bounds), b = pos2user(dest, bounds), dx = b[0] - a[0], dy = b[1] - a[1], angle = Math.atan2(dy, dx), xo = Math.cos(angle) * m, yo = Math.sin(angle) * m;
        return setAttributes(createElement('line'), {
            stroke: brush.color,
            'stroke-width': lineWidth(brush, current),
            'stroke-linecap': 'round',
            'marker-end': 'url(#arrowhead-' + brush.key + ')',
            opacity: opacity(brush, current),
            x1: a[0],
            y1: a[1],
            x2: b[0] - xo,
            y2: b[1] - yo,
        });
    }
    function renderMarker(brush) {
        const marker = setAttributes(createElement('marker'), {
            id: 'arrowhead-' + brush.key,
            orient: 'auto',
            markerWidth: 4,
            markerHeight: 8,
            refX: 2.05,
            refY: 2.01,
        });
        marker.appendChild(setAttributes(createElement('path'), {
            d: 'M0,0 V4 L3,2 Z',
            fill: brush.color,
        }));
        marker.setAttribute('cgKey', brush.key);
        return marker;
    }
    function setAttributes(el, attrs) {
        for (const key in attrs)
            el.setAttribute(key, attrs[key]);
        return el;
    }
    function orient(pos, color) {
        return color === 'white' ? pos : [7 - pos[0], 7 - pos[1]];
    }
    function makeCustomBrush(base, modifiers) {
        return {
            color: base.color,
            opacity: Math.round(base.opacity * 10) / 10,
            lineWidth: Math.round(modifiers.lineWidth || base.lineWidth),
            key: [base.key, modifiers.lineWidth].filter(x => x).join(''),
        };
    }
    function circleWidth() {
        return [3 / 64, 4 / 64];
    }
    function lineWidth(brush, current) {
        return ((brush.lineWidth || 10) * (current ? 0.85 : 1)) / 64;
    }
    function opacity(brush, current) {
        return (brush.opacity || 1) * (current ? 0.9 : 1);
    }
    function arrowMargin(shorten) {
        return (shorten ? 20 : 10) / 64;
    }
    function pos2user(pos, bounds) {
        const xScale = Math.min(1, bounds.width / bounds.height);
        const yScale = Math.min(1, bounds.height / bounds.width);
        return [(pos[0] - 3.5) * xScale, (3.5 - pos[1]) * yScale];
    }

    function renderWrap(element, s) {
        // .cg-wrap (element passed to Chessground)
        //   cg-container
        //     cg-board
        //     svg.cg-shapes
        //       defs
        //       g
        //     svg.cg-custom-svgs
        //       g
        //     cg-auto-pieces
        //     coords.ranks
        //     coords.files
        //     piece.ghost
        element.innerHTML = '';
        // ensure the cg-wrap class is set
        // so bounds calculation can use the CSS width/height values
        // add that class yourself to the element before calling chessground
        // for a slight performance improvement! (avoids recomputing style)
        element.classList.add('cg-wrap');
        for (const c of colors)
            element.classList.toggle('orientation-' + c, s.orientation === c);
        element.classList.toggle('manipulable', !s.viewOnly);
        const container = createEl('cg-container');
        element.appendChild(container);
        const board = createEl('cg-board');
        container.appendChild(board);
        let svg;
        let customSvg;
        let autoPieces;
        if (s.drawable.visible) {
            svg = setAttributes(createElement('svg'), {
                class: 'cg-shapes',
                viewBox: '-4 -4 8 8',
                preserveAspectRatio: 'xMidYMid slice',
            });
            svg.appendChild(createElement('defs'));
            svg.appendChild(createElement('g'));
            customSvg = setAttributes(createElement('svg'), {
                class: 'cg-custom-svgs',
                viewBox: '-3.5 -3.5 8 8',
                preserveAspectRatio: 'xMidYMid slice',
            });
            customSvg.appendChild(createElement('g'));
            autoPieces = createEl('cg-auto-pieces');
            container.appendChild(svg);
            container.appendChild(customSvg);
            container.appendChild(autoPieces);
        }
        if (s.coordinates) {
            const orientClass = s.orientation === 'black' ? ' black' : '';
            const ranksPositionClass = s.ranksPosition === 'left' ? ' left' : '';
            container.appendChild(renderCoords(ranks, 'ranks' + orientClass + ranksPositionClass));
            container.appendChild(renderCoords(files, 'files' + orientClass));
        }
        let ghost;
        if (s.draggable.showGhost) {
            ghost = createEl('piece', 'ghost');
            setVisible(ghost, false);
            container.appendChild(ghost);
        }
        return {
            board,
            container,
            wrap: element,
            ghost,
            svg,
            customSvg,
            autoPieces,
        };
    }
    function renderCoords(elems, className) {
        const el = createEl('coords', className);
        let f;
        for (const elem of elems) {
            f = createEl('coord');
            f.textContent = elem;
            el.appendChild(f);
        }
        return el;
    }

    function drop(s, e) {
        if (!s.dropmode.active)
            return;
        unsetPremove(s);
        unsetPredrop(s);
        const piece = s.dropmode.piece;
        if (piece) {
            s.pieces.set('a0', piece);
            const position = eventPosition(e);
            const dest = position && getKeyAtDomPos(position, whitePov(s), s.dom.bounds());
            if (dest)
                dropNewPiece(s, 'a0', dest);
        }
        s.dom.redraw();
    }

    function bindBoard(s, onResize) {
        const boardEl = s.dom.elements.board;
        if ('ResizeObserver' in window)
            new ResizeObserver(onResize).observe(s.dom.elements.wrap);
        if (s.viewOnly)
            return;
        // Cannot be passive, because we prevent touch scrolling and dragging of
        // selected elements.
        const onStart = startDragOrDraw(s);
        boardEl.addEventListener('touchstart', onStart, {
            passive: false,
        });
        boardEl.addEventListener('mousedown', onStart, {
            passive: false,
        });
        if (s.disableContextMenu || s.drawable.enabled) {
            boardEl.addEventListener('contextmenu', e => e.preventDefault());
        }
    }
    // returns the unbind function
    function bindDocument(s, onResize) {
        const unbinds = [];
        // Old versions of Edge and Safari do not support ResizeObserver. Send
        // chessground.resize if a user action has changed the bounds of the board.
        if (!('ResizeObserver' in window))
            unbinds.push(unbindable(document.body, 'chessground.resize', onResize));
        if (!s.viewOnly) {
            const onmove = dragOrDraw(s, move, move$1);
            const onend = dragOrDraw(s, end$1, end$2);
            for (const ev of ['touchmove', 'mousemove'])
                unbinds.push(unbindable(document, ev, onmove));
            for (const ev of ['touchend', 'mouseup'])
                unbinds.push(unbindable(document, ev, onend));
            const onScroll = () => s.dom.bounds.clear();
            unbinds.push(unbindable(document, 'scroll', onScroll, { capture: true, passive: true }));
            unbinds.push(unbindable(window, 'resize', onScroll, { passive: true }));
        }
        return () => unbinds.forEach(f => f());
    }
    function unbindable(el, eventName, callback, options) {
        el.addEventListener(eventName, callback, options);
        return () => el.removeEventListener(eventName, callback, options);
    }
    function startDragOrDraw(s) {
        return e => {
            if (s.draggable.current)
                cancel(s);
            else if (s.drawable.current)
                cancel$1(s);
            else if (e.shiftKey || isRightButton(e)) {
                if (s.drawable.enabled)
                    start$3(s, e);
            }
            else if (!s.viewOnly) {
                if (s.dropmode.active)
                    drop(s, e);
                else
                    start$2(s, e);
            }
        };
    }
    function dragOrDraw(s, withDrag, withDraw) {
        return e => {
            if (s.drawable.current) {
                if (s.drawable.enabled)
                    withDraw(s, e);
            }
            else if (!s.viewOnly)
                withDrag(s, e);
        };
    }

    // ported from https://github.com/veloce/lichobile/blob/master/src/js/chessground/view.js
    // in case of bugs, blame @veloce
    function render$1(s) {
        const asWhite = whitePov(s), posToTranslate$1 = posToTranslate(s.dom.bounds()), boardEl = s.dom.elements.board, pieces = s.pieces, curAnim = s.animation.current, anims = curAnim ? curAnim.plan.anims : new Map(), fadings = curAnim ? curAnim.plan.fadings : new Map(), curDrag = s.draggable.current, squares = computeSquareClasses(s), samePieces = new Set(), sameSquares = new Set(), movedPieces = new Map(), movedSquares = new Map(); // by class name
        let k, el, pieceAtKey, elPieceName, anim, fading, pMvdset, pMvd, sMvdset, sMvd;
        // walk over all board dom elements, apply animations and flag moved pieces
        el = boardEl.firstChild;
        while (el) {
            k = el.cgKey;
            if (isPieceNode(el)) {
                pieceAtKey = pieces.get(k);
                anim = anims.get(k);
                fading = fadings.get(k);
                elPieceName = el.cgPiece;
                // if piece not being dragged anymore, remove dragging style
                if (el.cgDragging && (!curDrag || curDrag.orig !== k)) {
                    el.classList.remove('dragging');
                    translate(el, posToTranslate$1(key2pos(k), asWhite));
                    el.cgDragging = false;
                }
                // remove fading class if it still remains
                if (!fading && el.cgFading) {
                    el.cgFading = false;
                    el.classList.remove('fading');
                }
                // there is now a piece at this dom key
                if (pieceAtKey) {
                    // continue animation if already animating and same piece
                    // (otherwise it could animate a captured piece)
                    if (anim && el.cgAnimating && elPieceName === pieceNameOf(pieceAtKey)) {
                        const pos = key2pos(k);
                        pos[0] += anim[2];
                        pos[1] += anim[3];
                        el.classList.add('anim');
                        translate(el, posToTranslate$1(pos, asWhite));
                    }
                    else if (el.cgAnimating) {
                        el.cgAnimating = false;
                        el.classList.remove('anim');
                        translate(el, posToTranslate$1(key2pos(k), asWhite));
                        if (s.addPieceZIndex)
                            el.style.zIndex = posZIndex(key2pos(k), asWhite);
                    }
                    // same piece: flag as same
                    if (elPieceName === pieceNameOf(pieceAtKey) && (!fading || !el.cgFading)) {
                        samePieces.add(k);
                    }
                    // different piece: flag as moved unless it is a fading piece
                    else {
                        if (fading && elPieceName === pieceNameOf(fading)) {
                            el.classList.add('fading');
                            el.cgFading = true;
                        }
                        else {
                            appendValue(movedPieces, elPieceName, el);
                        }
                    }
                }
                // no piece: flag as moved
                else {
                    appendValue(movedPieces, elPieceName, el);
                }
            }
            else if (isSquareNode(el)) {
                const cn = el.className;
                if (squares.get(k) === cn)
                    sameSquares.add(k);
                else
                    appendValue(movedSquares, cn, el);
            }
            el = el.nextSibling;
        }
        // walk over all squares in current set, apply dom changes to moved squares
        // or append new squares
        for (const [sk, className] of squares) {
            if (!sameSquares.has(sk)) {
                sMvdset = movedSquares.get(className);
                sMvd = sMvdset && sMvdset.pop();
                const translation = posToTranslate$1(key2pos(sk), asWhite);
                if (sMvd) {
                    sMvd.cgKey = sk;
                    translate(sMvd, translation);
                }
                else {
                    const squareNode = createEl('square', className);
                    squareNode.cgKey = sk;
                    translate(squareNode, translation);
                    boardEl.insertBefore(squareNode, boardEl.firstChild);
                }
            }
        }
        // walk over all pieces in current set, apply dom changes to moved pieces
        // or append new pieces
        for (const [k, p] of pieces) {
            anim = anims.get(k);
            if (!samePieces.has(k)) {
                pMvdset = movedPieces.get(pieceNameOf(p));
                pMvd = pMvdset && pMvdset.pop();
                // a same piece was moved
                if (pMvd) {
                    // apply dom changes
                    pMvd.cgKey = k;
                    if (pMvd.cgFading) {
                        pMvd.classList.remove('fading');
                        pMvd.cgFading = false;
                    }
                    const pos = key2pos(k);
                    if (s.addPieceZIndex)
                        pMvd.style.zIndex = posZIndex(pos, asWhite);
                    if (anim) {
                        pMvd.cgAnimating = true;
                        pMvd.classList.add('anim');
                        pos[0] += anim[2];
                        pos[1] += anim[3];
                    }
                    translate(pMvd, posToTranslate$1(pos, asWhite));
                }
                // no piece in moved obj: insert the new piece
                // assumes the new piece is not being dragged
                else {
                    const pieceName = pieceNameOf(p), pieceNode = createEl('piece', pieceName), pos = key2pos(k);
                    pieceNode.cgPiece = pieceName;
                    pieceNode.cgKey = k;
                    if (anim) {
                        pieceNode.cgAnimating = true;
                        pos[0] += anim[2];
                        pos[1] += anim[3];
                    }
                    translate(pieceNode, posToTranslate$1(pos, asWhite));
                    if (s.addPieceZIndex)
                        pieceNode.style.zIndex = posZIndex(pos, asWhite);
                    boardEl.appendChild(pieceNode);
                }
            }
        }
        // remove any element that remains in the moved sets
        for (const nodes of movedPieces.values())
            removeNodes(s, nodes);
        for (const nodes of movedSquares.values())
            removeNodes(s, nodes);
    }
    function renderResized$1(s) {
        const asWhite = whitePov(s), posToTranslate$1 = posToTranslate(s.dom.bounds());
        let el = s.dom.elements.board.firstChild;
        while (el) {
            if ((isPieceNode(el) && !el.cgAnimating) || isSquareNode(el)) {
                translate(el, posToTranslate$1(key2pos(el.cgKey), asWhite));
            }
            el = el.nextSibling;
        }
    }
    function updateBounds(s) {
        const bounds = s.dom.elements.wrap.getBoundingClientRect();
        const container = s.dom.elements.container;
        const ratio = bounds.height / bounds.width;
        const width = (Math.floor((bounds.width * window.devicePixelRatio) / 8) * 8) / window.devicePixelRatio;
        const height = width * ratio;
        container.style.width = width + 'px';
        container.style.height = height + 'px';
        s.dom.bounds.clear();
        if (s.addDimensionsCssVars) {
            document.documentElement.style.setProperty('--cg-width', width + 'px');
            document.documentElement.style.setProperty('--cg-height', height + 'px');
        }
    }
    function isPieceNode(el) {
        return el.tagName === 'PIECE';
    }
    function isSquareNode(el) {
        return el.tagName === 'SQUARE';
    }
    function removeNodes(s, nodes) {
        for (const node of nodes)
            s.dom.elements.board.removeChild(node);
    }
    function posZIndex(pos, asWhite) {
        const minZ = 3;
        const rank = pos[1];
        const z = asWhite ? minZ + 7 - rank : minZ + rank;
        return `${z}`;
    }
    function pieceNameOf(piece) {
        return `${piece.color} ${piece.role}`;
    }
    function computeSquareClasses(s) {
        var _a;
        const squares = new Map();
        if (s.lastMove && s.highlight.lastMove)
            for (const k of s.lastMove) {
                addSquare(squares, k, 'last-move');
            }
        if (s.check && s.highlight.check)
            addSquare(squares, s.check, 'check');
        if (s.selected) {
            addSquare(squares, s.selected, 'selected');
            if (s.movable.showDests) {
                const dests = (_a = s.movable.dests) === null || _a === void 0 ? void 0 : _a.get(s.selected);
                if (dests)
                    for (const k of dests) {
                        addSquare(squares, k, 'move-dest' + (s.pieces.has(k) ? ' oc' : ''));
                    }
                const pDests = s.premovable.dests;
                if (pDests)
                    for (const k of pDests) {
                        addSquare(squares, k, 'premove-dest' + (s.pieces.has(k) ? ' oc' : ''));
                    }
            }
        }
        const premove = s.premovable.current;
        if (premove)
            for (const k of premove)
                addSquare(squares, k, 'current-premove');
        else if (s.predroppable.current)
            addSquare(squares, s.predroppable.current.key, 'current-premove');
        const o = s.exploding;
        if (o)
            for (const k of o.keys)
                addSquare(squares, k, 'exploding' + o.stage);
        return squares;
    }
    function addSquare(squares, key, klass) {
        const classes = squares.get(key);
        if (classes)
            squares.set(key, `${classes} ${klass}`);
        else
            squares.set(key, klass);
    }
    function appendValue(map, key, value) {
        const arr = map.get(key);
        if (arr)
            arr.push(value);
        else
            map.set(key, [value]);
    }

    function render(state, autoPieceEl) {
        const autoPieces = state.drawable.autoShapes.filter(autoShape => autoShape.piece);
        const autoPieceShapes = autoPieces.map((s) => {
            return {
                shape: s,
                hash: hash$2(s),
                current: false,
            };
        });
        syncShapes(autoPieceShapes, autoPieceEl, shape => renderShape(state, shape, state.dom.bounds()));
    }
    function renderResized(state) {
        var _a;
        const asWhite = whitePov(state), posToTranslate$1 = posToTranslate(state.dom.bounds());
        let el = (_a = state.dom.elements.autoPieces) === null || _a === void 0 ? void 0 : _a.firstChild;
        while (el) {
            translateAndScale(el, posToTranslate$1(key2pos(el.cgKey), asWhite), el.cgScale);
            el = el.nextSibling;
        }
    }
    function renderShape(state, { shape, hash }, bounds) {
        var _a, _b, _c;
        const orig = shape.orig;
        const role = (_a = shape.piece) === null || _a === void 0 ? void 0 : _a.role;
        const color = (_b = shape.piece) === null || _b === void 0 ? void 0 : _b.color;
        const scale = (_c = shape.piece) === null || _c === void 0 ? void 0 : _c.scale;
        const pieceEl = createEl('piece', `${role} ${color}`);
        pieceEl.setAttribute('cgHash', hash);
        pieceEl.cgKey = orig;
        pieceEl.cgScale = scale;
        translateAndScale(pieceEl, posToTranslate(bounds)(key2pos(orig), whitePov(state)), scale);
        return pieceEl;
    }
    function hash$2(autoPiece) {
        var _a, _b, _c;
        return [autoPiece.orig, (_a = autoPiece.piece) === null || _a === void 0 ? void 0 : _a.role, (_b = autoPiece.piece) === null || _b === void 0 ? void 0 : _b.color, (_c = autoPiece.piece) === null || _c === void 0 ? void 0 : _c.scale].join(',');
    }

    function Chessground(element, config) {
        const maybeState = defaults();
        configure(maybeState, config || {});
        function redrawAll() {
            const prevUnbind = 'dom' in maybeState ? maybeState.dom.unbind : undefined;
            // compute bounds from existing board element if possible
            // this allows non-square boards from CSS to be handled (for 3D)
            const elements = renderWrap(element, maybeState), bounds = memo(() => elements.board.getBoundingClientRect()), redrawNow = (skipSvg) => {
                render$1(state);
                if (elements.autoPieces)
                    render(state, elements.autoPieces);
                if (!skipSvg && elements.svg)
                    renderSvg(state, elements.svg, elements.customSvg);
            }, onResize = () => {
                updateBounds(state);
                renderResized$1(state);
                if (elements.autoPieces)
                    renderResized(state);
            };
            const state = maybeState;
            state.dom = {
                elements,
                bounds,
                redraw: debounceRedraw(redrawNow),
                redrawNow,
                unbind: prevUnbind,
            };
            state.drawable.prevSvgHash = '';
            updateBounds(state);
            redrawNow(false);
            bindBoard(state, onResize);
            if (!prevUnbind)
                state.dom.unbind = bindDocument(state, onResize);
            state.events.insert && state.events.insert(elements);
            return state;
        }
        return start$1(redrawAll(), redrawAll);
    }
    function debounceRedraw(redrawNow) {
        let redrawing = false;
        return () => {
            if (redrawing)
                return;
            redrawing = true;
            requestAnimationFrame(() => {
                redrawNow();
                redrawing = false;
            });
        };
    }

    const renderBoard = (ctrl) => h('div.game-page__board', h('div.cg-wrap', {
        hook: {
            insert(vnode) {
                ctrl.setGround(Chessground(vnode.elm, ctrl.chessgroundConfig()));
            },
        },
    }, 'loading...'));
    const renderPlayer = (ctrl, color, clock, name, title, rating, aiLevel) => {
        return h('div.game-page__player', {
            class: {
                turn: ctrl.chess.turn == color,
            },
        }, [
            h('div.game-page__player__user', [
                title && h('span.game-page__player__user__title.display-5', title),
                h('span.game-page__player__user__name.display-5', aiLevel ? `Stockfish level ${aiLevel}` : name || 'Anon'),
                h('span.game-page__player__user__rating', rating || ''),
            ]),
            h('div.game-page__player__clock.display-6', clock),
        ]);
    };

    const renderGame = ctrl => _ => [
        h(`div.game-page.game-page--${ctrl.game.id}`, {
            hook: {
                destroy: ctrl.onUnmount,
            },
        }, [
            renderGamePlayer(ctrl, opposite(ctrl.pov)),
            renderBoard(ctrl),
            renderGamePlayer(ctrl, ctrl.pov),
            ctrl.playing() ? renderButtons(ctrl) : renderState(ctrl),
        ]),
    ];
    const renderButtons = (ctrl) => h('div.btn-group.mt-4', [
        h('button.btn.btn-secondary', {
            attrs: { type: 'button', disabled: !ctrl.playing() },
            on: {
                click() {
                    if (confirm('Confirm?'))
                        ctrl.resign();
                },
            },
        }, ctrl.chess.fullmoves > 1 ? 'Resign' : 'Abort'),
    ]);
    const renderState = (ctrl) => h('div.game-page__state', ctrl.game.state.status);
    const renderGamePlayer = (ctrl, color) => {
        const p = ctrl.game[color];
        const clock = clockContent(ctrl.timeOf(color), color == ctrl.chess.turn && ctrl.chess.fullmoves > 1 && ctrl.playing() ? ctrl.lastUpdateAt - Date.now() : 0);
        return renderPlayer(ctrl, color, clock, p.name, p.title, p.rating, p.aiLevel);
    };

    const renderHome = (ctrl) => ctrl.auth.me ? userHome(ctrl) : anonHome();
    const userHome = (ctrl) => [
        h("div", [
            h("div.btn-group.mt-5", [
                h("button.btn.btn-outline-primary.btn-lg", {
                    attrs: { type: "button" },
                    on: { click: () => ctrl.playPool(10, 0) },
                }, "Player matching"),
            ]),
            h("h2.mt-5", "Games in progress"),
            h("div.games", renderGames(ctrl.games)),
            h("h2.mt-5.mb-3", "About"),
            renderAbout(),
        ]),
    ];
    const renderGames = (ongoing) => ongoing.games.length
        ? ongoing.games.map(renderGameWidget)
        : [h("p", "No ongoing games at the moment")];
    const renderGameWidget = (game) => h(`a.game-widget.text-decoration-none.game-widget--${game.id}`, {
        attrs: href(`/game/${game.gameId}`),
    }, [
        h("span.game-widget__opponent", [
            h("span.game-widget__opponent__name", game.opponent.username || "Anon"),
            game.opponent.rating &&
                h("span.game-widget__opponent__rating", game.opponent.rating),
        ]),
        h("span.game-widget__board.cg-wrap", {
            hook: {
                insert(vnode) {
                    const el = vnode.elm;
                    Chessground(el, {
                        fen: game.fen,
                        orientation: game.color,
                        lastMove: game.lastMove.match(/.{1,2}/g),
                        viewOnly: true,
                        movable: { free: false },
                        drawable: { visible: false },
                        coordinates: false,
                    });
                },
            },
        }, "board"),
    ]);
    const anonHome = () => [
        h("div.login.text-center", [
            renderAbout(),
            h("div.big", [h("p", "Please log in to continue.")]),
            // home page
            // h(
            //   "a.btn.btn-primary.btn-lg.mt-5",
            //   {
            //     attrs: href("/login"),
            //   },
            //   "Login with Lichess"
            // ),
            // h(
            //   "a.btn.btn-primary.btn-lg.mt-5",
            //   {
            //     attrs: href("/login"),
            //   },
            //   "Login with Lichess"
            // ),
        ]),
    ];
    const renderAbout = () => h("div.about", [
    // h(
    //   "p",
    //   "This is an example for a fully client side OAuth app that uses various Lichess APIs."
    // ),
    // h("ul", [
    //   h(
    //     "li",
    //     h(
    //       "a",
    //       {
    //         attrs: {href: "https://github.com/lichess-org/api-demo"},
    //       },
    //       "Source code of this demo"
    //     )
    //   ),
    //   h(
    //     "li",
    //     h(
    //       "a",
    //       {
    //         attrs: {
    //           href: "https://github.com/lichess-org/api-demo#lichess-oauth-app-demo",
    //         },
    //       },
    //       "README"
    //     )
    //   ),
    //   h(
    //     "li",
    //     h(
    //       "a",
    //       {
    //         attrs: {href: "https://lichess.org/api"},
    //       },
    //       "Lichess.org API documentation"
    //     )
    //   ),
    // ]),
    // h("p", [
    //   "Press ",
    //   h("code", "<Ctrl+Shift+j>"),
    //   " to open your browser console and view incoming events.",
    //   h("br"),
    //   "Check out the network tab as well to view API calls.",
    // ]),
    ]);

    const renderSeek = (ctrl) => (_) => [
        h("div.seek-page", {
            hook: {
                destroy: ctrl.onUnmount,
            },
        }, [
            h("div.seek-page__awaiting", [
                spinner(),
                h("span.ms-3", "Awaiting a game..."),
            ]),
            h("a.btn.btn-secondary", {
                attrs: { href: url("/") },
            }, "Cancel"),
        ]),
    ];

    const renderTv = ctrl => _ => [
        h(`div.game-page.game-page--${ctrl.game.id}`, {
            hook: {
                destroy: ctrl.onUnmount,
            },
        }, [
            renderTvPlayer(ctrl, opposite(ctrl.game.orientation)),
            renderBoard(ctrl),
            renderTvPlayer(ctrl, ctrl.game.orientation),
        ]),
    ];
    const renderTvPlayer = (ctrl, color) => {
        const p = ctrl.player(color);
        const clock = clockContent(p.seconds && p.seconds * 1000, color == ctrl.chess.turn ? ctrl.lastUpdateAt - Date.now() : 0);
        return renderPlayer(ctrl, color, clock, p.user.name, p.user.title, p.rating);
    };

    async function view(ctrl) {
        return await layout(ctrl, selectRenderer(ctrl)(ctrl));
    }
    const selectRenderer = (ctrl) => {
        if (ctrl.page == "game")
            return ctrl.game ? renderGame(ctrl.game) : renderLoading;
        if (ctrl.page == "home")
            return renderHome;
        if (ctrl.page == "seek" && ctrl.seek)
            return renderSeek(ctrl.seek);
        if (ctrl.page == "challenge" && ctrl.challenge)
            return renderChallenge(ctrl.challenge);
        if (ctrl.page == "tv")
            return ctrl.tv ? renderTv(ctrl.tv) : renderLoading;
        return renderNotFound;
    };
    const renderLoading = (_) => [loadingBody()];
    const renderNotFound = (_) => [h("h1", "Not found")];
    const loadingBody = () => h("div.loading", spinner());
    const spinner = () => h("div.spinner-border.text-primary", { attrs: { role: "status" } }, h("span.visually-hidden", "Loading..."));

    var dropdown = {exports: {}};

    var top = 'top';
    var bottom = 'bottom';
    var right = 'right';
    var left = 'left';
    var auto = 'auto';
    var basePlacements = [top, bottom, right, left];
    var start = 'start';
    var end = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper = 'popper';
    var reference = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main$1 = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main$1, afterMain, beforeWrite, write, afterWrite];

    function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    function getWindow(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    // and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect$2,
      requires: ['computeStyles']
    };

    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }

    var max = Math.max;
    var min = Math.min;
    var round = Math.round;

    function getBoundingClientRect(element, includeScale) {
      if (includeScale === void 0) {
        includeScale = false;
      }

      var rect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;

      if (isHTMLElement(element) && includeScale) {
        var offsetHeight = element.offsetHeight;
        var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
        // Fallback to 1 in case both values are `0`

        if (offsetWidth > 0) {
          scaleX = round(rect.width) / offsetWidth || 1;
        }

        if (offsetHeight > 0) {
          scaleY = round(rect.height) / offsetHeight || 1;
        }
      }

      return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
      };
    }

    // means it doesn't take into account transforms.

    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223

      var width = element.offsetWidth;
      var height = element.offsetHeight;

      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }

      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }

      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
      };
    }

    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle$1(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
      var isIE = navigator.userAgent.indexOf('Trident') !== -1;

      if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle$1(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode(element);

      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }

      while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    function within(min$1, value, max$1) {
      return max(min$1, min(value, max$1));
    }
    function withinMaxClamp(min, value, max) {
      var v = within(min, value, max);
      return v > max ? max : v;
    }

    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }

    function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    };

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top : left;
      var maxProp = axis === 'y' ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$1(_ref2) {
      var state = _ref2.state,
          options = _ref2.options;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      if (process.env.NODE_ENV !== "production") {
        if (!isHTMLElement(arrowElement)) {
          console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
        }
      }

      if (!contains(state.elements.popper, arrowElement)) {
        if (process.env.NODE_ENV !== "production") {
          console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
        }

        return;
      }

      state.elements.arrow = arrowElement;
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$1,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    function getVariation(placement) {
      return placement.split('-')[1];
    }

    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsetsByDPR(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var win = window;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round(x * dpr) / dpr || 0,
        y: round(y * dpr) / dpr || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          variation = _ref2.variation,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets,
          isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x,
          x = _offsets$x === void 0 ? 0 : _offsets$x,
          _offsets$y = offsets.y,
          y = _offsets$y === void 0 ? 0 : _offsets$y;

      var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left;
      var sideY = top;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';

        if (offsetParent === getWindow(popper)) {
          offsetParent = getDocumentElement(popper);

          if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
            heightProp = 'scrollHeight';
            widthProp = 'scrollWidth';
          }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


        offsetParent = offsetParent;

        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
          offsetParent[heightProp];
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
          offsetParent[widthProp];
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref4.x;
      y = _ref4.y;

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref5) {
      var state = _ref5.state,
          options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

      if (process.env.NODE_ENV !== "production") {
        var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

        if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
          return transitionProperty.indexOf(property) >= 0;
        })) {
          console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
        }
      }

      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
        })));
      }

      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    var passive = {
      passive: true
    };

    function effect(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect,
      data: {}
    };

    var hash$1 = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
      });
    }

    var hash = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
      });
    }

    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    function getViewportRect(element) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
      // can be obscured underneath it.
      // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
      // if it isn't open, so if this isn't available, the popper will be detected
      // to overflow the bottom of the screen too early.

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent

        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle$1(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle$1(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect(element) {
      var rect = getBoundingClientRect(element);
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

      if (!isElement(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;

        if (process.env.NODE_ENV !== "production") {
          console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
        }
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement(placement);

        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$1 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }

      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }

    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function (side) {
        return overflow[side] >= 0;
      });
    }

    function hide(_ref) {
      var state = _ref.state,
          name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
      });
    } // eslint-disable-next-line import/no-unused-modules


    var hide$1 = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['preventOverflow'],
      fn: hide
    };

    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis) {
        var _offsetModifierState$;

        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min$1 = offset + overflow[mainSide];
        var max$1 = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _offsetModifierState$2;

        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _len = altAxis === 'y' ? 'height' : 'width';

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round(rect.width) / element.offsetWidth || 1;
      var scaleY = round(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    } // Returns the composite rect of an element relative to its offsetParent.
    // Composite means it takes into account transforms as well as layout.


    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    function debounce(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    function format(str) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return [].concat(args).reduce(function (p, c) {
        return p.replace(/%s/, c);
      }, str);
    }

    var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
    var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
    var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
    function validateModifiers(modifiers) {
      modifiers.forEach(function (modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function (value, index, self) {
          return self.indexOf(value) === index;
        }).forEach(function (key) {
          switch (key) {
            case 'name':
              if (typeof modifier.name !== 'string') {
                console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
              }

              break;

            case 'enabled':
              if (typeof modifier.enabled !== 'boolean') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
              }

              break;

            case 'phase':
              if (modifierPhases.indexOf(modifier.phase) < 0) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
              }

              break;

            case 'fn':
              if (typeof modifier.fn !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'effect':
              if (modifier.effect != null && typeof modifier.effect !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'requires':
              if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
              }

              break;

            case 'requiresIfExists':
              if (!Array.isArray(modifier.requiresIfExists)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
              }

              break;

            case 'options':
            case 'data':
              break;

            default:
              console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
                return "\"" + s + "\"";
              }).join(', ') + "; but \"" + key + "\" was provided.");
          }

          modifier.requires && modifier.requires.forEach(function (requirement) {
            if (modifiers.find(function (mod) {
              return mod.name === requirement;
            }) == null) {
              console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            }
          });
        });
      });
    }

    function uniqueBy(arr, fn) {
      var identifiers = new Set();
      return arr.filter(function (item) {
        var identifier = fn(item);

        if (!identifiers.has(identifier)) {
          identifiers.add(identifier);
          return true;
        }
      });
    }

    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
    var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
    var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(setOptionsAction) {
            var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options);
            state.scrollParents = {
              reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
              popper: listScrollParents(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            }); // Validate the provided modifiers so that the consumer will get warned
            // if one of the modifiers is invalid for any reason

            if (process.env.NODE_ENV !== "production") {
              var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
                var name = _ref.name;
                return name;
              });
              validateModifiers(modifiers);

              if (getBasePlacement(state.options.placement) === auto) {
                var flipModifier = state.orderedModifiers.find(function (_ref2) {
                  var name = _ref2.name;
                  return name === 'flip';
                });

                if (!flipModifier) {
                  console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
                }
              }

              var _getComputedStyle = getComputedStyle$1(popper),
                  marginTop = _getComputedStyle.marginTop,
                  marginRight = _getComputedStyle.marginRight,
                  marginBottom = _getComputedStyle.marginBottom,
                  marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
              // cause bugs with positioning, so we'll warn the consumer


              if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                return parseFloat(margin);
              })) {
                console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
              }
            }

            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {
              if (process.env.NODE_ENV !== "production") {
                console.error(INVALID_ELEMENT_ERROR);
              }

              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            var __debug_loops__ = 0;

            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (process.env.NODE_ENV !== "production") {
                __debug_loops__ += 1;

                if (__debug_loops__ > 100) {
                  console.error(INFINITE_LOOP_ERROR);
                  break;
                }
              }

              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {
          if (process.env.NODE_ENV !== "production") {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref3) {
            var name = _ref3.name,
                _ref3$options = _ref3.options,
                options = _ref3$options === void 0 ? {} : _ref3$options,
                effect = _ref3.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }
    var createPopper$2 = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules

    var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
    var createPopper$1 = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers$1
    }); // eslint-disable-next-line import/no-unused-modules

    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers
    }); // eslint-disable-next-line import/no-unused-modules

    var lib = /*#__PURE__*/Object.freeze({
        __proto__: null,
        popperGenerator: popperGenerator,
        detectOverflow: detectOverflow,
        createPopperBase: createPopper$2,
        createPopper: createPopper,
        createPopperLite: createPopper$1,
        top: top,
        bottom: bottom,
        right: right,
        left: left,
        auto: auto,
        basePlacements: basePlacements,
        start: start,
        end: end,
        clippingParents: clippingParents,
        viewport: viewport,
        popper: popper,
        reference: reference,
        variationPlacements: variationPlacements,
        placements: placements,
        beforeRead: beforeRead,
        read: read,
        afterRead: afterRead,
        beforeMain: beforeMain,
        main: main$1,
        afterMain: afterMain,
        beforeWrite: beforeWrite,
        write: write,
        afterWrite: afterWrite,
        modifierPhases: modifierPhases,
        applyStyles: applyStyles$1,
        arrow: arrow$1,
        computeStyles: computeStyles$1,
        eventListeners: eventListeners,
        flip: flip$1,
        hide: hide$1,
        offset: offset$1,
        popperOffsets: popperOffsets$1,
        preventOverflow: preventOverflow$1
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(lib);

    var eventHandler = {exports: {}};

    /*!
      * Bootstrap event-handler.js v5.1.3 (https://getbootstrap.com/)
      * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
      * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
      */

    (function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, (function () {
      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): util/index.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */

      const getjQuery = () => {
        const {
          jQuery
        } = window;

        if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
          return jQuery;
        }

        return null;
      };

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): dom/event-handler.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */
      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
      const stripNameRegex = /\..*/;
      const stripUidRegex = /::\d+$/;
      const eventRegistry = {}; // Events storage

      let uidEvent = 1;
      const customEvents = {
        mouseenter: 'mouseover',
        mouseleave: 'mouseout'
      };
      const customEventsRegex = /^(mouseenter|mouseleave)/i;
      const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
      /**
       * ------------------------------------------------------------------------
       * Private methods
       * ------------------------------------------------------------------------
       */

      function getUidEvent(element, uid) {
        return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
      }

      function getEvent(element) {
        const uid = getUidEvent(element);
        element.uidEvent = uid;
        eventRegistry[uid] = eventRegistry[uid] || {};
        return eventRegistry[uid];
      }

      function bootstrapHandler(element, fn) {
        return function handler(event) {
          event.delegateTarget = element;

          if (handler.oneOff) {
            EventHandler.off(element, event.type, fn);
          }

          return fn.apply(element, [event]);
        };
      }

      function bootstrapDelegationHandler(element, selector, fn) {
        return function handler(event) {
          const domElements = element.querySelectorAll(selector);

          for (let {
            target
          } = event; target && target !== this; target = target.parentNode) {
            for (let i = domElements.length; i--;) {
              if (domElements[i] === target) {
                event.delegateTarget = target;

                if (handler.oneOff) {
                  EventHandler.off(element, event.type, selector, fn);
                }

                return fn.apply(target, [event]);
              }
            }
          } // To please ESLint


          return null;
        };
      }

      function findHandler(events, handler, delegationSelector = null) {
        const uidEventList = Object.keys(events);

        for (let i = 0, len = uidEventList.length; i < len; i++) {
          const event = events[uidEventList[i]];

          if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {
            return event;
          }
        }

        return null;
      }

      function normalizeParams(originalTypeEvent, handler, delegationFn) {
        const delegation = typeof handler === 'string';
        const originalHandler = delegation ? delegationFn : handler;
        let typeEvent = getTypeEvent(originalTypeEvent);
        const isNative = nativeEvents.has(typeEvent);

        if (!isNative) {
          typeEvent = originalTypeEvent;
        }

        return [delegation, originalHandler, typeEvent];
      }

      function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
        if (typeof originalTypeEvent !== 'string' || !element) {
          return;
        }

        if (!handler) {
          handler = delegationFn;
          delegationFn = null;
        } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
        // this prevents the handler from being dispatched the same way as mouseover or mouseout does


        if (customEventsRegex.test(originalTypeEvent)) {
          const wrapFn = fn => {
            return function (event) {
              if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
                return fn.call(this, event);
              }
            };
          };

          if (delegationFn) {
            delegationFn = wrapFn(delegationFn);
          } else {
            handler = wrapFn(handler);
          }
        }

        const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
        const events = getEvent(element);
        const handlers = events[typeEvent] || (events[typeEvent] = {});
        const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);

        if (previousFn) {
          previousFn.oneOff = previousFn.oneOff && oneOff;
          return;
        }

        const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
        const fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
        fn.delegationSelector = delegation ? handler : null;
        fn.originalHandler = originalHandler;
        fn.oneOff = oneOff;
        fn.uidEvent = uid;
        handlers[uid] = fn;
        element.addEventListener(typeEvent, fn, delegation);
      }

      function removeHandler(element, events, typeEvent, handler, delegationSelector) {
        const fn = findHandler(events[typeEvent], handler, delegationSelector);

        if (!fn) {
          return;
        }

        element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
        delete events[typeEvent][fn.uidEvent];
      }

      function removeNamespacedHandlers(element, events, typeEvent, namespace) {
        const storeElementEvent = events[typeEvent] || {};
        Object.keys(storeElementEvent).forEach(handlerKey => {
          if (handlerKey.includes(namespace)) {
            const event = storeElementEvent[handlerKey];
            removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
          }
        });
      }

      function getTypeEvent(event) {
        // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
        event = event.replace(stripNameRegex, '');
        return customEvents[event] || event;
      }

      const EventHandler = {
        on(element, event, handler, delegationFn) {
          addHandler(element, event, handler, delegationFn, false);
        },

        one(element, event, handler, delegationFn) {
          addHandler(element, event, handler, delegationFn, true);
        },

        off(element, originalTypeEvent, handler, delegationFn) {
          if (typeof originalTypeEvent !== 'string' || !element) {
            return;
          }

          const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
          const inNamespace = typeEvent !== originalTypeEvent;
          const events = getEvent(element);
          const isNamespace = originalTypeEvent.startsWith('.');

          if (typeof originalHandler !== 'undefined') {
            // Simplest case: handler is passed, remove that listener ONLY.
            if (!events || !events[typeEvent]) {
              return;
            }

            removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
            return;
          }

          if (isNamespace) {
            Object.keys(events).forEach(elementEvent => {
              removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
            });
          }

          const storeElementEvent = events[typeEvent] || {};
          Object.keys(storeElementEvent).forEach(keyHandlers => {
            const handlerKey = keyHandlers.replace(stripUidRegex, '');

            if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
              const event = storeElementEvent[keyHandlers];
              removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
            }
          });
        },

        trigger(element, event, args) {
          if (typeof event !== 'string' || !element) {
            return null;
          }

          const $ = getjQuery();
          const typeEvent = getTypeEvent(event);
          const inNamespace = event !== typeEvent;
          const isNative = nativeEvents.has(typeEvent);
          let jQueryEvent;
          let bubbles = true;
          let nativeDispatch = true;
          let defaultPrevented = false;
          let evt = null;

          if (inNamespace && $) {
            jQueryEvent = $.Event(event, args);
            $(element).trigger(jQueryEvent);
            bubbles = !jQueryEvent.isPropagationStopped();
            nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
            defaultPrevented = jQueryEvent.isDefaultPrevented();
          }

          if (isNative) {
            evt = document.createEvent('HTMLEvents');
            evt.initEvent(typeEvent, bubbles, true);
          } else {
            evt = new CustomEvent(event, {
              bubbles,
              cancelable: true
            });
          } // merge custom information in our event


          if (typeof args !== 'undefined') {
            Object.keys(args).forEach(key => {
              Object.defineProperty(evt, key, {
                get() {
                  return args[key];
                }

              });
            });
          }

          if (defaultPrevented) {
            evt.preventDefault();
          }

          if (nativeDispatch) {
            element.dispatchEvent(evt);
          }

          if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {
            jQueryEvent.preventDefault();
          }

          return evt;
        }

      };

      return EventHandler;

    }));

    }(eventHandler));

    var manipulator = {exports: {}};

    /*!
      * Bootstrap manipulator.js v5.1.3 (https://getbootstrap.com/)
      * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
      * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
      */

    (function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, (function () {
      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): dom/manipulator.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */
      function normalizeData(val) {
        if (val === 'true') {
          return true;
        }

        if (val === 'false') {
          return false;
        }

        if (val === Number(val).toString()) {
          return Number(val);
        }

        if (val === '' || val === 'null') {
          return null;
        }

        return val;
      }

      function normalizeDataKey(key) {
        return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);
      }

      const Manipulator = {
        setDataAttribute(element, key, value) {
          element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
        },

        removeDataAttribute(element, key) {
          element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
        },

        getDataAttributes(element) {
          if (!element) {
            return {};
          }

          const attributes = {};
          Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {
            let pureKey = key.replace(/^bs/, '');
            pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
            attributes[pureKey] = normalizeData(element.dataset[key]);
          });
          return attributes;
        },

        getDataAttribute(element, key) {
          return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
        },

        offset(element) {
          const rect = element.getBoundingClientRect();
          return {
            top: rect.top + window.pageYOffset,
            left: rect.left + window.pageXOffset
          };
        },

        position(element) {
          return {
            top: element.offsetTop,
            left: element.offsetLeft
          };
        }

      };

      return Manipulator;

    }));

    }(manipulator));

    var selectorEngine = {exports: {}};

    /*!
      * Bootstrap selector-engine.js v5.1.3 (https://getbootstrap.com/)
      * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
      * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
      */

    (function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, (function () {
      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): util/index.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */

      const isElement = obj => {
        if (!obj || typeof obj !== 'object') {
          return false;
        }

        if (typeof obj.jquery !== 'undefined') {
          obj = obj[0];
        }

        return typeof obj.nodeType !== 'undefined';
      };

      const isVisible = element => {
        if (!isElement(element) || element.getClientRects().length === 0) {
          return false;
        }

        return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
      };

      const isDisabled = element => {
        if (!element || element.nodeType !== Node.ELEMENT_NODE) {
          return true;
        }

        if (element.classList.contains('disabled')) {
          return true;
        }

        if (typeof element.disabled !== 'undefined') {
          return element.disabled;
        }

        return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
      };

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): dom/selector-engine.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */
      const NODE_TEXT = 3;
      const SelectorEngine = {
        find(selector, element = document.documentElement) {
          return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
        },

        findOne(selector, element = document.documentElement) {
          return Element.prototype.querySelector.call(element, selector);
        },

        children(element, selector) {
          return [].concat(...element.children).filter(child => child.matches(selector));
        },

        parents(element, selector) {
          const parents = [];
          let ancestor = element.parentNode;

          while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
            if (ancestor.matches(selector)) {
              parents.push(ancestor);
            }

            ancestor = ancestor.parentNode;
          }

          return parents;
        },

        prev(element, selector) {
          let previous = element.previousElementSibling;

          while (previous) {
            if (previous.matches(selector)) {
              return [previous];
            }

            previous = previous.previousElementSibling;
          }

          return [];
        },

        next(element, selector) {
          let next = element.nextElementSibling;

          while (next) {
            if (next.matches(selector)) {
              return [next];
            }

            next = next.nextElementSibling;
          }

          return [];
        },

        focusableChildren(element) {
          const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(selector => `${selector}:not([tabindex^="-"])`).join(', ');
          return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));
        }

      };

      return SelectorEngine;

    }));

    }(selectorEngine));

    var baseComponent = {exports: {}};

    var data = {exports: {}};

    /*!
      * Bootstrap data.js v5.1.3 (https://getbootstrap.com/)
      * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
      * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
      */

    (function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, (function () {
      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): dom/data.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */

      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */
      const elementMap = new Map();
      const data = {
        set(element, key, instance) {
          if (!elementMap.has(element)) {
            elementMap.set(element, new Map());
          }

          const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
          // can be removed later when multiple key/instances are fine to be used

          if (!instanceMap.has(key) && instanceMap.size !== 0) {
            // eslint-disable-next-line no-console
            console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
            return;
          }

          instanceMap.set(key, instance);
        },

        get(element, key) {
          if (elementMap.has(element)) {
            return elementMap.get(element).get(key) || null;
          }

          return null;
        },

        remove(element, key) {
          if (!elementMap.has(element)) {
            return;
          }

          const instanceMap = elementMap.get(element);
          instanceMap.delete(key); // free up element references if there are no instances left for an element

          if (instanceMap.size === 0) {
            elementMap.delete(element);
          }
        }

      };

      return data;

    }));

    }(data));

    /*!
      * Bootstrap base-component.js v5.1.3 (https://getbootstrap.com/)
      * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
      * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
      */

    (function (module, exports) {
    (function (global, factory) {
      module.exports = factory(data.exports, eventHandler.exports) ;
    })(commonjsGlobal, (function (Data, EventHandler) {
      const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

      const Data__default = /*#__PURE__*/_interopDefaultLegacy(Data);
      const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): util/index.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */
      const MILLISECONDS_MULTIPLIER = 1000;
      const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

      const getTransitionDurationFromElement = element => {
        if (!element) {
          return 0;
        } // Get transition-duration of the element


        let {
          transitionDuration,
          transitionDelay
        } = window.getComputedStyle(element);
        const floatTransitionDuration = Number.parseFloat(transitionDuration);
        const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

        if (!floatTransitionDuration && !floatTransitionDelay) {
          return 0;
        } // If multiple durations are defined, take the first


        transitionDuration = transitionDuration.split(',')[0];
        transitionDelay = transitionDelay.split(',')[0];
        return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
      };

      const triggerTransitionEnd = element => {
        element.dispatchEvent(new Event(TRANSITION_END));
      };

      const isElement = obj => {
        if (!obj || typeof obj !== 'object') {
          return false;
        }

        if (typeof obj.jquery !== 'undefined') {
          obj = obj[0];
        }

        return typeof obj.nodeType !== 'undefined';
      };

      const getElement = obj => {
        if (isElement(obj)) {
          // it's a jQuery object or a node element
          return obj.jquery ? obj[0] : obj;
        }

        if (typeof obj === 'string' && obj.length > 0) {
          return document.querySelector(obj);
        }

        return null;
      };

      const execute = callback => {
        if (typeof callback === 'function') {
          callback();
        }
      };

      const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
        if (!waitForTransition) {
          execute(callback);
          return;
        }

        const durationPadding = 5;
        const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
        let called = false;

        const handler = ({
          target
        }) => {
          if (target !== transitionElement) {
            return;
          }

          called = true;
          transitionElement.removeEventListener(TRANSITION_END, handler);
          execute(callback);
        };

        transitionElement.addEventListener(TRANSITION_END, handler);
        setTimeout(() => {
          if (!called) {
            triggerTransitionEnd(transitionElement);
          }
        }, emulatedDuration);
      };

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): base-component.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */
      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      const VERSION = '5.1.3';

      class BaseComponent {
        constructor(element) {
          element = getElement(element);

          if (!element) {
            return;
          }

          this._element = element;
          Data__default.default.set(this._element, this.constructor.DATA_KEY, this);
        }

        dispose() {
          Data__default.default.remove(this._element, this.constructor.DATA_KEY);
          EventHandler__default.default.off(this._element, this.constructor.EVENT_KEY);
          Object.getOwnPropertyNames(this).forEach(propertyName => {
            this[propertyName] = null;
          });
        }

        _queueCallback(callback, element, isAnimated = true) {
          executeAfterTransition(callback, element, isAnimated);
        }
        /** Static */


        static getInstance(element) {
          return Data__default.default.get(getElement(element), this.DATA_KEY);
        }

        static getOrCreateInstance(element, config = {}) {
          return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
        }

        static get VERSION() {
          return VERSION;
        }

        static get NAME() {
          throw new Error('You have to implement the static method "NAME", for each component!');
        }

        static get DATA_KEY() {
          return `bs.${this.NAME}`;
        }

        static get EVENT_KEY() {
          return `.${this.DATA_KEY}`;
        }

      }

      return BaseComponent;

    }));

    }(baseComponent));

    /*!
      * Bootstrap dropdown.js v5.1.3 (https://getbootstrap.com/)
      * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
      * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
      */

    (function (module, exports) {
    (function (global, factory) {
      module.exports = factory(require$$0, eventHandler.exports, manipulator.exports, selectorEngine.exports, baseComponent.exports) ;
    })(commonjsGlobal, (function (Popper, EventHandler, Manipulator, SelectorEngine, BaseComponent) {
      const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

      function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        const n = Object.create(null);
        if (e) {
          for (const k in e) {
            if (k !== 'default') {
              const d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: () => e[k]
              });
            }
          }
        }
        n.default = e;
        return Object.freeze(n);
      }

      const Popper__namespace = /*#__PURE__*/_interopNamespace(Popper);
      const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
      const Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);
      const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);
      const BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): util/index.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */

      const toType = obj => {
        if (obj === null || obj === undefined) {
          return `${obj}`;
        }

        return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
      };

      const getSelector = element => {
        let selector = element.getAttribute('data-bs-target');

        if (!selector || selector === '#') {
          let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
          // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
          // `document.querySelector` will rightfully complain it is invalid.
          // See https://github.com/twbs/bootstrap/issues/32273

          if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
            return null;
          } // Just in case some CMS puts out a full URL with the anchor appended


          if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
            hrefAttr = `#${hrefAttr.split('#')[1]}`;
          }

          selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
        }

        return selector;
      };

      const getElementFromSelector = element => {
        const selector = getSelector(element);
        return selector ? document.querySelector(selector) : null;
      };

      const isElement = obj => {
        if (!obj || typeof obj !== 'object') {
          return false;
        }

        if (typeof obj.jquery !== 'undefined') {
          obj = obj[0];
        }

        return typeof obj.nodeType !== 'undefined';
      };

      const getElement = obj => {
        if (isElement(obj)) {
          // it's a jQuery object or a node element
          return obj.jquery ? obj[0] : obj;
        }

        if (typeof obj === 'string' && obj.length > 0) {
          return document.querySelector(obj);
        }

        return null;
      };

      const typeCheckConfig = (componentName, config, configTypes) => {
        Object.keys(configTypes).forEach(property => {
          const expectedTypes = configTypes[property];
          const value = config[property];
          const valueType = value && isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new TypeError(`${componentName.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
          }
        });
      };

      const isVisible = element => {
        if (!isElement(element) || element.getClientRects().length === 0) {
          return false;
        }

        return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
      };

      const isDisabled = element => {
        if (!element || element.nodeType !== Node.ELEMENT_NODE) {
          return true;
        }

        if (element.classList.contains('disabled')) {
          return true;
        }

        if (typeof element.disabled !== 'undefined') {
          return element.disabled;
        }

        return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
      };

      const noop = () => {};

      const getjQuery = () => {
        const {
          jQuery
        } = window;

        if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
          return jQuery;
        }

        return null;
      };

      const DOMContentLoadedCallbacks = [];

      const onDOMContentLoaded = callback => {
        if (document.readyState === 'loading') {
          // add listener on the first call when the document is in loading state
          if (!DOMContentLoadedCallbacks.length) {
            document.addEventListener('DOMContentLoaded', () => {
              DOMContentLoadedCallbacks.forEach(callback => callback());
            });
          }

          DOMContentLoadedCallbacks.push(callback);
        } else {
          callback();
        }
      };

      const isRTL = () => document.documentElement.dir === 'rtl';

      const defineJQueryPlugin = plugin => {
        onDOMContentLoaded(() => {
          const $ = getjQuery();
          /* istanbul ignore if */

          if ($) {
            const name = plugin.NAME;
            const JQUERY_NO_CONFLICT = $.fn[name];
            $.fn[name] = plugin.jQueryInterface;
            $.fn[name].Constructor = plugin;

            $.fn[name].noConflict = () => {
              $.fn[name] = JQUERY_NO_CONFLICT;
              return plugin.jQueryInterface;
            };
          }
        });
      };
      /**
       * Return the previous/next element of a list.
       *
       * @param {array} list    The list of elements
       * @param activeElement   The active element
       * @param shouldGetNext   Choose to get next or previous element
       * @param isCycleAllowed
       * @return {Element|elem} The proper element
       */


      const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
        let index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed

        if (index === -1) {
          return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];
        }

        const listLength = list.length;
        index += shouldGetNext ? 1 : -1;

        if (isCycleAllowed) {
          index = (index + listLength) % listLength;
        }

        return list[Math.max(0, Math.min(index, listLength - 1))];
      };

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): dropdown.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */
      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      const NAME = 'dropdown';
      const DATA_KEY = 'bs.dropdown';
      const EVENT_KEY = `.${DATA_KEY}`;
      const DATA_API_KEY = '.data-api';
      const ESCAPE_KEY = 'Escape';
      const SPACE_KEY = 'Space';
      const TAB_KEY = 'Tab';
      const ARROW_UP_KEY = 'ArrowUp';
      const ARROW_DOWN_KEY = 'ArrowDown';
      const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

      const REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEY}|${ARROW_DOWN_KEY}|${ESCAPE_KEY}`);
      const EVENT_HIDE = `hide${EVENT_KEY}`;
      const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
      const EVENT_SHOW = `show${EVENT_KEY}`;
      const EVENT_SHOWN = `shown${EVENT_KEY}`;
      const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;
      const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY}${DATA_API_KEY}`;
      const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY}${DATA_API_KEY}`;
      const CLASS_NAME_SHOW = 'show';
      const CLASS_NAME_DROPUP = 'dropup';
      const CLASS_NAME_DROPEND = 'dropend';
      const CLASS_NAME_DROPSTART = 'dropstart';
      const CLASS_NAME_NAVBAR = 'navbar';
      const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="dropdown"]';
      const SELECTOR_MENU = '.dropdown-menu';
      const SELECTOR_NAVBAR_NAV = '.navbar-nav';
      const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
      const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
      const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
      const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
      const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
      const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
      const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
      const Default = {
        offset: [0, 2],
        boundary: 'clippingParents',
        reference: 'toggle',
        display: 'dynamic',
        popperConfig: null,
        autoClose: true
      };
      const DefaultType = {
        offset: '(array|string|function)',
        boundary: '(string|element)',
        reference: '(string|element|object)',
        display: 'string',
        popperConfig: '(null|object|function)',
        autoClose: '(boolean|string)'
      };
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      class Dropdown extends BaseComponent__default.default {
        constructor(element, config) {
          super(element);
          this._popper = null;
          this._config = this._getConfig(config);
          this._menu = this._getMenuElement();
          this._inNavbar = this._detectNavbar();
        } // Getters


        static get Default() {
          return Default;
        }

        static get DefaultType() {
          return DefaultType;
        }

        static get NAME() {
          return NAME;
        } // Public


        toggle() {
          return this._isShown() ? this.hide() : this.show();
        }

        show() {
          if (isDisabled(this._element) || this._isShown(this._menu)) {
            return;
          }

          const relatedTarget = {
            relatedTarget: this._element
          };
          const showEvent = EventHandler__default.default.trigger(this._element, EVENT_SHOW, relatedTarget);

          if (showEvent.defaultPrevented) {
            return;
          }

          const parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar

          if (this._inNavbar) {
            Manipulator__default.default.setDataAttribute(this._menu, 'popper', 'none');
          } else {
            this._createPopper(parent);
          } // If this is a touch-enabled device we add extra
          // empty mouseover listeners to the body's immediate children;
          // only needed because of broken event delegation on iOS
          // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


          if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {
            [].concat(...document.body.children).forEach(elem => EventHandler__default.default.on(elem, 'mouseover', noop));
          }

          this._element.focus();

          this._element.setAttribute('aria-expanded', true);

          this._menu.classList.add(CLASS_NAME_SHOW);

          this._element.classList.add(CLASS_NAME_SHOW);

          EventHandler__default.default.trigger(this._element, EVENT_SHOWN, relatedTarget);
        }

        hide() {
          if (isDisabled(this._element) || !this._isShown(this._menu)) {
            return;
          }

          const relatedTarget = {
            relatedTarget: this._element
          };

          this._completeHide(relatedTarget);
        }

        dispose() {
          if (this._popper) {
            this._popper.destroy();
          }

          super.dispose();
        }

        update() {
          this._inNavbar = this._detectNavbar();

          if (this._popper) {
            this._popper.update();
          }
        } // Private


        _completeHide(relatedTarget) {
          const hideEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE, relatedTarget);

          if (hideEvent.defaultPrevented) {
            return;
          } // If this is a touch-enabled device we remove the extra
          // empty mouseover listeners we added for iOS support


          if ('ontouchstart' in document.documentElement) {
            [].concat(...document.body.children).forEach(elem => EventHandler__default.default.off(elem, 'mouseover', noop));
          }

          if (this._popper) {
            this._popper.destroy();
          }

          this._menu.classList.remove(CLASS_NAME_SHOW);

          this._element.classList.remove(CLASS_NAME_SHOW);

          this._element.setAttribute('aria-expanded', 'false');

          Manipulator__default.default.removeDataAttribute(this._menu, 'popper');
          EventHandler__default.default.trigger(this._element, EVENT_HIDDEN, relatedTarget);
        }

        _getConfig(config) {
          config = { ...this.constructor.Default,
            ...Manipulator__default.default.getDataAttributes(this._element),
            ...config
          };
          typeCheckConfig(NAME, config, this.constructor.DefaultType);

          if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
            // Popper virtual elements require a getBoundingClientRect method
            throw new TypeError(`${NAME.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
          }

          return config;
        }

        _createPopper(parent) {
          if (typeof Popper__namespace === 'undefined') {
            throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
          }

          let referenceElement = this._element;

          if (this._config.reference === 'parent') {
            referenceElement = parent;
          } else if (isElement(this._config.reference)) {
            referenceElement = getElement(this._config.reference);
          } else if (typeof this._config.reference === 'object') {
            referenceElement = this._config.reference;
          }

          const popperConfig = this._getPopperConfig();

          const isDisplayStatic = popperConfig.modifiers.find(modifier => modifier.name === 'applyStyles' && modifier.enabled === false);
          this._popper = Popper__namespace.createPopper(referenceElement, this._menu, popperConfig);

          if (isDisplayStatic) {
            Manipulator__default.default.setDataAttribute(this._menu, 'popper', 'static');
          }
        }

        _isShown(element = this._element) {
          return element.classList.contains(CLASS_NAME_SHOW);
        }

        _getMenuElement() {
          return SelectorEngine__default.default.next(this._element, SELECTOR_MENU)[0];
        }

        _getPlacement() {
          const parentDropdown = this._element.parentNode;

          if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
            return PLACEMENT_RIGHT;
          }

          if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
            return PLACEMENT_LEFT;
          } // We need to trim the value because custom properties can also include spaces


          const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';

          if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
            return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
          }

          return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
        }

        _detectNavbar() {
          return this._element.closest(`.${CLASS_NAME_NAVBAR}`) !== null;
        }

        _getOffset() {
          const {
            offset
          } = this._config;

          if (typeof offset === 'string') {
            return offset.split(',').map(val => Number.parseInt(val, 10));
          }

          if (typeof offset === 'function') {
            return popperData => offset(popperData, this._element);
          }

          return offset;
        }

        _getPopperConfig() {
          const defaultBsPopperConfig = {
            placement: this._getPlacement(),
            modifiers: [{
              name: 'preventOverflow',
              options: {
                boundary: this._config.boundary
              }
            }, {
              name: 'offset',
              options: {
                offset: this._getOffset()
              }
            }]
          }; // Disable Popper if we have a static display

          if (this._config.display === 'static') {
            defaultBsPopperConfig.modifiers = [{
              name: 'applyStyles',
              enabled: false
            }];
          }

          return { ...defaultBsPopperConfig,
            ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)
          };
        }

        _selectMenuItem({
          key,
          target
        }) {
          const items = SelectorEngine__default.default.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);

          if (!items.length) {
            return;
          } // if target isn't included in items (e.g. when expanding the dropdown)
          // allow cycling to get the last item in case key equals ARROW_UP_KEY


          getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();
        } // Static


        static jQueryInterface(config) {
          return this.each(function () {
            const data = Dropdown.getOrCreateInstance(this, config);

            if (typeof config !== 'string') {
              return;
            }

            if (typeof data[config] === 'undefined') {
              throw new TypeError(`No method named "${config}"`);
            }

            data[config]();
          });
        }

        static clearMenus(event) {
          if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY)) {
            return;
          }

          const toggles = SelectorEngine__default.default.find(SELECTOR_DATA_TOGGLE);

          for (let i = 0, len = toggles.length; i < len; i++) {
            const context = Dropdown.getInstance(toggles[i]);

            if (!context || context._config.autoClose === false) {
              continue;
            }

            if (!context._isShown()) {
              continue;
            }

            const relatedTarget = {
              relatedTarget: context._element
            };

            if (event) {
              const composedPath = event.composedPath();
              const isMenuTarget = composedPath.includes(context._menu);

              if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
                continue;
              } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu


              if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY || /input|select|option|textarea|form/i.test(event.target.tagName))) {
                continue;
              }

              if (event.type === 'click') {
                relatedTarget.clickEvent = event;
              }
            }

            context._completeHide(relatedTarget);
          }
        }

        static getParentFromElement(element) {
          return getElementFromSelector(element) || element.parentNode;
        }

        static dataApiKeydownHandler(event) {
          // If not input/textarea:
          //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
          // If input/textarea:
          //  - If space key => not a dropdown command
          //  - If key is other than escape
          //    - If key is not up or down => not a dropdown command
          //    - If trigger inside the menu => not a dropdown command
          if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {
            return;
          }

          const isActive = this.classList.contains(CLASS_NAME_SHOW);

          if (!isActive && event.key === ESCAPE_KEY) {
            return;
          }

          event.preventDefault();
          event.stopPropagation();

          if (isDisabled(this)) {
            return;
          }

          const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE) ? this : SelectorEngine__default.default.prev(this, SELECTOR_DATA_TOGGLE)[0];
          const instance = Dropdown.getOrCreateInstance(getToggleButton);

          if (event.key === ESCAPE_KEY) {
            instance.hide();
            return;
          }

          if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {
            if (!isActive) {
              instance.show();
            }

            instance._selectMenuItem(event);

            return;
          }

          if (!isActive || event.key === SPACE_KEY) {
            Dropdown.clearMenus();
          }
        }

      }
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      EventHandler__default.default.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE, Dropdown.dataApiKeydownHandler);
      EventHandler__default.default.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
      EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, Dropdown.clearMenus);
      EventHandler__default.default.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
      EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
        event.preventDefault();
        Dropdown.getOrCreateInstance(this).toggle();
      });
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       * add .Dropdown to jQuery only if jQuery is present
       */

      defineJQueryPlugin(Dropdown);

      return Dropdown;

    }));

    }(dropdown));

    var collapse = {exports: {}};

    /*!
      * Bootstrap collapse.js v5.1.3 (https://getbootstrap.com/)
      * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
      * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
      */

    (function (module, exports) {
    (function (global, factory) {
      module.exports = factory(data.exports, eventHandler.exports, manipulator.exports, selectorEngine.exports, baseComponent.exports) ;
    })(commonjsGlobal, (function (Data, EventHandler, Manipulator, SelectorEngine, BaseComponent) {
      const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : { default: e };

      const Data__default = /*#__PURE__*/_interopDefaultLegacy(Data);
      const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);
      const Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);
      const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);
      const BaseComponent__default = /*#__PURE__*/_interopDefaultLegacy(BaseComponent);

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): util/index.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */

      const toType = obj => {
        if (obj === null || obj === undefined) {
          return `${obj}`;
        }

        return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
      };

      const getSelector = element => {
        let selector = element.getAttribute('data-bs-target');

        if (!selector || selector === '#') {
          let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
          // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
          // `document.querySelector` will rightfully complain it is invalid.
          // See https://github.com/twbs/bootstrap/issues/32273

          if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
            return null;
          } // Just in case some CMS puts out a full URL with the anchor appended


          if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
            hrefAttr = `#${hrefAttr.split('#')[1]}`;
          }

          selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
        }

        return selector;
      };

      const getSelectorFromElement = element => {
        const selector = getSelector(element);

        if (selector) {
          return document.querySelector(selector) ? selector : null;
        }

        return null;
      };

      const getElementFromSelector = element => {
        const selector = getSelector(element);
        return selector ? document.querySelector(selector) : null;
      };

      const isElement = obj => {
        if (!obj || typeof obj !== 'object') {
          return false;
        }

        if (typeof obj.jquery !== 'undefined') {
          obj = obj[0];
        }

        return typeof obj.nodeType !== 'undefined';
      };

      const getElement = obj => {
        if (isElement(obj)) {
          // it's a jQuery object or a node element
          return obj.jquery ? obj[0] : obj;
        }

        if (typeof obj === 'string' && obj.length > 0) {
          return document.querySelector(obj);
        }

        return null;
      };

      const typeCheckConfig = (componentName, config, configTypes) => {
        Object.keys(configTypes).forEach(property => {
          const expectedTypes = configTypes[property];
          const value = config[property];
          const valueType = value && isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new TypeError(`${componentName.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
          }
        });
      };
      /**
       * Trick to restart an element's animation
       *
       * @param {HTMLElement} element
       * @return void
       *
       * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
       */


      const reflow = element => {
        // eslint-disable-next-line no-unused-expressions
        element.offsetHeight;
      };

      const getjQuery = () => {
        const {
          jQuery
        } = window;

        if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
          return jQuery;
        }

        return null;
      };

      const DOMContentLoadedCallbacks = [];

      const onDOMContentLoaded = callback => {
        if (document.readyState === 'loading') {
          // add listener on the first call when the document is in loading state
          if (!DOMContentLoadedCallbacks.length) {
            document.addEventListener('DOMContentLoaded', () => {
              DOMContentLoadedCallbacks.forEach(callback => callback());
            });
          }

          DOMContentLoadedCallbacks.push(callback);
        } else {
          callback();
        }
      };

      const defineJQueryPlugin = plugin => {
        onDOMContentLoaded(() => {
          const $ = getjQuery();
          /* istanbul ignore if */

          if ($) {
            const name = plugin.NAME;
            const JQUERY_NO_CONFLICT = $.fn[name];
            $.fn[name] = plugin.jQueryInterface;
            $.fn[name].Constructor = plugin;

            $.fn[name].noConflict = () => {
              $.fn[name] = JQUERY_NO_CONFLICT;
              return plugin.jQueryInterface;
            };
          }
        });
      };

      /**
       * --------------------------------------------------------------------------
       * Bootstrap (v5.1.3): collapse.js
       * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
       * --------------------------------------------------------------------------
       */
      /**
       * ------------------------------------------------------------------------
       * Constants
       * ------------------------------------------------------------------------
       */

      const NAME = 'collapse';
      const DATA_KEY = 'bs.collapse';
      const EVENT_KEY = `.${DATA_KEY}`;
      const DATA_API_KEY = '.data-api';
      const Default = {
        toggle: true,
        parent: null
      };
      const DefaultType = {
        toggle: 'boolean',
        parent: '(null|element)'
      };
      const EVENT_SHOW = `show${EVENT_KEY}`;
      const EVENT_SHOWN = `shown${EVENT_KEY}`;
      const EVENT_HIDE = `hide${EVENT_KEY}`;
      const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
      const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;
      const CLASS_NAME_SHOW = 'show';
      const CLASS_NAME_COLLAPSE = 'collapse';
      const CLASS_NAME_COLLAPSING = 'collapsing';
      const CLASS_NAME_COLLAPSED = 'collapsed';
      const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
      const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
      const WIDTH = 'width';
      const HEIGHT = 'height';
      const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
      const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="collapse"]';
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

      class Collapse extends BaseComponent__default.default {
        constructor(element, config) {
          super(element);
          this._isTransitioning = false;
          this._config = this._getConfig(config);
          this._triggerArray = [];
          const toggleList = SelectorEngine__default.default.find(SELECTOR_DATA_TOGGLE);

          for (let i = 0, len = toggleList.length; i < len; i++) {
            const elem = toggleList[i];
            const selector = getSelectorFromElement(elem);
            const filterElement = SelectorEngine__default.default.find(selector).filter(foundElem => foundElem === this._element);

            if (selector !== null && filterElement.length) {
              this._selector = selector;

              this._triggerArray.push(elem);
            }
          }

          this._initializeChildren();

          if (!this._config.parent) {
            this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
          }

          if (this._config.toggle) {
            this.toggle();
          }
        } // Getters


        static get Default() {
          return Default;
        }

        static get NAME() {
          return NAME;
        } // Public


        toggle() {
          if (this._isShown()) {
            this.hide();
          } else {
            this.show();
          }
        }

        show() {
          if (this._isTransitioning || this._isShown()) {
            return;
          }

          let actives = [];
          let activesData;

          if (this._config.parent) {
            const children = SelectorEngine__default.default.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
            actives = SelectorEngine__default.default.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)); // remove children if greater depth
          }

          const container = SelectorEngine__default.default.findOne(this._selector);

          if (actives.length) {
            const tempActiveData = actives.find(elem => container !== elem);
            activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;

            if (activesData && activesData._isTransitioning) {
              return;
            }
          }

          const startEvent = EventHandler__default.default.trigger(this._element, EVENT_SHOW);

          if (startEvent.defaultPrevented) {
            return;
          }

          actives.forEach(elemActive => {
            if (container !== elemActive) {
              Collapse.getOrCreateInstance(elemActive, {
                toggle: false
              }).hide();
            }

            if (!activesData) {
              Data__default.default.set(elemActive, DATA_KEY, null);
            }
          });

          const dimension = this._getDimension();

          this._element.classList.remove(CLASS_NAME_COLLAPSE);

          this._element.classList.add(CLASS_NAME_COLLAPSING);

          this._element.style[dimension] = 0;

          this._addAriaAndCollapsedClass(this._triggerArray, true);

          this._isTransitioning = true;

          const complete = () => {
            this._isTransitioning = false;

            this._element.classList.remove(CLASS_NAME_COLLAPSING);

            this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

            this._element.style[dimension] = '';
            EventHandler__default.default.trigger(this._element, EVENT_SHOWN);
          };

          const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
          const scrollSize = `scroll${capitalizedDimension}`;

          this._queueCallback(complete, this._element, true);

          this._element.style[dimension] = `${this._element[scrollSize]}px`;
        }

        hide() {
          if (this._isTransitioning || !this._isShown()) {
            return;
          }

          const startEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE);

          if (startEvent.defaultPrevented) {
            return;
          }

          const dimension = this._getDimension();

          this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
          reflow(this._element);

          this._element.classList.add(CLASS_NAME_COLLAPSING);

          this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

          const triggerArrayLength = this._triggerArray.length;

          for (let i = 0; i < triggerArrayLength; i++) {
            const trigger = this._triggerArray[i];
            const elem = getElementFromSelector(trigger);

            if (elem && !this._isShown(elem)) {
              this._addAriaAndCollapsedClass([trigger], false);
            }
          }

          this._isTransitioning = true;

          const complete = () => {
            this._isTransitioning = false;

            this._element.classList.remove(CLASS_NAME_COLLAPSING);

            this._element.classList.add(CLASS_NAME_COLLAPSE);

            EventHandler__default.default.trigger(this._element, EVENT_HIDDEN);
          };

          this._element.style[dimension] = '';

          this._queueCallback(complete, this._element, true);
        }

        _isShown(element = this._element) {
          return element.classList.contains(CLASS_NAME_SHOW);
        } // Private


        _getConfig(config) {
          config = { ...Default,
            ...Manipulator__default.default.getDataAttributes(this._element),
            ...config
          };
          config.toggle = Boolean(config.toggle); // Coerce string values

          config.parent = getElement(config.parent);
          typeCheckConfig(NAME, config, DefaultType);
          return config;
        }

        _getDimension() {
          return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
        }

        _initializeChildren() {
          if (!this._config.parent) {
            return;
          }

          const children = SelectorEngine__default.default.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
          SelectorEngine__default.default.find(SELECTOR_DATA_TOGGLE, this._config.parent).filter(elem => !children.includes(elem)).forEach(element => {
            const selected = getElementFromSelector(element);

            if (selected) {
              this._addAriaAndCollapsedClass([element], this._isShown(selected));
            }
          });
        }

        _addAriaAndCollapsedClass(triggerArray, isOpen) {
          if (!triggerArray.length) {
            return;
          }

          triggerArray.forEach(elem => {
            if (isOpen) {
              elem.classList.remove(CLASS_NAME_COLLAPSED);
            } else {
              elem.classList.add(CLASS_NAME_COLLAPSED);
            }

            elem.setAttribute('aria-expanded', isOpen);
          });
        } // Static


        static jQueryInterface(config) {
          return this.each(function () {
            const _config = {};

            if (typeof config === 'string' && /show|hide/.test(config)) {
              _config.toggle = false;
            }

            const data = Collapse.getOrCreateInstance(this, _config);

            if (typeof config === 'string') {
              if (typeof data[config] === 'undefined') {
                throw new TypeError(`No method named "${config}"`);
              }

              data[config]();
            }
          });
        }

      }
      /**
       * ------------------------------------------------------------------------
       * Data Api implementation
       * ------------------------------------------------------------------------
       */


      EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
        // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
        if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
          event.preventDefault();
        }

        const selector = getSelectorFromElement(this);
        const selectorElements = SelectorEngine__default.default.find(selector);
        selectorElements.forEach(element => {
          Collapse.getOrCreateInstance(element, {
            toggle: false
          }).toggle();
        });
      });
      /**
       * ------------------------------------------------------------------------
       * jQuery
       * ------------------------------------------------------------------------
       * add .Collapse to jQuery only if jQuery is present
       */

      defineJQueryPlugin(Collapse);

      return Collapse;

    }));

    }(collapse));

    async function main (element) {
        const patch = init$1([attributesModule, eventListenersModule, classModule]);
        const ctrl = new Ctrl(redraw);
        let vnode = patch(element, loadingBody());
        async function redraw() {
            vnode = patch(vnode, await view(ctrl));
        }
        await ctrl.auth.init();
        routing(ctrl);
    }

    return main;

})(xTextencoder, xTextdecoder, wasmCryptoInit, xRandomvalues, xWs);
