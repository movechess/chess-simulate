import {
  __commonJS
} from "./chunk-5WWUZCGV.js";

// node_modules/@bity/oauth2-auth-code-pkce/index.js
var require_oauth2_auth_code_pkce = __commonJS({
  "node_modules/@bity/oauth2-auth-code-pkce/index.js"(exports) {
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ErrorOAuth2 = (
      /** @class */
      function() {
        function ErrorOAuth22() {
        }
        ErrorOAuth22.prototype.toString = function() {
          return "ErrorOAuth2";
        };
        return ErrorOAuth22;
      }()
    );
    exports.ErrorOAuth2 = ErrorOAuth2;
    var ErrorUnknown = (
      /** @class */
      function(_super) {
        __extends(ErrorUnknown2, _super);
        function ErrorUnknown2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorUnknown2.prototype.toString = function() {
          return "ErrorUnknown";
        };
        return ErrorUnknown2;
      }(ErrorOAuth2)
    );
    exports.ErrorUnknown = ErrorUnknown;
    var ErrorNoAuthCode = (
      /** @class */
      function(_super) {
        __extends(ErrorNoAuthCode2, _super);
        function ErrorNoAuthCode2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorNoAuthCode2.prototype.toString = function() {
          return "ErrorNoAuthCode";
        };
        return ErrorNoAuthCode2;
      }(ErrorOAuth2)
    );
    exports.ErrorNoAuthCode = ErrorNoAuthCode;
    var ErrorInvalidReturnedStateParam = (
      /** @class */
      function(_super) {
        __extends(ErrorInvalidReturnedStateParam2, _super);
        function ErrorInvalidReturnedStateParam2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidReturnedStateParam2.prototype.toString = function() {
          return "ErrorInvalidReturnedStateParam";
        };
        return ErrorInvalidReturnedStateParam2;
      }(ErrorOAuth2)
    );
    exports.ErrorInvalidReturnedStateParam = ErrorInvalidReturnedStateParam;
    var ErrorInvalidJson = (
      /** @class */
      function(_super) {
        __extends(ErrorInvalidJson2, _super);
        function ErrorInvalidJson2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidJson2.prototype.toString = function() {
          return "ErrorInvalidJson";
        };
        return ErrorInvalidJson2;
      }(ErrorOAuth2)
    );
    exports.ErrorInvalidJson = ErrorInvalidJson;
    var ErrorInvalidScope = (
      /** @class */
      function(_super) {
        __extends(ErrorInvalidScope2, _super);
        function ErrorInvalidScope2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidScope2.prototype.toString = function() {
          return "ErrorInvalidScope";
        };
        return ErrorInvalidScope2;
      }(ErrorOAuth2)
    );
    exports.ErrorInvalidScope = ErrorInvalidScope;
    var ErrorInvalidRequest = (
      /** @class */
      function(_super) {
        __extends(ErrorInvalidRequest2, _super);
        function ErrorInvalidRequest2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidRequest2.prototype.toString = function() {
          return "ErrorInvalidRequest";
        };
        return ErrorInvalidRequest2;
      }(ErrorOAuth2)
    );
    exports.ErrorInvalidRequest = ErrorInvalidRequest;
    var ErrorInvalidToken = (
      /** @class */
      function(_super) {
        __extends(ErrorInvalidToken2, _super);
        function ErrorInvalidToken2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidToken2.prototype.toString = function() {
          return "ErrorInvalidToken";
        };
        return ErrorInvalidToken2;
      }(ErrorOAuth2)
    );
    exports.ErrorInvalidToken = ErrorInvalidToken;
    var ErrorAuthenticationGrant = (
      /** @class */
      function(_super) {
        __extends(ErrorAuthenticationGrant2, _super);
        function ErrorAuthenticationGrant2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorAuthenticationGrant2.prototype.toString = function() {
          return "ErrorAuthenticationGrant";
        };
        return ErrorAuthenticationGrant2;
      }(ErrorOAuth2)
    );
    exports.ErrorAuthenticationGrant = ErrorAuthenticationGrant;
    var ErrorUnauthorizedClient = (
      /** @class */
      function(_super) {
        __extends(ErrorUnauthorizedClient2, _super);
        function ErrorUnauthorizedClient2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorUnauthorizedClient2.prototype.toString = function() {
          return "ErrorUnauthorizedClient";
        };
        return ErrorUnauthorizedClient2;
      }(ErrorAuthenticationGrant)
    );
    exports.ErrorUnauthorizedClient = ErrorUnauthorizedClient;
    var ErrorAccessDenied = (
      /** @class */
      function(_super) {
        __extends(ErrorAccessDenied2, _super);
        function ErrorAccessDenied2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorAccessDenied2.prototype.toString = function() {
          return "ErrorAccessDenied";
        };
        return ErrorAccessDenied2;
      }(ErrorAuthenticationGrant)
    );
    exports.ErrorAccessDenied = ErrorAccessDenied;
    var ErrorUnsupportedResponseType = (
      /** @class */
      function(_super) {
        __extends(ErrorUnsupportedResponseType2, _super);
        function ErrorUnsupportedResponseType2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorUnsupportedResponseType2.prototype.toString = function() {
          return "ErrorUnsupportedResponseType";
        };
        return ErrorUnsupportedResponseType2;
      }(ErrorAuthenticationGrant)
    );
    exports.ErrorUnsupportedResponseType = ErrorUnsupportedResponseType;
    var ErrorServerError = (
      /** @class */
      function(_super) {
        __extends(ErrorServerError2, _super);
        function ErrorServerError2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorServerError2.prototype.toString = function() {
          return "ErrorServerError";
        };
        return ErrorServerError2;
      }(ErrorAuthenticationGrant)
    );
    exports.ErrorServerError = ErrorServerError;
    var ErrorTemporarilyUnavailable = (
      /** @class */
      function(_super) {
        __extends(ErrorTemporarilyUnavailable2, _super);
        function ErrorTemporarilyUnavailable2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorTemporarilyUnavailable2.prototype.toString = function() {
          return "ErrorTemporarilyUnavailable";
        };
        return ErrorTemporarilyUnavailable2;
      }(ErrorAuthenticationGrant)
    );
    exports.ErrorTemporarilyUnavailable = ErrorTemporarilyUnavailable;
    var ErrorAccessTokenResponse = (
      /** @class */
      function(_super) {
        __extends(ErrorAccessTokenResponse2, _super);
        function ErrorAccessTokenResponse2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorAccessTokenResponse2.prototype.toString = function() {
          return "ErrorAccessTokenResponse";
        };
        return ErrorAccessTokenResponse2;
      }(ErrorOAuth2)
    );
    exports.ErrorAccessTokenResponse = ErrorAccessTokenResponse;
    var ErrorInvalidClient = (
      /** @class */
      function(_super) {
        __extends(ErrorInvalidClient2, _super);
        function ErrorInvalidClient2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidClient2.prototype.toString = function() {
          return "ErrorInvalidClient";
        };
        return ErrorInvalidClient2;
      }(ErrorAccessTokenResponse)
    );
    exports.ErrorInvalidClient = ErrorInvalidClient;
    var ErrorInvalidGrant = (
      /** @class */
      function(_super) {
        __extends(ErrorInvalidGrant2, _super);
        function ErrorInvalidGrant2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorInvalidGrant2.prototype.toString = function() {
          return "ErrorInvalidGrant";
        };
        return ErrorInvalidGrant2;
      }(ErrorAccessTokenResponse)
    );
    exports.ErrorInvalidGrant = ErrorInvalidGrant;
    var ErrorUnsupportedGrantType = (
      /** @class */
      function(_super) {
        __extends(ErrorUnsupportedGrantType2, _super);
        function ErrorUnsupportedGrantType2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorUnsupportedGrantType2.prototype.toString = function() {
          return "ErrorUnsupportedGrantType";
        };
        return ErrorUnsupportedGrantType2;
      }(ErrorAccessTokenResponse)
    );
    exports.ErrorUnsupportedGrantType = ErrorUnsupportedGrantType;
    var ErrorWWWAuthenticate = (
      /** @class */
      function() {
        function ErrorWWWAuthenticate2() {
          this.realm = "";
          this.error = "";
        }
        return ErrorWWWAuthenticate2;
      }()
    );
    exports.ErrorWWWAuthenticate = ErrorWWWAuthenticate;
    exports.RawErrorToErrorClassMap = {
      invalid_request: ErrorInvalidRequest,
      invalid_grant: ErrorInvalidGrant,
      unauthorized_client: ErrorUnauthorizedClient,
      access_denied: ErrorAccessDenied,
      unsupported_response_type: ErrorUnsupportedResponseType,
      invalid_scope: ErrorInvalidScope,
      server_error: ErrorServerError,
      temporarily_unavailable: ErrorTemporarilyUnavailable,
      invalid_client: ErrorInvalidClient,
      unsupported_grant_type: ErrorUnsupportedGrantType,
      invalid_json: ErrorInvalidJson,
      invalid_token: ErrorInvalidToken
    };
    function toErrorClass(rawError) {
      return new (exports.RawErrorToErrorClassMap[rawError] || ErrorUnknown)();
    }
    exports.toErrorClass = toErrorClass;
    function fromWWWAuthenticateHeaderStringToObject(a) {
      var obj = a.slice("Bearer ".length).replace(/"/g, "").split(", ").map(function(tokens) {
        var _a;
        var _b = tokens.split("="), k = _b[0], v = _b[1];
        return _a = {}, _a[k] = v, _a;
      }).reduce(function(a2, c) {
        return __assign(__assign({}, a2), c);
      }, {});
      return { realm: obj.realm, error: obj.error };
    }
    exports.fromWWWAuthenticateHeaderStringToObject = fromWWWAuthenticateHeaderStringToObject;
    var HEADER_AUTHORIZATION = "Authorization";
    var HEADER_WWW_AUTHENTICATE = "WWW-Authenticate";
    exports.LOCALSTORAGE_ID = "oauth2authcodepkce";
    exports.LOCALSTORAGE_STATE = exports.LOCALSTORAGE_ID + "-state";
    exports.RECOMMENDED_CODE_VERIFIER_LENGTH = 96;
    exports.RECOMMENDED_STATE_LENGTH = 32;
    var PKCE_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
    var OAuth2AuthCodePKCE = (
      /** @class */
      function() {
        function OAuth2AuthCodePKCE2(config) {
          this.state = {};
          this.config = config;
          this.recoverState();
          return this;
        }
        OAuth2AuthCodePKCE2.prototype.decorateFetchHTTPClient = function(fetch2) {
          var _this = this;
          return function(url, config) {
            var rest = [];
            for (var _i = 2; _i < arguments.length; _i++) {
              rest[_i - 2] = arguments[_i];
            }
            if (!_this.state.isHTTPDecoratorActive) {
              return fetch2.apply(void 0, __spreadArrays([url, config], rest));
            }
            return _this.getAccessToken().then(function(_a) {
              var token = _a.token;
              var configNew = Object.assign({}, config);
              if (!configNew.headers) {
                configNew.headers = {};
              }
              configNew.headers[HEADER_AUTHORIZATION] = "Bearer " + token.value;
              return fetch2.apply(void 0, __spreadArrays([url, configNew], rest));
            }).then(function(res) {
              if (res.ok) {
                return res;
              }
              if (!res.headers.has(HEADER_WWW_AUTHENTICATE.toLowerCase())) {
                return res;
              }
              var error = toErrorClass(fromWWWAuthenticateHeaderStringToObject(res.headers.get(HEADER_WWW_AUTHENTICATE.toLowerCase())).error);
              if (error instanceof ErrorInvalidToken) {
                _this.config.onAccessTokenExpiry(function() {
                  return _this.exchangeRefreshTokenForAccessToken();
                });
              }
              return Promise.reject(error);
            });
          };
        };
        OAuth2AuthCodePKCE2.prototype.isReturningFromAuthServer = function() {
          var error = OAuth2AuthCodePKCE2.extractParamFromUrl(location.href, "error");
          if (error) {
            return Promise.reject(toErrorClass(error));
          }
          var code = OAuth2AuthCodePKCE2.extractParamFromUrl(location.href, "code");
          if (!code) {
            return Promise.resolve(false);
          }
          var state = JSON.parse(localStorage.getItem(exports.LOCALSTORAGE_STATE) || "{}");
          var stateQueryParam = OAuth2AuthCodePKCE2.extractParamFromUrl(location.href, "state");
          if (stateQueryParam !== state.stateQueryParam) {
            console.warn("state query string parameter doesn't match the one sent! Possible malicious activity somewhere.");
            return Promise.reject(new ErrorInvalidReturnedStateParam());
          }
          state.authorizationCode = code;
          state.hasAuthCodeBeenExchangedForAccessToken = false;
          localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(state));
          this.setState(state);
          return Promise.resolve(true);
        };
        OAuth2AuthCodePKCE2.prototype.fetchAuthorizationCode = function(oneTimeParams) {
          return __awaiter(this, void 0, void 0, function() {
            var _a, clientId, extraAuthorizationParams, redirectUrl, scopes, _b, codeChallenge, codeVerifier, stateQueryParam, url, extraParameters;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  this.assertStateAndConfigArePresent();
                  _a = this.config, clientId = _a.clientId, extraAuthorizationParams = _a.extraAuthorizationParams, redirectUrl = _a.redirectUrl, scopes = _a.scopes;
                  return [4, OAuth2AuthCodePKCE2.generatePKCECodes()];
                case 1:
                  _b = _c.sent(), codeChallenge = _b.codeChallenge, codeVerifier = _b.codeVerifier;
                  stateQueryParam = OAuth2AuthCodePKCE2.generateRandomState(exports.RECOMMENDED_STATE_LENGTH);
                  this.state = __assign(__assign({}, this.state), {
                    codeChallenge,
                    codeVerifier,
                    stateQueryParam,
                    isHTTPDecoratorActive: true
                  });
                  localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(this.state));
                  url = this.config.authorizationUrl + "?response_type=code&" + ("client_id=" + encodeURIComponent(clientId) + "&") + ("redirect_uri=" + encodeURIComponent(redirectUrl) + "&") + ("scope=" + encodeURIComponent(scopes.join(" ")) + "&") + ("state=" + stateQueryParam + "&") + ("code_challenge=" + encodeURIComponent(codeChallenge) + "&") + "code_challenge_method=S256";
                  if (extraAuthorizationParams || oneTimeParams) {
                    extraParameters = __assign(__assign({}, extraAuthorizationParams), oneTimeParams);
                    url = url + "&" + OAuth2AuthCodePKCE2.objectToQueryString(extraParameters);
                  }
                  location.replace(url);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        OAuth2AuthCodePKCE2.prototype.getAccessToken = function() {
          var _this = this;
          this.assertStateAndConfigArePresent();
          var onAccessTokenExpiry = this.config.onAccessTokenExpiry;
          var _a = this.state, accessToken = _a.accessToken, authorizationCode = _a.authorizationCode, explicitlyExposedTokens = _a.explicitlyExposedTokens, hasAuthCodeBeenExchangedForAccessToken = _a.hasAuthCodeBeenExchangedForAccessToken, refreshToken = _a.refreshToken, scopes = _a.scopes;
          if (!authorizationCode) {
            return Promise.reject(new ErrorNoAuthCode());
          }
          if (this.authCodeForAccessTokenRequest) {
            return this.authCodeForAccessTokenRequest;
          }
          if (!this.isAuthorized() || !hasAuthCodeBeenExchangedForAccessToken) {
            this.authCodeForAccessTokenRequest = this.exchangeAuthCodeForAccessToken();
            return this.authCodeForAccessTokenRequest;
          }
          if (refreshToken && this.isAccessTokenExpired()) {
            return onAccessTokenExpiry(function() {
              return _this.exchangeRefreshTokenForAccessToken();
            });
          }
          return Promise.resolve({
            token: accessToken,
            explicitlyExposedTokens,
            scopes,
            refreshToken
          });
        };
        OAuth2AuthCodePKCE2.prototype.exchangeRefreshTokenForAccessToken = function() {
          var _this = this;
          var _a;
          this.assertStateAndConfigArePresent();
          var _b = this.config, extraRefreshParams = _b.extraRefreshParams, clientId = _b.clientId, tokenUrl = _b.tokenUrl;
          var refreshToken = this.state.refreshToken;
          if (!refreshToken) {
            console.warn("No refresh token is present.");
          }
          var url = tokenUrl;
          var body = "grant_type=refresh_token&" + ("refresh_token=" + ((_a = refreshToken) === null || _a === void 0 ? void 0 : _a.value) + "&") + ("client_id=" + clientId);
          if (extraRefreshParams) {
            body = url + "&" + OAuth2AuthCodePKCE2.objectToQueryString(extraRefreshParams);
          }
          return fetch(url, {
            method: "POST",
            body,
            headers: {
              "Content-Type": "application/x-www-form-urlencoded"
            }
          }).then(function(res) {
            return res.status >= 400 ? res.json().then(function(data) {
              return Promise.reject(data);
            }) : res.json();
          }).then(function(json) {
            var access_token = json.access_token, expires_in = json.expires_in, refresh_token = json.refresh_token, scope = json.scope;
            var explicitlyExposedTokens = _this.config.explicitlyExposedTokens;
            var scopes = [];
            var tokensToExpose = {};
            var accessToken = {
              value: access_token,
              expiry: new Date(Date.now() + parseInt(expires_in) * 1e3).toString()
            };
            _this.state.accessToken = accessToken;
            if (refresh_token) {
              var refreshToken_1 = {
                value: refresh_token
              };
              _this.state.refreshToken = refreshToken_1;
            }
            if (explicitlyExposedTokens) {
              tokensToExpose = Object.fromEntries(explicitlyExposedTokens.map(function(tokenName) {
                return [tokenName, json[tokenName]];
              }).filter(function(_a2) {
                var _ = _a2[0], tokenValue = _a2[1];
                return tokenValue !== void 0;
              }));
              _this.state.explicitlyExposedTokens = tokensToExpose;
            }
            if (scope) {
              scopes = scope.split(" ");
              _this.state.scopes = scopes;
            }
            localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(_this.state));
            var accessContext = { token: accessToken, scopes };
            if (explicitlyExposedTokens) {
              accessContext.explicitlyExposedTokens = tokensToExpose;
            }
            return accessContext;
          }).catch(function(data) {
            var onInvalidGrant = _this.config.onInvalidGrant;
            var error = data.error || "There was a network error.";
            switch (error) {
              case "invalid_grant":
                onInvalidGrant(function() {
                  return _this.fetchAuthorizationCode();
                });
                break;
              default:
                break;
            }
            return Promise.reject(toErrorClass(error));
          });
        };
        OAuth2AuthCodePKCE2.prototype.getGrantedScopes = function() {
          return this.state.scopes;
        };
        OAuth2AuthCodePKCE2.prototype.isHTTPDecoratorActive = function(isActive) {
          this.state.isHTTPDecoratorActive = isActive;
          localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(this.state));
        };
        OAuth2AuthCodePKCE2.prototype.isAuthorized = function() {
          return !!this.state.accessToken;
        };
        OAuth2AuthCodePKCE2.prototype.isAccessTokenExpired = function() {
          var accessToken = this.state.accessToken;
          return Boolean(accessToken && /* @__PURE__ */ new Date() >= new Date(accessToken.expiry));
        };
        OAuth2AuthCodePKCE2.prototype.reset = function() {
          this.setState({});
          this.authCodeForAccessTokenRequest = void 0;
        };
        OAuth2AuthCodePKCE2.prototype.assertStateAndConfigArePresent = function() {
          if (!this.state || !this.config) {
            console.error("state:", this.state, "config:", this.config);
            throw new Error("state or config is not set.");
          }
        };
        OAuth2AuthCodePKCE2.prototype.exchangeAuthCodeForAccessToken = function(codeOverride) {
          var _this = this;
          this.assertStateAndConfigArePresent();
          var _a = this.state, _b = _a.authorizationCode, authorizationCode = _b === void 0 ? codeOverride : _b, _c = _a.codeVerifier, codeVerifier = _c === void 0 ? "" : _c;
          var _d = this.config, clientId = _d.clientId, onInvalidGrant = _d.onInvalidGrant, redirectUrl = _d.redirectUrl;
          if (!codeVerifier) {
            console.warn("No code verifier is being sent.");
          } else if (!authorizationCode) {
            console.warn("No authorization grant code is being passed.");
          }
          var url = this.config.tokenUrl;
          var body = "grant_type=authorization_code&" + ("code=" + encodeURIComponent(authorizationCode || "") + "&") + ("redirect_uri=" + encodeURIComponent(redirectUrl) + "&") + ("client_id=" + encodeURIComponent(clientId) + "&") + ("code_verifier=" + codeVerifier);
          return fetch(url, {
            method: "POST",
            body,
            headers: {
              "Content-Type": "application/x-www-form-urlencoded"
            }
          }).then(function(res) {
            var jsonPromise = res.json().catch(function(_) {
              return { error: "invalid_json" };
            });
            if (!res.ok) {
              return jsonPromise.then(function(_a2) {
                var error = _a2.error;
                switch (error) {
                  case "invalid_grant":
                    onInvalidGrant(function() {
                      return _this.fetchAuthorizationCode();
                    });
                    break;
                  default:
                    break;
                }
                return Promise.reject(toErrorClass(error));
              });
            }
            return jsonPromise.then(function(json) {
              var access_token = json.access_token, expires_in = json.expires_in, refresh_token = json.refresh_token, scope = json.scope;
              var explicitlyExposedTokens = _this.config.explicitlyExposedTokens;
              var scopes = [];
              var tokensToExpose = {};
              _this.state.hasAuthCodeBeenExchangedForAccessToken = true;
              _this.authCodeForAccessTokenRequest = void 0;
              var accessToken = {
                value: access_token,
                expiry: new Date(Date.now() + parseInt(expires_in) * 1e3).toString()
              };
              _this.state.accessToken = accessToken;
              if (refresh_token) {
                var refreshToken = {
                  value: refresh_token
                };
                _this.state.refreshToken = refreshToken;
              }
              if (explicitlyExposedTokens) {
                tokensToExpose = Object.fromEntries(explicitlyExposedTokens.map(function(tokenName) {
                  return [tokenName, json[tokenName]];
                }).filter(function(_a2) {
                  var _ = _a2[0], tokenValue = _a2[1];
                  return tokenValue !== void 0;
                }));
                _this.state.explicitlyExposedTokens = tokensToExpose;
              }
              if (scope) {
                scopes = scope.split(" ");
                _this.state.scopes = scopes;
              }
              localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(_this.state));
              var accessContext = { token: accessToken, scopes };
              if (explicitlyExposedTokens) {
                accessContext.explicitlyExposedTokens = tokensToExpose;
              }
              return accessContext;
            });
          });
        };
        OAuth2AuthCodePKCE2.prototype.recoverState = function() {
          this.state = JSON.parse(localStorage.getItem(exports.LOCALSTORAGE_STATE) || "{}");
          return this;
        };
        OAuth2AuthCodePKCE2.prototype.setState = function(state) {
          this.state = state;
          localStorage.setItem(exports.LOCALSTORAGE_STATE, JSON.stringify(state));
          return this;
        };
        OAuth2AuthCodePKCE2.base64urlEncode = function(value) {
          var base64 = btoa(value);
          base64 = base64.replace(/\+/g, "-");
          base64 = base64.replace(/\//g, "_");
          base64 = base64.replace(/=/g, "");
          return base64;
        };
        OAuth2AuthCodePKCE2.extractParamFromUrl = function(url, param) {
          var queryString = url.split("?");
          if (queryString.length < 2) {
            return "";
          }
          queryString = queryString[1].split("#");
          var parts = queryString[0].split("&").reduce(function(a, s) {
            return a.concat(s.split("="));
          }, []);
          if (parts.length < 2) {
            return "";
          }
          var paramIdx = parts.indexOf(param);
          return decodeURIComponent(paramIdx >= 0 ? parts[paramIdx + 1] : "");
        };
        OAuth2AuthCodePKCE2.objectToQueryString = function(dict) {
          return Object.entries(dict).map(function(_a) {
            var key = _a[0], val = _a[1];
            return key + "=" + encodeURIComponent(val);
          }).join("&");
        };
        OAuth2AuthCodePKCE2.generatePKCECodes = function() {
          var output = new Uint32Array(exports.RECOMMENDED_CODE_VERIFIER_LENGTH);
          crypto.getRandomValues(output);
          var codeVerifier = OAuth2AuthCodePKCE2.base64urlEncode(Array.from(output).map(function(num) {
            return PKCE_CHARSET[num % PKCE_CHARSET.length];
          }).join(""));
          return crypto.subtle.digest("SHA-256", new TextEncoder().encode(codeVerifier)).then(function(buffer) {
            var hash = new Uint8Array(buffer);
            var binary = "";
            var hashLength = hash.byteLength;
            for (var i = 0; i < hashLength; i++) {
              binary += String.fromCharCode(hash[i]);
            }
            return binary;
          }).then(OAuth2AuthCodePKCE2.base64urlEncode).then(function(codeChallenge) {
            return { codeChallenge, codeVerifier };
          });
        };
        OAuth2AuthCodePKCE2.generateRandomState = function(lengthOfState) {
          var output = new Uint32Array(lengthOfState);
          crypto.getRandomValues(output);
          return Array.from(output).map(function(num) {
            return PKCE_CHARSET[num % PKCE_CHARSET.length];
          }).join("");
        };
        return OAuth2AuthCodePKCE2;
      }()
    );
    exports.OAuth2AuthCodePKCE = OAuth2AuthCodePKCE;
  }
});
export default require_oauth2_auth_code_pkce();
//# sourceMappingURL=@bity_oauth2-auth-code-pkce.js.map
