{
  "version": 3,
  "sources": ["../../chessops/src/fen.ts", "../../@badrap/result/src/index.ts", "../../chessops/src/squareSet.ts", "../../chessops/src/board.ts", "../../chessops/src/setup.ts"],
  "sourcesContent": ["import { Result } from '@badrap/result';\nimport { Piece, Square, Color, COLORS, ROLES, FILE_NAMES } from './types.js';\nimport { SquareSet } from './squareSet.js';\nimport { Board } from './board.js';\nimport { Setup, MaterialSide, Material, RemainingChecks } from './setup.js';\nimport { defined, squareFile, parseSquare, makeSquare, roleToChar, charToRole } from './util.js';\n\nexport const INITIAL_BOARD_FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\nexport const INITIAL_EPD = INITIAL_BOARD_FEN + ' w KQkq -';\nexport const INITIAL_FEN = INITIAL_EPD + ' 0 1';\nexport const EMPTY_BOARD_FEN = '8/8/8/8/8/8/8/8';\nexport const EMPTY_EPD = EMPTY_BOARD_FEN + ' w - -';\nexport const EMPTY_FEN = EMPTY_EPD + ' 0 1';\n\nexport enum InvalidFen {\n  Fen = 'ERR_FEN',\n  Board = 'ERR_BOARD',\n  Pockets = 'ERR_POCKETS',\n  Turn = 'ERR_TURN',\n  Castling = 'ERR_CASTLING',\n  EpSquare = 'ERR_EP_SQUARE',\n  RemainingChecks = 'ERR_REMAINING_CHECKS',\n  Halfmoves = 'ERR_HALFMOVES',\n  Fullmoves = 'ERR_FULLMOVES',\n}\n\nexport class FenError extends Error {}\n\nfunction nthIndexOf(haystack: string, needle: string, n: number): number {\n  let index = haystack.indexOf(needle);\n  while (n-- > 0) {\n    if (index === -1) break;\n    index = haystack.indexOf(needle, index + needle.length);\n  }\n  return index;\n}\n\nfunction parseSmallUint(str: string): number | undefined {\n  return /^\\d{1,4}$/.test(str) ? parseInt(str, 10) : undefined;\n}\n\nfunction charToPiece(ch: string): Piece | undefined {\n  const role = charToRole(ch);\n  return role && { role, color: ch.toLowerCase() === ch ? 'black' : 'white' };\n}\n\nexport function parseBoardFen(boardPart: string): Result<Board, FenError> {\n  const board = Board.empty();\n  let rank = 7;\n  let file = 0;\n  for (let i = 0; i < boardPart.length; i++) {\n    const c = boardPart[i];\n    if (c === '/' && file === 8) {\n      file = 0;\n      rank--;\n    } else {\n      const step = parseInt(c, 10);\n      if (step > 0) file += step;\n      else {\n        if (file >= 8 || rank < 0) return Result.err(new FenError(InvalidFen.Board));\n        const square = file + rank * 8;\n        const piece = charToPiece(c);\n        if (!piece) return Result.err(new FenError(InvalidFen.Board));\n        if (boardPart[i + 1] === '~') {\n          piece.promoted = true;\n          i++;\n        }\n        board.set(square, piece);\n        file++;\n      }\n    }\n  }\n  if (rank !== 0 || file !== 8) return Result.err(new FenError(InvalidFen.Board));\n  return Result.ok(board);\n}\n\nexport function parsePockets(pocketPart: string): Result<Material, FenError> {\n  if (pocketPart.length > 64) return Result.err(new FenError(InvalidFen.Pockets));\n  const pockets = Material.empty();\n  for (const c of pocketPart) {\n    const piece = charToPiece(c);\n    if (!piece) return Result.err(new FenError(InvalidFen.Pockets));\n    pockets[piece.color][piece.role]++;\n  }\n  return Result.ok(pockets);\n}\n\nexport function parseCastlingFen(board: Board, castlingPart: string): Result<SquareSet, FenError> {\n  let unmovedRooks = SquareSet.empty();\n  if (castlingPart === '-') return Result.ok(unmovedRooks);\n  for (const c of castlingPart) {\n    const lower = c.toLowerCase();\n    const color = c === lower ? 'black' : 'white';\n    const backrank = SquareSet.backrank(color).intersect(board[color]);\n\n    let candidates: Iterable<Square>;\n    if (lower === 'q') candidates = backrank;\n    else if (lower === 'k') candidates = backrank.reversed();\n    else if ('a' <= lower && lower <= 'h')\n      candidates = SquareSet.fromSquare(lower.charCodeAt(0) - 'a'.charCodeAt(0)).intersect(backrank);\n    else return Result.err(new FenError(InvalidFen.Castling));\n\n    for (const square of candidates) {\n      if (board.king.has(square) && !board.promoted.has(square)) break;\n      if (board.rook.has(square)) {\n        unmovedRooks = unmovedRooks.with(square);\n        break;\n      }\n    }\n  }\n  if (COLORS.some(color => SquareSet.backrank(color).intersect(unmovedRooks).size() > 2))\n    return Result.err(new FenError(InvalidFen.Castling));\n  return Result.ok(unmovedRooks);\n}\n\nexport function parseRemainingChecks(part: string): Result<RemainingChecks, FenError> {\n  const parts = part.split('+');\n  if (parts.length === 3 && parts[0] === '') {\n    const white = parseSmallUint(parts[1]);\n    const black = parseSmallUint(parts[2]);\n    if (!defined(white) || white > 3 || !defined(black) || black > 3)\n      return Result.err(new FenError(InvalidFen.RemainingChecks));\n    return Result.ok(new RemainingChecks(3 - white, 3 - black));\n  } else if (parts.length === 2) {\n    const white = parseSmallUint(parts[0]);\n    const black = parseSmallUint(parts[1]);\n    if (!defined(white) || white > 3 || !defined(black) || black > 3)\n      return Result.err(new FenError(InvalidFen.RemainingChecks));\n    return Result.ok(new RemainingChecks(white, black));\n  } else return Result.err(new FenError(InvalidFen.RemainingChecks));\n}\n\nexport function parseFen(fen: string): Result<Setup, FenError> {\n  const parts = fen.split(/[\\s_]+/);\n  const boardPart = parts.shift()!;\n\n  // Board and pockets\n  let board,\n    pockets = Result.ok<Material | undefined, FenError>(undefined);\n  if (boardPart.endsWith(']')) {\n    const pocketStart = boardPart.indexOf('[');\n    if (pocketStart === -1) return Result.err(new FenError(InvalidFen.Fen));\n    board = parseBoardFen(boardPart.substr(0, pocketStart));\n    pockets = parsePockets(boardPart.substr(pocketStart + 1, boardPart.length - 1 - pocketStart - 1));\n  } else {\n    const pocketStart = nthIndexOf(boardPart, '/', 7);\n    if (pocketStart === -1) board = parseBoardFen(boardPart);\n    else {\n      board = parseBoardFen(boardPart.substr(0, pocketStart));\n      pockets = parsePockets(boardPart.substr(pocketStart + 1));\n    }\n  }\n\n  // Turn\n  let turn: Color;\n  const turnPart = parts.shift();\n  if (!defined(turnPart) || turnPart === 'w') turn = 'white';\n  else if (turnPart === 'b') turn = 'black';\n  else return Result.err(new FenError(InvalidFen.Turn));\n\n  return board.chain(board => {\n    // Castling\n    const castlingPart = parts.shift();\n    const unmovedRooks = defined(castlingPart) ? parseCastlingFen(board, castlingPart) : Result.ok(SquareSet.empty());\n\n    // En passant square\n    const epPart = parts.shift();\n    let epSquare: Square | undefined;\n    if (defined(epPart) && epPart !== '-') {\n      epSquare = parseSquare(epPart);\n      if (!defined(epSquare)) return Result.err(new FenError(InvalidFen.EpSquare));\n    }\n\n    // Halfmoves or remaining checks\n    let halfmovePart = parts.shift();\n    let earlyRemainingChecks: Result<RemainingChecks, FenError> | undefined;\n    if (defined(halfmovePart) && halfmovePart.includes('+')) {\n      earlyRemainingChecks = parseRemainingChecks(halfmovePart);\n      halfmovePart = parts.shift();\n    }\n    const halfmoves = defined(halfmovePart) ? parseSmallUint(halfmovePart) : 0;\n    if (!defined(halfmoves)) return Result.err(new FenError(InvalidFen.Halfmoves));\n\n    const fullmovesPart = parts.shift();\n    const fullmoves = defined(fullmovesPart) ? parseSmallUint(fullmovesPart) : 1;\n    if (!defined(fullmoves)) return Result.err(new FenError(InvalidFen.Fullmoves));\n\n    const remainingChecksPart = parts.shift();\n    let remainingChecks: Result<RemainingChecks | undefined, FenError> = Result.ok(undefined);\n    if (defined(remainingChecksPart)) {\n      if (defined(earlyRemainingChecks)) return Result.err(new FenError(InvalidFen.RemainingChecks));\n      remainingChecks = parseRemainingChecks(remainingChecksPart);\n    } else if (defined(earlyRemainingChecks)) {\n      remainingChecks = earlyRemainingChecks;\n    }\n\n    if (parts.length > 0) return Result.err(new FenError(InvalidFen.Fen));\n\n    return pockets.chain(pockets =>\n      unmovedRooks.chain(unmovedRooks =>\n        remainingChecks.map(remainingChecks => {\n          return {\n            board,\n            pockets,\n            turn,\n            unmovedRooks,\n            remainingChecks,\n            epSquare,\n            halfmoves,\n            fullmoves: Math.max(1, fullmoves),\n          };\n        })\n      )\n    );\n  });\n}\n\nexport interface FenOpts {\n  promoted?: boolean;\n  shredder?: boolean;\n  epd?: boolean;\n}\n\nexport function parsePiece(str: string): Piece | undefined {\n  if (!str) return;\n  const piece = charToPiece(str[0]);\n  if (!piece) return;\n  if (str.length === 2 && str[1] === '~') piece.promoted = true;\n  else if (str.length > 1) return;\n  return piece;\n}\n\nexport function makePiece(piece: Piece, opts?: FenOpts): string {\n  let r = roleToChar(piece.role);\n  if (piece.color === 'white') r = r.toUpperCase();\n  if (opts?.promoted && piece.promoted) r += '~';\n  return r;\n}\n\nexport function makeBoardFen(board: Board, opts?: FenOpts): string {\n  let fen = '';\n  let empty = 0;\n  for (let rank = 7; rank >= 0; rank--) {\n    for (let file = 0; file < 8; file++) {\n      const square = file + rank * 8;\n      const piece = board.get(square);\n      if (!piece) empty++;\n      else {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        fen += makePiece(piece, opts);\n      }\n\n      if (file === 7) {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        if (rank !== 0) fen += '/';\n      }\n    }\n  }\n  return fen;\n}\n\nexport function makePocket(material: MaterialSide): string {\n  return ROLES.map(role => roleToChar(role).repeat(material[role])).join('');\n}\n\nexport function makePockets(pocket: Material): string {\n  return makePocket(pocket.white).toUpperCase() + makePocket(pocket.black);\n}\n\nexport function makeCastlingFen(board: Board, unmovedRooks: SquareSet, opts?: FenOpts): string {\n  const shredder = opts?.shredder;\n  let fen = '';\n  for (const color of COLORS) {\n    const backrank = SquareSet.backrank(color);\n    const king = board.kingOf(color);\n    if (!defined(king) || !backrank.has(king)) continue;\n    const candidates = board.pieces(color, 'rook').intersect(backrank);\n    for (const rook of unmovedRooks.intersect(candidates).reversed()) {\n      if (!shredder && rook === candidates.first() && rook < king) {\n        fen += color === 'white' ? 'Q' : 'q';\n      } else if (!shredder && rook === candidates.last() && king < rook) {\n        fen += color === 'white' ? 'K' : 'k';\n      } else {\n        const file = FILE_NAMES[squareFile(rook)];\n        fen += color === 'white' ? file.toUpperCase() : file;\n      }\n    }\n  }\n  return fen || '-';\n}\n\nexport function makeRemainingChecks(checks: RemainingChecks): string {\n  return `${checks.white}+${checks.black}`;\n}\n\nexport function makeFen(setup: Setup, opts?: FenOpts): string {\n  return [\n    makeBoardFen(setup.board, opts) + (setup.pockets ? `[${makePockets(setup.pockets)}]` : ''),\n    setup.turn[0],\n    makeCastlingFen(setup.board, setup.unmovedRooks, opts),\n    defined(setup.epSquare) ? makeSquare(setup.epSquare) : '-',\n    ...(setup.remainingChecks ? [makeRemainingChecks(setup.remainingChecks)] : []),\n    ...(opts?.epd ? [] : [Math.max(0, Math.min(setup.halfmoves, 9999)), Math.max(1, Math.min(setup.fullmoves, 9999))]),\n  ].join(' ');\n}\n", "abstract class _Result<T, E extends Error> {\n  protected abstract _chain<X, U extends Error>(\n    ok: (value: T) => Result<X, U>,\n    err: (error: E) => Result<X, U>\n  ): Result<X, U>;\n\n  unwrap(): T;\n  unwrap<U>(ok: (value: T) => U): U;\n  unwrap<U, V>(ok: (value: T) => U, err: (error: E) => V): U | V;\n  unwrap<U>(ok: (value: T) => U, err: (error: E) => U): U;\n  unwrap(ok?: (value: T) => unknown, err?: (error: E) => unknown): unknown {\n    const r = this._chain(\n      value => Result.ok(ok ? ok(value) : value),\n      error => (err ? Result.ok(err(error)) : Result.err(error))\n    );\n    if (r.isErr) {\n      throw r.error;\n    }\n    return r.value;\n  }\n\n  map<U>(ok: (value: T) => U): Result<U, E>;\n  map<U, F extends Error>(\n    ok: (value: T) => U,\n    err: (error: E) => F\n  ): Result<U, F>;\n  map(ok: (value: T) => unknown, err?: (error: E) => Error): Result<unknown> {\n    return this._chain(\n      value => Result.ok(ok(value)),\n      error => Result.err(err ? err(error) : error)\n    );\n  }\n\n  chain<X>(ok: (value: T) => Result<X, E>): Result<X, E>;\n  chain<X>(\n    ok: (value: T) => Result<X, E>,\n    err: (error: E) => Result<X, E>\n  ): Result<X, E>;\n  chain<X, U extends Error>(\n    ok: (value: T) => Result<X, U>,\n    err: (error: E) => Result<X, U>\n  ): Result<X, U>;\n  chain(\n    ok: (value: T) => Result<unknown>,\n    err?: (error: E) => Result<unknown>\n  ): Result<unknown> {\n    return this._chain(ok, err || (error => Result.err(error)));\n  }\n}\n\nclass _Ok<T, E extends Error> extends _Result<T, E> {\n  readonly isOk = true;\n  readonly isErr = false;\n  constructor(readonly value: T) {\n    super();\n  }\n\n  protected _chain<X, U extends Error>(\n    ok: (value: T) => Result<X, U>,\n    _err: (error: E) => Result<X, U>\n  ): Result<X, U> {\n    return ok(this.value);\n  }\n}\n\nclass _Err<T, E extends Error> extends _Result<T, E> {\n  readonly isOk = false;\n  readonly isErr = true;\n  constructor(readonly error: E) {\n    super();\n  }\n\n  protected _chain<X, U extends Error>(\n    _ok: (value: T) => Result<X, U>,\n    err: (error: E) => Result<X, U>\n  ): Result<X, U> {\n    return err(this.error);\n  }\n}\n\nexport namespace Result {\n  export interface Ok<T, E extends Error> extends _Ok<T, E> {}\n  export interface Err<T, E extends Error> extends _Err<T, E> {}\n\n  export function ok<T, E extends Error>(value: T): Result<T, E> {\n    return new _Ok(value);\n  }\n  export function err<E extends Error, T = never>(error?: E): Result<T, E>\n  export function err<E extends Error, T = never>(error: E): Result<T, E> {\n    return new _Err(error || new Error());\n  }\n\n  type U = Result<unknown>;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U,\n    R13 extends U,\n    R14 extends U,\n    R15 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>,\n      OkType<R12>,\n      OkType<R13>,\n      OkType<R14>,\n      OkType<R15>\n    ],\n    ErrType<\n      | R0\n      | R1\n      | R2\n      | R3\n      | R4\n      | R5\n      | R6\n      | R7\n      | R8\n      | R9\n      | R10\n      | R11\n      | R12\n      | R13\n      | R14\n      | R15\n    >\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U,\n    R13 extends U,\n    R14 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>,\n      OkType<R12>,\n      OkType<R13>,\n      OkType<R14>\n    ],\n    ErrType<\n      | R0\n      | R1\n      | R2\n      | R3\n      | R4\n      | R5\n      | R6\n      | R7\n      | R8\n      | R9\n      | R10\n      | R11\n      | R12\n      | R13\n      | R14\n    >\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U,\n    R13 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>,\n      OkType<R12>,\n      OkType<R13>\n    ],\n    ErrType<\n      R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10 | R11 | R12 | R13\n    >\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U,\n    R12 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10 | R11>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U,\n    R11 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>,\n      OkType<R11>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10 | R11>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U,\n    R10 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>,\n      OkType<R10>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9 | R10>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U,\n    R9 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>,\n      OkType<R9>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 | R9>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U,\n    R8 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7, R8]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>,\n      OkType<R8>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U,\n    R7 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6, R7]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>,\n      OkType<R7>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U,\n    R6 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5, R6]\n  ): Result<\n    [\n      OkType<R0>,\n      OkType<R1>,\n      OkType<R2>,\n      OkType<R3>,\n      OkType<R4>,\n      OkType<R5>,\n      OkType<R6>\n    ],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5 | R6>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U,\n    R5 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4, R5]\n  ): Result<\n    [OkType<R0>, OkType<R1>, OkType<R2>, OkType<R3>, OkType<R4>, OkType<R5>],\n    ErrType<R0 | R1 | R2 | R3 | R4 | R5>\n  >;\n  export function all<\n    R0 extends U,\n    R1 extends U,\n    R2 extends U,\n    R3 extends U,\n    R4 extends U\n  >(\n    obj: [R0, R1, R2, R3, R4]\n  ): Result<\n    [OkType<R0>, OkType<R1>, OkType<R2>, OkType<R3>, OkType<R4>],\n    ErrType<R0 | R1 | R2 | R3 | R4>\n  >;\n  export function all<R0 extends U, R1 extends U, R2 extends U, R3 extends U>(\n    obj: [R0, R1, R2, R3]\n  ): Result<\n    [OkType<R0>, OkType<R1>, OkType<R2>, OkType<R3>],\n    ErrType<R0 | R1 | R2 | R3>\n  >;\n  export function all<R0 extends U, R1 extends U, R2 extends U>(\n    obj: [R0, R1, R2]\n  ): Result<[OkType<R0>, OkType<R1>, OkType<R2>], ErrType<R0 | R1 | R2>>;\n  export function all<R0 extends U, R1 extends U>(\n    obj: [R0, R1]\n  ): Result<[OkType<R0>, OkType<R1>], ErrType<R0 | R1>>;\n  export function all<R0 extends U>(\n    obj: [R0]\n  ): Result<[OkType<R0>], ErrType<R0>>;\n  export function all(obj: []): Result<[]>;\n  export function all<T extends Array<U> | Record<string, U>>(\n    obj: T\n  ): Result<\n    { [K in keyof T]: T[K] extends Result<infer I> ? I : never },\n    {\n      [K in keyof T]: T[K] extends Result<unknown, infer E> ? E : never;\n    }[keyof T]\n  >;\n  export function all(obj: unknown): unknown {\n    if (Array.isArray(obj)) {\n      const res = [];\n      for (let i = 0; i < obj.length; i++) {\n        const item = obj[i];\n        if (item.isErr) {\n          return item;\n        }\n        res.push(item.value);\n      }\n      return Result.ok(res);\n    }\n\n    const res: Record<string, unknown> = {};\n    const keys = Object.keys(obj as Record<string, U>);\n    for (let i = 0; i < keys.length; i++) {\n      const item = (obj as Record<string, U>)[keys[i]];\n      if (item.isErr) {\n        return item;\n      }\n      res[keys[i]] = item.value;\n    }\n    return Result.ok(res);\n  }\n}\n\nexport type Result<T, E extends Error = Error> =\n  | Result.Ok<T, E>\n  | Result.Err<T, E>;\n\ntype OkType<R extends Result<unknown>> = R extends Result<infer O> ? O : never;\ntype ErrType<R extends Result<unknown>> = R extends Result<unknown, infer E>\n  ? E\n  : never;\n", "import { Square, Color } from './types.js';\n\nfunction popcnt32(n: number): number {\n  n = n - ((n >>> 1) & 0x5555_5555);\n  n = (n & 0x3333_3333) + ((n >>> 2) & 0x3333_3333);\n  return Math.imul((n + (n >>> 4)) & 0x0f0f_0f0f, 0x0101_0101) >> 24;\n}\n\nfunction bswap32(n: number): number {\n  n = ((n >>> 8) & 0x00ff_00ff) | ((n & 0x00ff_00ff) << 8);\n  return ((n >>> 16) & 0xffff) | ((n & 0xffff) << 16);\n}\n\nfunction rbit32(n: number): number {\n  n = ((n >>> 1) & 0x5555_5555) | ((n & 0x5555_5555) << 1);\n  n = ((n >>> 2) & 0x3333_3333) | ((n & 0x3333_3333) << 2);\n  n = ((n >>> 4) & 0x0f0f_0f0f) | ((n & 0x0f0f_0f0f) << 4);\n  return bswap32(n);\n}\n\nexport class SquareSet implements Iterable<Square> {\n  constructor(readonly lo: number, readonly hi: number) {\n    this.lo = lo | 0;\n    this.hi = hi | 0;\n  }\n\n  static fromSquare(square: Square): SquareSet {\n    return square >= 32 ? new SquareSet(0, 1 << (square - 32)) : new SquareSet(1 << square, 0);\n  }\n\n  static fromRank(rank: number): SquareSet {\n    return new SquareSet(0xff, 0).shl64(8 * rank);\n  }\n\n  static fromFile(file: number): SquareSet {\n    return new SquareSet(0x0101_0101 << file, 0x0101_0101 << file);\n  }\n\n  static empty(): SquareSet {\n    return new SquareSet(0, 0);\n  }\n\n  static full(): SquareSet {\n    return new SquareSet(0xffff_ffff, 0xffff_ffff);\n  }\n\n  static corners(): SquareSet {\n    return new SquareSet(0x81, 0x8100_0000);\n  }\n\n  static center(): SquareSet {\n    return new SquareSet(0x1800_0000, 0x18);\n  }\n\n  static backranks(): SquareSet {\n    return new SquareSet(0xff, 0xff00_0000);\n  }\n\n  static backrank(color: Color): SquareSet {\n    return color === 'white' ? new SquareSet(0xff, 0) : new SquareSet(0, 0xff00_0000);\n  }\n\n  static lightSquares(): SquareSet {\n    return new SquareSet(0x55aa_55aa, 0x55aa_55aa);\n  }\n\n  static darkSquares(): SquareSet {\n    return new SquareSet(0xaa55_aa55, 0xaa55_aa55);\n  }\n\n  complement(): SquareSet {\n    return new SquareSet(~this.lo, ~this.hi);\n  }\n\n  xor(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo ^ other.lo, this.hi ^ other.hi);\n  }\n\n  union(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo | other.lo, this.hi | other.hi);\n  }\n\n  intersect(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo & other.lo, this.hi & other.hi);\n  }\n\n  diff(other: SquareSet): SquareSet {\n    return new SquareSet(this.lo & ~other.lo, this.hi & ~other.hi);\n  }\n\n  intersects(other: SquareSet): boolean {\n    return this.intersect(other).nonEmpty();\n  }\n\n  isDisjoint(other: SquareSet): boolean {\n    return this.intersect(other).isEmpty();\n  }\n\n  supersetOf(other: SquareSet): boolean {\n    return other.diff(this).isEmpty();\n  }\n\n  subsetOf(other: SquareSet): boolean {\n    return this.diff(other).isEmpty();\n  }\n\n  shr64(shift: number): SquareSet {\n    if (shift >= 64) return SquareSet.empty();\n    if (shift >= 32) return new SquareSet(this.hi >>> (shift - 32), 0);\n    if (shift > 0) return new SquareSet((this.lo >>> shift) ^ (this.hi << (32 - shift)), this.hi >>> shift);\n    return this;\n  }\n\n  shl64(shift: number): SquareSet {\n    if (shift >= 64) return SquareSet.empty();\n    if (shift >= 32) return new SquareSet(0, this.lo << (shift - 32));\n    if (shift > 0) return new SquareSet(this.lo << shift, (this.hi << shift) ^ (this.lo >>> (32 - shift)));\n    return this;\n  }\n\n  bswap64(): SquareSet {\n    return new SquareSet(bswap32(this.hi), bswap32(this.lo));\n  }\n\n  rbit64(): SquareSet {\n    return new SquareSet(rbit32(this.hi), rbit32(this.lo));\n  }\n\n  minus64(other: SquareSet): SquareSet {\n    const lo = this.lo - other.lo;\n    const c = ((lo & other.lo & 1) + (other.lo >>> 1) + (lo >>> 1)) >>> 31;\n    return new SquareSet(lo, this.hi - (other.hi + c));\n  }\n\n  equals(other: SquareSet): boolean {\n    return this.lo === other.lo && this.hi === other.hi;\n  }\n\n  size(): number {\n    return popcnt32(this.lo) + popcnt32(this.hi);\n  }\n\n  isEmpty(): boolean {\n    return this.lo === 0 && this.hi === 0;\n  }\n\n  nonEmpty(): boolean {\n    return this.lo !== 0 || this.hi !== 0;\n  }\n\n  has(square: Square): boolean {\n    return (square >= 32 ? this.hi & (1 << (square - 32)) : this.lo & (1 << square)) !== 0;\n  }\n\n  set(square: Square, on: boolean): SquareSet {\n    return on ? this.with(square) : this.without(square);\n  }\n\n  with(square: Square): SquareSet {\n    return square >= 32\n      ? new SquareSet(this.lo, this.hi | (1 << (square - 32)))\n      : new SquareSet(this.lo | (1 << square), this.hi);\n  }\n\n  without(square: Square): SquareSet {\n    return square >= 32\n      ? new SquareSet(this.lo, this.hi & ~(1 << (square - 32)))\n      : new SquareSet(this.lo & ~(1 << square), this.hi);\n  }\n\n  toggle(square: Square): SquareSet {\n    return square >= 32\n      ? new SquareSet(this.lo, this.hi ^ (1 << (square - 32)))\n      : new SquareSet(this.lo ^ (1 << square), this.hi);\n  }\n\n  last(): Square | undefined {\n    if (this.hi !== 0) return 63 - Math.clz32(this.hi);\n    if (this.lo !== 0) return 31 - Math.clz32(this.lo);\n    return;\n  }\n\n  first(): Square | undefined {\n    if (this.lo !== 0) return 31 - Math.clz32(this.lo & -this.lo);\n    if (this.hi !== 0) return 63 - Math.clz32(this.hi & -this.hi);\n    return;\n  }\n\n  withoutFirst(): SquareSet {\n    if (this.lo !== 0) return new SquareSet(this.lo & (this.lo - 1), this.hi);\n    return new SquareSet(0, this.hi & (this.hi - 1));\n  }\n\n  moreThanOne(): boolean {\n    return (this.hi !== 0 && this.lo !== 0) || (this.lo & (this.lo - 1)) !== 0 || (this.hi & (this.hi - 1)) !== 0;\n  }\n\n  singleSquare(): Square | undefined {\n    return this.moreThanOne() ? undefined : this.last();\n  }\n\n  isSingleSquare(): boolean {\n    return this.nonEmpty() && !this.moreThanOne();\n  }\n\n  *[Symbol.iterator](): Iterator<Square> {\n    let lo = this.lo;\n    let hi = this.hi;\n    while (lo !== 0) {\n      const idx = 31 - Math.clz32(lo & -lo);\n      lo ^= 1 << idx;\n      yield idx;\n    }\n    while (hi !== 0) {\n      const idx = 31 - Math.clz32(hi & -hi);\n      hi ^= 1 << idx;\n      yield 32 + idx;\n    }\n  }\n\n  *reversed(): Iterable<Square> {\n    let lo = this.lo;\n    let hi = this.hi;\n    while (hi !== 0) {\n      const idx = 31 - Math.clz32(hi);\n      hi ^= 1 << idx;\n      yield 32 + idx;\n    }\n    while (lo !== 0) {\n      const idx = 31 - Math.clz32(lo);\n      lo ^= 1 << idx;\n      yield idx;\n    }\n  }\n}\n", "import { Square, Color, Role, Piece, COLORS, ROLES, ByRole, ByColor } from './types.js';\nimport { SquareSet } from './squareSet.js';\n\n/**\n * Piece positions on a board.\n *\n * Properties are sets of squares, like `board.occupied` for all occupied\n * squares, `board[color]` for all pieces of that color, and `board[role]`\n * for all pieces of that role. When modifying the properties directly, take\n * care to keep them consistent.\n */\nexport class Board implements Iterable<[Square, Piece]>, ByRole<SquareSet>, ByColor<SquareSet> {\n  /**\n   * All occupied squares.\n   */\n  occupied: SquareSet;\n  /**\n   * All squares occupied by pieces known to be promoted. This information is\n   * relevant in chess variants like Crazyhouse.\n   */\n  promoted: SquareSet;\n\n  white: SquareSet;\n  black: SquareSet;\n\n  pawn: SquareSet;\n  knight: SquareSet;\n  bishop: SquareSet;\n  rook: SquareSet;\n  queen: SquareSet;\n  king: SquareSet;\n\n  private constructor() {}\n\n  static default(): Board {\n    const board = new Board();\n    board.reset();\n    return board;\n  }\n\n  static racingKings(): Board {\n    const board = new Board();\n    board.occupied = new SquareSet(0xffff, 0);\n    board.promoted = SquareSet.empty();\n    board.white = new SquareSet(0xf0f0, 0);\n    board.black = new SquareSet(0x0f0f, 0);\n    board.pawn = SquareSet.empty();\n    board.knight = new SquareSet(0x1818, 0);\n    board.bishop = new SquareSet(0x2424, 0);\n    board.rook = new SquareSet(0x4242, 0);\n    board.queen = new SquareSet(0x0081, 0);\n    board.king = new SquareSet(0x8100, 0);\n    return board;\n  }\n\n  static horde(): Board {\n    const board = new Board();\n    board.occupied = new SquareSet(0xffff_ffff, 0xffff_0066);\n    board.promoted = SquareSet.empty();\n    board.white = new SquareSet(0xffff_ffff, 0x0000_0066);\n    board.black = new SquareSet(0, 0xffff_0000);\n    board.pawn = new SquareSet(0xffff_ffff, 0x00ff_0066);\n    board.knight = new SquareSet(0, 0x4200_0000);\n    board.bishop = new SquareSet(0, 0x2400_0000);\n    board.rook = new SquareSet(0, 0x8100_0000);\n    board.queen = new SquareSet(0, 0x0800_0000);\n    board.king = new SquareSet(0, 0x1000_0000);\n    return board;\n  }\n\n  /**\n   * Resets all pieces to the default starting position for standard chess.\n   */\n  reset(): void {\n    this.occupied = new SquareSet(0xffff, 0xffff_0000);\n    this.promoted = SquareSet.empty();\n    this.white = new SquareSet(0xffff, 0);\n    this.black = new SquareSet(0, 0xffff_0000);\n    this.pawn = new SquareSet(0xff00, 0x00ff_0000);\n    this.knight = new SquareSet(0x42, 0x4200_0000);\n    this.bishop = new SquareSet(0x24, 0x2400_0000);\n    this.rook = new SquareSet(0x81, 0x8100_0000);\n    this.queen = new SquareSet(0x8, 0x0800_0000);\n    this.king = new SquareSet(0x10, 0x1000_0000);\n  }\n\n  static empty(): Board {\n    const board = new Board();\n    board.clear();\n    return board;\n  }\n\n  clear(): void {\n    this.occupied = SquareSet.empty();\n    this.promoted = SquareSet.empty();\n    for (const color of COLORS) this[color] = SquareSet.empty();\n    for (const role of ROLES) this[role] = SquareSet.empty();\n  }\n\n  clone(): Board {\n    const board = new Board();\n    board.occupied = this.occupied;\n    board.promoted = this.promoted;\n    for (const color of COLORS) board[color] = this[color];\n    for (const role of ROLES) board[role] = this[role];\n    return board;\n  }\n\n  equalsIgnorePromoted(other: Board): boolean {\n    if (!this.white.equals(other.white)) return false;\n    return ROLES.every(role => this[role].equals(other[role]));\n  }\n\n  equals(other: Board): boolean {\n    return this.equalsIgnorePromoted(other) && this.promoted.equals(other.promoted);\n  }\n\n  getColor(square: Square): Color | undefined {\n    if (this.white.has(square)) return 'white';\n    if (this.black.has(square)) return 'black';\n    return;\n  }\n\n  getRole(square: Square): Role | undefined {\n    for (const role of ROLES) {\n      if (this[role].has(square)) return role;\n    }\n    return;\n  }\n\n  get(square: Square): Piece | undefined {\n    const color = this.getColor(square);\n    if (!color) return;\n    const role = this.getRole(square)!;\n    const promoted = this.promoted.has(square);\n    return { color, role, promoted };\n  }\n\n  /**\n   * Removes and returns the piece from the given `square`, if any.\n   */\n  take(square: Square): Piece | undefined {\n    const piece = this.get(square);\n    if (piece) {\n      this.occupied = this.occupied.without(square);\n      this[piece.color] = this[piece.color].without(square);\n      this[piece.role] = this[piece.role].without(square);\n      if (piece.promoted) this.promoted = this.promoted.without(square);\n    }\n    return piece;\n  }\n\n  /**\n   * Put `piece` onto `square`, potentially replacing an existing piece.\n   * Returns the existing piece, if any.\n   */\n  set(square: Square, piece: Piece): Piece | undefined {\n    const old = this.take(square);\n    this.occupied = this.occupied.with(square);\n    this[piece.color] = this[piece.color].with(square);\n    this[piece.role] = this[piece.role].with(square);\n    if (piece.promoted) this.promoted = this.promoted.with(square);\n    return old;\n  }\n\n  has(square: Square): boolean {\n    return this.occupied.has(square);\n  }\n\n  *[Symbol.iterator](): Iterator<[Square, Piece]> {\n    for (const square of this.occupied) {\n      yield [square, this.get(square)!];\n    }\n  }\n\n  pieces(color: Color, role: Role): SquareSet {\n    return this[color].intersect(this[role]);\n  }\n\n  rooksAndQueens(): SquareSet {\n    return this.rook.union(this.queen);\n  }\n\n  bishopsAndQueens(): SquareSet {\n    return this.bishop.union(this.queen);\n  }\n\n  /**\n   * Finds the unique unpromoted king of the given `color`, if any.\n   */\n  kingOf(color: Color): Square | undefined {\n    return this.king.intersect(this[color]).diff(this.promoted).singleSquare();\n  }\n}\n", "import { Color, ROLES, Square } from './types.js';\nimport { SquareSet } from './squareSet.js';\nimport { Board } from './board.js';\n\nexport class MaterialSide {\n  pawn: number;\n  knight: number;\n  bishop: number;\n  rook: number;\n  queen: number;\n  king: number;\n\n  private constructor() {}\n\n  static empty(): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = 0;\n    return m;\n  }\n\n  static fromBoard(board: Board, color: Color): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = board.pieces(color, role).size();\n    return m;\n  }\n\n  clone(): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = this[role];\n    return m;\n  }\n\n  equals(other: MaterialSide): boolean {\n    return ROLES.every(role => this[role] === other[role]);\n  }\n\n  add(other: MaterialSide): MaterialSide {\n    const m = new MaterialSide();\n    for (const role of ROLES) m[role] = this[role] + other[role];\n    return m;\n  }\n\n  nonEmpty(): boolean {\n    return ROLES.some(role => this[role] > 0);\n  }\n\n  isEmpty(): boolean {\n    return !this.nonEmpty();\n  }\n\n  hasPawns(): boolean {\n    return this.pawn > 0;\n  }\n\n  hasNonPawns(): boolean {\n    return this.knight > 0 || this.bishop > 0 || this.rook > 0 || this.queen > 0 || this.king > 0;\n  }\n\n  count(): number {\n    return this.pawn + this.knight + this.bishop + this.rook + this.queen + this.king;\n  }\n}\n\nexport class Material {\n  constructor(public white: MaterialSide, public black: MaterialSide) {}\n\n  static empty(): Material {\n    return new Material(MaterialSide.empty(), MaterialSide.empty());\n  }\n\n  static fromBoard(board: Board): Material {\n    return new Material(MaterialSide.fromBoard(board, 'white'), MaterialSide.fromBoard(board, 'black'));\n  }\n\n  clone(): Material {\n    return new Material(this.white.clone(), this.black.clone());\n  }\n\n  equals(other: Material): boolean {\n    return this.white.equals(other.white) && this.black.equals(other.black);\n  }\n\n  add(other: Material): Material {\n    return new Material(this.white.add(other.white), this.black.add(other.black));\n  }\n\n  count(): number {\n    return this.white.count() + this.black.count();\n  }\n\n  isEmpty(): boolean {\n    return this.white.isEmpty() && this.black.isEmpty();\n  }\n\n  nonEmpty(): boolean {\n    return !this.isEmpty();\n  }\n\n  hasPawns(): boolean {\n    return this.white.hasPawns() || this.black.hasPawns();\n  }\n\n  hasNonPawns(): boolean {\n    return this.white.hasNonPawns() || this.black.hasNonPawns();\n  }\n}\n\nexport class RemainingChecks {\n  constructor(public white: number, public black: number) {}\n\n  static default(): RemainingChecks {\n    return new RemainingChecks(3, 3);\n  }\n\n  clone(): RemainingChecks {\n    return new RemainingChecks(this.white, this.black);\n  }\n\n  equals(other: RemainingChecks): boolean {\n    return this.white === other.white && this.black === other.black;\n  }\n}\n\nexport interface Setup {\n  board: Board;\n  pockets: Material | undefined;\n  turn: Color;\n  unmovedRooks: SquareSet;\n  epSquare: Square | undefined;\n  remainingChecks: RemainingChecks | undefined;\n  halfmoves: number;\n  fullmoves: number;\n}\n\nexport function defaultSetup(): Setup {\n  return {\n    board: Board.default(),\n    pockets: undefined,\n    turn: 'white',\n    unmovedRooks: SquareSet.corners(),\n    epSquare: undefined,\n    remainingChecks: undefined,\n    halfmoves: 0,\n    fullmoves: 1,\n  };\n}\n"],
  "mappings": "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",
  "names": ["Result", "_Result", "unwrap", "ok", "err", "r", "this", "_chain", "value", "error", "isErr", "map", "chain", "_Ok", "t", "_this", "n", "_err", "_Err", "_this2", "_ok", "Error", "obj", "Array", "isArray", "res", "i", "length", "item", "push", "keys", "Object", "n", "InvalidFen", "n", "board", "pockets", "unmovedRooks", "remainingChecks", "r"]
}
