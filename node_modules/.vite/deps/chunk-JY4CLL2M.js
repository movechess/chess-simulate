import {
  isDrop,
  makeSquare,
  squareFile
} from "./chunk-3THGZOZQ.js";
import {
  __export
} from "./chunk-5WWUZCGV.js";

// node_modules/chessops/compat.js
var compat_exports = {};
__export(compat_exports, {
  chessgroundDests: () => chessgroundDests,
  chessgroundMove: () => chessgroundMove,
  lichessRules: () => lichessRules,
  lichessVariant: () => lichessVariant,
  scalachessCharPair: () => scalachessCharPair
});
function chessgroundDests(pos, opts) {
  const result = /* @__PURE__ */ new Map();
  const ctx = pos.ctx();
  for (const [from, squares] of pos.allDests(ctx)) {
    if (squares.nonEmpty()) {
      const d = Array.from(squares, makeSquare);
      if (!(opts === null || opts === void 0 ? void 0 : opts.chess960) && from === ctx.king && squareFile(from) === 4) {
        if (squares.has(0))
          d.push("c1");
        else if (squares.has(56))
          d.push("c8");
        if (squares.has(7))
          d.push("g1");
        else if (squares.has(63))
          d.push("g8");
      }
      result.set(makeSquare(from), d);
    }
  }
  return result;
}
function chessgroundMove(move) {
  return isDrop(move) ? [makeSquare(move.to)] : [makeSquare(move.from), makeSquare(move.to)];
}
function scalachessCharPair(move) {
  if (isDrop(move))
    return String.fromCharCode(35 + move.to, 35 + 64 + 8 * 5 + ["queen", "rook", "bishop", "knight", "pawn"].indexOf(move.role));
  else
    return String.fromCharCode(35 + move.from, move.promotion ? 35 + 64 + 8 * ["queen", "rook", "bishop", "knight", "king"].indexOf(move.promotion) + squareFile(move.to) : 35 + move.to);
}
function lichessRules(variant) {
  switch (variant) {
    case "standard":
    case "chess960":
    case "fromPosition":
      return "chess";
    case "threeCheck":
      return "3check";
    case "kingOfTheHill":
      return "kingofthehill";
    case "racingKings":
      return "racingkings";
    default:
      return variant;
  }
}
function lichessVariant(rules) {
  switch (rules) {
    case "chess":
      return "standard";
    case "3check":
      return "threeCheck";
    case "kingofthehill":
      return "kingOfTheHill";
    case "racingkings":
      return "racingKings";
    default:
      return rules;
  }
}

export {
  chessgroundDests,
  chessgroundMove,
  scalachessCharPair,
  lichessRules,
  lichessVariant,
  compat_exports
};
//# sourceMappingURL=chunk-JY4CLL2M.js.map
