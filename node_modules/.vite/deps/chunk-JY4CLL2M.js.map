{
  "version": 3,
  "sources": ["../../chessops/src/compat.ts"],
  "sourcesContent": ["import { Rules, SquareName, Move, isDrop } from './types.js';\nimport { makeSquare, squareFile } from './util.js';\nimport { Position } from './chess.js';\n\nexport interface ChessgroundDestsOpts {\n  chess960?: boolean;\n}\n\nexport function chessgroundDests(pos: Position, opts?: ChessgroundDestsOpts): Map<SquareName, SquareName[]> {\n  const result = new Map();\n  const ctx = pos.ctx();\n  for (const [from, squares] of pos.allDests(ctx)) {\n    if (squares.nonEmpty()) {\n      const d = Array.from(squares, makeSquare);\n      if (!opts?.chess960 && from === ctx.king && squareFile(from) === 4) {\n        // Chessground needs both types of castling dests and filters based on\n        // a rookCastles setting.\n        if (squares.has(0)) d.push('c1');\n        else if (squares.has(56)) d.push('c8');\n        if (squares.has(7)) d.push('g1');\n        else if (squares.has(63)) d.push('g8');\n      }\n      result.set(makeSquare(from), d);\n    }\n  }\n  return result;\n}\n\nexport function chessgroundMove(move: Move): SquareName[] {\n  return isDrop(move) ? [makeSquare(move.to)] : [makeSquare(move.from), makeSquare(move.to)];\n}\n\nexport function scalachessCharPair(move: Move): string {\n  if (isDrop(move))\n    return String.fromCharCode(\n      35 + move.to,\n      35 + 64 + 8 * 5 + ['queen', 'rook', 'bishop', 'knight', 'pawn'].indexOf(move.role)\n    );\n  else\n    return String.fromCharCode(\n      35 + move.from,\n      move.promotion\n        ? 35 + 64 + 8 * ['queen', 'rook', 'bishop', 'knight', 'king'].indexOf(move.promotion) + squareFile(move.to)\n        : 35 + move.to\n    );\n}\n\nexport function lichessRules(\n  variant:\n    | 'standard'\n    | 'chess960'\n    | 'antichess'\n    | 'fromPosition'\n    | 'kingOfTheHill'\n    | 'threeCheck'\n    | 'atomic'\n    | 'horde'\n    | 'racingKings'\n    | 'crazyhouse'\n): Rules {\n  switch (variant) {\n    case 'standard':\n    case 'chess960':\n    case 'fromPosition':\n      return 'chess';\n    case 'threeCheck':\n      return '3check';\n    case 'kingOfTheHill':\n      return 'kingofthehill';\n    case 'racingKings':\n      return 'racingkings';\n    default:\n      return variant;\n  }\n}\n\nexport function lichessVariant(\n  rules: Rules\n): 'standard' | 'antichess' | 'kingOfTheHill' | 'threeCheck' | 'atomic' | 'horde' | 'racingKings' | 'crazyhouse' {\n  switch (rules) {\n    case 'chess':\n      return 'standard';\n    case '3check':\n      return 'threeCheck';\n    case 'kingofthehill':\n      return 'kingOfTheHill';\n    case 'racingkings':\n      return 'racingKings';\n    default:\n      return rules;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;AAAA;;;;;;;;AAQM,SAAU,iBAAiB,KAAe,MAA2B;AACzE,QAAM,SAAS,oBAAI,IAAG;AACtB,QAAM,MAAM,IAAI,IAAG;AACnB,aAAW,CAAC,MAAM,OAAO,KAAK,IAAI,SAAS,GAAG,GAAG;AAC/C,QAAI,QAAQ,SAAQ,GAAI;AACtB,YAAM,IAAI,MAAM,KAAK,SAAS,UAAU;AACxC,UAAI,EAAC,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,aAAY,SAAS,IAAI,QAAQ,WAAW,IAAI,MAAM,GAAG;AAGlE,YAAI,QAAQ,IAAI,CAAC;AAAG,YAAE,KAAK,IAAI;iBACtB,QAAQ,IAAI,EAAE;AAAG,YAAE,KAAK,IAAI;AACrC,YAAI,QAAQ,IAAI,CAAC;AAAG,YAAE,KAAK,IAAI;iBACtB,QAAQ,IAAI,EAAE;AAAG,YAAE,KAAK,IAAI;;AAEvC,aAAO,IAAI,WAAW,IAAI,GAAG,CAAC;;;AAGlC,SAAO;AACT;AAEM,SAAU,gBAAgB,MAAU;AACxC,SAAO,OAAO,IAAI,IAAI,CAAC,WAAW,KAAK,EAAE,CAAC,IAAI,CAAC,WAAW,KAAK,IAAI,GAAG,WAAW,KAAK,EAAE,CAAC;AAC3F;AAEM,SAAU,mBAAmB,MAAU;AAC3C,MAAI,OAAO,IAAI;AACb,WAAO,OAAO,aACZ,KAAK,KAAK,IACV,KAAK,KAAK,IAAI,IAAI,CAAC,SAAS,QAAQ,UAAU,UAAU,MAAM,EAAE,QAAQ,KAAK,IAAI,CAAC;;AAGpF,WAAO,OAAO,aACZ,KAAK,KAAK,MACV,KAAK,YACD,KAAK,KAAK,IAAI,CAAC,SAAS,QAAQ,UAAU,UAAU,MAAM,EAAE,QAAQ,KAAK,SAAS,IAAI,WAAW,KAAK,EAAE,IACxG,KAAK,KAAK,EAAE;AAEtB;AAEM,SAAU,aACd,SAUgB;AAEhB,UAAQ,SAAS;IACf,KAAK;IACL,KAAK;IACL,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT;AACE,aAAO;;AAEb;AAEM,SAAU,eACd,OAAY;AAEZ,UAAQ,OAAO;IACb,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT;AACE,aAAO;;AAEb;",
  "names": []
}
