{
  "version": 3,
  "sources": ["../../chessground/src/types.ts", "../../chessground/src/util.ts"],
  "sourcesContent": ["export type Color = typeof colors[number];\nexport type Role = 'king' | 'queen' | 'rook' | 'bishop' | 'knight' | 'pawn';\nexport type File = typeof files[number];\nexport type Rank = typeof ranks[number];\nexport type Key = 'a0' | `${File}${Rank}`;\nexport type FEN = string;\nexport type Pos = [number, number];\nexport interface Piece {\n  role: Role;\n  color: Color;\n  promoted?: boolean;\n}\nexport interface Drop {\n  role: Role;\n  key: Key;\n}\nexport type Pieces = Map<Key, Piece>;\nexport type PiecesDiff = Map<Key, Piece | undefined>;\n\nexport type KeyPair = [Key, Key];\n\nexport type NumberPair = [number, number];\n\nexport type NumberQuad = [number, number, number, number];\n\nexport interface Rect {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n}\n\nexport type Dests = Map<Key, Key[]>;\n\nexport interface Elements {\n  board: HTMLElement;\n  wrap: HTMLElement;\n  container: HTMLElement;\n  ghost?: HTMLElement;\n  svg?: SVGElement;\n  customSvg?: SVGElement;\n  autoPieces?: HTMLElement;\n}\nexport interface Dom {\n  elements: Elements;\n  bounds: Memo<ClientRect>;\n  redraw: () => void;\n  redrawNow: (skipSvg?: boolean) => void;\n  unbind?: Unbind;\n  destroyed?: boolean;\n}\nexport interface Exploding {\n  stage: number;\n  keys: readonly Key[];\n}\n\nexport interface MoveMetadata {\n  premove: boolean;\n  ctrlKey?: boolean;\n  holdTime?: number;\n  captured?: Piece;\n  predrop?: boolean;\n}\nexport interface SetPremoveMetadata {\n  ctrlKey?: boolean;\n}\n\nexport type MouchEvent = Event & Partial<MouseEvent & TouchEvent>;\n\nexport interface KeyedNode extends HTMLElement {\n  cgKey: Key;\n}\nexport interface PieceNode extends KeyedNode {\n  tagName: 'PIECE';\n  cgPiece: string;\n  cgAnimating?: boolean;\n  cgFading?: boolean;\n  cgDragging?: boolean;\n  cgScale?: number;\n}\nexport interface SquareNode extends KeyedNode {\n  tagName: 'SQUARE';\n}\n\nexport interface Memo<A> {\n  (): A;\n  clear: () => void;\n}\n\nexport interface Timer {\n  start: () => void;\n  cancel: () => void;\n  stop: () => number;\n}\n\nexport type Redraw = () => void;\nexport type Unbind = () => void;\nexport type Milliseconds = number;\nexport type KHz = number;\n\nexport const colors = ['white', 'black'] as const;\nexport const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] as const;\nexport const ranks = ['1', '2', '3', '4', '5', '6', '7', '8'] as const;\n\nexport type RanksPosition = 'left' | 'right';\n", "import * as cg from './types.js';\n\nexport const invRanks: readonly cg.Rank[] = [...cg.ranks].reverse();\n\nexport const allKeys: readonly cg.Key[] = Array.prototype.concat(...cg.files.map(c => cg.ranks.map(r => c + r)));\n\nexport const pos2key = (pos: cg.Pos): cg.Key => allKeys[8 * pos[0] + pos[1]];\n\nexport const key2pos = (k: cg.Key): cg.Pos => [k.charCodeAt(0) - 97, k.charCodeAt(1) - 49];\n\nexport const allPos: readonly cg.Pos[] = allKeys.map(key2pos);\n\nexport function memo<A>(f: () => A): cg.Memo<A> {\n  let v: A | undefined;\n  const ret = (): A => {\n    if (v === undefined) v = f();\n    return v;\n  };\n  ret.clear = () => {\n    v = undefined;\n  };\n  return ret;\n}\n\nexport const timer = (): cg.Timer => {\n  let startAt: number | undefined;\n  return {\n    start() {\n      startAt = performance.now();\n    },\n    cancel() {\n      startAt = undefined;\n    },\n    stop() {\n      if (!startAt) return 0;\n      const time = performance.now() - startAt;\n      startAt = undefined;\n      return time;\n    },\n  };\n};\n\nexport const opposite = (c: cg.Color): cg.Color => (c === 'white' ? 'black' : 'white');\n\nexport const distanceSq = (pos1: cg.Pos, pos2: cg.Pos): number => {\n  const dx = pos1[0] - pos2[0],\n    dy = pos1[1] - pos2[1];\n  return dx * dx + dy * dy;\n};\n\nexport const samePiece = (p1: cg.Piece, p2: cg.Piece): boolean => p1.role === p2.role && p1.color === p2.color;\n\nexport const posToTranslate =\n  (bounds: ClientRect): ((pos: cg.Pos, asWhite: boolean) => cg.NumberPair) =>\n  (pos, asWhite) =>\n    [((asWhite ? pos[0] : 7 - pos[0]) * bounds.width) / 8, ((asWhite ? 7 - pos[1] : pos[1]) * bounds.height) / 8];\n\nexport const translate = (el: HTMLElement, pos: cg.NumberPair): void => {\n  el.style.transform = `translate(${pos[0]}px,${pos[1]}px)`;\n};\n\nexport const translateAndScale = (el: HTMLElement, pos: cg.NumberPair, scale = 1): void => {\n  el.style.transform = `translate(${pos[0]}px,${pos[1]}px) scale(${scale})`;\n};\n\nexport const setVisible = (el: HTMLElement, v: boolean): void => {\n  el.style.visibility = v ? 'visible' : 'hidden';\n};\n\nexport const eventPosition = (e: cg.MouchEvent): cg.NumberPair | undefined => {\n  if (e.clientX || e.clientX === 0) return [e.clientX, e.clientY!];\n  if (e.targetTouches?.[0]) return [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\n  return; // touchend has no position!\n};\n\nexport const isRightButton = (e: cg.MouchEvent): boolean => e.buttons === 2 || e.button === 2;\n\nexport const createEl = (tagName: string, className?: string): HTMLElement => {\n  const el = document.createElement(tagName);\n  if (className) el.className = className;\n  return el;\n};\n\nexport function computeSquareCenter(key: cg.Key, asWhite: boolean, bounds: ClientRect): cg.NumberPair {\n  const pos = key2pos(key);\n  if (!asWhite) {\n    pos[0] = 7 - pos[0];\n    pos[1] = 7 - pos[1];\n  }\n  return [\n    bounds.left + (bounds.width * pos[0]) / 8 + bounds.width / 16,\n    bounds.top + (bounds.height * (7 - pos[1])) / 8 + bounds.height / 16,\n  ];\n}\n"],
  "mappings": "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",
  "names": []
}
