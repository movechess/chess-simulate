"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.echo = void 0;
exports.tester = tester;
require("./augmented");
var _foo = require("./test1/foo");
var bob = _interopRequireWildcard(require("./test1"));
var _util = require("./util");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// Copyright 2017-2023 @polkadot/dev authors & contributors
// SPDX-License-Identifier: Apache-2.0

const SOMETHING = {
  a: 1,
  b: 2,
  c: 555
};
const A = 123;
let count = 0;
let testFn = null;
import('./testRoot').then(_ref => {
  let {
    test
  } = _ref;
  testFn = test;
}).catch(console.error);
const somePromise = import('./testRoot').catch(() => null);
function doCallback(fn) {
  if (fn) {
    fn('test');
  }
}

/**
 * This is just a test file to test the doc generation
 */
const echo = function (value) {
  let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let end = arguments.length > 2 ? arguments[2] : undefined;
  const {
    a,
    b,
    c
  } = SOMETHING;
  console.log(a, b, c);
  count++;
  doCallback(a => a);
  (0, bob.blah)();
  return `${count}: ${A}: ${value}`.substring(start, end);
};
exports.echo = echo;
function assert(a) {
  if (!a) {
    console.log('Failed');
    process.exit(-1);
  }
}
function tester() {
  console.log('Running sanity test');
  console.log('  (1)', typeof require === 'undefined' ? 'esm' : 'cjs');
  assert((0, bob.adder)(2, 4) === 6);
  assert((0, _util.addThree)(1, 2, 3) === 6);
  assert((0, _foo.foo)() === 'foobar' && !!bob.blah);
  testFn && testFn();
  console.log(somePromise);
}