"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Clazz = void 0;
require("./augmented");
var bob = _interopRequireWildcard(require("./test1"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// Copyright 2017-2023 @polkadot/dev authors & contributors
// SPDX-License-Identifier: Apache-2.0

const dynamic = import('./testRoot').catch(console.error);
class Clazz {
  #dynamic;
  static statMem = '123';
  constructor() {
    this.#dynamic = dynamic;
  }
  get isDynamic() {
    return !!this.#dynamic;
  }
  getBob() {
    return bob;
  }
  someThingElse() {
    var _this$some$thing$else, _this$some, _this$some$thing;
    return (_this$some$thing$else = (_this$some = this.some) == null ? void 0 : (_this$some$thing = _this$some.thing) == null ? void 0 : _this$some$thing.else()) != null ? _this$some$thing$else : false;
  }
}
exports.Clazz = Clazz;