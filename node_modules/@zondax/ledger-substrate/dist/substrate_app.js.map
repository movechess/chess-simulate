{"version":3,"file":"substrate_app.js","sourceRoot":"","sources":["../src/substrate_app.ts"],"names":[],"mappings":"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","sourcesContent":["/** ******************************************************************************\n *  (c) 2019 - 2022 ZondaX AG\n *  (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ******************************************************************************* */\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport {\n  CHUNK_SIZE,\n  errorCodeToString,\n  ERROR_CODE,\n  getVersion,\n  INS,\n  PAYLOAD_TYPE,\n  processErrorResponse,\n  type ResponseAddress,\n  type ResponseAllowlistHash,\n  type ResponseAllowlistPubKey,\n  type ResponseSign,\n  type ResponseVersion,\n  SCHEME,\n  type INS_SIGN,\n} from \"./common\";\n\nexport class SubstrateApp {\n  transport: Transport;\n  cla: number;\n  slip0044: number;\n\n  constructor(transport: Transport, cla: number, slip0044: number) {\n    if (transport == null) {\n      throw new Error(\"Transport has not been defined\");\n    }\n    this.transport = transport;\n    this.cla = cla;\n    this.slip0044 = slip0044;\n  }\n\n  static serializePath(slip0044: number, account: number, change: number, addressIndex: number) {\n    if (!Number.isInteger(account)) throw new Error(\"Input must be an integer\");\n    if (!Number.isInteger(change)) throw new Error(\"Input must be an integer\");\n    if (!Number.isInteger(addressIndex)) throw new Error(\"Input must be an integer\");\n\n    const buf = Buffer.alloc(20);\n    buf.writeUInt32LE(0x8000002c, 0);\n    buf.writeUInt32LE(slip0044, 4);\n    buf.writeUInt32LE(account, 8);\n    buf.writeUInt32LE(change, 12);\n    buf.writeUInt32LE(addressIndex, 16);\n    return buf;\n  }\n\n  static GetChunks(message: Buffer) {\n    const chunks = [];\n    const buffer = Buffer.from(message);\n\n    for (let i = 0; i < buffer.length; i += CHUNK_SIZE) {\n      let end = i + CHUNK_SIZE;\n      if (i > buffer.length) {\n        end = buffer.length;\n      }\n      chunks.push(buffer.subarray(i, end));\n    }\n\n    return chunks;\n  }\n\n  static signGetChunks(slip0044: number, account: number, change: number, addressIndex: number, message: Buffer) {\n    const chunks = [];\n    const bip44Path = SubstrateApp.serializePath(slip0044, account, change, addressIndex);\n    chunks.push(bip44Path);\n    chunks.push(...SubstrateApp.GetChunks(message));\n    return chunks;\n  }\n\n  async getVersion(): Promise<ResponseVersion> {\n    try {\n      return await getVersion(this.transport, this.cla);\n    } catch (e) {\n      return processErrorResponse(e);\n    }\n  }\n\n  async appInfo() {\n    return await this.transport.send(0xb0, 0x01, 0, 0).then((response) => {\n      const errorCodeData = response.subarray(-2);\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n\n      let appName = \"\";\n      let appVersion = \"\";\n      let flagLen = 0;\n      let flagsValue = 0;\n\n      if (response[0] !== 1) {\n        // Ledger responds with format ID 1. There is no spec for any format != 1\n        return {\n          return_code: 0x9001,\n          error_message: \"response format ID not recognized\",\n        };\n      } else {\n        const appNameLen = response[1];\n        appName = response.subarray(2, 2 + appNameLen).toString(\"ascii\");\n        let idx = 2 + appNameLen;\n        const appVersionLen = response[idx];\n        idx += 1;\n        appVersion = response.subarray(idx, idx + appVersionLen).toString(\"ascii\");\n        idx += appVersionLen;\n        const appFlagsLen = response[idx];\n        idx += 1;\n        flagLen = appFlagsLen;\n        flagsValue = response[idx];\n      }\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n        // //\n        appName: appName === \"\" || \"err\",\n        appVersion: appVersion === \"\" || \"err\",\n        flagLen,\n        flagsValue,\n        // eslint-disable-next-line no-bitwise\n        flag_recovery: (flagsValue & 1) !== 0,\n        // eslint-disable-next-line no-bitwise\n        flag_signed_mcu_code: (flagsValue & 2) !== 0,\n        // eslint-disable-next-line no-bitwise\n        flag_onboarded: (flagsValue & 4) !== 0,\n        // eslint-disable-next-line no-bitwise\n        flag_pin_validated: (flagsValue & 128) !== 0,\n      };\n    }, processErrorResponse);\n  }\n\n  async getAddress(\n    account: number,\n    change: number,\n    addressIndex: number,\n    requireConfirmation = false,\n    scheme = SCHEME.ED25519\n  ): Promise<ResponseAddress> {\n    const bip44Path = SubstrateApp.serializePath(this.slip0044, account, change, addressIndex);\n\n    let p1 = 0;\n    if (requireConfirmation) p1 = 1;\n\n    let p2 = 0;\n    if (!isNaN(scheme)) p2 = scheme;\n\n    return await this.transport.send(this.cla, INS.GET_ADDR, p1, p2, bip44Path).then((response) => {\n      const errorCodeData = response.subarray(-2);\n      const errorCode = errorCodeData[0] * 256 + errorCodeData[1];\n\n      return {\n        pubKey: response.subarray(0, 32).toString(\"hex\"),\n        address: response.subarray(32, response.length - 2).toString(\"ascii\"),\n        return_code: errorCode,\n        error_message: errorCodeToString(errorCode),\n      };\n    }, processErrorResponse);\n  }\n\n  async signSendChunk(\n    chunkIdx: number,\n    chunkNum: number,\n    chunk: Buffer,\n    scheme = SCHEME.ED25519,\n    ins: INS_SIGN = INS.SIGN\n  ) {\n    let payloadType = PAYLOAD_TYPE.ADD;\n    if (chunkIdx === 1) {\n      payloadType = PAYLOAD_TYPE.INIT;\n    }\n    if (chunkIdx === chunkNum) {\n      payloadType = PAYLOAD_TYPE.LAST;\n    }\n\n    let p2 = 0;\n    if (!isNaN(scheme)) p2 = scheme;\n\n    return await this.transport\n      .send(this.cla, ins, payloadType, p2, chunk, [ERROR_CODE.NoError, 0x6984, 0x6a80])\n      .then((response) => {\n        const errorCodeData = response.subarray(-2);\n        const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n        let errorMessage = errorCodeToString(returnCode);\n        let signature = null;\n\n        if (returnCode === 0x6a80 || returnCode === 0x6984) {\n          errorMessage = response.subarray(0, response.length - 2).toString(\"ascii\");\n        } else if (response.length > 2) {\n          signature = response.subarray(0, response.length - 2);\n        }\n\n        return {\n          signature,\n          return_code: returnCode,\n          error_message: errorMessage,\n        };\n      }, processErrorResponse);\n  }\n\n  async signImpl(\n    account: number,\n    change: number,\n    addressIndex: number,\n    message: Buffer,\n    ins: INS_SIGN,\n    scheme = SCHEME.ED25519\n  ): Promise<ResponseSign> {\n    const chunks = SubstrateApp.signGetChunks(this.slip0044, account, change, addressIndex, message);\n    return await this.signSendChunk(1, chunks.length, chunks[0], scheme, ins).then(async () => {\n      let result;\n      for (let i = 1; i < chunks.length; i += 1) {\n        result = await this.signSendChunk(1 + i, chunks.length, chunks[i], scheme, ins);\n        if (result.return_code !== ERROR_CODE.NoError) {\n          break;\n        }\n      }\n\n      return {\n        return_code: result.return_code,\n        error_message: result.error_message,\n        signature: result.signature,\n      };\n    }, processErrorResponse);\n  }\n\n  async sign(account: number, change: number, addressIndex: number, message: Buffer, scheme = SCHEME.ED25519) {\n    return await this.signImpl(account, change, addressIndex, message, INS.SIGN, scheme);\n  }\n\n  async signRaw(account: number, change: number, addressIndex: number, message: Buffer, scheme = SCHEME.ED25519) {\n    return await this.signImpl(account, change, addressIndex, message, INS.SIGN_RAW, scheme);\n  }\n\n  /// Allow list related commands. They are NOT available on all apps\n\n  async getAllowlistPubKey(): Promise<ResponseAllowlistPubKey> {\n    return await this.transport.send(this.cla, INS.ALLOWLIST_GET_PUBKEY, 0, 0).then((response) => {\n      const errorCodeData = response.subarray(-2);\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n\n      console.log(response);\n\n      const pubkey = response.subarray(0, 32);\n      // 32 bytes + 2 error code\n      if (response.length !== 34) {\n        return {\n          return_code: 0x6984,\n          error_message: errorCodeToString(0x6984),\n        };\n      }\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n        pubkey,\n      };\n    }, processErrorResponse);\n  }\n\n  async setAllowlistPubKey(pk: Buffer) {\n    return await this.transport.send(this.cla, INS.ALLOWLIST_SET_PUBKEY, 0, 0, pk).then((response) => {\n      const errorCodeData = response.subarray(-2);\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n      };\n    }, processErrorResponse);\n  }\n\n  async getAllowlistHash(): Promise<ResponseAllowlistHash> {\n    return await this.transport.send(this.cla, INS.ALLOWLIST_GET_HASH, 0, 0).then((response) => {\n      const errorCodeData = response.subarray(-2);\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n\n      console.log(response);\n\n      const hash = response.subarray(0, 32);\n      // 32 bytes + 2 error code\n      if (response.length !== 34) {\n        return {\n          return_code: 0x6984,\n          error_message: errorCodeToString(0x6984),\n        };\n      }\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n        hash,\n      };\n    }, processErrorResponse);\n  }\n\n  async uploadSendChunk(chunkIdx: number, chunkNum: number, chunk: Buffer) {\n    let payloadType = PAYLOAD_TYPE.ADD;\n    if (chunkIdx === 1) {\n      payloadType = PAYLOAD_TYPE.INIT;\n    }\n    if (chunkIdx === chunkNum) {\n      payloadType = PAYLOAD_TYPE.LAST;\n    }\n\n    return await this.transport\n      .send(this.cla, INS.ALLOWLIST_UPLOAD, payloadType, 0, chunk, [ERROR_CODE.NoError])\n      .then((response) => {\n        const errorCodeData = response.subarray(-2);\n        const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n        const errorMessage = errorCodeToString(returnCode);\n\n        return {\n          return_code: returnCode,\n          error_message: errorMessage,\n        };\n      }, processErrorResponse);\n  }\n\n  async uploadAllowlist(message: Buffer) {\n    const chunks: Buffer[] = [];\n    chunks.push(Buffer.from([0]));\n    chunks.push(...SubstrateApp.GetChunks(message));\n\n    return await this.uploadSendChunk(1, chunks.length, chunks[0]).then(async (result) => {\n      if (result.return_code !== ERROR_CODE.NoError) {\n        return {\n          return_code: result.return_code,\n          error_message: result.error_message,\n        };\n      }\n\n      for (let i = 1; i < chunks.length; i += 1) {\n        // eslint-disable-next-line no-await-in-loop,no-param-reassign\n        result = await this.uploadSendChunk(1 + i, chunks.length, chunks[i]);\n        if (result.return_code !== ERROR_CODE.NoError) {\n          break;\n        }\n      }\n\n      return {\n        return_code: result.return_code,\n        error_message: result.error_message,\n      };\n    }, processErrorResponse);\n  }\n}\n"]}