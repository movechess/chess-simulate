import { COLORS, ROLES } from './types.js';
import { defined } from './util.js';
function rol32(n, left) {
    return (n << left) | (n >>> (32 - left));
}
export function fxhash32(word, state = 0) {
    return Math.imul(rol32(state, 5) ^ word, 0x9e3779b9);
}
export function hashBoard(board, state = 0) {
    state = fxhash32(board.white.lo, fxhash32(board.white.hi, state));
    for (const role of ROLES)
        state = fxhash32(board[role].lo, fxhash32(board[role].hi, state));
    return state;
}
export function hashMaterialSide(side, state = 0) {
    for (const role of ROLES)
        state = fxhash32(side[role], state);
    return state;
}
export function hashMaterial(material, state = 0) {
    for (const color of COLORS)
        state = hashMaterialSide(material[color], state);
    return state;
}
export function hashRemainingChecks(checks, state = 0) {
    return fxhash32(checks.white, fxhash32(checks.black, state));
}
export function hashSetup(setup, state = 0) {
    state = hashBoard(setup.board, state);
    if (setup.pockets)
        state = hashMaterial(setup.pockets, state);
    if (setup.turn === 'white')
        state = fxhash32(1, state);
    state = fxhash32(setup.unmovedRooks.lo, fxhash32(setup.unmovedRooks.hi, state));
    if (defined(setup.epSquare))
        state = fxhash32(setup.epSquare, state);
    if (setup.remainingChecks)
        state = hashRemainingChecks(setup.remainingChecks, state);
    return state;
}
//# sourceMappingURL=hash.js.map